/* zbxhwbservice.h
   Generated by wsdl2h 2.8.63 from http://192.168.0.244:190/updataService.asmx?wsdl and typemap.dat
   2018-02-24 02:06:42 GMT

   DO NOT INCLUDE THIS FILE DIRECTLY INTO YOUR PROJECT BUILDS
   USE THE soapcpp2-GENERATED SOURCE CODE FILES FOR YOUR PROJECT BUILDS

gSOAP XML Web services tools
Copyright (C) 2000-2018, Robert van Engelen, Genivia Inc. All Rights Reserved.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

/** @page page_notes Notes

@note HINTS:
 - Run soapcpp2 on zbxhwbservice.h to generate the SOAP/XML processing logic.
   Use soapcpp2 -I to specify paths for #import
   Use soapcpp2 -j to generate improved proxy and server classes.
   Use soapcpp2 -r to generate a report.
 - Use wsdl2h -c and -s to generate pure C code or C++ code without STL.
 - Use 'typemap.dat' to control namespace bindings and type mappings.
   It is strongly recommended to customize the names of the namespace prefixes
   generated by wsdl2h. To do so, modify the prefix bindings in the Namespaces
   section below and add the modified lines to 'typemap.dat' to rerun wsdl2h.
 - Run Doxygen (www.doxygen.org) on this file to generate documentation.
 - Use wsdl2h -R to generate REST operations.
 - Use wsdl2h -Onum to optimize output by removing unused schema components.
 - Use wsdl2h -nname to use name as the base namespace prefix instead of 'ns'.
 - Use wsdl2h -Nname for service prefix and produce multiple service bindings
 - Use wsdl2h -d to enable DOM support for xsd:anyType.
 - Use wsdl2h -g to auto-generate readers and writers for root elements.
 - Use wsdl2h -b to auto-generate bi-directional operations (duplex ops).
 - Use wsdl2h -U to map XML names to C++ Unicode identifiers instead of _xNNNN.
 - Use wsdl2h -u to disable the generation of unions.
 - Struct/class members serialized as XML attributes are annotated with a '@'.
 - Struct/class members that have a special role are annotated with a '$'.

@warning
   DO NOT INCLUDE THIS ANNOTATED FILE DIRECTLY IN YOUR PROJECT SOURCE CODE.
   USE THE FILES GENERATED BY soapcpp2 FOR YOUR PROJECT'S SOURCE CODE:
   THE soapStub.h FILE CONTAINS THIS CONTENT WITHOUT ANNOTATIONS.

@copyright LICENSE:
@verbatim
--------------------------------------------------------------------------------
gSOAP XML Web services tools
Copyright (C) 2000-2018, Robert van Engelen, Genivia Inc. All Rights Reserved.
The wsdl2h tool and its generated software are released under the GPL.
This software is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
GPL license.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place, Suite 330, Boston, MA 02111-1307 USA

Author contact information:
engelen@genivia.com / engelen@acm.org

This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial-use license is available from Genivia, Inc., contact@genivia.com
--------------------------------------------------------------------------------
@endverbatim

*/


//gsoapopt c++,w

/******************************************************************************\
 *                                                                            *
 * Definitions                                                                *
 *   http://zbxhupdata.com/webservices/                                       *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Import                                                                     *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Namespaces                                                          *
 *                                                                            *
\******************************************************************************/


/* NOTE:

It is strongly recommended to customize the names of the namespace prefixes
generated by wsdl2h. To do so, modify the prefix bindings below and add the
modified lines to typemap.dat to rerun wsdl2h:

ns1 = "http://zbxhupdata.com/webservices/"

*/

#define SOAP_NAMESPACE_OF_ns1	"http://zbxhupdata.com/webservices/"
//gsoap ns1   schema namespace:	http://zbxhupdata.com/webservices/
//gsoap ns1   schema elementForm:	qualified
//gsoap ns1   schema attributeForm:	unqualified

/******************************************************************************\
 *                                                                            *
 * Built-in Schema Types and Top-Level Elements and Attributes                *
 *                                                                            *
\******************************************************************************/

/// Built-in XSD type "xs:base64Binary".
class xsd__base64Binary
{	unsigned char *__ptr;
	int __size;
	char *id, *type, *options; // NOTE: non-NULL for DIME/MIME/MTOM XOP attachments only
};


/******************************************************************************\
 *                                                                            *
 * Forward Declarations                                                       *
 *                                                                            *
\******************************************************************************/


//  Forward declaration of class ns1__ArrayOfBase64Binary.
class ns1__ArrayOfBase64Binary;

//  Forward declaration of class _ns1__GetYjzhZskGzFlow.
class _ns1__GetYjzhZskGzFlow;

//  Forward declaration of class _ns1__GetYjzhZskGzFlowResponse.
class _ns1__GetYjzhZskGzFlowResponse;

//  Forward declaration of class _ns1__GetYjzhZskOtherFlowChartList.
class _ns1__GetYjzhZskOtherFlowChartList;

//  Forward declaration of class _ns1__GetYjzhZskOtherFlowChartListResponse.
class _ns1__GetYjzhZskOtherFlowChartListResponse;

//  Forward declaration of class _ns1__GetYjzhZskDevFlowChartList.
class _ns1__GetYjzhZskDevFlowChartList;

//  Forward declaration of class _ns1__GetYjzhZskDevFlowChartListResponse.
class _ns1__GetYjzhZskDevFlowChartListResponse;

//  Forward declaration of class _ns1__GetPropList.
class _ns1__GetPropList;

//  Forward declaration of class _ns1__GetPropListResponse.
class _ns1__GetPropListResponse;

//  Forward declaration of class _ns1__GetPropName.
class _ns1__GetPropName;

//  Forward declaration of class _ns1__GetPropNameResponse.
class _ns1__GetPropNameResponse;

//  Forward declaration of class _ns1__CheckLoginUser.
class _ns1__CheckLoginUser;

//  Forward declaration of class _ns1__CheckLoginUserResponse.
class _ns1__CheckLoginUserResponse;

//  Forward declaration of class _ns1__GetRyUnit.
class _ns1__GetRyUnit;

//  Forward declaration of class _ns1__GetRyUnitResponse.
class _ns1__GetRyUnitResponse;

//  Forward declaration of class _ns1__GetDevCode.
class _ns1__GetDevCode;

//  Forward declaration of class _ns1__GetDevCodeResponse.
class _ns1__GetDevCodeResponse;

//  Forward declaration of class _ns1__CheckDevCode.
class _ns1__CheckDevCode;

//  Forward declaration of class _ns1__CheckDevCodeResponse.
class _ns1__CheckDevCodeResponse;

//  Forward declaration of class _ns1__HelloWorld.
class _ns1__HelloWorld;

//  Forward declaration of class _ns1__HelloWorldResponse.
class _ns1__HelloWorldResponse;

//  Forward declaration of class _ns1__GetDBString.
class _ns1__GetDBString;

//  Forward declaration of class _ns1__GetDBStringResponse.
class _ns1__GetDBStringResponse;

//  Forward declaration of class _ns1__QueryData.
class _ns1__QueryData;

//  Forward declaration of class _ns1__QueryDataResponse.
class _ns1__QueryDataResponse;

//  Forward declaration of class _ns1__QueryDataCount.
class _ns1__QueryDataCount;

//  Forward declaration of class _ns1__QueryDataCountResponse.
class _ns1__QueryDataCountResponse;

//  Forward declaration of class _ns1__ExecuteSql.
class _ns1__ExecuteSql;

//  Forward declaration of class _ns1__ExecuteSqlResponse.
class _ns1__ExecuteSqlResponse;

//  Forward declaration of class _ns1__SaveData.
class _ns1__SaveData;

//  Forward declaration of class _ns1__SaveDataResponse.
class _ns1__SaveDataResponse;

//  Forward declaration of class _ns1__SaveFileData.
class _ns1__SaveFileData;

//  Forward declaration of class _ns1__SaveFileDataResponse.
class _ns1__SaveFileDataResponse;

//  Forward declaration of class _ns1__DownPic.
class _ns1__DownPic;

//  Forward declaration of class _ns1__DownPicResponse.
class _ns1__DownPicResponse;

//  Forward declaration of class _ns1__DownAllPic.
class _ns1__DownAllPic;

//  Forward declaration of class _ns1__DownAllPicResponse.
class _ns1__DownAllPicResponse;

//  Forward declaration of class _ns1__GetGxdataUpTime.
class _ns1__GetGxdataUpTime;

//  Forward declaration of class _ns1__GetGxdataUpTimeResponse.
class _ns1__GetGxdataUpTimeResponse;

//  Forward declaration of class _ns1__signedUserInfo.
class _ns1__signedUserInfo;

//  Forward declaration of class _ns1__signedUserInfoResponse.
class _ns1__signedUserInfoResponse;

//  Forward declaration of class _ns1__GetOsDateTime.
class _ns1__GetOsDateTime;

//  Forward declaration of class _ns1__GetOsDateTimeResponse.
class _ns1__GetOsDateTimeResponse;

//  Forward declaration of class _ns1__QueryPhotobw.
class _ns1__QueryPhotobw;

//  Forward declaration of class _ns1__QueryPhotobwResponse.
class _ns1__QueryPhotobwResponse;

//  Forward declaration of class _ns1__TcdQuery.
class _ns1__TcdQuery;

//  Forward declaration of class _ns1__TcdQueryResponse.
class _ns1__TcdQueryResponse;

//  Forward declaration of class _ns1__TcdSendup.
class _ns1__TcdSendup;

//  Forward declaration of class _ns1__TcdSendupResponse.
class _ns1__TcdSendupResponse;

//  Forward declaration of class _ns1__UpLoadData.
class _ns1__UpLoadData;

//  Forward declaration of class _ns1__UpLoadDataResponse.
class _ns1__UpLoadDataResponse;

//  Forward declaration of class _ns1__ExecuteSqlForColb.
class _ns1__ExecuteSqlForColb;

//  Forward declaration of class _ns1__ExecuteSqlForColbResponse.
class _ns1__ExecuteSqlForColbResponse;

//  Forward declaration of class _ns1__GetXHYDGLXTupdater.
class _ns1__GetXHYDGLXTupdater;

//  Forward declaration of class _ns1__GetXHYDGLXTupdaterResponse.
class _ns1__GetXHYDGLXTupdaterResponse;

//  Forward declaration of class _ns1__GetAPVupdater.
class _ns1__GetAPVupdater;

//  Forward declaration of class _ns1__GetAPVupdaterResponse.
class _ns1__GetAPVupdaterResponse;

//  Forward declaration of class _ns1__UpLoadFile.
class _ns1__UpLoadFile;

//  Forward declaration of class _ns1__UpLoadFileResponse.
class _ns1__UpLoadFileResponse;

//  Forward declaration of class _ns1__upPic.
class _ns1__upPic;

//  Forward declaration of class _ns1__upPicResponse.
class _ns1__upPicResponse;

//  Forward declaration of class _ns1__DownloadPic.
class _ns1__DownloadPic;

//  Forward declaration of class _ns1__DownloadPicResponse.
class _ns1__DownloadPicResponse;

//  Forward declaration of class _ns1__GetPicNames.
class _ns1__GetPicNames;

//  Forward declaration of class _ns1__GetPicNamesResponse.
class _ns1__GetPicNamesResponse;

//  Forward declaration of class _ns1__GetDwInfo.
class _ns1__GetDwInfo;

//  Forward declaration of class _ns1__GetDwInfoResponse.
class _ns1__GetDwInfoResponse;

//  Forward declaration of class _ns1__GetDwPic.
class _ns1__GetDwPic;

//  Forward declaration of class _ns1__GetDwPicResponse.
class _ns1__GetDwPicResponse;

//  Forward declaration of class _ns1__GetDeviceXj.
class _ns1__GetDeviceXj;

//  Forward declaration of class _ns1__GetDeviceXjResponse.
class _ns1__GetDeviceXjResponse;

//  Forward declaration of class _ns1__GetJxData.
class _ns1__GetJxData;

//  Forward declaration of class _ns1__GetJxDataResponse.
class _ns1__GetJxDataResponse;

//  Forward declaration of class _ns1__GetStationJxData.
class _ns1__GetStationJxData;

//  Forward declaration of class _ns1__GetStationJxDataResponse.
class _ns1__GetStationJxDataResponse;

//  Forward declaration of class _ns1__GetJxPic.
class _ns1__GetJxPic;

//  Forward declaration of class _ns1__GetJxPicResponse.
class _ns1__GetJxPicResponse;

//  Forward declaration of class _ns1__GetDevPic.
class _ns1__GetDevPic;

//  Forward declaration of class _ns1__GetDevPicResponse.
class _ns1__GetDevPicResponse;

//  Forward declaration of class _ns1__GetBgImg.
class _ns1__GetBgImg;

//  Forward declaration of class _ns1__GetBgImgResponse.
class _ns1__GetBgImgResponse;

//  Forward declaration of class _ns1__GetDcsData.
class _ns1__GetDcsData;

//  Forward declaration of class _ns1__GetDcsDataResponse.
class _ns1__GetDcsDataResponse;

//  Forward declaration of class _ns1__DownLoadMobGPSData.
class _ns1__DownLoadMobGPSData;

//  Forward declaration of class _ns1__DownLoadMobGPSDataResponse.
class _ns1__DownLoadMobGPSDataResponse;

//  Forward declaration of class _ns1__MobDownLoadData.
class _ns1__MobDownLoadData;

//  Forward declaration of class _ns1__MobDownLoadDataResponse.
class _ns1__MobDownLoadDataResponse;

//  Forward declaration of class _ns1__GetOpenFireInfo.
class _ns1__GetOpenFireInfo;

//  Forward declaration of class _ns1__GetOpenFireInfoResponse.
class _ns1__GetOpenFireInfoResponse;

//  Forward declaration of class _ns1__GetDwList.
class _ns1__GetDwList;

//  Forward declaration of class _ns1__GetDwListResponse.
class _ns1__GetDwListResponse;

//  Forward declaration of class _ns1__GetUnitStation.
class _ns1__GetUnitStation;

//  Forward declaration of class _ns1__GetUnitStationResponse.
class _ns1__GetUnitStationResponse;

//  Forward declaration of class _ns1__GetUnitStruct.
class _ns1__GetUnitStruct;

//  Forward declaration of class _ns1__GetUnitStructResponse.
class _ns1__GetUnitStructResponse;

//  Forward declaration of class _ns1__GetUnitPersonInfo.
class _ns1__GetUnitPersonInfo;

//  Forward declaration of class _ns1__GetUnitPersonInfoResponse.
class _ns1__GetUnitPersonInfoResponse;

//  Forward declaration of class _ns1__GetFileSize.
class _ns1__GetFileSize;

//  Forward declaration of class _ns1__GetFileSizeResponse.
class _ns1__GetFileSizeResponse;

//  Forward declaration of class _ns1__GetXbList.
class _ns1__GetXbList;

//  Forward declaration of class _ns1__GetXbListResponse.
class _ns1__GetXbListResponse;

//  Forward declaration of class _ns1__GetXbStationList.
class _ns1__GetXbStationList;

//  Forward declaration of class _ns1__GetXbStationListResponse.
class _ns1__GetXbStationListResponse;

//  Forward declaration of class _ns1__GetMapDeviceType.
class _ns1__GetMapDeviceType;

//  Forward declaration of class _ns1__GetMapDeviceTypeResponse.
class _ns1__GetMapDeviceTypeResponse;

//  Forward declaration of class _ns1__GetGxDeviceData.
class _ns1__GetGxDeviceData;

//  Forward declaration of class _ns1__GetGxDeviceDataResponse.
class _ns1__GetGxDeviceDataResponse;

//  Forward declaration of class _ns1__GetDownFileInfo.
class _ns1__GetDownFileInfo;

//  Forward declaration of class _ns1__GetDownFileInfoResponse.
class _ns1__GetDownFileInfoResponse;

//  Forward declaration of class _ns1__DownMapfile.
class _ns1__DownMapfile;

//  Forward declaration of class _ns1__DownMapfileResponse.
class _ns1__DownMapfileResponse;

//  Forward declaration of class _ns1__GetFileNew.
class _ns1__GetFileNew;

//  Forward declaration of class _ns1__GetFileNewResponse.
class _ns1__GetFileNewResponse;

//  Forward declaration of class _ns1__AlterTable.
class _ns1__AlterTable;

//  Forward declaration of class _ns1__AlterTableResponse.
class _ns1__AlterTableResponse;

//  Forward declaration of class _ns1__DownCQData.
class _ns1__DownCQData;

//  Forward declaration of class _ns1__DownCQDataResponse.
class _ns1__DownCQDataResponse;

//  Forward declaration of class _ns1__GetTabList.
class _ns1__GetTabList;

//  Forward declaration of class _ns1__GetTabListResponse.
class _ns1__GetTabListResponse;

//  Forward declaration of class _ns1__IsOracleTable.
class _ns1__IsOracleTable;

//  Forward declaration of class _ns1__IsOracleTableResponse.
class _ns1__IsOracleTableResponse;

//  Forward declaration of class _ns1__GetFieldInfo.
class _ns1__GetFieldInfo;

//  Forward declaration of class _ns1__GetFieldInfoResponse.
class _ns1__GetFieldInfoResponse;

//  Forward declaration of class _ns1__ExecuteSqlForFile.
class _ns1__ExecuteSqlForFile;

//  Forward declaration of class _ns1__ExecuteSqlForFileResponse.
class _ns1__ExecuteSqlForFileResponse;

//  Forward declaration of class _ns1__DownLoadFile.
class _ns1__DownLoadFile;

//  Forward declaration of class _ns1__DownLoadFileResponse.
class _ns1__DownLoadFileResponse;

//  Forward declaration of class _ns1__WriteFile.
class _ns1__WriteFile;

//  Forward declaration of class _ns1__WriteFileResponse.
class _ns1__WriteFileResponse;

//  Forward declaration of class _ns1__GetMapUpdateTime.
class _ns1__GetMapUpdateTime;

//  Forward declaration of class _ns1__GetMapUpdateTimeResponse.
class _ns1__GetMapUpdateTimeResponse;

//  Forward declaration of class _ns1__GetMapTabName.
class _ns1__GetMapTabName;

//  Forward declaration of class _ns1__GetMapTabNameResponse.
class _ns1__GetMapTabNameResponse;

//  Forward declaration of class _ns1__GetMapDeviceData.
class _ns1__GetMapDeviceData;

//  Forward declaration of class _ns1__GetMapDeviceDataResponse.
class _ns1__GetMapDeviceDataResponse;

//  Forward declaration of class _ns1__GetMaList.
class _ns1__GetMaList;

//  Forward declaration of class _ns1__GetMaListResponse.
class _ns1__GetMaListResponse;

//  Forward declaration of class _ns1__GetMangeUnit.
class _ns1__GetMangeUnit;

//  Forward declaration of class _ns1__GetMangeUnitResponse.
class _ns1__GetMangeUnitResponse;

//  Forward declaration of class _ns1__GetMangeXb.
class _ns1__GetMangeXb;

//  Forward declaration of class _ns1__GetMangeXbResponse.
class _ns1__GetMangeXbResponse;

//  Forward declaration of class _ns1__CheckMapVer.
class _ns1__CheckMapVer;

//  Forward declaration of class _ns1__CheckMapVerResponse.
class _ns1__CheckMapVerResponse;

//  Forward declaration of class _ns1__GetMap.
class _ns1__GetMap;

//  Forward declaration of class _ns1__GetMapResponse.
class _ns1__GetMapResponse;

//  Forward declaration of class _ns1__GetTableData.
class _ns1__GetTableData;

//  Forward declaration of class _ns1__GetTableDataResponse.
class _ns1__GetTableDataResponse;

//  Forward declaration of class _ns1__ServerLevel.
class _ns1__ServerLevel;

//  Forward declaration of class _ns1__ServerLevelResponse.
class _ns1__ServerLevelResponse;

//  Forward declaration of class _ns1__GetMapListTime.
class _ns1__GetMapListTime;

//  Forward declaration of class _ns1__GetMapListTimeResponse.
class _ns1__GetMapListTimeResponse;

//  Forward declaration of class _ns1__UpdateGzclMap.
class _ns1__UpdateGzclMap;

//  Forward declaration of class _ns1__UpdateGzclMapResponse.
class _ns1__UpdateGzclMapResponse;

//  Forward declaration of class _ns1__GetUnitMapVer.
class _ns1__GetUnitMapVer;

//  Forward declaration of class _ns1__GetUnitMapVerResponse.
class _ns1__GetUnitMapVerResponse;

//  Forward declaration of class _ns1__GetMangeMapUpdate.
class _ns1__GetMangeMapUpdate;

//  Forward declaration of class _ns1__GetMangeMapUpdateResponse.
class _ns1__GetMangeMapUpdateResponse;

//  Forward declaration of class _ns1__OpenProcess.
class _ns1__OpenProcess;

//  Forward declaration of class _ns1__OpenProcessResponse.
class _ns1__OpenProcessResponse;

//  Forward declaration of class _ns1__GetEmfPngVer.
class _ns1__GetEmfPngVer;

//  Forward declaration of class _ns1__GetEmfPngVerResponse.
class _ns1__GetEmfPngVerResponse;

//  Forward declaration of class _ns1__GetEmfPngFile.
class _ns1__GetEmfPngFile;

//  Forward declaration of class _ns1__GetEmfPngFileResponse.
class _ns1__GetEmfPngFileResponse;

//  Forward declaration of class _ns1__OpenMapExe.
class _ns1__OpenMapExe;

//  Forward declaration of class _ns1__OpenMapExeResponse.
class _ns1__OpenMapExeResponse;

//  Forward declaration of class _ns1__ChaoQi.
class _ns1__ChaoQi;

//  Forward declaration of class _ns1__ChaoQiResponse.
class _ns1__ChaoQiResponse;

//  Forward declaration of class _ns1__JiChaoQi.
class _ns1__JiChaoQi;

//  Forward declaration of class _ns1__JiChaoQiResponse.
class _ns1__JiChaoQiResponse;

//  Forward declaration of class _ns1__GetZhouQi.
class _ns1__GetZhouQi;

//  Forward declaration of class _ns1__GetZhouQiResponse.
class _ns1__GetZhouQiResponse;

//  Forward declaration of class _ns1__FlowChartEmf.
class _ns1__FlowChartEmf;

//  Forward declaration of class _ns1__FlowChartEmfResponse.
class _ns1__FlowChartEmfResponse;

//  Forward declaration of class _ns1__SGCDrawEmf.
class _ns1__SGCDrawEmf;

//  Forward declaration of class _ns1__SGCDrawEmfResponse.
class _ns1__SGCDrawEmfResponse;

//  Forward declaration of class _ns1__GzGetTypeList.
class _ns1__GzGetTypeList;

//  Forward declaration of class _ns1__GzGetTypeListResponse.
class _ns1__GzGetTypeListResponse;

//  Forward declaration of class _ns1__GzGetDeviceStruct.
class _ns1__GzGetDeviceStruct;

//  Forward declaration of class _ns1__GzGetDeviceStructResponse.
class _ns1__GzGetDeviceStructResponse;

//  Forward declaration of class _ns1__SaveMapFile.
class _ns1__SaveMapFile;

//  Forward declaration of class _ns1__SaveMapFileResponse.
class _ns1__SaveMapFileResponse;

//  Forward declaration of class _ns1__SelectYjzhStation.
class _ns1__SelectYjzhStation;

//  Forward declaration of class _ns1__SelectYjzhStationResponse.
class _ns1__SelectYjzhStationResponse;

//  Forward declaration of class _ns1__SelectYjzhDevice.
class _ns1__SelectYjzhDevice;

//  Forward declaration of class _ns1__SelectYjzhDeviceResponse.
class _ns1__SelectYjzhDeviceResponse;

//  Forward declaration of class _ns1__GetYjzhZskAlarmTypes.
class _ns1__GetYjzhZskAlarmTypes;

//  Forward declaration of class _ns1__GetYjzhZskAlarmTypesResponse.
class _ns1__GetYjzhZskAlarmTypesResponse;


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://zbxhupdata.com/webservices/                                       *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://zbxhupdata.com/webservices/                                       *
 *                                                                            *
\******************************************************************************/

/// @brief "http://zbxhupdata.com/webservices/":ArrayOfBase64Binary is a complexType.
///
/// class ns1__ArrayOfBase64Binary operations:
/// - ns1__ArrayOfBase64Binary* soap_new_ns1__ArrayOfBase64Binary(soap*) allocate and default initialize
/// - ns1__ArrayOfBase64Binary* soap_new_ns1__ArrayOfBase64Binary(soap*, int num) allocate array and default initialize values
/// - ns1__ArrayOfBase64Binary* soap_new_req_ns1__ArrayOfBase64Binary(soap*, ...) allocate, set required members
/// - ns1__ArrayOfBase64Binary* soap_new_set_ns1__ArrayOfBase64Binary(soap*, ...) allocate, set all public members
/// - ns1__ArrayOfBase64Binary::soap_default(soap*) default initialize members
/// - int soap_read_ns1__ArrayOfBase64Binary(soap*, ns1__ArrayOfBase64Binary*) deserialize from a stream
/// - int soap_write_ns1__ArrayOfBase64Binary(soap*, ns1__ArrayOfBase64Binary*) serialize to a stream
/// - ns1__ArrayOfBase64Binary* ns1__ArrayOfBase64Binary::soap_dup(soap*) returns deep copy of ns1__ArrayOfBase64Binary, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__ArrayOfBase64Binary::soap_del() deep deletes ns1__ArrayOfBase64Binary data members, use only after ns1__ArrayOfBase64Binary::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__ArrayOfBase64Binary
{ public:
/// Size of array of xsd__base64Binary is 0..unbounded.
   $int                                  __sizebase64Binary             0;
/// Pointer to array xsd__base64Binary of size 0..unbounded.
    xsd__base64Binary                   *base64Binary                   0;	///< Multiple elements.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://zbxhupdata.com/webservices/":GetYjzhZskGzFlow
/// @brief "http://zbxhupdata.com/webservices/":GetYjzhZskGzFlow is a complexType.
///
/// class _ns1__GetYjzhZskGzFlow operations:
/// - _ns1__GetYjzhZskGzFlow* soap_new__ns1__GetYjzhZskGzFlow(soap*) allocate and default initialize
/// - _ns1__GetYjzhZskGzFlow* soap_new__ns1__GetYjzhZskGzFlow(soap*, int num) allocate array and default initialize values
/// - _ns1__GetYjzhZskGzFlow* soap_new_req__ns1__GetYjzhZskGzFlow(soap*, ...) allocate, set required members
/// - _ns1__GetYjzhZskGzFlow* soap_new_set__ns1__GetYjzhZskGzFlow(soap*, ...) allocate, set all public members
/// - _ns1__GetYjzhZskGzFlow::soap_default(soap*) default initialize members
/// - int soap_read__ns1__GetYjzhZskGzFlow(soap*, _ns1__GetYjzhZskGzFlow*) deserialize from a stream
/// - int soap_write__ns1__GetYjzhZskGzFlow(soap*, _ns1__GetYjzhZskGzFlow*) serialize to a stream
/// - _ns1__GetYjzhZskGzFlow* _ns1__GetYjzhZskGzFlow::soap_dup(soap*) returns deep copy of _ns1__GetYjzhZskGzFlow, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GetYjzhZskGzFlow::soap_del() deep deletes _ns1__GetYjzhZskGzFlow data members, use only after _ns1__GetYjzhZskGzFlow::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__GetYjzhZskGzFlow
{ public:
/// Element "id" of XSD type xs:string.
    char*                                id                             0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://zbxhupdata.com/webservices/":GetYjzhZskGzFlowResponse
/// @brief "http://zbxhupdata.com/webservices/":GetYjzhZskGzFlowResponse is a complexType.
///
/// class _ns1__GetYjzhZskGzFlowResponse operations:
/// - _ns1__GetYjzhZskGzFlowResponse* soap_new__ns1__GetYjzhZskGzFlowResponse(soap*) allocate and default initialize
/// - _ns1__GetYjzhZskGzFlowResponse* soap_new__ns1__GetYjzhZskGzFlowResponse(soap*, int num) allocate array and default initialize values
/// - _ns1__GetYjzhZskGzFlowResponse* soap_new_req__ns1__GetYjzhZskGzFlowResponse(soap*, ...) allocate, set required members
/// - _ns1__GetYjzhZskGzFlowResponse* soap_new_set__ns1__GetYjzhZskGzFlowResponse(soap*, ...) allocate, set all public members
/// - _ns1__GetYjzhZskGzFlowResponse::soap_default(soap*) default initialize members
/// - int soap_read__ns1__GetYjzhZskGzFlowResponse(soap*, _ns1__GetYjzhZskGzFlowResponse*) deserialize from a stream
/// - int soap_write__ns1__GetYjzhZskGzFlowResponse(soap*, _ns1__GetYjzhZskGzFlowResponse*) serialize to a stream
/// - _ns1__GetYjzhZskGzFlowResponse* _ns1__GetYjzhZskGzFlowResponse::soap_dup(soap*) returns deep copy of _ns1__GetYjzhZskGzFlowResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GetYjzhZskGzFlowResponse::soap_del() deep deletes _ns1__GetYjzhZskGzFlowResponse data members, use only after _ns1__GetYjzhZskGzFlowResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__GetYjzhZskGzFlowResponse
{ public:
/// Element "GetYjzhZskGzFlowResult" of XSD type xs:string.
    char*                                GetYjzhZskGzFlowResult         0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://zbxhupdata.com/webservices/":GetYjzhZskOtherFlowChartList
/// @brief "http://zbxhupdata.com/webservices/":GetYjzhZskOtherFlowChartList is a complexType.
///
/// class _ns1__GetYjzhZskOtherFlowChartList operations:
/// - _ns1__GetYjzhZskOtherFlowChartList* soap_new__ns1__GetYjzhZskOtherFlowChartList(soap*) allocate and default initialize
/// - _ns1__GetYjzhZskOtherFlowChartList* soap_new__ns1__GetYjzhZskOtherFlowChartList(soap*, int num) allocate array and default initialize values
/// - _ns1__GetYjzhZskOtherFlowChartList* soap_new_req__ns1__GetYjzhZskOtherFlowChartList(soap*, ...) allocate, set required members
/// - _ns1__GetYjzhZskOtherFlowChartList* soap_new_set__ns1__GetYjzhZskOtherFlowChartList(soap*, ...) allocate, set all public members
/// - _ns1__GetYjzhZskOtherFlowChartList::soap_default(soap*) default initialize members
/// - int soap_read__ns1__GetYjzhZskOtherFlowChartList(soap*, _ns1__GetYjzhZskOtherFlowChartList*) deserialize from a stream
/// - int soap_write__ns1__GetYjzhZskOtherFlowChartList(soap*, _ns1__GetYjzhZskOtherFlowChartList*) serialize to a stream
/// - _ns1__GetYjzhZskOtherFlowChartList* _ns1__GetYjzhZskOtherFlowChartList::soap_dup(soap*) returns deep copy of _ns1__GetYjzhZskOtherFlowChartList, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GetYjzhZskOtherFlowChartList::soap_del() deep deletes _ns1__GetYjzhZskOtherFlowChartList data members, use only after _ns1__GetYjzhZskOtherFlowChartList::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__GetYjzhZskOtherFlowChartList
{ public:
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://zbxhupdata.com/webservices/":GetYjzhZskOtherFlowChartListResponse
/// @brief "http://zbxhupdata.com/webservices/":GetYjzhZskOtherFlowChartListResponse is a complexType.
///
/// class _ns1__GetYjzhZskOtherFlowChartListResponse operations:
/// - _ns1__GetYjzhZskOtherFlowChartListResponse* soap_new__ns1__GetYjzhZskOtherFlowChartListResponse(soap*) allocate and default initialize
/// - _ns1__GetYjzhZskOtherFlowChartListResponse* soap_new__ns1__GetYjzhZskOtherFlowChartListResponse(soap*, int num) allocate array and default initialize values
/// - _ns1__GetYjzhZskOtherFlowChartListResponse* soap_new_req__ns1__GetYjzhZskOtherFlowChartListResponse(soap*, ...) allocate, set required members
/// - _ns1__GetYjzhZskOtherFlowChartListResponse* soap_new_set__ns1__GetYjzhZskOtherFlowChartListResponse(soap*, ...) allocate, set all public members
/// - _ns1__GetYjzhZskOtherFlowChartListResponse::soap_default(soap*) default initialize members
/// - int soap_read__ns1__GetYjzhZskOtherFlowChartListResponse(soap*, _ns1__GetYjzhZskOtherFlowChartListResponse*) deserialize from a stream
/// - int soap_write__ns1__GetYjzhZskOtherFlowChartListResponse(soap*, _ns1__GetYjzhZskOtherFlowChartListResponse*) serialize to a stream
/// - _ns1__GetYjzhZskOtherFlowChartListResponse* _ns1__GetYjzhZskOtherFlowChartListResponse::soap_dup(soap*) returns deep copy of _ns1__GetYjzhZskOtherFlowChartListResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GetYjzhZskOtherFlowChartListResponse::soap_del() deep deletes _ns1__GetYjzhZskOtherFlowChartListResponse data members, use only after _ns1__GetYjzhZskOtherFlowChartListResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__GetYjzhZskOtherFlowChartListResponse
{ public:
/// Element "GetYjzhZskOtherFlowChartListResult" of XSD type xs:string.
    char*                                GetYjzhZskOtherFlowChartListResult 0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://zbxhupdata.com/webservices/":GetYjzhZskDevFlowChartList
/// @brief "http://zbxhupdata.com/webservices/":GetYjzhZskDevFlowChartList is a complexType.
///
/// class _ns1__GetYjzhZskDevFlowChartList operations:
/// - _ns1__GetYjzhZskDevFlowChartList* soap_new__ns1__GetYjzhZskDevFlowChartList(soap*) allocate and default initialize
/// - _ns1__GetYjzhZskDevFlowChartList* soap_new__ns1__GetYjzhZskDevFlowChartList(soap*, int num) allocate array and default initialize values
/// - _ns1__GetYjzhZskDevFlowChartList* soap_new_req__ns1__GetYjzhZskDevFlowChartList(soap*, ...) allocate, set required members
/// - _ns1__GetYjzhZskDevFlowChartList* soap_new_set__ns1__GetYjzhZskDevFlowChartList(soap*, ...) allocate, set all public members
/// - _ns1__GetYjzhZskDevFlowChartList::soap_default(soap*) default initialize members
/// - int soap_read__ns1__GetYjzhZskDevFlowChartList(soap*, _ns1__GetYjzhZskDevFlowChartList*) deserialize from a stream
/// - int soap_write__ns1__GetYjzhZskDevFlowChartList(soap*, _ns1__GetYjzhZskDevFlowChartList*) serialize to a stream
/// - _ns1__GetYjzhZskDevFlowChartList* _ns1__GetYjzhZskDevFlowChartList::soap_dup(soap*) returns deep copy of _ns1__GetYjzhZskDevFlowChartList, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GetYjzhZskDevFlowChartList::soap_del() deep deletes _ns1__GetYjzhZskDevFlowChartList data members, use only after _ns1__GetYjzhZskDevFlowChartList::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__GetYjzhZskDevFlowChartList
{ public:
/// Element "xb" of XSD type xs:string.
    char*                                xb                             0;	///< Optional element.
/// Element "cz" of XSD type xs:string.
    char*                                cz                             0;	///< Optional element.
/// Element "devtypeid" of XSD type xs:string.
    char*                                devtypeid                      0;	///< Optional element.
/// Element "devname" of XSD type xs:string.
    char*                                devname                        0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://zbxhupdata.com/webservices/":GetYjzhZskDevFlowChartListResponse
/// @brief "http://zbxhupdata.com/webservices/":GetYjzhZskDevFlowChartListResponse is a complexType.
///
/// class _ns1__GetYjzhZskDevFlowChartListResponse operations:
/// - _ns1__GetYjzhZskDevFlowChartListResponse* soap_new__ns1__GetYjzhZskDevFlowChartListResponse(soap*) allocate and default initialize
/// - _ns1__GetYjzhZskDevFlowChartListResponse* soap_new__ns1__GetYjzhZskDevFlowChartListResponse(soap*, int num) allocate array and default initialize values
/// - _ns1__GetYjzhZskDevFlowChartListResponse* soap_new_req__ns1__GetYjzhZskDevFlowChartListResponse(soap*, ...) allocate, set required members
/// - _ns1__GetYjzhZskDevFlowChartListResponse* soap_new_set__ns1__GetYjzhZskDevFlowChartListResponse(soap*, ...) allocate, set all public members
/// - _ns1__GetYjzhZskDevFlowChartListResponse::soap_default(soap*) default initialize members
/// - int soap_read__ns1__GetYjzhZskDevFlowChartListResponse(soap*, _ns1__GetYjzhZskDevFlowChartListResponse*) deserialize from a stream
/// - int soap_write__ns1__GetYjzhZskDevFlowChartListResponse(soap*, _ns1__GetYjzhZskDevFlowChartListResponse*) serialize to a stream
/// - _ns1__GetYjzhZskDevFlowChartListResponse* _ns1__GetYjzhZskDevFlowChartListResponse::soap_dup(soap*) returns deep copy of _ns1__GetYjzhZskDevFlowChartListResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GetYjzhZskDevFlowChartListResponse::soap_del() deep deletes _ns1__GetYjzhZskDevFlowChartListResponse data members, use only after _ns1__GetYjzhZskDevFlowChartListResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__GetYjzhZskDevFlowChartListResponse
{ public:
/// Element "GetYjzhZskDevFlowChartListResult" of XSD type xs:string.
    char*                                GetYjzhZskDevFlowChartListResult 0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://zbxhupdata.com/webservices/":GetPropList
/// @brief "http://zbxhupdata.com/webservices/":GetPropList is a complexType.
///
/// class _ns1__GetPropList operations:
/// - _ns1__GetPropList* soap_new__ns1__GetPropList(soap*) allocate and default initialize
/// - _ns1__GetPropList* soap_new__ns1__GetPropList(soap*, int num) allocate array and default initialize values
/// - _ns1__GetPropList* soap_new_req__ns1__GetPropList(soap*, ...) allocate, set required members
/// - _ns1__GetPropList* soap_new_set__ns1__GetPropList(soap*, ...) allocate, set all public members
/// - _ns1__GetPropList::soap_default(soap*) default initialize members
/// - int soap_read__ns1__GetPropList(soap*, _ns1__GetPropList*) deserialize from a stream
/// - int soap_write__ns1__GetPropList(soap*, _ns1__GetPropList*) serialize to a stream
/// - _ns1__GetPropList* _ns1__GetPropList::soap_dup(soap*) returns deep copy of _ns1__GetPropList, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GetPropList::soap_del() deep deletes _ns1__GetPropList data members, use only after _ns1__GetPropList::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__GetPropList
{ public:
/// Element "dwname" of XSD type xs:string.
    char*                                dwname                         0;	///< Optional element.
/// Element "xbname" of XSD type xs:string.
    char*                                xbname                         0;	///< Optional element.
/// Element "station" of XSD type xs:string.
    char*                                station                        0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://zbxhupdata.com/webservices/":GetPropListResponse
/// @brief "http://zbxhupdata.com/webservices/":GetPropListResponse is a complexType.
///
/// class _ns1__GetPropListResponse operations:
/// - _ns1__GetPropListResponse* soap_new__ns1__GetPropListResponse(soap*) allocate and default initialize
/// - _ns1__GetPropListResponse* soap_new__ns1__GetPropListResponse(soap*, int num) allocate array and default initialize values
/// - _ns1__GetPropListResponse* soap_new_req__ns1__GetPropListResponse(soap*, ...) allocate, set required members
/// - _ns1__GetPropListResponse* soap_new_set__ns1__GetPropListResponse(soap*, ...) allocate, set all public members
/// - _ns1__GetPropListResponse::soap_default(soap*) default initialize members
/// - int soap_read__ns1__GetPropListResponse(soap*, _ns1__GetPropListResponse*) deserialize from a stream
/// - int soap_write__ns1__GetPropListResponse(soap*, _ns1__GetPropListResponse*) serialize to a stream
/// - _ns1__GetPropListResponse* _ns1__GetPropListResponse::soap_dup(soap*) returns deep copy of _ns1__GetPropListResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GetPropListResponse::soap_del() deep deletes _ns1__GetPropListResponse data members, use only after _ns1__GetPropListResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__GetPropListResponse
{ public:
/// Element "GetPropListResult" of XSD type xs:string.
    char*                                GetPropListResult              0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://zbxhupdata.com/webservices/":GetPropName
/// @brief "http://zbxhupdata.com/webservices/":GetPropName is a complexType.
///
/// class _ns1__GetPropName operations:
/// - _ns1__GetPropName* soap_new__ns1__GetPropName(soap*) allocate and default initialize
/// - _ns1__GetPropName* soap_new__ns1__GetPropName(soap*, int num) allocate array and default initialize values
/// - _ns1__GetPropName* soap_new_req__ns1__GetPropName(soap*, ...) allocate, set required members
/// - _ns1__GetPropName* soap_new_set__ns1__GetPropName(soap*, ...) allocate, set all public members
/// - _ns1__GetPropName::soap_default(soap*) default initialize members
/// - int soap_read__ns1__GetPropName(soap*, _ns1__GetPropName*) deserialize from a stream
/// - int soap_write__ns1__GetPropName(soap*, _ns1__GetPropName*) serialize to a stream
/// - _ns1__GetPropName* _ns1__GetPropName::soap_dup(soap*) returns deep copy of _ns1__GetPropName, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GetPropName::soap_del() deep deletes _ns1__GetPropName data members, use only after _ns1__GetPropName::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__GetPropName
{ public:
/// Element "stationtypeid" of XSD type xs:int.
    int                                  stationtypeid                  1;	///< Required element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://zbxhupdata.com/webservices/":GetPropNameResponse
/// @brief "http://zbxhupdata.com/webservices/":GetPropNameResponse is a complexType.
///
/// class _ns1__GetPropNameResponse operations:
/// - _ns1__GetPropNameResponse* soap_new__ns1__GetPropNameResponse(soap*) allocate and default initialize
/// - _ns1__GetPropNameResponse* soap_new__ns1__GetPropNameResponse(soap*, int num) allocate array and default initialize values
/// - _ns1__GetPropNameResponse* soap_new_req__ns1__GetPropNameResponse(soap*, ...) allocate, set required members
/// - _ns1__GetPropNameResponse* soap_new_set__ns1__GetPropNameResponse(soap*, ...) allocate, set all public members
/// - _ns1__GetPropNameResponse::soap_default(soap*) default initialize members
/// - int soap_read__ns1__GetPropNameResponse(soap*, _ns1__GetPropNameResponse*) deserialize from a stream
/// - int soap_write__ns1__GetPropNameResponse(soap*, _ns1__GetPropNameResponse*) serialize to a stream
/// - _ns1__GetPropNameResponse* _ns1__GetPropNameResponse::soap_dup(soap*) returns deep copy of _ns1__GetPropNameResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GetPropNameResponse::soap_del() deep deletes _ns1__GetPropNameResponse data members, use only after _ns1__GetPropNameResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__GetPropNameResponse
{ public:
/// Element "GetPropNameResult" of XSD type xs:string.
    char*                                GetPropNameResult              0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://zbxhupdata.com/webservices/":CheckLoginUser
/// @brief "http://zbxhupdata.com/webservices/":CheckLoginUser is a complexType.
///
/// class _ns1__CheckLoginUser operations:
/// - _ns1__CheckLoginUser* soap_new__ns1__CheckLoginUser(soap*) allocate and default initialize
/// - _ns1__CheckLoginUser* soap_new__ns1__CheckLoginUser(soap*, int num) allocate array and default initialize values
/// - _ns1__CheckLoginUser* soap_new_req__ns1__CheckLoginUser(soap*, ...) allocate, set required members
/// - _ns1__CheckLoginUser* soap_new_set__ns1__CheckLoginUser(soap*, ...) allocate, set all public members
/// - _ns1__CheckLoginUser::soap_default(soap*) default initialize members
/// - int soap_read__ns1__CheckLoginUser(soap*, _ns1__CheckLoginUser*) deserialize from a stream
/// - int soap_write__ns1__CheckLoginUser(soap*, _ns1__CheckLoginUser*) serialize to a stream
/// - _ns1__CheckLoginUser* _ns1__CheckLoginUser::soap_dup(soap*) returns deep copy of _ns1__CheckLoginUser, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__CheckLoginUser::soap_del() deep deletes _ns1__CheckLoginUser data members, use only after _ns1__CheckLoginUser::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__CheckLoginUser
{ public:
/// Element "username" of XSD type xs:string.
    char*                                username                       0;	///< Optional element.
/// Element "pass" of XSD type xs:string.
    char*                                pass                           0;	///< Optional element.
/// Element "dwname" of XSD type xs:string.
    char*                                dwname                         0;	///< Optional element.
/// Element "peid" of XSD type xs:string.
    char*                                peid                           0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://zbxhupdata.com/webservices/":CheckLoginUserResponse
/// @brief "http://zbxhupdata.com/webservices/":CheckLoginUserResponse is a complexType.
///
/// class _ns1__CheckLoginUserResponse operations:
/// - _ns1__CheckLoginUserResponse* soap_new__ns1__CheckLoginUserResponse(soap*) allocate and default initialize
/// - _ns1__CheckLoginUserResponse* soap_new__ns1__CheckLoginUserResponse(soap*, int num) allocate array and default initialize values
/// - _ns1__CheckLoginUserResponse* soap_new_req__ns1__CheckLoginUserResponse(soap*, ...) allocate, set required members
/// - _ns1__CheckLoginUserResponse* soap_new_set__ns1__CheckLoginUserResponse(soap*, ...) allocate, set all public members
/// - _ns1__CheckLoginUserResponse::soap_default(soap*) default initialize members
/// - int soap_read__ns1__CheckLoginUserResponse(soap*, _ns1__CheckLoginUserResponse*) deserialize from a stream
/// - int soap_write__ns1__CheckLoginUserResponse(soap*, _ns1__CheckLoginUserResponse*) serialize to a stream
/// - _ns1__CheckLoginUserResponse* _ns1__CheckLoginUserResponse::soap_dup(soap*) returns deep copy of _ns1__CheckLoginUserResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__CheckLoginUserResponse::soap_del() deep deletes _ns1__CheckLoginUserResponse data members, use only after _ns1__CheckLoginUserResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__CheckLoginUserResponse
{ public:
/// Element "CheckLoginUserResult" of XSD type xs:int.
    int                                  CheckLoginUserResult           1;	///< Required element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://zbxhupdata.com/webservices/":GetRyUnit
/// @brief "http://zbxhupdata.com/webservices/":GetRyUnit is a complexType.
///
/// class _ns1__GetRyUnit operations:
/// - _ns1__GetRyUnit* soap_new__ns1__GetRyUnit(soap*) allocate and default initialize
/// - _ns1__GetRyUnit* soap_new__ns1__GetRyUnit(soap*, int num) allocate array and default initialize values
/// - _ns1__GetRyUnit* soap_new_req__ns1__GetRyUnit(soap*, ...) allocate, set required members
/// - _ns1__GetRyUnit* soap_new_set__ns1__GetRyUnit(soap*, ...) allocate, set all public members
/// - _ns1__GetRyUnit::soap_default(soap*) default initialize members
/// - int soap_read__ns1__GetRyUnit(soap*, _ns1__GetRyUnit*) deserialize from a stream
/// - int soap_write__ns1__GetRyUnit(soap*, _ns1__GetRyUnit*) serialize to a stream
/// - _ns1__GetRyUnit* _ns1__GetRyUnit::soap_dup(soap*) returns deep copy of _ns1__GetRyUnit, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GetRyUnit::soap_del() deep deletes _ns1__GetRyUnit data members, use only after _ns1__GetRyUnit::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__GetRyUnit
{ public:
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://zbxhupdata.com/webservices/":GetRyUnitResponse
/// @brief "http://zbxhupdata.com/webservices/":GetRyUnitResponse is a complexType.
///
/// class _ns1__GetRyUnitResponse operations:
/// - _ns1__GetRyUnitResponse* soap_new__ns1__GetRyUnitResponse(soap*) allocate and default initialize
/// - _ns1__GetRyUnitResponse* soap_new__ns1__GetRyUnitResponse(soap*, int num) allocate array and default initialize values
/// - _ns1__GetRyUnitResponse* soap_new_req__ns1__GetRyUnitResponse(soap*, ...) allocate, set required members
/// - _ns1__GetRyUnitResponse* soap_new_set__ns1__GetRyUnitResponse(soap*, ...) allocate, set all public members
/// - _ns1__GetRyUnitResponse::soap_default(soap*) default initialize members
/// - int soap_read__ns1__GetRyUnitResponse(soap*, _ns1__GetRyUnitResponse*) deserialize from a stream
/// - int soap_write__ns1__GetRyUnitResponse(soap*, _ns1__GetRyUnitResponse*) serialize to a stream
/// - _ns1__GetRyUnitResponse* _ns1__GetRyUnitResponse::soap_dup(soap*) returns deep copy of _ns1__GetRyUnitResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GetRyUnitResponse::soap_del() deep deletes _ns1__GetRyUnitResponse data members, use only after _ns1__GetRyUnitResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__GetRyUnitResponse
{ public:
/// Element "GetRyUnitResult" of XSD type xs:string.
    char*                                GetRyUnitResult                0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://zbxhupdata.com/webservices/":GetDevCode
/// @brief "http://zbxhupdata.com/webservices/":GetDevCode is a complexType.
///
/// class _ns1__GetDevCode operations:
/// - _ns1__GetDevCode* soap_new__ns1__GetDevCode(soap*) allocate and default initialize
/// - _ns1__GetDevCode* soap_new__ns1__GetDevCode(soap*, int num) allocate array and default initialize values
/// - _ns1__GetDevCode* soap_new_req__ns1__GetDevCode(soap*, ...) allocate, set required members
/// - _ns1__GetDevCode* soap_new_set__ns1__GetDevCode(soap*, ...) allocate, set all public members
/// - _ns1__GetDevCode::soap_default(soap*) default initialize members
/// - int soap_read__ns1__GetDevCode(soap*, _ns1__GetDevCode*) deserialize from a stream
/// - int soap_write__ns1__GetDevCode(soap*, _ns1__GetDevCode*) serialize to a stream
/// - _ns1__GetDevCode* _ns1__GetDevCode::soap_dup(soap*) returns deep copy of _ns1__GetDevCode, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GetDevCode::soap_del() deep deletes _ns1__GetDevCode data members, use only after _ns1__GetDevCode::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__GetDevCode
{ public:
/// Element "xb" of XSD type xs:string.
    char*                                xb                             0;	///< Optional element.
/// Element "station" of XSD type xs:string.
    char*                                station                        0;	///< Optional element.
/// Element "iscode" of XSD type xs:int.
    int                                  iscode                         1;	///< Required element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://zbxhupdata.com/webservices/":GetDevCodeResponse
/// @brief "http://zbxhupdata.com/webservices/":GetDevCodeResponse is a complexType.
///
/// class _ns1__GetDevCodeResponse operations:
/// - _ns1__GetDevCodeResponse* soap_new__ns1__GetDevCodeResponse(soap*) allocate and default initialize
/// - _ns1__GetDevCodeResponse* soap_new__ns1__GetDevCodeResponse(soap*, int num) allocate array and default initialize values
/// - _ns1__GetDevCodeResponse* soap_new_req__ns1__GetDevCodeResponse(soap*, ...) allocate, set required members
/// - _ns1__GetDevCodeResponse* soap_new_set__ns1__GetDevCodeResponse(soap*, ...) allocate, set all public members
/// - _ns1__GetDevCodeResponse::soap_default(soap*) default initialize members
/// - int soap_read__ns1__GetDevCodeResponse(soap*, _ns1__GetDevCodeResponse*) deserialize from a stream
/// - int soap_write__ns1__GetDevCodeResponse(soap*, _ns1__GetDevCodeResponse*) serialize to a stream
/// - _ns1__GetDevCodeResponse* _ns1__GetDevCodeResponse::soap_dup(soap*) returns deep copy of _ns1__GetDevCodeResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GetDevCodeResponse::soap_del() deep deletes _ns1__GetDevCodeResponse data members, use only after _ns1__GetDevCodeResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__GetDevCodeResponse
{ public:
/// Element "GetDevCodeResult" of XSD type xs:string.
    char*                                GetDevCodeResult               0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://zbxhupdata.com/webservices/":CheckDevCode
/// @brief "http://zbxhupdata.com/webservices/":CheckDevCode is a complexType.
///
/// class _ns1__CheckDevCode operations:
/// - _ns1__CheckDevCode* soap_new__ns1__CheckDevCode(soap*) allocate and default initialize
/// - _ns1__CheckDevCode* soap_new__ns1__CheckDevCode(soap*, int num) allocate array and default initialize values
/// - _ns1__CheckDevCode* soap_new_req__ns1__CheckDevCode(soap*, ...) allocate, set required members
/// - _ns1__CheckDevCode* soap_new_set__ns1__CheckDevCode(soap*, ...) allocate, set all public members
/// - _ns1__CheckDevCode::soap_default(soap*) default initialize members
/// - int soap_read__ns1__CheckDevCode(soap*, _ns1__CheckDevCode*) deserialize from a stream
/// - int soap_write__ns1__CheckDevCode(soap*, _ns1__CheckDevCode*) serialize to a stream
/// - _ns1__CheckDevCode* _ns1__CheckDevCode::soap_dup(soap*) returns deep copy of _ns1__CheckDevCode, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__CheckDevCode::soap_del() deep deletes _ns1__CheckDevCode data members, use only after _ns1__CheckDevCode::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__CheckDevCode
{ public:
/// Element "xb" of XSD type xs:string.
    char*                                xb                             0;	///< Optional element.
/// Element "station" of XSD type xs:string.
    char*                                station                        0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://zbxhupdata.com/webservices/":CheckDevCodeResponse
/// @brief "http://zbxhupdata.com/webservices/":CheckDevCodeResponse is a complexType.
///
/// class _ns1__CheckDevCodeResponse operations:
/// - _ns1__CheckDevCodeResponse* soap_new__ns1__CheckDevCodeResponse(soap*) allocate and default initialize
/// - _ns1__CheckDevCodeResponse* soap_new__ns1__CheckDevCodeResponse(soap*, int num) allocate array and default initialize values
/// - _ns1__CheckDevCodeResponse* soap_new_req__ns1__CheckDevCodeResponse(soap*, ...) allocate, set required members
/// - _ns1__CheckDevCodeResponse* soap_new_set__ns1__CheckDevCodeResponse(soap*, ...) allocate, set all public members
/// - _ns1__CheckDevCodeResponse::soap_default(soap*) default initialize members
/// - int soap_read__ns1__CheckDevCodeResponse(soap*, _ns1__CheckDevCodeResponse*) deserialize from a stream
/// - int soap_write__ns1__CheckDevCodeResponse(soap*, _ns1__CheckDevCodeResponse*) serialize to a stream
/// - _ns1__CheckDevCodeResponse* _ns1__CheckDevCodeResponse::soap_dup(soap*) returns deep copy of _ns1__CheckDevCodeResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__CheckDevCodeResponse::soap_del() deep deletes _ns1__CheckDevCodeResponse data members, use only after _ns1__CheckDevCodeResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__CheckDevCodeResponse
{ public:
/// Element "CheckDevCodeResult" of XSD type xs:int.
    int                                  CheckDevCodeResult             1;	///< Required element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://zbxhupdata.com/webservices/":HelloWorld
/// @brief "http://zbxhupdata.com/webservices/":HelloWorld is a complexType.
///
/// class _ns1__HelloWorld operations:
/// - _ns1__HelloWorld* soap_new__ns1__HelloWorld(soap*) allocate and default initialize
/// - _ns1__HelloWorld* soap_new__ns1__HelloWorld(soap*, int num) allocate array and default initialize values
/// - _ns1__HelloWorld* soap_new_req__ns1__HelloWorld(soap*, ...) allocate, set required members
/// - _ns1__HelloWorld* soap_new_set__ns1__HelloWorld(soap*, ...) allocate, set all public members
/// - _ns1__HelloWorld::soap_default(soap*) default initialize members
/// - int soap_read__ns1__HelloWorld(soap*, _ns1__HelloWorld*) deserialize from a stream
/// - int soap_write__ns1__HelloWorld(soap*, _ns1__HelloWorld*) serialize to a stream
/// - _ns1__HelloWorld* _ns1__HelloWorld::soap_dup(soap*) returns deep copy of _ns1__HelloWorld, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__HelloWorld::soap_del() deep deletes _ns1__HelloWorld data members, use only after _ns1__HelloWorld::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__HelloWorld
{ public:
/// Element "helloworld" of XSD type xs:string.
    char*                                helloworld                     0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://zbxhupdata.com/webservices/":HelloWorldResponse
/// @brief "http://zbxhupdata.com/webservices/":HelloWorldResponse is a complexType.
///
/// class _ns1__HelloWorldResponse operations:
/// - _ns1__HelloWorldResponse* soap_new__ns1__HelloWorldResponse(soap*) allocate and default initialize
/// - _ns1__HelloWorldResponse* soap_new__ns1__HelloWorldResponse(soap*, int num) allocate array and default initialize values
/// - _ns1__HelloWorldResponse* soap_new_req__ns1__HelloWorldResponse(soap*, ...) allocate, set required members
/// - _ns1__HelloWorldResponse* soap_new_set__ns1__HelloWorldResponse(soap*, ...) allocate, set all public members
/// - _ns1__HelloWorldResponse::soap_default(soap*) default initialize members
/// - int soap_read__ns1__HelloWorldResponse(soap*, _ns1__HelloWorldResponse*) deserialize from a stream
/// - int soap_write__ns1__HelloWorldResponse(soap*, _ns1__HelloWorldResponse*) serialize to a stream
/// - _ns1__HelloWorldResponse* _ns1__HelloWorldResponse::soap_dup(soap*) returns deep copy of _ns1__HelloWorldResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__HelloWorldResponse::soap_del() deep deletes _ns1__HelloWorldResponse data members, use only after _ns1__HelloWorldResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__HelloWorldResponse
{ public:
/// Element "HelloWorldResult" of XSD type xs:string.
    char*                                HelloWorldResult               0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://zbxhupdata.com/webservices/":GetDBString
/// @brief "http://zbxhupdata.com/webservices/":GetDBString is a complexType.
///
/// class _ns1__GetDBString operations:
/// - _ns1__GetDBString* soap_new__ns1__GetDBString(soap*) allocate and default initialize
/// - _ns1__GetDBString* soap_new__ns1__GetDBString(soap*, int num) allocate array and default initialize values
/// - _ns1__GetDBString* soap_new_req__ns1__GetDBString(soap*, ...) allocate, set required members
/// - _ns1__GetDBString* soap_new_set__ns1__GetDBString(soap*, ...) allocate, set all public members
/// - _ns1__GetDBString::soap_default(soap*) default initialize members
/// - int soap_read__ns1__GetDBString(soap*, _ns1__GetDBString*) deserialize from a stream
/// - int soap_write__ns1__GetDBString(soap*, _ns1__GetDBString*) serialize to a stream
/// - _ns1__GetDBString* _ns1__GetDBString::soap_dup(soap*) returns deep copy of _ns1__GetDBString, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GetDBString::soap_del() deep deletes _ns1__GetDBString data members, use only after _ns1__GetDBString::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__GetDBString
{ public:
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://zbxhupdata.com/webservices/":GetDBStringResponse
/// @brief "http://zbxhupdata.com/webservices/":GetDBStringResponse is a complexType.
///
/// class _ns1__GetDBStringResponse operations:
/// - _ns1__GetDBStringResponse* soap_new__ns1__GetDBStringResponse(soap*) allocate and default initialize
/// - _ns1__GetDBStringResponse* soap_new__ns1__GetDBStringResponse(soap*, int num) allocate array and default initialize values
/// - _ns1__GetDBStringResponse* soap_new_req__ns1__GetDBStringResponse(soap*, ...) allocate, set required members
/// - _ns1__GetDBStringResponse* soap_new_set__ns1__GetDBStringResponse(soap*, ...) allocate, set all public members
/// - _ns1__GetDBStringResponse::soap_default(soap*) default initialize members
/// - int soap_read__ns1__GetDBStringResponse(soap*, _ns1__GetDBStringResponse*) deserialize from a stream
/// - int soap_write__ns1__GetDBStringResponse(soap*, _ns1__GetDBStringResponse*) serialize to a stream
/// - _ns1__GetDBStringResponse* _ns1__GetDBStringResponse::soap_dup(soap*) returns deep copy of _ns1__GetDBStringResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GetDBStringResponse::soap_del() deep deletes _ns1__GetDBStringResponse data members, use only after _ns1__GetDBStringResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__GetDBStringResponse
{ public:
/// Element "GetDBStringResult" of XSD type xs:string.
    char*                                GetDBStringResult              0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://zbxhupdata.com/webservices/":QueryData
/// @brief "http://zbxhupdata.com/webservices/":QueryData is a complexType.
///
/// class _ns1__QueryData operations:
/// - _ns1__QueryData* soap_new__ns1__QueryData(soap*) allocate and default initialize
/// - _ns1__QueryData* soap_new__ns1__QueryData(soap*, int num) allocate array and default initialize values
/// - _ns1__QueryData* soap_new_req__ns1__QueryData(soap*, ...) allocate, set required members
/// - _ns1__QueryData* soap_new_set__ns1__QueryData(soap*, ...) allocate, set all public members
/// - _ns1__QueryData::soap_default(soap*) default initialize members
/// - int soap_read__ns1__QueryData(soap*, _ns1__QueryData*) deserialize from a stream
/// - int soap_write__ns1__QueryData(soap*, _ns1__QueryData*) serialize to a stream
/// - _ns1__QueryData* _ns1__QueryData::soap_dup(soap*) returns deep copy of _ns1__QueryData, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__QueryData::soap_del() deep deletes _ns1__QueryData data members, use only after _ns1__QueryData::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__QueryData
{ public:
/// Element "sql" of XSD type xs:string.
    char*                                sql                            0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://zbxhupdata.com/webservices/":QueryDataResponse
/// @brief "http://zbxhupdata.com/webservices/":QueryDataResponse is a complexType.
///
/// class _ns1__QueryDataResponse operations:
/// - _ns1__QueryDataResponse* soap_new__ns1__QueryDataResponse(soap*) allocate and default initialize
/// - _ns1__QueryDataResponse* soap_new__ns1__QueryDataResponse(soap*, int num) allocate array and default initialize values
/// - _ns1__QueryDataResponse* soap_new_req__ns1__QueryDataResponse(soap*, ...) allocate, set required members
/// - _ns1__QueryDataResponse* soap_new_set__ns1__QueryDataResponse(soap*, ...) allocate, set all public members
/// - _ns1__QueryDataResponse::soap_default(soap*) default initialize members
/// - int soap_read__ns1__QueryDataResponse(soap*, _ns1__QueryDataResponse*) deserialize from a stream
/// - int soap_write__ns1__QueryDataResponse(soap*, _ns1__QueryDataResponse*) serialize to a stream
/// - _ns1__QueryDataResponse* _ns1__QueryDataResponse::soap_dup(soap*) returns deep copy of _ns1__QueryDataResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__QueryDataResponse::soap_del() deep deletes _ns1__QueryDataResponse data members, use only after _ns1__QueryDataResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__QueryDataResponse
{ public:
/// Element "QueryDataResult" of XSD type xs:string.
    char*                                QueryDataResult                0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://zbxhupdata.com/webservices/":QueryDataCount
/// @brief "http://zbxhupdata.com/webservices/":QueryDataCount is a complexType.
///
/// class _ns1__QueryDataCount operations:
/// - _ns1__QueryDataCount* soap_new__ns1__QueryDataCount(soap*) allocate and default initialize
/// - _ns1__QueryDataCount* soap_new__ns1__QueryDataCount(soap*, int num) allocate array and default initialize values
/// - _ns1__QueryDataCount* soap_new_req__ns1__QueryDataCount(soap*, ...) allocate, set required members
/// - _ns1__QueryDataCount* soap_new_set__ns1__QueryDataCount(soap*, ...) allocate, set all public members
/// - _ns1__QueryDataCount::soap_default(soap*) default initialize members
/// - int soap_read__ns1__QueryDataCount(soap*, _ns1__QueryDataCount*) deserialize from a stream
/// - int soap_write__ns1__QueryDataCount(soap*, _ns1__QueryDataCount*) serialize to a stream
/// - _ns1__QueryDataCount* _ns1__QueryDataCount::soap_dup(soap*) returns deep copy of _ns1__QueryDataCount, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__QueryDataCount::soap_del() deep deletes _ns1__QueryDataCount data members, use only after _ns1__QueryDataCount::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__QueryDataCount
{ public:
/// Element "sql" of XSD type xs:string.
    char*                                sql                            0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://zbxhupdata.com/webservices/":QueryDataCountResponse
/// @brief "http://zbxhupdata.com/webservices/":QueryDataCountResponse is a complexType.
///
/// class _ns1__QueryDataCountResponse operations:
/// - _ns1__QueryDataCountResponse* soap_new__ns1__QueryDataCountResponse(soap*) allocate and default initialize
/// - _ns1__QueryDataCountResponse* soap_new__ns1__QueryDataCountResponse(soap*, int num) allocate array and default initialize values
/// - _ns1__QueryDataCountResponse* soap_new_req__ns1__QueryDataCountResponse(soap*, ...) allocate, set required members
/// - _ns1__QueryDataCountResponse* soap_new_set__ns1__QueryDataCountResponse(soap*, ...) allocate, set all public members
/// - _ns1__QueryDataCountResponse::soap_default(soap*) default initialize members
/// - int soap_read__ns1__QueryDataCountResponse(soap*, _ns1__QueryDataCountResponse*) deserialize from a stream
/// - int soap_write__ns1__QueryDataCountResponse(soap*, _ns1__QueryDataCountResponse*) serialize to a stream
/// - _ns1__QueryDataCountResponse* _ns1__QueryDataCountResponse::soap_dup(soap*) returns deep copy of _ns1__QueryDataCountResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__QueryDataCountResponse::soap_del() deep deletes _ns1__QueryDataCountResponse data members, use only after _ns1__QueryDataCountResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__QueryDataCountResponse
{ public:
/// Element "QueryDataCountResult" of XSD type xs:int.
    int                                  QueryDataCountResult           1;	///< Required element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://zbxhupdata.com/webservices/":ExecuteSql
/// @brief "http://zbxhupdata.com/webservices/":ExecuteSql is a complexType.
///
/// class _ns1__ExecuteSql operations:
/// - _ns1__ExecuteSql* soap_new__ns1__ExecuteSql(soap*) allocate and default initialize
/// - _ns1__ExecuteSql* soap_new__ns1__ExecuteSql(soap*, int num) allocate array and default initialize values
/// - _ns1__ExecuteSql* soap_new_req__ns1__ExecuteSql(soap*, ...) allocate, set required members
/// - _ns1__ExecuteSql* soap_new_set__ns1__ExecuteSql(soap*, ...) allocate, set all public members
/// - _ns1__ExecuteSql::soap_default(soap*) default initialize members
/// - int soap_read__ns1__ExecuteSql(soap*, _ns1__ExecuteSql*) deserialize from a stream
/// - int soap_write__ns1__ExecuteSql(soap*, _ns1__ExecuteSql*) serialize to a stream
/// - _ns1__ExecuteSql* _ns1__ExecuteSql::soap_dup(soap*) returns deep copy of _ns1__ExecuteSql, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__ExecuteSql::soap_del() deep deletes _ns1__ExecuteSql data members, use only after _ns1__ExecuteSql::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__ExecuteSql
{ public:
/// Element "sql" of XSD type xs:string.
    char*                                sql                            0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://zbxhupdata.com/webservices/":ExecuteSqlResponse
/// @brief "http://zbxhupdata.com/webservices/":ExecuteSqlResponse is a complexType.
///
/// class _ns1__ExecuteSqlResponse operations:
/// - _ns1__ExecuteSqlResponse* soap_new__ns1__ExecuteSqlResponse(soap*) allocate and default initialize
/// - _ns1__ExecuteSqlResponse* soap_new__ns1__ExecuteSqlResponse(soap*, int num) allocate array and default initialize values
/// - _ns1__ExecuteSqlResponse* soap_new_req__ns1__ExecuteSqlResponse(soap*, ...) allocate, set required members
/// - _ns1__ExecuteSqlResponse* soap_new_set__ns1__ExecuteSqlResponse(soap*, ...) allocate, set all public members
/// - _ns1__ExecuteSqlResponse::soap_default(soap*) default initialize members
/// - int soap_read__ns1__ExecuteSqlResponse(soap*, _ns1__ExecuteSqlResponse*) deserialize from a stream
/// - int soap_write__ns1__ExecuteSqlResponse(soap*, _ns1__ExecuteSqlResponse*) serialize to a stream
/// - _ns1__ExecuteSqlResponse* _ns1__ExecuteSqlResponse::soap_dup(soap*) returns deep copy of _ns1__ExecuteSqlResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__ExecuteSqlResponse::soap_del() deep deletes _ns1__ExecuteSqlResponse data members, use only after _ns1__ExecuteSqlResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__ExecuteSqlResponse
{ public:
/// Element "ExecuteSqlResult" of XSD type xs:int.
    int                                  ExecuteSqlResult               1;	///< Required element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://zbxhupdata.com/webservices/":SaveData
/// @brief "http://zbxhupdata.com/webservices/":SaveData is a complexType.
///
/// class _ns1__SaveData operations:
/// - _ns1__SaveData* soap_new__ns1__SaveData(soap*) allocate and default initialize
/// - _ns1__SaveData* soap_new__ns1__SaveData(soap*, int num) allocate array and default initialize values
/// - _ns1__SaveData* soap_new_req__ns1__SaveData(soap*, ...) allocate, set required members
/// - _ns1__SaveData* soap_new_set__ns1__SaveData(soap*, ...) allocate, set all public members
/// - _ns1__SaveData::soap_default(soap*) default initialize members
/// - int soap_read__ns1__SaveData(soap*, _ns1__SaveData*) deserialize from a stream
/// - int soap_write__ns1__SaveData(soap*, _ns1__SaveData*) serialize to a stream
/// - _ns1__SaveData* _ns1__SaveData::soap_dup(soap*) returns deep copy of _ns1__SaveData, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__SaveData::soap_del() deep deletes _ns1__SaveData data members, use only after _ns1__SaveData::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__SaveData
{ public:
/// Element "xml" of XSD type xs:string.
    char*                                xml                            0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://zbxhupdata.com/webservices/":SaveDataResponse
/// @brief "http://zbxhupdata.com/webservices/":SaveDataResponse is a complexType.
///
/// class _ns1__SaveDataResponse operations:
/// - _ns1__SaveDataResponse* soap_new__ns1__SaveDataResponse(soap*) allocate and default initialize
/// - _ns1__SaveDataResponse* soap_new__ns1__SaveDataResponse(soap*, int num) allocate array and default initialize values
/// - _ns1__SaveDataResponse* soap_new_req__ns1__SaveDataResponse(soap*, ...) allocate, set required members
/// - _ns1__SaveDataResponse* soap_new_set__ns1__SaveDataResponse(soap*, ...) allocate, set all public members
/// - _ns1__SaveDataResponse::soap_default(soap*) default initialize members
/// - int soap_read__ns1__SaveDataResponse(soap*, _ns1__SaveDataResponse*) deserialize from a stream
/// - int soap_write__ns1__SaveDataResponse(soap*, _ns1__SaveDataResponse*) serialize to a stream
/// - _ns1__SaveDataResponse* _ns1__SaveDataResponse::soap_dup(soap*) returns deep copy of _ns1__SaveDataResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__SaveDataResponse::soap_del() deep deletes _ns1__SaveDataResponse data members, use only after _ns1__SaveDataResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__SaveDataResponse
{ public:
/// Element "SaveDataResult" of XSD type xs:string.
    char*                                SaveDataResult                 0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://zbxhupdata.com/webservices/":SaveFileData
/// @brief "http://zbxhupdata.com/webservices/":SaveFileData is a complexType.
///
/// class _ns1__SaveFileData operations:
/// - _ns1__SaveFileData* soap_new__ns1__SaveFileData(soap*) allocate and default initialize
/// - _ns1__SaveFileData* soap_new__ns1__SaveFileData(soap*, int num) allocate array and default initialize values
/// - _ns1__SaveFileData* soap_new_req__ns1__SaveFileData(soap*, ...) allocate, set required members
/// - _ns1__SaveFileData* soap_new_set__ns1__SaveFileData(soap*, ...) allocate, set all public members
/// - _ns1__SaveFileData::soap_default(soap*) default initialize members
/// - int soap_read__ns1__SaveFileData(soap*, _ns1__SaveFileData*) deserialize from a stream
/// - int soap_write__ns1__SaveFileData(soap*, _ns1__SaveFileData*) serialize to a stream
/// - _ns1__SaveFileData* _ns1__SaveFileData::soap_dup(soap*) returns deep copy of _ns1__SaveFileData, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__SaveFileData::soap_del() deep deletes _ns1__SaveFileData data members, use only after _ns1__SaveFileData::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__SaveFileData
{ public:
/// Element "xml" of XSD type xs:string.
    char*                                xml                            0;	///< Optional element.
/// Element "filename" of XSD type xs:string.
    char*                                filename                       0;	///< Optional element.
/// Element "pics" of XSD type xs:string.
    char*                                pics                           0;	///< Optional element.
/// Element "dwname" of XSD type xs:string.
    char*                                dwname                         0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://zbxhupdata.com/webservices/":SaveFileDataResponse
/// @brief "http://zbxhupdata.com/webservices/":SaveFileDataResponse is a complexType.
///
/// class _ns1__SaveFileDataResponse operations:
/// - _ns1__SaveFileDataResponse* soap_new__ns1__SaveFileDataResponse(soap*) allocate and default initialize
/// - _ns1__SaveFileDataResponse* soap_new__ns1__SaveFileDataResponse(soap*, int num) allocate array and default initialize values
/// - _ns1__SaveFileDataResponse* soap_new_req__ns1__SaveFileDataResponse(soap*, ...) allocate, set required members
/// - _ns1__SaveFileDataResponse* soap_new_set__ns1__SaveFileDataResponse(soap*, ...) allocate, set all public members
/// - _ns1__SaveFileDataResponse::soap_default(soap*) default initialize members
/// - int soap_read__ns1__SaveFileDataResponse(soap*, _ns1__SaveFileDataResponse*) deserialize from a stream
/// - int soap_write__ns1__SaveFileDataResponse(soap*, _ns1__SaveFileDataResponse*) serialize to a stream
/// - _ns1__SaveFileDataResponse* _ns1__SaveFileDataResponse::soap_dup(soap*) returns deep copy of _ns1__SaveFileDataResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__SaveFileDataResponse::soap_del() deep deletes _ns1__SaveFileDataResponse data members, use only after _ns1__SaveFileDataResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__SaveFileDataResponse
{ public:
/// Element "SaveFileDataResult" of XSD type xs:string.
    char*                                SaveFileDataResult             0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://zbxhupdata.com/webservices/":DownPic
/// @brief "http://zbxhupdata.com/webservices/":DownPic is a complexType.
///
/// class _ns1__DownPic operations:
/// - _ns1__DownPic* soap_new__ns1__DownPic(soap*) allocate and default initialize
/// - _ns1__DownPic* soap_new__ns1__DownPic(soap*, int num) allocate array and default initialize values
/// - _ns1__DownPic* soap_new_req__ns1__DownPic(soap*, ...) allocate, set required members
/// - _ns1__DownPic* soap_new_set__ns1__DownPic(soap*, ...) allocate, set all public members
/// - _ns1__DownPic::soap_default(soap*) default initialize members
/// - int soap_read__ns1__DownPic(soap*, _ns1__DownPic*) deserialize from a stream
/// - int soap_write__ns1__DownPic(soap*, _ns1__DownPic*) serialize to a stream
/// - _ns1__DownPic* _ns1__DownPic::soap_dup(soap*) returns deep copy of _ns1__DownPic, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__DownPic::soap_del() deep deletes _ns1__DownPic data members, use only after _ns1__DownPic::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__DownPic
{ public:
/// Element "guid" of XSD type xs:string.
    char*                                guid                           0;	///< Optional element.
/// Element "dwname" of XSD type xs:string.
    char*                                dwname                         0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://zbxhupdata.com/webservices/":DownPicResponse
/// @brief "http://zbxhupdata.com/webservices/":DownPicResponse is a complexType.
///
/// class _ns1__DownPicResponse operations:
/// - _ns1__DownPicResponse* soap_new__ns1__DownPicResponse(soap*) allocate and default initialize
/// - _ns1__DownPicResponse* soap_new__ns1__DownPicResponse(soap*, int num) allocate array and default initialize values
/// - _ns1__DownPicResponse* soap_new_req__ns1__DownPicResponse(soap*, ...) allocate, set required members
/// - _ns1__DownPicResponse* soap_new_set__ns1__DownPicResponse(soap*, ...) allocate, set all public members
/// - _ns1__DownPicResponse::soap_default(soap*) default initialize members
/// - int soap_read__ns1__DownPicResponse(soap*, _ns1__DownPicResponse*) deserialize from a stream
/// - int soap_write__ns1__DownPicResponse(soap*, _ns1__DownPicResponse*) serialize to a stream
/// - _ns1__DownPicResponse* _ns1__DownPicResponse::soap_dup(soap*) returns deep copy of _ns1__DownPicResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__DownPicResponse::soap_del() deep deletes _ns1__DownPicResponse data members, use only after _ns1__DownPicResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__DownPicResponse
{ public:
/// Element "DownPicResult" of XSD type xs:string.
    char*                                DownPicResult                  0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://zbxhupdata.com/webservices/":DownAllPic
/// @brief "http://zbxhupdata.com/webservices/":DownAllPic is a complexType.
///
/// class _ns1__DownAllPic operations:
/// - _ns1__DownAllPic* soap_new__ns1__DownAllPic(soap*) allocate and default initialize
/// - _ns1__DownAllPic* soap_new__ns1__DownAllPic(soap*, int num) allocate array and default initialize values
/// - _ns1__DownAllPic* soap_new_req__ns1__DownAllPic(soap*, ...) allocate, set required members
/// - _ns1__DownAllPic* soap_new_set__ns1__DownAllPic(soap*, ...) allocate, set all public members
/// - _ns1__DownAllPic::soap_default(soap*) default initialize members
/// - int soap_read__ns1__DownAllPic(soap*, _ns1__DownAllPic*) deserialize from a stream
/// - int soap_write__ns1__DownAllPic(soap*, _ns1__DownAllPic*) serialize to a stream
/// - _ns1__DownAllPic* _ns1__DownAllPic::soap_dup(soap*) returns deep copy of _ns1__DownAllPic, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__DownAllPic::soap_del() deep deletes _ns1__DownAllPic data members, use only after _ns1__DownAllPic::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__DownAllPic
{ public:
/// Element "dwname" of XSD type xs:string.
    char*                                dwname                         0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://zbxhupdata.com/webservices/":DownAllPicResponse
/// @brief "http://zbxhupdata.com/webservices/":DownAllPicResponse is a complexType.
///
/// class _ns1__DownAllPicResponse operations:
/// - _ns1__DownAllPicResponse* soap_new__ns1__DownAllPicResponse(soap*) allocate and default initialize
/// - _ns1__DownAllPicResponse* soap_new__ns1__DownAllPicResponse(soap*, int num) allocate array and default initialize values
/// - _ns1__DownAllPicResponse* soap_new_req__ns1__DownAllPicResponse(soap*, ...) allocate, set required members
/// - _ns1__DownAllPicResponse* soap_new_set__ns1__DownAllPicResponse(soap*, ...) allocate, set all public members
/// - _ns1__DownAllPicResponse::soap_default(soap*) default initialize members
/// - int soap_read__ns1__DownAllPicResponse(soap*, _ns1__DownAllPicResponse*) deserialize from a stream
/// - int soap_write__ns1__DownAllPicResponse(soap*, _ns1__DownAllPicResponse*) serialize to a stream
/// - _ns1__DownAllPicResponse* _ns1__DownAllPicResponse::soap_dup(soap*) returns deep copy of _ns1__DownAllPicResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__DownAllPicResponse::soap_del() deep deletes _ns1__DownAllPicResponse data members, use only after _ns1__DownAllPicResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__DownAllPicResponse
{ public:
/// Element "DownAllPicResult" of XSD type xs:int.
    int                                  DownAllPicResult               1;	///< Required element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://zbxhupdata.com/webservices/":GetGxdataUpTime
/// @brief "http://zbxhupdata.com/webservices/":GetGxdataUpTime is a complexType.
///
/// class _ns1__GetGxdataUpTime operations:
/// - _ns1__GetGxdataUpTime* soap_new__ns1__GetGxdataUpTime(soap*) allocate and default initialize
/// - _ns1__GetGxdataUpTime* soap_new__ns1__GetGxdataUpTime(soap*, int num) allocate array and default initialize values
/// - _ns1__GetGxdataUpTime* soap_new_req__ns1__GetGxdataUpTime(soap*, ...) allocate, set required members
/// - _ns1__GetGxdataUpTime* soap_new_set__ns1__GetGxdataUpTime(soap*, ...) allocate, set all public members
/// - _ns1__GetGxdataUpTime::soap_default(soap*) default initialize members
/// - int soap_read__ns1__GetGxdataUpTime(soap*, _ns1__GetGxdataUpTime*) deserialize from a stream
/// - int soap_write__ns1__GetGxdataUpTime(soap*, _ns1__GetGxdataUpTime*) serialize to a stream
/// - _ns1__GetGxdataUpTime* _ns1__GetGxdataUpTime::soap_dup(soap*) returns deep copy of _ns1__GetGxdataUpTime, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GetGxdataUpTime::soap_del() deep deletes _ns1__GetGxdataUpTime data members, use only after _ns1__GetGxdataUpTime::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__GetGxdataUpTime
{ public:
/// Element "unitname" of XSD type xs:string.
    char*                                unitname                       0;	///< Optional element.
/// Element "unitlevel" of XSD type xs:string.
    char*                                unitlevel                      0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://zbxhupdata.com/webservices/":GetGxdataUpTimeResponse
/// @brief "http://zbxhupdata.com/webservices/":GetGxdataUpTimeResponse is a complexType.
///
/// class _ns1__GetGxdataUpTimeResponse operations:
/// - _ns1__GetGxdataUpTimeResponse* soap_new__ns1__GetGxdataUpTimeResponse(soap*) allocate and default initialize
/// - _ns1__GetGxdataUpTimeResponse* soap_new__ns1__GetGxdataUpTimeResponse(soap*, int num) allocate array and default initialize values
/// - _ns1__GetGxdataUpTimeResponse* soap_new_req__ns1__GetGxdataUpTimeResponse(soap*, ...) allocate, set required members
/// - _ns1__GetGxdataUpTimeResponse* soap_new_set__ns1__GetGxdataUpTimeResponse(soap*, ...) allocate, set all public members
/// - _ns1__GetGxdataUpTimeResponse::soap_default(soap*) default initialize members
/// - int soap_read__ns1__GetGxdataUpTimeResponse(soap*, _ns1__GetGxdataUpTimeResponse*) deserialize from a stream
/// - int soap_write__ns1__GetGxdataUpTimeResponse(soap*, _ns1__GetGxdataUpTimeResponse*) serialize to a stream
/// - _ns1__GetGxdataUpTimeResponse* _ns1__GetGxdataUpTimeResponse::soap_dup(soap*) returns deep copy of _ns1__GetGxdataUpTimeResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GetGxdataUpTimeResponse::soap_del() deep deletes _ns1__GetGxdataUpTimeResponse data members, use only after _ns1__GetGxdataUpTimeResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__GetGxdataUpTimeResponse
{ public:
/// Element "GetGxdataUpTimeResult" of XSD type xs:string.
    char*                                GetGxdataUpTimeResult          0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://zbxhupdata.com/webservices/":signedUserInfo
/// @brief "http://zbxhupdata.com/webservices/":signedUserInfo is a complexType.
///
/// class _ns1__signedUserInfo operations:
/// - _ns1__signedUserInfo* soap_new__ns1__signedUserInfo(soap*) allocate and default initialize
/// - _ns1__signedUserInfo* soap_new__ns1__signedUserInfo(soap*, int num) allocate array and default initialize values
/// - _ns1__signedUserInfo* soap_new_req__ns1__signedUserInfo(soap*, ...) allocate, set required members
/// - _ns1__signedUserInfo* soap_new_set__ns1__signedUserInfo(soap*, ...) allocate, set all public members
/// - _ns1__signedUserInfo::soap_default(soap*) default initialize members
/// - int soap_read__ns1__signedUserInfo(soap*, _ns1__signedUserInfo*) deserialize from a stream
/// - int soap_write__ns1__signedUserInfo(soap*, _ns1__signedUserInfo*) serialize to a stream
/// - _ns1__signedUserInfo* _ns1__signedUserInfo::soap_dup(soap*) returns deep copy of _ns1__signedUserInfo, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__signedUserInfo::soap_del() deep deletes _ns1__signedUserInfo data members, use only after _ns1__signedUserInfo::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__signedUserInfo
{ public:
/// Element "personid" of XSD type xs:string.
    char*                                personid                       0;	///< Optional element.
/// Element "personname" of XSD type xs:string.
    char*                                personname                     0;	///< Optional element.
/// Element "password" of XSD type xs:string.
    char*                                password                       0;	///< Optional element.
/// Element "phonenum" of XSD type xs:string.
    char*                                phonenum                       0;	///< Optional element.
/// Element "publishtime" of XSD type xs:string.
    char*                                publishtime                    0;	///< Optional element.
/// Element "publishver" of XSD type xs:string.
    char*                                publishver                     0;	///< Optional element.
/// Element "dwname" of XSD type xs:string.
    char*                                dwname                         0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://zbxhupdata.com/webservices/":signedUserInfoResponse
/// @brief "http://zbxhupdata.com/webservices/":signedUserInfoResponse is a complexType.
///
/// class _ns1__signedUserInfoResponse operations:
/// - _ns1__signedUserInfoResponse* soap_new__ns1__signedUserInfoResponse(soap*) allocate and default initialize
/// - _ns1__signedUserInfoResponse* soap_new__ns1__signedUserInfoResponse(soap*, int num) allocate array and default initialize values
/// - _ns1__signedUserInfoResponse* soap_new_req__ns1__signedUserInfoResponse(soap*, ...) allocate, set required members
/// - _ns1__signedUserInfoResponse* soap_new_set__ns1__signedUserInfoResponse(soap*, ...) allocate, set all public members
/// - _ns1__signedUserInfoResponse::soap_default(soap*) default initialize members
/// - int soap_read__ns1__signedUserInfoResponse(soap*, _ns1__signedUserInfoResponse*) deserialize from a stream
/// - int soap_write__ns1__signedUserInfoResponse(soap*, _ns1__signedUserInfoResponse*) serialize to a stream
/// - _ns1__signedUserInfoResponse* _ns1__signedUserInfoResponse::soap_dup(soap*) returns deep copy of _ns1__signedUserInfoResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__signedUserInfoResponse::soap_del() deep deletes _ns1__signedUserInfoResponse data members, use only after _ns1__signedUserInfoResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__signedUserInfoResponse
{ public:
/// Element "signedUserInfoResult" of XSD type xs:int.
    int                                  signedUserInfoResult           1;	///< Required element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://zbxhupdata.com/webservices/":GetOsDateTime
/// @brief "http://zbxhupdata.com/webservices/":GetOsDateTime is a complexType.
///
/// class _ns1__GetOsDateTime operations:
/// - _ns1__GetOsDateTime* soap_new__ns1__GetOsDateTime(soap*) allocate and default initialize
/// - _ns1__GetOsDateTime* soap_new__ns1__GetOsDateTime(soap*, int num) allocate array and default initialize values
/// - _ns1__GetOsDateTime* soap_new_req__ns1__GetOsDateTime(soap*, ...) allocate, set required members
/// - _ns1__GetOsDateTime* soap_new_set__ns1__GetOsDateTime(soap*, ...) allocate, set all public members
/// - _ns1__GetOsDateTime::soap_default(soap*) default initialize members
/// - int soap_read__ns1__GetOsDateTime(soap*, _ns1__GetOsDateTime*) deserialize from a stream
/// - int soap_write__ns1__GetOsDateTime(soap*, _ns1__GetOsDateTime*) serialize to a stream
/// - _ns1__GetOsDateTime* _ns1__GetOsDateTime::soap_dup(soap*) returns deep copy of _ns1__GetOsDateTime, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GetOsDateTime::soap_del() deep deletes _ns1__GetOsDateTime data members, use only after _ns1__GetOsDateTime::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__GetOsDateTime
{ public:
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://zbxhupdata.com/webservices/":GetOsDateTimeResponse
/// @brief "http://zbxhupdata.com/webservices/":GetOsDateTimeResponse is a complexType.
///
/// class _ns1__GetOsDateTimeResponse operations:
/// - _ns1__GetOsDateTimeResponse* soap_new__ns1__GetOsDateTimeResponse(soap*) allocate and default initialize
/// - _ns1__GetOsDateTimeResponse* soap_new__ns1__GetOsDateTimeResponse(soap*, int num) allocate array and default initialize values
/// - _ns1__GetOsDateTimeResponse* soap_new_req__ns1__GetOsDateTimeResponse(soap*, ...) allocate, set required members
/// - _ns1__GetOsDateTimeResponse* soap_new_set__ns1__GetOsDateTimeResponse(soap*, ...) allocate, set all public members
/// - _ns1__GetOsDateTimeResponse::soap_default(soap*) default initialize members
/// - int soap_read__ns1__GetOsDateTimeResponse(soap*, _ns1__GetOsDateTimeResponse*) deserialize from a stream
/// - int soap_write__ns1__GetOsDateTimeResponse(soap*, _ns1__GetOsDateTimeResponse*) serialize to a stream
/// - _ns1__GetOsDateTimeResponse* _ns1__GetOsDateTimeResponse::soap_dup(soap*) returns deep copy of _ns1__GetOsDateTimeResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GetOsDateTimeResponse::soap_del() deep deletes _ns1__GetOsDateTimeResponse data members, use only after _ns1__GetOsDateTimeResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__GetOsDateTimeResponse
{ public:
/// Element "GetOsDateTimeResult" of XSD type xs:string.
    char*                                GetOsDateTimeResult            0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://zbxhupdata.com/webservices/":QueryPhotobw
/// @brief "http://zbxhupdata.com/webservices/":QueryPhotobw is a complexType.
///
/// class _ns1__QueryPhotobw operations:
/// - _ns1__QueryPhotobw* soap_new__ns1__QueryPhotobw(soap*) allocate and default initialize
/// - _ns1__QueryPhotobw* soap_new__ns1__QueryPhotobw(soap*, int num) allocate array and default initialize values
/// - _ns1__QueryPhotobw* soap_new_req__ns1__QueryPhotobw(soap*, ...) allocate, set required members
/// - _ns1__QueryPhotobw* soap_new_set__ns1__QueryPhotobw(soap*, ...) allocate, set all public members
/// - _ns1__QueryPhotobw::soap_default(soap*) default initialize members
/// - int soap_read__ns1__QueryPhotobw(soap*, _ns1__QueryPhotobw*) deserialize from a stream
/// - int soap_write__ns1__QueryPhotobw(soap*, _ns1__QueryPhotobw*) serialize to a stream
/// - _ns1__QueryPhotobw* _ns1__QueryPhotobw::soap_dup(soap*) returns deep copy of _ns1__QueryPhotobw, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__QueryPhotobw::soap_del() deep deletes _ns1__QueryPhotobw data members, use only after _ns1__QueryPhotobw::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__QueryPhotobw
{ public:
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://zbxhupdata.com/webservices/":QueryPhotobwResponse
/// @brief "http://zbxhupdata.com/webservices/":QueryPhotobwResponse is a complexType.
///
/// class _ns1__QueryPhotobwResponse operations:
/// - _ns1__QueryPhotobwResponse* soap_new__ns1__QueryPhotobwResponse(soap*) allocate and default initialize
/// - _ns1__QueryPhotobwResponse* soap_new__ns1__QueryPhotobwResponse(soap*, int num) allocate array and default initialize values
/// - _ns1__QueryPhotobwResponse* soap_new_req__ns1__QueryPhotobwResponse(soap*, ...) allocate, set required members
/// - _ns1__QueryPhotobwResponse* soap_new_set__ns1__QueryPhotobwResponse(soap*, ...) allocate, set all public members
/// - _ns1__QueryPhotobwResponse::soap_default(soap*) default initialize members
/// - int soap_read__ns1__QueryPhotobwResponse(soap*, _ns1__QueryPhotobwResponse*) deserialize from a stream
/// - int soap_write__ns1__QueryPhotobwResponse(soap*, _ns1__QueryPhotobwResponse*) serialize to a stream
/// - _ns1__QueryPhotobwResponse* _ns1__QueryPhotobwResponse::soap_dup(soap*) returns deep copy of _ns1__QueryPhotobwResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__QueryPhotobwResponse::soap_del() deep deletes _ns1__QueryPhotobwResponse data members, use only after _ns1__QueryPhotobwResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__QueryPhotobwResponse
{ public:
/// Element "QueryPhotobwResult" of XSD type xs:string.
    char*                                QueryPhotobwResult             0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://zbxhupdata.com/webservices/":TcdQuery
/// @brief "http://zbxhupdata.com/webservices/":TcdQuery is a complexType.
///
/// class _ns1__TcdQuery operations:
/// - _ns1__TcdQuery* soap_new__ns1__TcdQuery(soap*) allocate and default initialize
/// - _ns1__TcdQuery* soap_new__ns1__TcdQuery(soap*, int num) allocate array and default initialize values
/// - _ns1__TcdQuery* soap_new_req__ns1__TcdQuery(soap*, ...) allocate, set required members
/// - _ns1__TcdQuery* soap_new_set__ns1__TcdQuery(soap*, ...) allocate, set all public members
/// - _ns1__TcdQuery::soap_default(soap*) default initialize members
/// - int soap_read__ns1__TcdQuery(soap*, _ns1__TcdQuery*) deserialize from a stream
/// - int soap_write__ns1__TcdQuery(soap*, _ns1__TcdQuery*) serialize to a stream
/// - _ns1__TcdQuery* _ns1__TcdQuery::soap_dup(soap*) returns deep copy of _ns1__TcdQuery, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__TcdQuery::soap_del() deep deletes _ns1__TcdQuery data members, use only after _ns1__TcdQuery::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__TcdQuery
{ public:
/// Element "xb" of XSD type xs:string.
    char*                                xb                             0;	///< Optional element.
/// Element "station" of XSD type xs:string.
    char*                                station                        0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://zbxhupdata.com/webservices/":TcdQueryResponse
/// @brief "http://zbxhupdata.com/webservices/":TcdQueryResponse is a complexType.
///
/// class _ns1__TcdQueryResponse operations:
/// - _ns1__TcdQueryResponse* soap_new__ns1__TcdQueryResponse(soap*) allocate and default initialize
/// - _ns1__TcdQueryResponse* soap_new__ns1__TcdQueryResponse(soap*, int num) allocate array and default initialize values
/// - _ns1__TcdQueryResponse* soap_new_req__ns1__TcdQueryResponse(soap*, ...) allocate, set required members
/// - _ns1__TcdQueryResponse* soap_new_set__ns1__TcdQueryResponse(soap*, ...) allocate, set all public members
/// - _ns1__TcdQueryResponse::soap_default(soap*) default initialize members
/// - int soap_read__ns1__TcdQueryResponse(soap*, _ns1__TcdQueryResponse*) deserialize from a stream
/// - int soap_write__ns1__TcdQueryResponse(soap*, _ns1__TcdQueryResponse*) serialize to a stream
/// - _ns1__TcdQueryResponse* _ns1__TcdQueryResponse::soap_dup(soap*) returns deep copy of _ns1__TcdQueryResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__TcdQueryResponse::soap_del() deep deletes _ns1__TcdQueryResponse data members, use only after _ns1__TcdQueryResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__TcdQueryResponse
{ public:
/// Element "TcdQueryResult" of XSD type xs:string.
    char*                                TcdQueryResult                 0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://zbxhupdata.com/webservices/":TcdSendup
/// @brief "http://zbxhupdata.com/webservices/":TcdSendup is a complexType.
///
/// class _ns1__TcdSendup operations:
/// - _ns1__TcdSendup* soap_new__ns1__TcdSendup(soap*) allocate and default initialize
/// - _ns1__TcdSendup* soap_new__ns1__TcdSendup(soap*, int num) allocate array and default initialize values
/// - _ns1__TcdSendup* soap_new_req__ns1__TcdSendup(soap*, ...) allocate, set required members
/// - _ns1__TcdSendup* soap_new_set__ns1__TcdSendup(soap*, ...) allocate, set all public members
/// - _ns1__TcdSendup::soap_default(soap*) default initialize members
/// - int soap_read__ns1__TcdSendup(soap*, _ns1__TcdSendup*) deserialize from a stream
/// - int soap_write__ns1__TcdSendup(soap*, _ns1__TcdSendup*) serialize to a stream
/// - _ns1__TcdSendup* _ns1__TcdSendup::soap_dup(soap*) returns deep copy of _ns1__TcdSendup, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__TcdSendup::soap_del() deep deletes _ns1__TcdSendup data members, use only after _ns1__TcdSendup::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__TcdSendup
{ public:
/// Element "guid" of XSD type xs:string.
    char*                                guid                           0;	///< Optional element.
/// Element "tctype" of XSD type xs:string.
    char*                                tctype                         0;	///< Optional element.
/// Element "date" of XSD type xs:string.
    char*                                date                           0;	///< Optional element.
/// Element "personnum" of XSD type xs:string.
    char*                                personnum                      0;	///< Optional element.
/// Element "time1" of XSD type xs:string.
    char*                                time1                          0;	///< Optional element.
/// Element "time2" of XSD type xs:string.
    char*                                time2                          0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://zbxhupdata.com/webservices/":TcdSendupResponse
/// @brief "http://zbxhupdata.com/webservices/":TcdSendupResponse is a complexType.
///
/// class _ns1__TcdSendupResponse operations:
/// - _ns1__TcdSendupResponse* soap_new__ns1__TcdSendupResponse(soap*) allocate and default initialize
/// - _ns1__TcdSendupResponse* soap_new__ns1__TcdSendupResponse(soap*, int num) allocate array and default initialize values
/// - _ns1__TcdSendupResponse* soap_new_req__ns1__TcdSendupResponse(soap*, ...) allocate, set required members
/// - _ns1__TcdSendupResponse* soap_new_set__ns1__TcdSendupResponse(soap*, ...) allocate, set all public members
/// - _ns1__TcdSendupResponse::soap_default(soap*) default initialize members
/// - int soap_read__ns1__TcdSendupResponse(soap*, _ns1__TcdSendupResponse*) deserialize from a stream
/// - int soap_write__ns1__TcdSendupResponse(soap*, _ns1__TcdSendupResponse*) serialize to a stream
/// - _ns1__TcdSendupResponse* _ns1__TcdSendupResponse::soap_dup(soap*) returns deep copy of _ns1__TcdSendupResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__TcdSendupResponse::soap_del() deep deletes _ns1__TcdSendupResponse data members, use only after _ns1__TcdSendupResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__TcdSendupResponse
{ public:
/// Element "TcdSendupResult" of XSD type xs:int.
    int                                  TcdSendupResult                1;	///< Required element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://zbxhupdata.com/webservices/":UpLoadData
/// @brief "http://zbxhupdata.com/webservices/":UpLoadData is a complexType.
///
/// class _ns1__UpLoadData operations:
/// - _ns1__UpLoadData* soap_new__ns1__UpLoadData(soap*) allocate and default initialize
/// - _ns1__UpLoadData* soap_new__ns1__UpLoadData(soap*, int num) allocate array and default initialize values
/// - _ns1__UpLoadData* soap_new_req__ns1__UpLoadData(soap*, ...) allocate, set required members
/// - _ns1__UpLoadData* soap_new_set__ns1__UpLoadData(soap*, ...) allocate, set all public members
/// - _ns1__UpLoadData::soap_default(soap*) default initialize members
/// - int soap_read__ns1__UpLoadData(soap*, _ns1__UpLoadData*) deserialize from a stream
/// - int soap_write__ns1__UpLoadData(soap*, _ns1__UpLoadData*) serialize to a stream
/// - _ns1__UpLoadData* _ns1__UpLoadData::soap_dup(soap*) returns deep copy of _ns1__UpLoadData, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__UpLoadData::soap_del() deep deletes _ns1__UpLoadData data members, use only after _ns1__UpLoadData::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__UpLoadData
{ public:
/// Element "sql" of XSD type xs:string.
    char*                                sql                            0;	///< Optional element.
/// Element "file" of XSD type xs:string.
    char*                                file                           0;	///< Optional element.
/// Element "filename" of XSD type xs:string.
    char*                                filename                       0;	///< Optional element.
/// Element "dwname" of XSD type xs:string.
    char*                                dwname                         0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://zbxhupdata.com/webservices/":UpLoadDataResponse
/// @brief "http://zbxhupdata.com/webservices/":UpLoadDataResponse is a complexType.
///
/// class _ns1__UpLoadDataResponse operations:
/// - _ns1__UpLoadDataResponse* soap_new__ns1__UpLoadDataResponse(soap*) allocate and default initialize
/// - _ns1__UpLoadDataResponse* soap_new__ns1__UpLoadDataResponse(soap*, int num) allocate array and default initialize values
/// - _ns1__UpLoadDataResponse* soap_new_req__ns1__UpLoadDataResponse(soap*, ...) allocate, set required members
/// - _ns1__UpLoadDataResponse* soap_new_set__ns1__UpLoadDataResponse(soap*, ...) allocate, set all public members
/// - _ns1__UpLoadDataResponse::soap_default(soap*) default initialize members
/// - int soap_read__ns1__UpLoadDataResponse(soap*, _ns1__UpLoadDataResponse*) deserialize from a stream
/// - int soap_write__ns1__UpLoadDataResponse(soap*, _ns1__UpLoadDataResponse*) serialize to a stream
/// - _ns1__UpLoadDataResponse* _ns1__UpLoadDataResponse::soap_dup(soap*) returns deep copy of _ns1__UpLoadDataResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__UpLoadDataResponse::soap_del() deep deletes _ns1__UpLoadDataResponse data members, use only after _ns1__UpLoadDataResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__UpLoadDataResponse
{ public:
/// Element "UpLoadDataResult" of XSD type xs:string.
    char*                                UpLoadDataResult               0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://zbxhupdata.com/webservices/":ExecuteSqlForColb
/// @brief "http://zbxhupdata.com/webservices/":ExecuteSqlForColb is a complexType.
///
/// class _ns1__ExecuteSqlForColb operations:
/// - _ns1__ExecuteSqlForColb* soap_new__ns1__ExecuteSqlForColb(soap*) allocate and default initialize
/// - _ns1__ExecuteSqlForColb* soap_new__ns1__ExecuteSqlForColb(soap*, int num) allocate array and default initialize values
/// - _ns1__ExecuteSqlForColb* soap_new_req__ns1__ExecuteSqlForColb(soap*, ...) allocate, set required members
/// - _ns1__ExecuteSqlForColb* soap_new_set__ns1__ExecuteSqlForColb(soap*, ...) allocate, set all public members
/// - _ns1__ExecuteSqlForColb::soap_default(soap*) default initialize members
/// - int soap_read__ns1__ExecuteSqlForColb(soap*, _ns1__ExecuteSqlForColb*) deserialize from a stream
/// - int soap_write__ns1__ExecuteSqlForColb(soap*, _ns1__ExecuteSqlForColb*) serialize to a stream
/// - _ns1__ExecuteSqlForColb* _ns1__ExecuteSqlForColb::soap_dup(soap*) returns deep copy of _ns1__ExecuteSqlForColb, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__ExecuteSqlForColb::soap_del() deep deletes _ns1__ExecuteSqlForColb data members, use only after _ns1__ExecuteSqlForColb::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__ExecuteSqlForColb
{ public:
/// Element "sql" of XSD type xs:string.
    char*                                sql                            0;	///< Optional element.
/// Element "sqlParName" of XSD type xs:string.
    char*                                sqlParName                     0;	///< Optional element.
/// Element "fieldValue" of XSD type xs:string.
    char*                                fieldValue                     0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://zbxhupdata.com/webservices/":ExecuteSqlForColbResponse
/// @brief "http://zbxhupdata.com/webservices/":ExecuteSqlForColbResponse is a complexType.
///
/// class _ns1__ExecuteSqlForColbResponse operations:
/// - _ns1__ExecuteSqlForColbResponse* soap_new__ns1__ExecuteSqlForColbResponse(soap*) allocate and default initialize
/// - _ns1__ExecuteSqlForColbResponse* soap_new__ns1__ExecuteSqlForColbResponse(soap*, int num) allocate array and default initialize values
/// - _ns1__ExecuteSqlForColbResponse* soap_new_req__ns1__ExecuteSqlForColbResponse(soap*, ...) allocate, set required members
/// - _ns1__ExecuteSqlForColbResponse* soap_new_set__ns1__ExecuteSqlForColbResponse(soap*, ...) allocate, set all public members
/// - _ns1__ExecuteSqlForColbResponse::soap_default(soap*) default initialize members
/// - int soap_read__ns1__ExecuteSqlForColbResponse(soap*, _ns1__ExecuteSqlForColbResponse*) deserialize from a stream
/// - int soap_write__ns1__ExecuteSqlForColbResponse(soap*, _ns1__ExecuteSqlForColbResponse*) serialize to a stream
/// - _ns1__ExecuteSqlForColbResponse* _ns1__ExecuteSqlForColbResponse::soap_dup(soap*) returns deep copy of _ns1__ExecuteSqlForColbResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__ExecuteSqlForColbResponse::soap_del() deep deletes _ns1__ExecuteSqlForColbResponse data members, use only after _ns1__ExecuteSqlForColbResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__ExecuteSqlForColbResponse
{ public:
/// Element "ExecuteSqlForColbResult" of XSD type xs:int.
    int                                  ExecuteSqlForColbResult        1;	///< Required element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://zbxhupdata.com/webservices/":GetXHYDGLXTupdater
/// @brief "http://zbxhupdata.com/webservices/":GetXHYDGLXTupdater is a complexType.
///
/// class _ns1__GetXHYDGLXTupdater operations:
/// - _ns1__GetXHYDGLXTupdater* soap_new__ns1__GetXHYDGLXTupdater(soap*) allocate and default initialize
/// - _ns1__GetXHYDGLXTupdater* soap_new__ns1__GetXHYDGLXTupdater(soap*, int num) allocate array and default initialize values
/// - _ns1__GetXHYDGLXTupdater* soap_new_req__ns1__GetXHYDGLXTupdater(soap*, ...) allocate, set required members
/// - _ns1__GetXHYDGLXTupdater* soap_new_set__ns1__GetXHYDGLXTupdater(soap*, ...) allocate, set all public members
/// - _ns1__GetXHYDGLXTupdater::soap_default(soap*) default initialize members
/// - int soap_read__ns1__GetXHYDGLXTupdater(soap*, _ns1__GetXHYDGLXTupdater*) deserialize from a stream
/// - int soap_write__ns1__GetXHYDGLXTupdater(soap*, _ns1__GetXHYDGLXTupdater*) serialize to a stream
/// - _ns1__GetXHYDGLXTupdater* _ns1__GetXHYDGLXTupdater::soap_dup(soap*) returns deep copy of _ns1__GetXHYDGLXTupdater, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GetXHYDGLXTupdater::soap_del() deep deletes _ns1__GetXHYDGLXTupdater data members, use only after _ns1__GetXHYDGLXTupdater::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__GetXHYDGLXTupdater
{ public:
/// Element "localver" of XSD type xs:string.
    char*                                localver                       0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://zbxhupdata.com/webservices/":GetXHYDGLXTupdaterResponse
/// @brief "http://zbxhupdata.com/webservices/":GetXHYDGLXTupdaterResponse is a complexType.
///
/// class _ns1__GetXHYDGLXTupdaterResponse operations:
/// - _ns1__GetXHYDGLXTupdaterResponse* soap_new__ns1__GetXHYDGLXTupdaterResponse(soap*) allocate and default initialize
/// - _ns1__GetXHYDGLXTupdaterResponse* soap_new__ns1__GetXHYDGLXTupdaterResponse(soap*, int num) allocate array and default initialize values
/// - _ns1__GetXHYDGLXTupdaterResponse* soap_new_req__ns1__GetXHYDGLXTupdaterResponse(soap*, ...) allocate, set required members
/// - _ns1__GetXHYDGLXTupdaterResponse* soap_new_set__ns1__GetXHYDGLXTupdaterResponse(soap*, ...) allocate, set all public members
/// - _ns1__GetXHYDGLXTupdaterResponse::soap_default(soap*) default initialize members
/// - int soap_read__ns1__GetXHYDGLXTupdaterResponse(soap*, _ns1__GetXHYDGLXTupdaterResponse*) deserialize from a stream
/// - int soap_write__ns1__GetXHYDGLXTupdaterResponse(soap*, _ns1__GetXHYDGLXTupdaterResponse*) serialize to a stream
/// - _ns1__GetXHYDGLXTupdaterResponse* _ns1__GetXHYDGLXTupdaterResponse::soap_dup(soap*) returns deep copy of _ns1__GetXHYDGLXTupdaterResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GetXHYDGLXTupdaterResponse::soap_del() deep deletes _ns1__GetXHYDGLXTupdaterResponse data members, use only after _ns1__GetXHYDGLXTupdaterResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__GetXHYDGLXTupdaterResponse
{ public:
/// Element "GetXHYDGLXTupdaterResult" of XSD type xs:string.
    char*                                GetXHYDGLXTupdaterResult       0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://zbxhupdata.com/webservices/":GetAPVupdater
/// @brief "http://zbxhupdata.com/webservices/":GetAPVupdater is a complexType.
///
/// class _ns1__GetAPVupdater operations:
/// - _ns1__GetAPVupdater* soap_new__ns1__GetAPVupdater(soap*) allocate and default initialize
/// - _ns1__GetAPVupdater* soap_new__ns1__GetAPVupdater(soap*, int num) allocate array and default initialize values
/// - _ns1__GetAPVupdater* soap_new_req__ns1__GetAPVupdater(soap*, ...) allocate, set required members
/// - _ns1__GetAPVupdater* soap_new_set__ns1__GetAPVupdater(soap*, ...) allocate, set all public members
/// - _ns1__GetAPVupdater::soap_default(soap*) default initialize members
/// - int soap_read__ns1__GetAPVupdater(soap*, _ns1__GetAPVupdater*) deserialize from a stream
/// - int soap_write__ns1__GetAPVupdater(soap*, _ns1__GetAPVupdater*) serialize to a stream
/// - _ns1__GetAPVupdater* _ns1__GetAPVupdater::soap_dup(soap*) returns deep copy of _ns1__GetAPVupdater, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GetAPVupdater::soap_del() deep deletes _ns1__GetAPVupdater data members, use only after _ns1__GetAPVupdater::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__GetAPVupdater
{ public:
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://zbxhupdata.com/webservices/":GetAPVupdaterResponse
/// @brief "http://zbxhupdata.com/webservices/":GetAPVupdaterResponse is a complexType.
///
/// class _ns1__GetAPVupdaterResponse operations:
/// - _ns1__GetAPVupdaterResponse* soap_new__ns1__GetAPVupdaterResponse(soap*) allocate and default initialize
/// - _ns1__GetAPVupdaterResponse* soap_new__ns1__GetAPVupdaterResponse(soap*, int num) allocate array and default initialize values
/// - _ns1__GetAPVupdaterResponse* soap_new_req__ns1__GetAPVupdaterResponse(soap*, ...) allocate, set required members
/// - _ns1__GetAPVupdaterResponse* soap_new_set__ns1__GetAPVupdaterResponse(soap*, ...) allocate, set all public members
/// - _ns1__GetAPVupdaterResponse::soap_default(soap*) default initialize members
/// - int soap_read__ns1__GetAPVupdaterResponse(soap*, _ns1__GetAPVupdaterResponse*) deserialize from a stream
/// - int soap_write__ns1__GetAPVupdaterResponse(soap*, _ns1__GetAPVupdaterResponse*) serialize to a stream
/// - _ns1__GetAPVupdaterResponse* _ns1__GetAPVupdaterResponse::soap_dup(soap*) returns deep copy of _ns1__GetAPVupdaterResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GetAPVupdaterResponse::soap_del() deep deletes _ns1__GetAPVupdaterResponse data members, use only after _ns1__GetAPVupdaterResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__GetAPVupdaterResponse
{ public:
/// Element "GetAPVupdaterResult" of XSD type xs:string.
    char*                                GetAPVupdaterResult            0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://zbxhupdata.com/webservices/":UpLoadFile
/// @brief "http://zbxhupdata.com/webservices/":UpLoadFile is a complexType.
///
/// class _ns1__UpLoadFile operations:
/// - _ns1__UpLoadFile* soap_new__ns1__UpLoadFile(soap*) allocate and default initialize
/// - _ns1__UpLoadFile* soap_new__ns1__UpLoadFile(soap*, int num) allocate array and default initialize values
/// - _ns1__UpLoadFile* soap_new_req__ns1__UpLoadFile(soap*, ...) allocate, set required members
/// - _ns1__UpLoadFile* soap_new_set__ns1__UpLoadFile(soap*, ...) allocate, set all public members
/// - _ns1__UpLoadFile::soap_default(soap*) default initialize members
/// - int soap_read__ns1__UpLoadFile(soap*, _ns1__UpLoadFile*) deserialize from a stream
/// - int soap_write__ns1__UpLoadFile(soap*, _ns1__UpLoadFile*) serialize to a stream
/// - _ns1__UpLoadFile* _ns1__UpLoadFile::soap_dup(soap*) returns deep copy of _ns1__UpLoadFile, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__UpLoadFile::soap_del() deep deletes _ns1__UpLoadFile data members, use only after _ns1__UpLoadFile::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__UpLoadFile
{ public:
/// Element "filename" of XSD type xs:string.
    char*                                filename                       0;	///< Optional element.
/// Element "index" of XSD type xs:int.
    int                                  index                          1;	///< Required element.
/// Element "fstr" of XSD type xs:string.
    char*                                fstr                           0;	///< Optional element.
/// Element "dwname" of XSD type xs:string.
    char*                                dwname                         0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://zbxhupdata.com/webservices/":UpLoadFileResponse
/// @brief "http://zbxhupdata.com/webservices/":UpLoadFileResponse is a complexType.
///
/// class _ns1__UpLoadFileResponse operations:
/// - _ns1__UpLoadFileResponse* soap_new__ns1__UpLoadFileResponse(soap*) allocate and default initialize
/// - _ns1__UpLoadFileResponse* soap_new__ns1__UpLoadFileResponse(soap*, int num) allocate array and default initialize values
/// - _ns1__UpLoadFileResponse* soap_new_req__ns1__UpLoadFileResponse(soap*, ...) allocate, set required members
/// - _ns1__UpLoadFileResponse* soap_new_set__ns1__UpLoadFileResponse(soap*, ...) allocate, set all public members
/// - _ns1__UpLoadFileResponse::soap_default(soap*) default initialize members
/// - int soap_read__ns1__UpLoadFileResponse(soap*, _ns1__UpLoadFileResponse*) deserialize from a stream
/// - int soap_write__ns1__UpLoadFileResponse(soap*, _ns1__UpLoadFileResponse*) serialize to a stream
/// - _ns1__UpLoadFileResponse* _ns1__UpLoadFileResponse::soap_dup(soap*) returns deep copy of _ns1__UpLoadFileResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__UpLoadFileResponse::soap_del() deep deletes _ns1__UpLoadFileResponse data members, use only after _ns1__UpLoadFileResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__UpLoadFileResponse
{ public:
/// Element "UpLoadFileResult" of XSD type xs:int.
    int                                  UpLoadFileResult               1;	///< Required element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://zbxhupdata.com/webservices/":upPic
/// @brief "http://zbxhupdata.com/webservices/":upPic is a complexType.
///
/// class _ns1__upPic operations:
/// - _ns1__upPic* soap_new__ns1__upPic(soap*) allocate and default initialize
/// - _ns1__upPic* soap_new__ns1__upPic(soap*, int num) allocate array and default initialize values
/// - _ns1__upPic* soap_new_req__ns1__upPic(soap*, ...) allocate, set required members
/// - _ns1__upPic* soap_new_set__ns1__upPic(soap*, ...) allocate, set all public members
/// - _ns1__upPic::soap_default(soap*) default initialize members
/// - int soap_read__ns1__upPic(soap*, _ns1__upPic*) deserialize from a stream
/// - int soap_write__ns1__upPic(soap*, _ns1__upPic*) serialize to a stream
/// - _ns1__upPic* _ns1__upPic::soap_dup(soap*) returns deep copy of _ns1__upPic, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__upPic::soap_del() deep deletes _ns1__upPic data members, use only after _ns1__upPic::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__upPic
{ public:
/// Element "personid" of XSD type xs:string.
    char*                                personid                       0;	///< Optional element.
/// Element "personname" of XSD type xs:string.
    char*                                personname                     0;	///< Optional element.
/// Element "xb" of XSD type xs:string.
    char*                                xb                             0;	///< Optional element.
/// Element "station" of XSD type xs:string.
    char*                                station                        0;	///< Optional element.
/// Element "picname" of XSD type xs:string.
    char*                                picname                        0;	///< Optional element.
/// Element "picstr" of XSD type xs:string.
    char*                                picstr                         0;	///< Optional element.
/// Element "dwname" of XSD type xs:string.
    char*                                dwname                         0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://zbxhupdata.com/webservices/":upPicResponse
/// @brief "http://zbxhupdata.com/webservices/":upPicResponse is a complexType.
///
/// class _ns1__upPicResponse operations:
/// - _ns1__upPicResponse* soap_new__ns1__upPicResponse(soap*) allocate and default initialize
/// - _ns1__upPicResponse* soap_new__ns1__upPicResponse(soap*, int num) allocate array and default initialize values
/// - _ns1__upPicResponse* soap_new_req__ns1__upPicResponse(soap*, ...) allocate, set required members
/// - _ns1__upPicResponse* soap_new_set__ns1__upPicResponse(soap*, ...) allocate, set all public members
/// - _ns1__upPicResponse::soap_default(soap*) default initialize members
/// - int soap_read__ns1__upPicResponse(soap*, _ns1__upPicResponse*) deserialize from a stream
/// - int soap_write__ns1__upPicResponse(soap*, _ns1__upPicResponse*) serialize to a stream
/// - _ns1__upPicResponse* _ns1__upPicResponse::soap_dup(soap*) returns deep copy of _ns1__upPicResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__upPicResponse::soap_del() deep deletes _ns1__upPicResponse data members, use only after _ns1__upPicResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__upPicResponse
{ public:
/// Element "upPicResult" of XSD type xs:int.
    int                                  upPicResult                    1;	///< Required element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://zbxhupdata.com/webservices/":DownloadPic
/// @brief "http://zbxhupdata.com/webservices/":DownloadPic is a complexType.
///
/// class _ns1__DownloadPic operations:
/// - _ns1__DownloadPic* soap_new__ns1__DownloadPic(soap*) allocate and default initialize
/// - _ns1__DownloadPic* soap_new__ns1__DownloadPic(soap*, int num) allocate array and default initialize values
/// - _ns1__DownloadPic* soap_new_req__ns1__DownloadPic(soap*, ...) allocate, set required members
/// - _ns1__DownloadPic* soap_new_set__ns1__DownloadPic(soap*, ...) allocate, set all public members
/// - _ns1__DownloadPic::soap_default(soap*) default initialize members
/// - int soap_read__ns1__DownloadPic(soap*, _ns1__DownloadPic*) deserialize from a stream
/// - int soap_write__ns1__DownloadPic(soap*, _ns1__DownloadPic*) serialize to a stream
/// - _ns1__DownloadPic* _ns1__DownloadPic::soap_dup(soap*) returns deep copy of _ns1__DownloadPic, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__DownloadPic::soap_del() deep deletes _ns1__DownloadPic data members, use only after _ns1__DownloadPic::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__DownloadPic
{ public:
/// Element "picname" of XSD type xs:string.
    char*                                picname                        0;	///< Optional element.
/// Element "dwname" of XSD type xs:string.
    char*                                dwname                         0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://zbxhupdata.com/webservices/":DownloadPicResponse
/// @brief "http://zbxhupdata.com/webservices/":DownloadPicResponse is a complexType.
///
/// class _ns1__DownloadPicResponse operations:
/// - _ns1__DownloadPicResponse* soap_new__ns1__DownloadPicResponse(soap*) allocate and default initialize
/// - _ns1__DownloadPicResponse* soap_new__ns1__DownloadPicResponse(soap*, int num) allocate array and default initialize values
/// - _ns1__DownloadPicResponse* soap_new_req__ns1__DownloadPicResponse(soap*, ...) allocate, set required members
/// - _ns1__DownloadPicResponse* soap_new_set__ns1__DownloadPicResponse(soap*, ...) allocate, set all public members
/// - _ns1__DownloadPicResponse::soap_default(soap*) default initialize members
/// - int soap_read__ns1__DownloadPicResponse(soap*, _ns1__DownloadPicResponse*) deserialize from a stream
/// - int soap_write__ns1__DownloadPicResponse(soap*, _ns1__DownloadPicResponse*) serialize to a stream
/// - _ns1__DownloadPicResponse* _ns1__DownloadPicResponse::soap_dup(soap*) returns deep copy of _ns1__DownloadPicResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__DownloadPicResponse::soap_del() deep deletes _ns1__DownloadPicResponse data members, use only after _ns1__DownloadPicResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__DownloadPicResponse
{ public:
/// Element "DownloadPicResult" of XSD type xs:string.
    char*                                DownloadPicResult              0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://zbxhupdata.com/webservices/":GetPicNames
/// @brief "http://zbxhupdata.com/webservices/":GetPicNames is a complexType.
///
/// class _ns1__GetPicNames operations:
/// - _ns1__GetPicNames* soap_new__ns1__GetPicNames(soap*) allocate and default initialize
/// - _ns1__GetPicNames* soap_new__ns1__GetPicNames(soap*, int num) allocate array and default initialize values
/// - _ns1__GetPicNames* soap_new_req__ns1__GetPicNames(soap*, ...) allocate, set required members
/// - _ns1__GetPicNames* soap_new_set__ns1__GetPicNames(soap*, ...) allocate, set all public members
/// - _ns1__GetPicNames::soap_default(soap*) default initialize members
/// - int soap_read__ns1__GetPicNames(soap*, _ns1__GetPicNames*) deserialize from a stream
/// - int soap_write__ns1__GetPicNames(soap*, _ns1__GetPicNames*) serialize to a stream
/// - _ns1__GetPicNames* _ns1__GetPicNames::soap_dup(soap*) returns deep copy of _ns1__GetPicNames, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GetPicNames::soap_del() deep deletes _ns1__GetPicNames data members, use only after _ns1__GetPicNames::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__GetPicNames
{ public:
/// Element "xb" of XSD type xs:string.
    char*                                xb                             0;	///< Optional element.
/// Element "station" of XSD type xs:string.
    char*                                station                        0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://zbxhupdata.com/webservices/":GetPicNamesResponse
/// @brief "http://zbxhupdata.com/webservices/":GetPicNamesResponse is a complexType.
///
/// class _ns1__GetPicNamesResponse operations:
/// - _ns1__GetPicNamesResponse* soap_new__ns1__GetPicNamesResponse(soap*) allocate and default initialize
/// - _ns1__GetPicNamesResponse* soap_new__ns1__GetPicNamesResponse(soap*, int num) allocate array and default initialize values
/// - _ns1__GetPicNamesResponse* soap_new_req__ns1__GetPicNamesResponse(soap*, ...) allocate, set required members
/// - _ns1__GetPicNamesResponse* soap_new_set__ns1__GetPicNamesResponse(soap*, ...) allocate, set all public members
/// - _ns1__GetPicNamesResponse::soap_default(soap*) default initialize members
/// - int soap_read__ns1__GetPicNamesResponse(soap*, _ns1__GetPicNamesResponse*) deserialize from a stream
/// - int soap_write__ns1__GetPicNamesResponse(soap*, _ns1__GetPicNamesResponse*) serialize to a stream
/// - _ns1__GetPicNamesResponse* _ns1__GetPicNamesResponse::soap_dup(soap*) returns deep copy of _ns1__GetPicNamesResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GetPicNamesResponse::soap_del() deep deletes _ns1__GetPicNamesResponse data members, use only after _ns1__GetPicNamesResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__GetPicNamesResponse
{ public:
/// Element "GetPicNamesResult" of XSD type xs:string.
    char*                                GetPicNamesResult              0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://zbxhupdata.com/webservices/":GetDwInfo
/// @brief "http://zbxhupdata.com/webservices/":GetDwInfo is a complexType.
///
/// class _ns1__GetDwInfo operations:
/// - _ns1__GetDwInfo* soap_new__ns1__GetDwInfo(soap*) allocate and default initialize
/// - _ns1__GetDwInfo* soap_new__ns1__GetDwInfo(soap*, int num) allocate array and default initialize values
/// - _ns1__GetDwInfo* soap_new_req__ns1__GetDwInfo(soap*, ...) allocate, set required members
/// - _ns1__GetDwInfo* soap_new_set__ns1__GetDwInfo(soap*, ...) allocate, set all public members
/// - _ns1__GetDwInfo::soap_default(soap*) default initialize members
/// - int soap_read__ns1__GetDwInfo(soap*, _ns1__GetDwInfo*) deserialize from a stream
/// - int soap_write__ns1__GetDwInfo(soap*, _ns1__GetDwInfo*) serialize to a stream
/// - _ns1__GetDwInfo* _ns1__GetDwInfo::soap_dup(soap*) returns deep copy of _ns1__GetDwInfo, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GetDwInfo::soap_del() deep deletes _ns1__GetDwInfo data members, use only after _ns1__GetDwInfo::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__GetDwInfo
{ public:
/// Element "dwname" of XSD type xs:string.
    char*                                dwname                         0;	///< Optional element.
/// Element "unitname" of XSD type xs:string.
    char*                                unitname                       0;	///< Optional element.
/// Element "unitid" of XSD type xs:int.
    int                                  unitid                         1;	///< Required element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://zbxhupdata.com/webservices/":GetDwInfoResponse
/// @brief "http://zbxhupdata.com/webservices/":GetDwInfoResponse is a complexType.
///
/// class _ns1__GetDwInfoResponse operations:
/// - _ns1__GetDwInfoResponse* soap_new__ns1__GetDwInfoResponse(soap*) allocate and default initialize
/// - _ns1__GetDwInfoResponse* soap_new__ns1__GetDwInfoResponse(soap*, int num) allocate array and default initialize values
/// - _ns1__GetDwInfoResponse* soap_new_req__ns1__GetDwInfoResponse(soap*, ...) allocate, set required members
/// - _ns1__GetDwInfoResponse* soap_new_set__ns1__GetDwInfoResponse(soap*, ...) allocate, set all public members
/// - _ns1__GetDwInfoResponse::soap_default(soap*) default initialize members
/// - int soap_read__ns1__GetDwInfoResponse(soap*, _ns1__GetDwInfoResponse*) deserialize from a stream
/// - int soap_write__ns1__GetDwInfoResponse(soap*, _ns1__GetDwInfoResponse*) serialize to a stream
/// - _ns1__GetDwInfoResponse* _ns1__GetDwInfoResponse::soap_dup(soap*) returns deep copy of _ns1__GetDwInfoResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GetDwInfoResponse::soap_del() deep deletes _ns1__GetDwInfoResponse data members, use only after _ns1__GetDwInfoResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__GetDwInfoResponse
{ public:
/// Element "GetDwInfoResult" of XSD type xs:string.
    char*                                GetDwInfoResult                0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://zbxhupdata.com/webservices/":GetDwPic
/// @brief "http://zbxhupdata.com/webservices/":GetDwPic is a complexType.
///
/// class _ns1__GetDwPic operations:
/// - _ns1__GetDwPic* soap_new__ns1__GetDwPic(soap*) allocate and default initialize
/// - _ns1__GetDwPic* soap_new__ns1__GetDwPic(soap*, int num) allocate array and default initialize values
/// - _ns1__GetDwPic* soap_new_req__ns1__GetDwPic(soap*, ...) allocate, set required members
/// - _ns1__GetDwPic* soap_new_set__ns1__GetDwPic(soap*, ...) allocate, set all public members
/// - _ns1__GetDwPic::soap_default(soap*) default initialize members
/// - int soap_read__ns1__GetDwPic(soap*, _ns1__GetDwPic*) deserialize from a stream
/// - int soap_write__ns1__GetDwPic(soap*, _ns1__GetDwPic*) serialize to a stream
/// - _ns1__GetDwPic* _ns1__GetDwPic::soap_dup(soap*) returns deep copy of _ns1__GetDwPic, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GetDwPic::soap_del() deep deletes _ns1__GetDwPic data members, use only after _ns1__GetDwPic::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__GetDwPic
{ public:
/// Element "dwname" of XSD type xs:string.
    char*                                dwname                         0;	///< Optional element.
/// Element "unitname" of XSD type xs:string.
    char*                                unitname                       0;	///< Optional element.
/// Element "unitid" of XSD type xs:int.
    int                                  unitid                         1;	///< Required element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://zbxhupdata.com/webservices/":GetDwPicResponse
/// @brief "http://zbxhupdata.com/webservices/":GetDwPicResponse is a complexType.
///
/// class _ns1__GetDwPicResponse operations:
/// - _ns1__GetDwPicResponse* soap_new__ns1__GetDwPicResponse(soap*) allocate and default initialize
/// - _ns1__GetDwPicResponse* soap_new__ns1__GetDwPicResponse(soap*, int num) allocate array and default initialize values
/// - _ns1__GetDwPicResponse* soap_new_req__ns1__GetDwPicResponse(soap*, ...) allocate, set required members
/// - _ns1__GetDwPicResponse* soap_new_set__ns1__GetDwPicResponse(soap*, ...) allocate, set all public members
/// - _ns1__GetDwPicResponse::soap_default(soap*) default initialize members
/// - int soap_read__ns1__GetDwPicResponse(soap*, _ns1__GetDwPicResponse*) deserialize from a stream
/// - int soap_write__ns1__GetDwPicResponse(soap*, _ns1__GetDwPicResponse*) serialize to a stream
/// - _ns1__GetDwPicResponse* _ns1__GetDwPicResponse::soap_dup(soap*) returns deep copy of _ns1__GetDwPicResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GetDwPicResponse::soap_del() deep deletes _ns1__GetDwPicResponse data members, use only after _ns1__GetDwPicResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__GetDwPicResponse
{ public:
/// Element "GetDwPicResult" of XSD type xs:string.
    char*                                GetDwPicResult                 0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://zbxhupdata.com/webservices/":GetDeviceXj
/// @brief "http://zbxhupdata.com/webservices/":GetDeviceXj is a complexType.
///
/// class _ns1__GetDeviceXj operations:
/// - _ns1__GetDeviceXj* soap_new__ns1__GetDeviceXj(soap*) allocate and default initialize
/// - _ns1__GetDeviceXj* soap_new__ns1__GetDeviceXj(soap*, int num) allocate array and default initialize values
/// - _ns1__GetDeviceXj* soap_new_req__ns1__GetDeviceXj(soap*, ...) allocate, set required members
/// - _ns1__GetDeviceXj* soap_new_set__ns1__GetDeviceXj(soap*, ...) allocate, set all public members
/// - _ns1__GetDeviceXj::soap_default(soap*) default initialize members
/// - int soap_read__ns1__GetDeviceXj(soap*, _ns1__GetDeviceXj*) deserialize from a stream
/// - int soap_write__ns1__GetDeviceXj(soap*, _ns1__GetDeviceXj*) serialize to a stream
/// - _ns1__GetDeviceXj* _ns1__GetDeviceXj::soap_dup(soap*) returns deep copy of _ns1__GetDeviceXj, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GetDeviceXj::soap_del() deep deletes _ns1__GetDeviceXj data members, use only after _ns1__GetDeviceXj::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__GetDeviceXj
{ public:
/// Element "station" of XSD type xs:string.
    char*                                station                        0;	///< Optional element.
/// Element "xb" of XSD type xs:string.
    char*                                xb                             0;	///< Optional element.
/// Element "dwname" of XSD type xs:string.
    char*                                dwname                         0;	///< Optional element.
/// Element "device" of XSD type xs:string.
    char*                                device                         0;	///< Optional element.
/// Element "filename" of XSD type xs:string.
    char*                                filename                       0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://zbxhupdata.com/webservices/":GetDeviceXjResponse
/// @brief "http://zbxhupdata.com/webservices/":GetDeviceXjResponse is a complexType.
///
/// class _ns1__GetDeviceXjResponse operations:
/// - _ns1__GetDeviceXjResponse* soap_new__ns1__GetDeviceXjResponse(soap*) allocate and default initialize
/// - _ns1__GetDeviceXjResponse* soap_new__ns1__GetDeviceXjResponse(soap*, int num) allocate array and default initialize values
/// - _ns1__GetDeviceXjResponse* soap_new_req__ns1__GetDeviceXjResponse(soap*, ...) allocate, set required members
/// - _ns1__GetDeviceXjResponse* soap_new_set__ns1__GetDeviceXjResponse(soap*, ...) allocate, set all public members
/// - _ns1__GetDeviceXjResponse::soap_default(soap*) default initialize members
/// - int soap_read__ns1__GetDeviceXjResponse(soap*, _ns1__GetDeviceXjResponse*) deserialize from a stream
/// - int soap_write__ns1__GetDeviceXjResponse(soap*, _ns1__GetDeviceXjResponse*) serialize to a stream
/// - _ns1__GetDeviceXjResponse* _ns1__GetDeviceXjResponse::soap_dup(soap*) returns deep copy of _ns1__GetDeviceXjResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GetDeviceXjResponse::soap_del() deep deletes _ns1__GetDeviceXjResponse data members, use only after _ns1__GetDeviceXjResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__GetDeviceXjResponse
{ public:
/// Element "GetDeviceXjResult" of XSD type xs:string.
    char*                                GetDeviceXjResult              0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://zbxhupdata.com/webservices/":GetJxData
/// @brief "http://zbxhupdata.com/webservices/":GetJxData is a complexType.
///
/// class _ns1__GetJxData operations:
/// - _ns1__GetJxData* soap_new__ns1__GetJxData(soap*) allocate and default initialize
/// - _ns1__GetJxData* soap_new__ns1__GetJxData(soap*, int num) allocate array and default initialize values
/// - _ns1__GetJxData* soap_new_req__ns1__GetJxData(soap*, ...) allocate, set required members
/// - _ns1__GetJxData* soap_new_set__ns1__GetJxData(soap*, ...) allocate, set all public members
/// - _ns1__GetJxData::soap_default(soap*) default initialize members
/// - int soap_read__ns1__GetJxData(soap*, _ns1__GetJxData*) deserialize from a stream
/// - int soap_write__ns1__GetJxData(soap*, _ns1__GetJxData*) serialize to a stream
/// - _ns1__GetJxData* _ns1__GetJxData::soap_dup(soap*) returns deep copy of _ns1__GetJxData, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GetJxData::soap_del() deep deletes _ns1__GetJxData data members, use only after _ns1__GetJxData::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__GetJxData
{ public:
/// Element "dwname" of XSD type xs:string.
    char*                                dwname                         0;	///< Optional element.
/// Element "xb" of XSD type xs:string.
    char*                                xb                             0;	///< Optional element.
/// Element "station" of XSD type xs:string.
    char*                                station                        0;	///< Optional element.
/// Element "iconname" of XSD type xs:string.
    char*                                iconname                       0;	///< Optional element.
/// Element "type" of XSD type xs:string.
    char*                                type                           0;	///< Optional element.
/// Element "filename" of XSD type xs:string.
    char*                                filename                       0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://zbxhupdata.com/webservices/":GetJxDataResponse
/// @brief "http://zbxhupdata.com/webservices/":GetJxDataResponse is a complexType.
///
/// class _ns1__GetJxDataResponse operations:
/// - _ns1__GetJxDataResponse* soap_new__ns1__GetJxDataResponse(soap*) allocate and default initialize
/// - _ns1__GetJxDataResponse* soap_new__ns1__GetJxDataResponse(soap*, int num) allocate array and default initialize values
/// - _ns1__GetJxDataResponse* soap_new_req__ns1__GetJxDataResponse(soap*, ...) allocate, set required members
/// - _ns1__GetJxDataResponse* soap_new_set__ns1__GetJxDataResponse(soap*, ...) allocate, set all public members
/// - _ns1__GetJxDataResponse::soap_default(soap*) default initialize members
/// - int soap_read__ns1__GetJxDataResponse(soap*, _ns1__GetJxDataResponse*) deserialize from a stream
/// - int soap_write__ns1__GetJxDataResponse(soap*, _ns1__GetJxDataResponse*) serialize to a stream
/// - _ns1__GetJxDataResponse* _ns1__GetJxDataResponse::soap_dup(soap*) returns deep copy of _ns1__GetJxDataResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GetJxDataResponse::soap_del() deep deletes _ns1__GetJxDataResponse data members, use only after _ns1__GetJxDataResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__GetJxDataResponse
{ public:
/// Element "GetJxDataResult" of XSD type xs:string.
    char*                                GetJxDataResult                0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://zbxhupdata.com/webservices/":GetStationJxData
/// @brief "http://zbxhupdata.com/webservices/":GetStationJxData is a complexType.
///
/// class _ns1__GetStationJxData operations:
/// - _ns1__GetStationJxData* soap_new__ns1__GetStationJxData(soap*) allocate and default initialize
/// - _ns1__GetStationJxData* soap_new__ns1__GetStationJxData(soap*, int num) allocate array and default initialize values
/// - _ns1__GetStationJxData* soap_new_req__ns1__GetStationJxData(soap*, ...) allocate, set required members
/// - _ns1__GetStationJxData* soap_new_set__ns1__GetStationJxData(soap*, ...) allocate, set all public members
/// - _ns1__GetStationJxData::soap_default(soap*) default initialize members
/// - int soap_read__ns1__GetStationJxData(soap*, _ns1__GetStationJxData*) deserialize from a stream
/// - int soap_write__ns1__GetStationJxData(soap*, _ns1__GetStationJxData*) serialize to a stream
/// - _ns1__GetStationJxData* _ns1__GetStationJxData::soap_dup(soap*) returns deep copy of _ns1__GetStationJxData, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GetStationJxData::soap_del() deep deletes _ns1__GetStationJxData data members, use only after _ns1__GetStationJxData::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__GetStationJxData
{ public:
/// Element "dwname" of XSD type xs:string.
    char*                                dwname                         0;	///< Optional element.
/// Element "xb" of XSD type xs:string.
    char*                                xb                             0;	///< Optional element.
/// Element "station" of XSD type xs:string.
    char*                                station                        0;	///< Optional element.
/// Element "sflag" of XSD type xs:boolean.
    bool                                 sflag                          1;	///< Required element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://zbxhupdata.com/webservices/":GetStationJxDataResponse
/// @brief "http://zbxhupdata.com/webservices/":GetStationJxDataResponse is a complexType.
///
/// class _ns1__GetStationJxDataResponse operations:
/// - _ns1__GetStationJxDataResponse* soap_new__ns1__GetStationJxDataResponse(soap*) allocate and default initialize
/// - _ns1__GetStationJxDataResponse* soap_new__ns1__GetStationJxDataResponse(soap*, int num) allocate array and default initialize values
/// - _ns1__GetStationJxDataResponse* soap_new_req__ns1__GetStationJxDataResponse(soap*, ...) allocate, set required members
/// - _ns1__GetStationJxDataResponse* soap_new_set__ns1__GetStationJxDataResponse(soap*, ...) allocate, set all public members
/// - _ns1__GetStationJxDataResponse::soap_default(soap*) default initialize members
/// - int soap_read__ns1__GetStationJxDataResponse(soap*, _ns1__GetStationJxDataResponse*) deserialize from a stream
/// - int soap_write__ns1__GetStationJxDataResponse(soap*, _ns1__GetStationJxDataResponse*) serialize to a stream
/// - _ns1__GetStationJxDataResponse* _ns1__GetStationJxDataResponse::soap_dup(soap*) returns deep copy of _ns1__GetStationJxDataResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GetStationJxDataResponse::soap_del() deep deletes _ns1__GetStationJxDataResponse data members, use only after _ns1__GetStationJxDataResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__GetStationJxDataResponse
{ public:
/// Element "GetStationJxDataResult" of XSD type xs:string.
    char*                                GetStationJxDataResult         0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://zbxhupdata.com/webservices/":GetJxPic
/// @brief "http://zbxhupdata.com/webservices/":GetJxPic is a complexType.
///
/// class _ns1__GetJxPic operations:
/// - _ns1__GetJxPic* soap_new__ns1__GetJxPic(soap*) allocate and default initialize
/// - _ns1__GetJxPic* soap_new__ns1__GetJxPic(soap*, int num) allocate array and default initialize values
/// - _ns1__GetJxPic* soap_new_req__ns1__GetJxPic(soap*, ...) allocate, set required members
/// - _ns1__GetJxPic* soap_new_set__ns1__GetJxPic(soap*, ...) allocate, set all public members
/// - _ns1__GetJxPic::soap_default(soap*) default initialize members
/// - int soap_read__ns1__GetJxPic(soap*, _ns1__GetJxPic*) deserialize from a stream
/// - int soap_write__ns1__GetJxPic(soap*, _ns1__GetJxPic*) serialize to a stream
/// - _ns1__GetJxPic* _ns1__GetJxPic::soap_dup(soap*) returns deep copy of _ns1__GetJxPic, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GetJxPic::soap_del() deep deletes _ns1__GetJxPic data members, use only after _ns1__GetJxPic::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__GetJxPic
{ public:
/// Element "dwname" of XSD type xs:string.
    char*                                dwname                         0;	///< Optional element.
/// Element "upguid" of XSD type xs:string.
    char*                                upguid                         0;	///< Optional element.
/// Element "type" of XSD type xs:string.
    char*                                type                           0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://zbxhupdata.com/webservices/":GetJxPicResponse
/// @brief "http://zbxhupdata.com/webservices/":GetJxPicResponse is a complexType.
///
/// class _ns1__GetJxPicResponse operations:
/// - _ns1__GetJxPicResponse* soap_new__ns1__GetJxPicResponse(soap*) allocate and default initialize
/// - _ns1__GetJxPicResponse* soap_new__ns1__GetJxPicResponse(soap*, int num) allocate array and default initialize values
/// - _ns1__GetJxPicResponse* soap_new_req__ns1__GetJxPicResponse(soap*, ...) allocate, set required members
/// - _ns1__GetJxPicResponse* soap_new_set__ns1__GetJxPicResponse(soap*, ...) allocate, set all public members
/// - _ns1__GetJxPicResponse::soap_default(soap*) default initialize members
/// - int soap_read__ns1__GetJxPicResponse(soap*, _ns1__GetJxPicResponse*) deserialize from a stream
/// - int soap_write__ns1__GetJxPicResponse(soap*, _ns1__GetJxPicResponse*) serialize to a stream
/// - _ns1__GetJxPicResponse* _ns1__GetJxPicResponse::soap_dup(soap*) returns deep copy of _ns1__GetJxPicResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GetJxPicResponse::soap_del() deep deletes _ns1__GetJxPicResponse data members, use only after _ns1__GetJxPicResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__GetJxPicResponse
{ public:
/// Element "GetJxPicResult" of XSD type xs:string.
    char*                                GetJxPicResult                 0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://zbxhupdata.com/webservices/":GetDevPic
/// @brief "http://zbxhupdata.com/webservices/":GetDevPic is a complexType.
///
/// class _ns1__GetDevPic operations:
/// - _ns1__GetDevPic* soap_new__ns1__GetDevPic(soap*) allocate and default initialize
/// - _ns1__GetDevPic* soap_new__ns1__GetDevPic(soap*, int num) allocate array and default initialize values
/// - _ns1__GetDevPic* soap_new_req__ns1__GetDevPic(soap*, ...) allocate, set required members
/// - _ns1__GetDevPic* soap_new_set__ns1__GetDevPic(soap*, ...) allocate, set all public members
/// - _ns1__GetDevPic::soap_default(soap*) default initialize members
/// - int soap_read__ns1__GetDevPic(soap*, _ns1__GetDevPic*) deserialize from a stream
/// - int soap_write__ns1__GetDevPic(soap*, _ns1__GetDevPic*) serialize to a stream
/// - _ns1__GetDevPic* _ns1__GetDevPic::soap_dup(soap*) returns deep copy of _ns1__GetDevPic, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GetDevPic::soap_del() deep deletes _ns1__GetDevPic data members, use only after _ns1__GetDevPic::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__GetDevPic
{ public:
/// Element "dwname" of XSD type xs:string.
    char*                                dwname                         0;	///< Optional element.
/// Element "xb" of XSD type xs:string.
    char*                                xb                             0;	///< Optional element.
/// Element "station" of XSD type xs:string.
    char*                                station                        0;	///< Optional element.
/// Element "iconname" of XSD type xs:string.
    char*                                iconname                       0;	///< Optional element.
/// Element "type" of XSD type xs:string.
    char*                                type                           0;	///< Optional element.
/// Element "sflag" of XSD type xs:boolean.
    bool                                 sflag                          1;	///< Required element.
/// Element "s1" of XSD type xs:string.
    char*                                s1                             0;	///< Optional element.
/// Element "s2" of XSD type xs:string.
    char*                                s2                             0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://zbxhupdata.com/webservices/":GetDevPicResponse
/// @brief "http://zbxhupdata.com/webservices/":GetDevPicResponse is a complexType.
///
/// class _ns1__GetDevPicResponse operations:
/// - _ns1__GetDevPicResponse* soap_new__ns1__GetDevPicResponse(soap*) allocate and default initialize
/// - _ns1__GetDevPicResponse* soap_new__ns1__GetDevPicResponse(soap*, int num) allocate array and default initialize values
/// - _ns1__GetDevPicResponse* soap_new_req__ns1__GetDevPicResponse(soap*, ...) allocate, set required members
/// - _ns1__GetDevPicResponse* soap_new_set__ns1__GetDevPicResponse(soap*, ...) allocate, set all public members
/// - _ns1__GetDevPicResponse::soap_default(soap*) default initialize members
/// - int soap_read__ns1__GetDevPicResponse(soap*, _ns1__GetDevPicResponse*) deserialize from a stream
/// - int soap_write__ns1__GetDevPicResponse(soap*, _ns1__GetDevPicResponse*) serialize to a stream
/// - _ns1__GetDevPicResponse* _ns1__GetDevPicResponse::soap_dup(soap*) returns deep copy of _ns1__GetDevPicResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GetDevPicResponse::soap_del() deep deletes _ns1__GetDevPicResponse data members, use only after _ns1__GetDevPicResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__GetDevPicResponse
{ public:
/// Element "GetDevPicResult" of XSD type xs:string.
    char*                                GetDevPicResult                0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://zbxhupdata.com/webservices/":GetBgImg
/// @brief "http://zbxhupdata.com/webservices/":GetBgImg is a complexType.
///
/// class _ns1__GetBgImg operations:
/// - _ns1__GetBgImg* soap_new__ns1__GetBgImg(soap*) allocate and default initialize
/// - _ns1__GetBgImg* soap_new__ns1__GetBgImg(soap*, int num) allocate array and default initialize values
/// - _ns1__GetBgImg* soap_new_req__ns1__GetBgImg(soap*, ...) allocate, set required members
/// - _ns1__GetBgImg* soap_new_set__ns1__GetBgImg(soap*, ...) allocate, set all public members
/// - _ns1__GetBgImg::soap_default(soap*) default initialize members
/// - int soap_read__ns1__GetBgImg(soap*, _ns1__GetBgImg*) deserialize from a stream
/// - int soap_write__ns1__GetBgImg(soap*, _ns1__GetBgImg*) serialize to a stream
/// - _ns1__GetBgImg* _ns1__GetBgImg::soap_dup(soap*) returns deep copy of _ns1__GetBgImg, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GetBgImg::soap_del() deep deletes _ns1__GetBgImg data members, use only after _ns1__GetBgImg::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__GetBgImg
{ public:
/// Element "pguid" of XSD type xs:string.
    char*                                pguid                          0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://zbxhupdata.com/webservices/":GetBgImgResponse
/// @brief "http://zbxhupdata.com/webservices/":GetBgImgResponse is a complexType.
///
/// class _ns1__GetBgImgResponse operations:
/// - _ns1__GetBgImgResponse* soap_new__ns1__GetBgImgResponse(soap*) allocate and default initialize
/// - _ns1__GetBgImgResponse* soap_new__ns1__GetBgImgResponse(soap*, int num) allocate array and default initialize values
/// - _ns1__GetBgImgResponse* soap_new_req__ns1__GetBgImgResponse(soap*, ...) allocate, set required members
/// - _ns1__GetBgImgResponse* soap_new_set__ns1__GetBgImgResponse(soap*, ...) allocate, set all public members
/// - _ns1__GetBgImgResponse::soap_default(soap*) default initialize members
/// - int soap_read__ns1__GetBgImgResponse(soap*, _ns1__GetBgImgResponse*) deserialize from a stream
/// - int soap_write__ns1__GetBgImgResponse(soap*, _ns1__GetBgImgResponse*) serialize to a stream
/// - _ns1__GetBgImgResponse* _ns1__GetBgImgResponse::soap_dup(soap*) returns deep copy of _ns1__GetBgImgResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GetBgImgResponse::soap_del() deep deletes _ns1__GetBgImgResponse data members, use only after _ns1__GetBgImgResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__GetBgImgResponse
{ public:
/// Element "GetBgImgResult" of XSD type xs:string.
    char*                                GetBgImgResult                 0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://zbxhupdata.com/webservices/":GetDcsData
/// @brief "http://zbxhupdata.com/webservices/":GetDcsData is a complexType.
///
/// class _ns1__GetDcsData operations:
/// - _ns1__GetDcsData* soap_new__ns1__GetDcsData(soap*) allocate and default initialize
/// - _ns1__GetDcsData* soap_new__ns1__GetDcsData(soap*, int num) allocate array and default initialize values
/// - _ns1__GetDcsData* soap_new_req__ns1__GetDcsData(soap*, ...) allocate, set required members
/// - _ns1__GetDcsData* soap_new_set__ns1__GetDcsData(soap*, ...) allocate, set all public members
/// - _ns1__GetDcsData::soap_default(soap*) default initialize members
/// - int soap_read__ns1__GetDcsData(soap*, _ns1__GetDcsData*) deserialize from a stream
/// - int soap_write__ns1__GetDcsData(soap*, _ns1__GetDcsData*) serialize to a stream
/// - _ns1__GetDcsData* _ns1__GetDcsData::soap_dup(soap*) returns deep copy of _ns1__GetDcsData, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GetDcsData::soap_del() deep deletes _ns1__GetDcsData data members, use only after _ns1__GetDcsData::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__GetDcsData
{ public:
/// Element "xb" of XSD type xs:string.
    char*                                xb                             0;	///< Optional element.
/// Element "station" of XSD type xs:string.
    char*                                station                        0;	///< Optional element.
/// Element "iconname" of XSD type xs:string.
    char*                                iconname                       0;	///< Optional element.
/// Element "filename" of XSD type xs:string.
    char*                                filename                       0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://zbxhupdata.com/webservices/":GetDcsDataResponse
/// @brief "http://zbxhupdata.com/webservices/":GetDcsDataResponse is a complexType.
///
/// class _ns1__GetDcsDataResponse operations:
/// - _ns1__GetDcsDataResponse* soap_new__ns1__GetDcsDataResponse(soap*) allocate and default initialize
/// - _ns1__GetDcsDataResponse* soap_new__ns1__GetDcsDataResponse(soap*, int num) allocate array and default initialize values
/// - _ns1__GetDcsDataResponse* soap_new_req__ns1__GetDcsDataResponse(soap*, ...) allocate, set required members
/// - _ns1__GetDcsDataResponse* soap_new_set__ns1__GetDcsDataResponse(soap*, ...) allocate, set all public members
/// - _ns1__GetDcsDataResponse::soap_default(soap*) default initialize members
/// - int soap_read__ns1__GetDcsDataResponse(soap*, _ns1__GetDcsDataResponse*) deserialize from a stream
/// - int soap_write__ns1__GetDcsDataResponse(soap*, _ns1__GetDcsDataResponse*) serialize to a stream
/// - _ns1__GetDcsDataResponse* _ns1__GetDcsDataResponse::soap_dup(soap*) returns deep copy of _ns1__GetDcsDataResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GetDcsDataResponse::soap_del() deep deletes _ns1__GetDcsDataResponse data members, use only after _ns1__GetDcsDataResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__GetDcsDataResponse
{ public:
/// Element "GetDcsDataResult" of XSD type xs:string.
    char*                                GetDcsDataResult               0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://zbxhupdata.com/webservices/":DownLoadMobGPSData
/// @brief "http://zbxhupdata.com/webservices/":DownLoadMobGPSData is a complexType.
///
/// class _ns1__DownLoadMobGPSData operations:
/// - _ns1__DownLoadMobGPSData* soap_new__ns1__DownLoadMobGPSData(soap*) allocate and default initialize
/// - _ns1__DownLoadMobGPSData* soap_new__ns1__DownLoadMobGPSData(soap*, int num) allocate array and default initialize values
/// - _ns1__DownLoadMobGPSData* soap_new_req__ns1__DownLoadMobGPSData(soap*, ...) allocate, set required members
/// - _ns1__DownLoadMobGPSData* soap_new_set__ns1__DownLoadMobGPSData(soap*, ...) allocate, set all public members
/// - _ns1__DownLoadMobGPSData::soap_default(soap*) default initialize members
/// - int soap_read__ns1__DownLoadMobGPSData(soap*, _ns1__DownLoadMobGPSData*) deserialize from a stream
/// - int soap_write__ns1__DownLoadMobGPSData(soap*, _ns1__DownLoadMobGPSData*) serialize to a stream
/// - _ns1__DownLoadMobGPSData* _ns1__DownLoadMobGPSData::soap_dup(soap*) returns deep copy of _ns1__DownLoadMobGPSData, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__DownLoadMobGPSData::soap_del() deep deletes _ns1__DownLoadMobGPSData data members, use only after _ns1__DownLoadMobGPSData::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__DownLoadMobGPSData
{ public:
/// Element "dwname" of XSD type xs:string.
    char*                                dwname                         0;	///< Optional element.
/// Element "tabname" of XSD type xs:string.
    char*                                tabname                        0;	///< Optional element.
/// Element "sytime" of XSD type xs:string.
    char*                                sytime                         0;	///< Optional element.
/// Element "level" of XSD type xs:int.
    int                                  level                          1;	///< Required element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://zbxhupdata.com/webservices/":DownLoadMobGPSDataResponse
/// @brief "http://zbxhupdata.com/webservices/":DownLoadMobGPSDataResponse is a complexType.
///
/// class _ns1__DownLoadMobGPSDataResponse operations:
/// - _ns1__DownLoadMobGPSDataResponse* soap_new__ns1__DownLoadMobGPSDataResponse(soap*) allocate and default initialize
/// - _ns1__DownLoadMobGPSDataResponse* soap_new__ns1__DownLoadMobGPSDataResponse(soap*, int num) allocate array and default initialize values
/// - _ns1__DownLoadMobGPSDataResponse* soap_new_req__ns1__DownLoadMobGPSDataResponse(soap*, ...) allocate, set required members
/// - _ns1__DownLoadMobGPSDataResponse* soap_new_set__ns1__DownLoadMobGPSDataResponse(soap*, ...) allocate, set all public members
/// - _ns1__DownLoadMobGPSDataResponse::soap_default(soap*) default initialize members
/// - int soap_read__ns1__DownLoadMobGPSDataResponse(soap*, _ns1__DownLoadMobGPSDataResponse*) deserialize from a stream
/// - int soap_write__ns1__DownLoadMobGPSDataResponse(soap*, _ns1__DownLoadMobGPSDataResponse*) serialize to a stream
/// - _ns1__DownLoadMobGPSDataResponse* _ns1__DownLoadMobGPSDataResponse::soap_dup(soap*) returns deep copy of _ns1__DownLoadMobGPSDataResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__DownLoadMobGPSDataResponse::soap_del() deep deletes _ns1__DownLoadMobGPSDataResponse data members, use only after _ns1__DownLoadMobGPSDataResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__DownLoadMobGPSDataResponse
{ public:
/// Element "DownLoadMobGPSDataResult" of XSD type xs:string.
    char*                                DownLoadMobGPSDataResult       0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://zbxhupdata.com/webservices/":MobDownLoadData
/// @brief "http://zbxhupdata.com/webservices/":MobDownLoadData is a complexType.
///
/// class _ns1__MobDownLoadData operations:
/// - _ns1__MobDownLoadData* soap_new__ns1__MobDownLoadData(soap*) allocate and default initialize
/// - _ns1__MobDownLoadData* soap_new__ns1__MobDownLoadData(soap*, int num) allocate array and default initialize values
/// - _ns1__MobDownLoadData* soap_new_req__ns1__MobDownLoadData(soap*, ...) allocate, set required members
/// - _ns1__MobDownLoadData* soap_new_set__ns1__MobDownLoadData(soap*, ...) allocate, set all public members
/// - _ns1__MobDownLoadData::soap_default(soap*) default initialize members
/// - int soap_read__ns1__MobDownLoadData(soap*, _ns1__MobDownLoadData*) deserialize from a stream
/// - int soap_write__ns1__MobDownLoadData(soap*, _ns1__MobDownLoadData*) serialize to a stream
/// - _ns1__MobDownLoadData* _ns1__MobDownLoadData::soap_dup(soap*) returns deep copy of _ns1__MobDownLoadData, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__MobDownLoadData::soap_del() deep deletes _ns1__MobDownLoadData data members, use only after _ns1__MobDownLoadData::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__MobDownLoadData
{ public:
/// Element "dwname" of XSD type xs:string.
    char*                                dwname                         0;	///< Optional element.
/// Element "unitname" of XSD type xs:string.
    char*                                unitname                       0;	///< Optional element.
/// Element "tabname" of XSD type xs:string.
    char*                                tabname                        0;	///< Optional element.
/// Element "sytime" of XSD type xs:string.
    char*                                sytime                         0;	///< Optional element.
/// Element "level" of XSD type xs:int.
    int                                  level                          1;	///< Required element.
/// Element "stfield" of XSD type xs:string.
    char*                                stfield                        0;	///< Optional element.
/// Element "filename" of XSD type xs:string.
    char*                                filename                       0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://zbxhupdata.com/webservices/":MobDownLoadDataResponse
/// @brief "http://zbxhupdata.com/webservices/":MobDownLoadDataResponse is a complexType.
///
/// class _ns1__MobDownLoadDataResponse operations:
/// - _ns1__MobDownLoadDataResponse* soap_new__ns1__MobDownLoadDataResponse(soap*) allocate and default initialize
/// - _ns1__MobDownLoadDataResponse* soap_new__ns1__MobDownLoadDataResponse(soap*, int num) allocate array and default initialize values
/// - _ns1__MobDownLoadDataResponse* soap_new_req__ns1__MobDownLoadDataResponse(soap*, ...) allocate, set required members
/// - _ns1__MobDownLoadDataResponse* soap_new_set__ns1__MobDownLoadDataResponse(soap*, ...) allocate, set all public members
/// - _ns1__MobDownLoadDataResponse::soap_default(soap*) default initialize members
/// - int soap_read__ns1__MobDownLoadDataResponse(soap*, _ns1__MobDownLoadDataResponse*) deserialize from a stream
/// - int soap_write__ns1__MobDownLoadDataResponse(soap*, _ns1__MobDownLoadDataResponse*) serialize to a stream
/// - _ns1__MobDownLoadDataResponse* _ns1__MobDownLoadDataResponse::soap_dup(soap*) returns deep copy of _ns1__MobDownLoadDataResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__MobDownLoadDataResponse::soap_del() deep deletes _ns1__MobDownLoadDataResponse data members, use only after _ns1__MobDownLoadDataResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__MobDownLoadDataResponse
{ public:
/// Element "MobDownLoadDataResult" of XSD type xs:string.
    char*                                MobDownLoadDataResult          0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://zbxhupdata.com/webservices/":GetOpenFireInfo
/// @brief "http://zbxhupdata.com/webservices/":GetOpenFireInfo is a complexType.
///
/// class _ns1__GetOpenFireInfo operations:
/// - _ns1__GetOpenFireInfo* soap_new__ns1__GetOpenFireInfo(soap*) allocate and default initialize
/// - _ns1__GetOpenFireInfo* soap_new__ns1__GetOpenFireInfo(soap*, int num) allocate array and default initialize values
/// - _ns1__GetOpenFireInfo* soap_new_req__ns1__GetOpenFireInfo(soap*, ...) allocate, set required members
/// - _ns1__GetOpenFireInfo* soap_new_set__ns1__GetOpenFireInfo(soap*, ...) allocate, set all public members
/// - _ns1__GetOpenFireInfo::soap_default(soap*) default initialize members
/// - int soap_read__ns1__GetOpenFireInfo(soap*, _ns1__GetOpenFireInfo*) deserialize from a stream
/// - int soap_write__ns1__GetOpenFireInfo(soap*, _ns1__GetOpenFireInfo*) serialize to a stream
/// - _ns1__GetOpenFireInfo* _ns1__GetOpenFireInfo::soap_dup(soap*) returns deep copy of _ns1__GetOpenFireInfo, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GetOpenFireInfo::soap_del() deep deletes _ns1__GetOpenFireInfo data members, use only after _ns1__GetOpenFireInfo::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__GetOpenFireInfo
{ public:
/// Element "dwnam" of XSD type xs:string.
    char*                                dwnam                          0;	///< Optional element.
/// Element "unit" of XSD type xs:string.
    char*                                unit                           0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://zbxhupdata.com/webservices/":GetOpenFireInfoResponse
/// @brief "http://zbxhupdata.com/webservices/":GetOpenFireInfoResponse is a complexType.
///
/// class _ns1__GetOpenFireInfoResponse operations:
/// - _ns1__GetOpenFireInfoResponse* soap_new__ns1__GetOpenFireInfoResponse(soap*) allocate and default initialize
/// - _ns1__GetOpenFireInfoResponse* soap_new__ns1__GetOpenFireInfoResponse(soap*, int num) allocate array and default initialize values
/// - _ns1__GetOpenFireInfoResponse* soap_new_req__ns1__GetOpenFireInfoResponse(soap*, ...) allocate, set required members
/// - _ns1__GetOpenFireInfoResponse* soap_new_set__ns1__GetOpenFireInfoResponse(soap*, ...) allocate, set all public members
/// - _ns1__GetOpenFireInfoResponse::soap_default(soap*) default initialize members
/// - int soap_read__ns1__GetOpenFireInfoResponse(soap*, _ns1__GetOpenFireInfoResponse*) deserialize from a stream
/// - int soap_write__ns1__GetOpenFireInfoResponse(soap*, _ns1__GetOpenFireInfoResponse*) serialize to a stream
/// - _ns1__GetOpenFireInfoResponse* _ns1__GetOpenFireInfoResponse::soap_dup(soap*) returns deep copy of _ns1__GetOpenFireInfoResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GetOpenFireInfoResponse::soap_del() deep deletes _ns1__GetOpenFireInfoResponse data members, use only after _ns1__GetOpenFireInfoResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__GetOpenFireInfoResponse
{ public:
/// Element "GetOpenFireInfoResult" of XSD type xs:string.
    char*                                GetOpenFireInfoResult          0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://zbxhupdata.com/webservices/":GetDwList
/// @brief "http://zbxhupdata.com/webservices/":GetDwList is a complexType.
///
/// class _ns1__GetDwList operations:
/// - _ns1__GetDwList* soap_new__ns1__GetDwList(soap*) allocate and default initialize
/// - _ns1__GetDwList* soap_new__ns1__GetDwList(soap*, int num) allocate array and default initialize values
/// - _ns1__GetDwList* soap_new_req__ns1__GetDwList(soap*, ...) allocate, set required members
/// - _ns1__GetDwList* soap_new_set__ns1__GetDwList(soap*, ...) allocate, set all public members
/// - _ns1__GetDwList::soap_default(soap*) default initialize members
/// - int soap_read__ns1__GetDwList(soap*, _ns1__GetDwList*) deserialize from a stream
/// - int soap_write__ns1__GetDwList(soap*, _ns1__GetDwList*) serialize to a stream
/// - _ns1__GetDwList* _ns1__GetDwList::soap_dup(soap*) returns deep copy of _ns1__GetDwList, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GetDwList::soap_del() deep deletes _ns1__GetDwList data members, use only after _ns1__GetDwList::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__GetDwList
{ public:
/// Element "dwname" of XSD type xs:string.
    char*                                dwname                         0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://zbxhupdata.com/webservices/":GetDwListResponse
/// @brief "http://zbxhupdata.com/webservices/":GetDwListResponse is a complexType.
///
/// class _ns1__GetDwListResponse operations:
/// - _ns1__GetDwListResponse* soap_new__ns1__GetDwListResponse(soap*) allocate and default initialize
/// - _ns1__GetDwListResponse* soap_new__ns1__GetDwListResponse(soap*, int num) allocate array and default initialize values
/// - _ns1__GetDwListResponse* soap_new_req__ns1__GetDwListResponse(soap*, ...) allocate, set required members
/// - _ns1__GetDwListResponse* soap_new_set__ns1__GetDwListResponse(soap*, ...) allocate, set all public members
/// - _ns1__GetDwListResponse::soap_default(soap*) default initialize members
/// - int soap_read__ns1__GetDwListResponse(soap*, _ns1__GetDwListResponse*) deserialize from a stream
/// - int soap_write__ns1__GetDwListResponse(soap*, _ns1__GetDwListResponse*) serialize to a stream
/// - _ns1__GetDwListResponse* _ns1__GetDwListResponse::soap_dup(soap*) returns deep copy of _ns1__GetDwListResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GetDwListResponse::soap_del() deep deletes _ns1__GetDwListResponse data members, use only after _ns1__GetDwListResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__GetDwListResponse
{ public:
/// Element "GetDwListResult" of XSD type xs:string.
    char*                                GetDwListResult                0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://zbxhupdata.com/webservices/":GetUnitStation
/// @brief "http://zbxhupdata.com/webservices/":GetUnitStation is a complexType.
///
/// class _ns1__GetUnitStation operations:
/// - _ns1__GetUnitStation* soap_new__ns1__GetUnitStation(soap*) allocate and default initialize
/// - _ns1__GetUnitStation* soap_new__ns1__GetUnitStation(soap*, int num) allocate array and default initialize values
/// - _ns1__GetUnitStation* soap_new_req__ns1__GetUnitStation(soap*, ...) allocate, set required members
/// - _ns1__GetUnitStation* soap_new_set__ns1__GetUnitStation(soap*, ...) allocate, set all public members
/// - _ns1__GetUnitStation::soap_default(soap*) default initialize members
/// - int soap_read__ns1__GetUnitStation(soap*, _ns1__GetUnitStation*) deserialize from a stream
/// - int soap_write__ns1__GetUnitStation(soap*, _ns1__GetUnitStation*) serialize to a stream
/// - _ns1__GetUnitStation* _ns1__GetUnitStation::soap_dup(soap*) returns deep copy of _ns1__GetUnitStation, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GetUnitStation::soap_del() deep deletes _ns1__GetUnitStation data members, use only after _ns1__GetUnitStation::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__GetUnitStation
{ public:
/// Element "dwname" of XSD type xs:string.
    char*                                dwname                         0;	///< Optional element.
/// Element "level" of XSD type xs:int.
    int                                  level                          1;	///< Required element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://zbxhupdata.com/webservices/":GetUnitStationResponse
/// @brief "http://zbxhupdata.com/webservices/":GetUnitStationResponse is a complexType.
///
/// class _ns1__GetUnitStationResponse operations:
/// - _ns1__GetUnitStationResponse* soap_new__ns1__GetUnitStationResponse(soap*) allocate and default initialize
/// - _ns1__GetUnitStationResponse* soap_new__ns1__GetUnitStationResponse(soap*, int num) allocate array and default initialize values
/// - _ns1__GetUnitStationResponse* soap_new_req__ns1__GetUnitStationResponse(soap*, ...) allocate, set required members
/// - _ns1__GetUnitStationResponse* soap_new_set__ns1__GetUnitStationResponse(soap*, ...) allocate, set all public members
/// - _ns1__GetUnitStationResponse::soap_default(soap*) default initialize members
/// - int soap_read__ns1__GetUnitStationResponse(soap*, _ns1__GetUnitStationResponse*) deserialize from a stream
/// - int soap_write__ns1__GetUnitStationResponse(soap*, _ns1__GetUnitStationResponse*) serialize to a stream
/// - _ns1__GetUnitStationResponse* _ns1__GetUnitStationResponse::soap_dup(soap*) returns deep copy of _ns1__GetUnitStationResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GetUnitStationResponse::soap_del() deep deletes _ns1__GetUnitStationResponse data members, use only after _ns1__GetUnitStationResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__GetUnitStationResponse
{ public:
/// Element "GetUnitStationResult" of XSD type xs:string.
    char*                                GetUnitStationResult           0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://zbxhupdata.com/webservices/":GetUnitStruct
/// @brief "http://zbxhupdata.com/webservices/":GetUnitStruct is a complexType.
///
/// class _ns1__GetUnitStruct operations:
/// - _ns1__GetUnitStruct* soap_new__ns1__GetUnitStruct(soap*) allocate and default initialize
/// - _ns1__GetUnitStruct* soap_new__ns1__GetUnitStruct(soap*, int num) allocate array and default initialize values
/// - _ns1__GetUnitStruct* soap_new_req__ns1__GetUnitStruct(soap*, ...) allocate, set required members
/// - _ns1__GetUnitStruct* soap_new_set__ns1__GetUnitStruct(soap*, ...) allocate, set all public members
/// - _ns1__GetUnitStruct::soap_default(soap*) default initialize members
/// - int soap_read__ns1__GetUnitStruct(soap*, _ns1__GetUnitStruct*) deserialize from a stream
/// - int soap_write__ns1__GetUnitStruct(soap*, _ns1__GetUnitStruct*) serialize to a stream
/// - _ns1__GetUnitStruct* _ns1__GetUnitStruct::soap_dup(soap*) returns deep copy of _ns1__GetUnitStruct, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GetUnitStruct::soap_del() deep deletes _ns1__GetUnitStruct data members, use only after _ns1__GetUnitStruct::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__GetUnitStruct
{ public:
/// Element "dwname" of XSD type xs:string.
    char*                                dwname                         0;	///< Optional element.
/// Element "level" of XSD type xs:int.
    int                                  level                          1;	///< Required element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://zbxhupdata.com/webservices/":GetUnitStructResponse
/// @brief "http://zbxhupdata.com/webservices/":GetUnitStructResponse is a complexType.
///
/// class _ns1__GetUnitStructResponse operations:
/// - _ns1__GetUnitStructResponse* soap_new__ns1__GetUnitStructResponse(soap*) allocate and default initialize
/// - _ns1__GetUnitStructResponse* soap_new__ns1__GetUnitStructResponse(soap*, int num) allocate array and default initialize values
/// - _ns1__GetUnitStructResponse* soap_new_req__ns1__GetUnitStructResponse(soap*, ...) allocate, set required members
/// - _ns1__GetUnitStructResponse* soap_new_set__ns1__GetUnitStructResponse(soap*, ...) allocate, set all public members
/// - _ns1__GetUnitStructResponse::soap_default(soap*) default initialize members
/// - int soap_read__ns1__GetUnitStructResponse(soap*, _ns1__GetUnitStructResponse*) deserialize from a stream
/// - int soap_write__ns1__GetUnitStructResponse(soap*, _ns1__GetUnitStructResponse*) serialize to a stream
/// - _ns1__GetUnitStructResponse* _ns1__GetUnitStructResponse::soap_dup(soap*) returns deep copy of _ns1__GetUnitStructResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GetUnitStructResponse::soap_del() deep deletes _ns1__GetUnitStructResponse data members, use only after _ns1__GetUnitStructResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__GetUnitStructResponse
{ public:
/// Element "GetUnitStructResult" of XSD type xs:string.
    char*                                GetUnitStructResult            0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://zbxhupdata.com/webservices/":GetUnitPersonInfo
/// @brief "http://zbxhupdata.com/webservices/":GetUnitPersonInfo is a complexType.
///
/// class _ns1__GetUnitPersonInfo operations:
/// - _ns1__GetUnitPersonInfo* soap_new__ns1__GetUnitPersonInfo(soap*) allocate and default initialize
/// - _ns1__GetUnitPersonInfo* soap_new__ns1__GetUnitPersonInfo(soap*, int num) allocate array and default initialize values
/// - _ns1__GetUnitPersonInfo* soap_new_req__ns1__GetUnitPersonInfo(soap*, ...) allocate, set required members
/// - _ns1__GetUnitPersonInfo* soap_new_set__ns1__GetUnitPersonInfo(soap*, ...) allocate, set all public members
/// - _ns1__GetUnitPersonInfo::soap_default(soap*) default initialize members
/// - int soap_read__ns1__GetUnitPersonInfo(soap*, _ns1__GetUnitPersonInfo*) deserialize from a stream
/// - int soap_write__ns1__GetUnitPersonInfo(soap*, _ns1__GetUnitPersonInfo*) serialize to a stream
/// - _ns1__GetUnitPersonInfo* _ns1__GetUnitPersonInfo::soap_dup(soap*) returns deep copy of _ns1__GetUnitPersonInfo, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GetUnitPersonInfo::soap_del() deep deletes _ns1__GetUnitPersonInfo data members, use only after _ns1__GetUnitPersonInfo::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__GetUnitPersonInfo
{ public:
/// Element "dwname" of XSD type xs:string.
    char*                                dwname                         0;	///< Optional element.
/// Element "unitid" of XSD type xs:int.
    int                                  unitid                         1;	///< Required element.
/// Element "personid" of XSD type xs:int.
    int                                  personid                       1;	///< Required element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://zbxhupdata.com/webservices/":GetUnitPersonInfoResponse
/// @brief "http://zbxhupdata.com/webservices/":GetUnitPersonInfoResponse is a complexType.
///
/// class _ns1__GetUnitPersonInfoResponse operations:
/// - _ns1__GetUnitPersonInfoResponse* soap_new__ns1__GetUnitPersonInfoResponse(soap*) allocate and default initialize
/// - _ns1__GetUnitPersonInfoResponse* soap_new__ns1__GetUnitPersonInfoResponse(soap*, int num) allocate array and default initialize values
/// - _ns1__GetUnitPersonInfoResponse* soap_new_req__ns1__GetUnitPersonInfoResponse(soap*, ...) allocate, set required members
/// - _ns1__GetUnitPersonInfoResponse* soap_new_set__ns1__GetUnitPersonInfoResponse(soap*, ...) allocate, set all public members
/// - _ns1__GetUnitPersonInfoResponse::soap_default(soap*) default initialize members
/// - int soap_read__ns1__GetUnitPersonInfoResponse(soap*, _ns1__GetUnitPersonInfoResponse*) deserialize from a stream
/// - int soap_write__ns1__GetUnitPersonInfoResponse(soap*, _ns1__GetUnitPersonInfoResponse*) serialize to a stream
/// - _ns1__GetUnitPersonInfoResponse* _ns1__GetUnitPersonInfoResponse::soap_dup(soap*) returns deep copy of _ns1__GetUnitPersonInfoResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GetUnitPersonInfoResponse::soap_del() deep deletes _ns1__GetUnitPersonInfoResponse data members, use only after _ns1__GetUnitPersonInfoResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__GetUnitPersonInfoResponse
{ public:
/// Element "GetUnitPersonInfoResult" of XSD type xs:string.
    char*                                GetUnitPersonInfoResult        0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://zbxhupdata.com/webservices/":GetFileSize
/// @brief "http://zbxhupdata.com/webservices/":GetFileSize is a complexType.
///
/// class _ns1__GetFileSize operations:
/// - _ns1__GetFileSize* soap_new__ns1__GetFileSize(soap*) allocate and default initialize
/// - _ns1__GetFileSize* soap_new__ns1__GetFileSize(soap*, int num) allocate array and default initialize values
/// - _ns1__GetFileSize* soap_new_req__ns1__GetFileSize(soap*, ...) allocate, set required members
/// - _ns1__GetFileSize* soap_new_set__ns1__GetFileSize(soap*, ...) allocate, set all public members
/// - _ns1__GetFileSize::soap_default(soap*) default initialize members
/// - int soap_read__ns1__GetFileSize(soap*, _ns1__GetFileSize*) deserialize from a stream
/// - int soap_write__ns1__GetFileSize(soap*, _ns1__GetFileSize*) serialize to a stream
/// - _ns1__GetFileSize* _ns1__GetFileSize::soap_dup(soap*) returns deep copy of _ns1__GetFileSize, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GetFileSize::soap_del() deep deletes _ns1__GetFileSize data members, use only after _ns1__GetFileSize::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__GetFileSize
{ public:
/// Element "filename" of XSD type xs:string.
    char*                                filename                       0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://zbxhupdata.com/webservices/":GetFileSizeResponse
/// @brief "http://zbxhupdata.com/webservices/":GetFileSizeResponse is a complexType.
///
/// class _ns1__GetFileSizeResponse operations:
/// - _ns1__GetFileSizeResponse* soap_new__ns1__GetFileSizeResponse(soap*) allocate and default initialize
/// - _ns1__GetFileSizeResponse* soap_new__ns1__GetFileSizeResponse(soap*, int num) allocate array and default initialize values
/// - _ns1__GetFileSizeResponse* soap_new_req__ns1__GetFileSizeResponse(soap*, ...) allocate, set required members
/// - _ns1__GetFileSizeResponse* soap_new_set__ns1__GetFileSizeResponse(soap*, ...) allocate, set all public members
/// - _ns1__GetFileSizeResponse::soap_default(soap*) default initialize members
/// - int soap_read__ns1__GetFileSizeResponse(soap*, _ns1__GetFileSizeResponse*) deserialize from a stream
/// - int soap_write__ns1__GetFileSizeResponse(soap*, _ns1__GetFileSizeResponse*) serialize to a stream
/// - _ns1__GetFileSizeResponse* _ns1__GetFileSizeResponse::soap_dup(soap*) returns deep copy of _ns1__GetFileSizeResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GetFileSizeResponse::soap_del() deep deletes _ns1__GetFileSizeResponse data members, use only after _ns1__GetFileSizeResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__GetFileSizeResponse
{ public:
/// Element "GetFileSizeResult" of XSD type xs:long.
    LONG64                               GetFileSizeResult              1;	///< Required element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://zbxhupdata.com/webservices/":GetXbList
/// @brief "http://zbxhupdata.com/webservices/":GetXbList is a complexType.
///
/// class _ns1__GetXbList operations:
/// - _ns1__GetXbList* soap_new__ns1__GetXbList(soap*) allocate and default initialize
/// - _ns1__GetXbList* soap_new__ns1__GetXbList(soap*, int num) allocate array and default initialize values
/// - _ns1__GetXbList* soap_new_req__ns1__GetXbList(soap*, ...) allocate, set required members
/// - _ns1__GetXbList* soap_new_set__ns1__GetXbList(soap*, ...) allocate, set all public members
/// - _ns1__GetXbList::soap_default(soap*) default initialize members
/// - int soap_read__ns1__GetXbList(soap*, _ns1__GetXbList*) deserialize from a stream
/// - int soap_write__ns1__GetXbList(soap*, _ns1__GetXbList*) serialize to a stream
/// - _ns1__GetXbList* _ns1__GetXbList::soap_dup(soap*) returns deep copy of _ns1__GetXbList, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GetXbList::soap_del() deep deletes _ns1__GetXbList data members, use only after _ns1__GetXbList::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__GetXbList
{ public:
/// Element "unit" of XSD type xs:string.
    char*                                unit                           0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://zbxhupdata.com/webservices/":GetXbListResponse
/// @brief "http://zbxhupdata.com/webservices/":GetXbListResponse is a complexType.
///
/// class _ns1__GetXbListResponse operations:
/// - _ns1__GetXbListResponse* soap_new__ns1__GetXbListResponse(soap*) allocate and default initialize
/// - _ns1__GetXbListResponse* soap_new__ns1__GetXbListResponse(soap*, int num) allocate array and default initialize values
/// - _ns1__GetXbListResponse* soap_new_req__ns1__GetXbListResponse(soap*, ...) allocate, set required members
/// - _ns1__GetXbListResponse* soap_new_set__ns1__GetXbListResponse(soap*, ...) allocate, set all public members
/// - _ns1__GetXbListResponse::soap_default(soap*) default initialize members
/// - int soap_read__ns1__GetXbListResponse(soap*, _ns1__GetXbListResponse*) deserialize from a stream
/// - int soap_write__ns1__GetXbListResponse(soap*, _ns1__GetXbListResponse*) serialize to a stream
/// - _ns1__GetXbListResponse* _ns1__GetXbListResponse::soap_dup(soap*) returns deep copy of _ns1__GetXbListResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GetXbListResponse::soap_del() deep deletes _ns1__GetXbListResponse data members, use only after _ns1__GetXbListResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__GetXbListResponse
{ public:
/// Element "GetXbListResult" of XSD type xs:string.
    char*                                GetXbListResult                0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://zbxhupdata.com/webservices/":GetXbStationList
/// @brief "http://zbxhupdata.com/webservices/":GetXbStationList is a complexType.
///
/// class _ns1__GetXbStationList operations:
/// - _ns1__GetXbStationList* soap_new__ns1__GetXbStationList(soap*) allocate and default initialize
/// - _ns1__GetXbStationList* soap_new__ns1__GetXbStationList(soap*, int num) allocate array and default initialize values
/// - _ns1__GetXbStationList* soap_new_req__ns1__GetXbStationList(soap*, ...) allocate, set required members
/// - _ns1__GetXbStationList* soap_new_set__ns1__GetXbStationList(soap*, ...) allocate, set all public members
/// - _ns1__GetXbStationList::soap_default(soap*) default initialize members
/// - int soap_read__ns1__GetXbStationList(soap*, _ns1__GetXbStationList*) deserialize from a stream
/// - int soap_write__ns1__GetXbStationList(soap*, _ns1__GetXbStationList*) serialize to a stream
/// - _ns1__GetXbStationList* _ns1__GetXbStationList::soap_dup(soap*) returns deep copy of _ns1__GetXbStationList, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GetXbStationList::soap_del() deep deletes _ns1__GetXbStationList data members, use only after _ns1__GetXbStationList::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__GetXbStationList
{ public:
/// Element "xb" of XSD type xs:string.
    char*                                xb                             0;	///< Optional element.
/// Element "unit" of XSD type xs:string.
    char*                                unit                           0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://zbxhupdata.com/webservices/":GetXbStationListResponse
/// @brief "http://zbxhupdata.com/webservices/":GetXbStationListResponse is a complexType.
///
/// class _ns1__GetXbStationListResponse operations:
/// - _ns1__GetXbStationListResponse* soap_new__ns1__GetXbStationListResponse(soap*) allocate and default initialize
/// - _ns1__GetXbStationListResponse* soap_new__ns1__GetXbStationListResponse(soap*, int num) allocate array and default initialize values
/// - _ns1__GetXbStationListResponse* soap_new_req__ns1__GetXbStationListResponse(soap*, ...) allocate, set required members
/// - _ns1__GetXbStationListResponse* soap_new_set__ns1__GetXbStationListResponse(soap*, ...) allocate, set all public members
/// - _ns1__GetXbStationListResponse::soap_default(soap*) default initialize members
/// - int soap_read__ns1__GetXbStationListResponse(soap*, _ns1__GetXbStationListResponse*) deserialize from a stream
/// - int soap_write__ns1__GetXbStationListResponse(soap*, _ns1__GetXbStationListResponse*) serialize to a stream
/// - _ns1__GetXbStationListResponse* _ns1__GetXbStationListResponse::soap_dup(soap*) returns deep copy of _ns1__GetXbStationListResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GetXbStationListResponse::soap_del() deep deletes _ns1__GetXbStationListResponse data members, use only after _ns1__GetXbStationListResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__GetXbStationListResponse
{ public:
/// Element "GetXbStationListResult" of XSD type xs:string.
    char*                                GetXbStationListResult         0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://zbxhupdata.com/webservices/":GetMapDeviceType
/// @brief "http://zbxhupdata.com/webservices/":GetMapDeviceType is a complexType.
///
/// class _ns1__GetMapDeviceType operations:
/// - _ns1__GetMapDeviceType* soap_new__ns1__GetMapDeviceType(soap*) allocate and default initialize
/// - _ns1__GetMapDeviceType* soap_new__ns1__GetMapDeviceType(soap*, int num) allocate array and default initialize values
/// - _ns1__GetMapDeviceType* soap_new_req__ns1__GetMapDeviceType(soap*, ...) allocate, set required members
/// - _ns1__GetMapDeviceType* soap_new_set__ns1__GetMapDeviceType(soap*, ...) allocate, set all public members
/// - _ns1__GetMapDeviceType::soap_default(soap*) default initialize members
/// - int soap_read__ns1__GetMapDeviceType(soap*, _ns1__GetMapDeviceType*) deserialize from a stream
/// - int soap_write__ns1__GetMapDeviceType(soap*, _ns1__GetMapDeviceType*) serialize to a stream
/// - _ns1__GetMapDeviceType* _ns1__GetMapDeviceType::soap_dup(soap*) returns deep copy of _ns1__GetMapDeviceType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GetMapDeviceType::soap_del() deep deletes _ns1__GetMapDeviceType data members, use only after _ns1__GetMapDeviceType::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__GetMapDeviceType
{ public:
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://zbxhupdata.com/webservices/":GetMapDeviceTypeResponse
/// @brief "http://zbxhupdata.com/webservices/":GetMapDeviceTypeResponse is a complexType.
///
/// class _ns1__GetMapDeviceTypeResponse operations:
/// - _ns1__GetMapDeviceTypeResponse* soap_new__ns1__GetMapDeviceTypeResponse(soap*) allocate and default initialize
/// - _ns1__GetMapDeviceTypeResponse* soap_new__ns1__GetMapDeviceTypeResponse(soap*, int num) allocate array and default initialize values
/// - _ns1__GetMapDeviceTypeResponse* soap_new_req__ns1__GetMapDeviceTypeResponse(soap*, ...) allocate, set required members
/// - _ns1__GetMapDeviceTypeResponse* soap_new_set__ns1__GetMapDeviceTypeResponse(soap*, ...) allocate, set all public members
/// - _ns1__GetMapDeviceTypeResponse::soap_default(soap*) default initialize members
/// - int soap_read__ns1__GetMapDeviceTypeResponse(soap*, _ns1__GetMapDeviceTypeResponse*) deserialize from a stream
/// - int soap_write__ns1__GetMapDeviceTypeResponse(soap*, _ns1__GetMapDeviceTypeResponse*) serialize to a stream
/// - _ns1__GetMapDeviceTypeResponse* _ns1__GetMapDeviceTypeResponse::soap_dup(soap*) returns deep copy of _ns1__GetMapDeviceTypeResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GetMapDeviceTypeResponse::soap_del() deep deletes _ns1__GetMapDeviceTypeResponse data members, use only after _ns1__GetMapDeviceTypeResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__GetMapDeviceTypeResponse
{ public:
/// Element "GetMapDeviceTypeResult" of XSD type xs:string.
    char*                                GetMapDeviceTypeResult         0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://zbxhupdata.com/webservices/":GetGxDeviceData
/// @brief "http://zbxhupdata.com/webservices/":GetGxDeviceData is a complexType.
///
/// class _ns1__GetGxDeviceData operations:
/// - _ns1__GetGxDeviceData* soap_new__ns1__GetGxDeviceData(soap*) allocate and default initialize
/// - _ns1__GetGxDeviceData* soap_new__ns1__GetGxDeviceData(soap*, int num) allocate array and default initialize values
/// - _ns1__GetGxDeviceData* soap_new_req__ns1__GetGxDeviceData(soap*, ...) allocate, set required members
/// - _ns1__GetGxDeviceData* soap_new_set__ns1__GetGxDeviceData(soap*, ...) allocate, set all public members
/// - _ns1__GetGxDeviceData::soap_default(soap*) default initialize members
/// - int soap_read__ns1__GetGxDeviceData(soap*, _ns1__GetGxDeviceData*) deserialize from a stream
/// - int soap_write__ns1__GetGxDeviceData(soap*, _ns1__GetGxDeviceData*) serialize to a stream
/// - _ns1__GetGxDeviceData* _ns1__GetGxDeviceData::soap_dup(soap*) returns deep copy of _ns1__GetGxDeviceData, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GetGxDeviceData::soap_del() deep deletes _ns1__GetGxDeviceData data members, use only after _ns1__GetGxDeviceData::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__GetGxDeviceData
{ public:
/// Element "typeid" of XSD type xs:string.
    char*                                typeid_                        0;	///< Optional element.
/// Element "xb" of XSD type xs:string.
    char*                                xb                             0;	///< Optional element.
/// Element "station" of XSD type xs:string.
    char*                                station                        0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://zbxhupdata.com/webservices/":GetGxDeviceDataResponse
/// @brief "http://zbxhupdata.com/webservices/":GetGxDeviceDataResponse is a complexType.
///
/// class _ns1__GetGxDeviceDataResponse operations:
/// - _ns1__GetGxDeviceDataResponse* soap_new__ns1__GetGxDeviceDataResponse(soap*) allocate and default initialize
/// - _ns1__GetGxDeviceDataResponse* soap_new__ns1__GetGxDeviceDataResponse(soap*, int num) allocate array and default initialize values
/// - _ns1__GetGxDeviceDataResponse* soap_new_req__ns1__GetGxDeviceDataResponse(soap*, ...) allocate, set required members
/// - _ns1__GetGxDeviceDataResponse* soap_new_set__ns1__GetGxDeviceDataResponse(soap*, ...) allocate, set all public members
/// - _ns1__GetGxDeviceDataResponse::soap_default(soap*) default initialize members
/// - int soap_read__ns1__GetGxDeviceDataResponse(soap*, _ns1__GetGxDeviceDataResponse*) deserialize from a stream
/// - int soap_write__ns1__GetGxDeviceDataResponse(soap*, _ns1__GetGxDeviceDataResponse*) serialize to a stream
/// - _ns1__GetGxDeviceDataResponse* _ns1__GetGxDeviceDataResponse::soap_dup(soap*) returns deep copy of _ns1__GetGxDeviceDataResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GetGxDeviceDataResponse::soap_del() deep deletes _ns1__GetGxDeviceDataResponse data members, use only after _ns1__GetGxDeviceDataResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__GetGxDeviceDataResponse
{ public:
/// Element "GetGxDeviceDataResult" of XSD type xs:string.
    char*                                GetGxDeviceDataResult          0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://zbxhupdata.com/webservices/":GetDownFileInfo
/// @brief "http://zbxhupdata.com/webservices/":GetDownFileInfo is a complexType.
///
/// class _ns1__GetDownFileInfo operations:
/// - _ns1__GetDownFileInfo* soap_new__ns1__GetDownFileInfo(soap*) allocate and default initialize
/// - _ns1__GetDownFileInfo* soap_new__ns1__GetDownFileInfo(soap*, int num) allocate array and default initialize values
/// - _ns1__GetDownFileInfo* soap_new_req__ns1__GetDownFileInfo(soap*, ...) allocate, set required members
/// - _ns1__GetDownFileInfo* soap_new_set__ns1__GetDownFileInfo(soap*, ...) allocate, set all public members
/// - _ns1__GetDownFileInfo::soap_default(soap*) default initialize members
/// - int soap_read__ns1__GetDownFileInfo(soap*, _ns1__GetDownFileInfo*) deserialize from a stream
/// - int soap_write__ns1__GetDownFileInfo(soap*, _ns1__GetDownFileInfo*) serialize to a stream
/// - _ns1__GetDownFileInfo* _ns1__GetDownFileInfo::soap_dup(soap*) returns deep copy of _ns1__GetDownFileInfo, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GetDownFileInfo::soap_del() deep deletes _ns1__GetDownFileInfo data members, use only after _ns1__GetDownFileInfo::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__GetDownFileInfo
{ public:
/// Element "fname" of XSD type xs:string.
    char*                                fname                          0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://zbxhupdata.com/webservices/":GetDownFileInfoResponse
/// @brief "http://zbxhupdata.com/webservices/":GetDownFileInfoResponse is a complexType.
///
/// class _ns1__GetDownFileInfoResponse operations:
/// - _ns1__GetDownFileInfoResponse* soap_new__ns1__GetDownFileInfoResponse(soap*) allocate and default initialize
/// - _ns1__GetDownFileInfoResponse* soap_new__ns1__GetDownFileInfoResponse(soap*, int num) allocate array and default initialize values
/// - _ns1__GetDownFileInfoResponse* soap_new_req__ns1__GetDownFileInfoResponse(soap*, ...) allocate, set required members
/// - _ns1__GetDownFileInfoResponse* soap_new_set__ns1__GetDownFileInfoResponse(soap*, ...) allocate, set all public members
/// - _ns1__GetDownFileInfoResponse::soap_default(soap*) default initialize members
/// - int soap_read__ns1__GetDownFileInfoResponse(soap*, _ns1__GetDownFileInfoResponse*) deserialize from a stream
/// - int soap_write__ns1__GetDownFileInfoResponse(soap*, _ns1__GetDownFileInfoResponse*) serialize to a stream
/// - _ns1__GetDownFileInfoResponse* _ns1__GetDownFileInfoResponse::soap_dup(soap*) returns deep copy of _ns1__GetDownFileInfoResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GetDownFileInfoResponse::soap_del() deep deletes _ns1__GetDownFileInfoResponse data members, use only after _ns1__GetDownFileInfoResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__GetDownFileInfoResponse
{ public:
/// Element "GetDownFileInfoResult" of XSD type xs:string.
    char*                                GetDownFileInfoResult          0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://zbxhupdata.com/webservices/":DownMapfile
/// @brief "http://zbxhupdata.com/webservices/":DownMapfile is a complexType.
///
/// class _ns1__DownMapfile operations:
/// - _ns1__DownMapfile* soap_new__ns1__DownMapfile(soap*) allocate and default initialize
/// - _ns1__DownMapfile* soap_new__ns1__DownMapfile(soap*, int num) allocate array and default initialize values
/// - _ns1__DownMapfile* soap_new_req__ns1__DownMapfile(soap*, ...) allocate, set required members
/// - _ns1__DownMapfile* soap_new_set__ns1__DownMapfile(soap*, ...) allocate, set all public members
/// - _ns1__DownMapfile::soap_default(soap*) default initialize members
/// - int soap_read__ns1__DownMapfile(soap*, _ns1__DownMapfile*) deserialize from a stream
/// - int soap_write__ns1__DownMapfile(soap*, _ns1__DownMapfile*) serialize to a stream
/// - _ns1__DownMapfile* _ns1__DownMapfile::soap_dup(soap*) returns deep copy of _ns1__DownMapfile, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__DownMapfile::soap_del() deep deletes _ns1__DownMapfile data members, use only after _ns1__DownMapfile::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__DownMapfile
{ public:
/// Element "filename" of XSD type xs:string.
    char*                                filename                       0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://zbxhupdata.com/webservices/":DownMapfileResponse
/// @brief "http://zbxhupdata.com/webservices/":DownMapfileResponse is a complexType.
///
/// class _ns1__DownMapfileResponse operations:
/// - _ns1__DownMapfileResponse* soap_new__ns1__DownMapfileResponse(soap*) allocate and default initialize
/// - _ns1__DownMapfileResponse* soap_new__ns1__DownMapfileResponse(soap*, int num) allocate array and default initialize values
/// - _ns1__DownMapfileResponse* soap_new_req__ns1__DownMapfileResponse(soap*, ...) allocate, set required members
/// - _ns1__DownMapfileResponse* soap_new_set__ns1__DownMapfileResponse(soap*, ...) allocate, set all public members
/// - _ns1__DownMapfileResponse::soap_default(soap*) default initialize members
/// - int soap_read__ns1__DownMapfileResponse(soap*, _ns1__DownMapfileResponse*) deserialize from a stream
/// - int soap_write__ns1__DownMapfileResponse(soap*, _ns1__DownMapfileResponse*) serialize to a stream
/// - _ns1__DownMapfileResponse* _ns1__DownMapfileResponse::soap_dup(soap*) returns deep copy of _ns1__DownMapfileResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__DownMapfileResponse::soap_del() deep deletes _ns1__DownMapfileResponse data members, use only after _ns1__DownMapfileResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__DownMapfileResponse
{ public:
/// Element "DownMapfileResult" of XSD type xs:string.
    char*                                DownMapfileResult              0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://zbxhupdata.com/webservices/":GetFileNew
/// @brief "http://zbxhupdata.com/webservices/":GetFileNew is a complexType.
///
/// class _ns1__GetFileNew operations:
/// - _ns1__GetFileNew* soap_new__ns1__GetFileNew(soap*) allocate and default initialize
/// - _ns1__GetFileNew* soap_new__ns1__GetFileNew(soap*, int num) allocate array and default initialize values
/// - _ns1__GetFileNew* soap_new_req__ns1__GetFileNew(soap*, ...) allocate, set required members
/// - _ns1__GetFileNew* soap_new_set__ns1__GetFileNew(soap*, ...) allocate, set all public members
/// - _ns1__GetFileNew::soap_default(soap*) default initialize members
/// - int soap_read__ns1__GetFileNew(soap*, _ns1__GetFileNew*) deserialize from a stream
/// - int soap_write__ns1__GetFileNew(soap*, _ns1__GetFileNew*) serialize to a stream
/// - _ns1__GetFileNew* _ns1__GetFileNew::soap_dup(soap*) returns deep copy of _ns1__GetFileNew, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GetFileNew::soap_del() deep deletes _ns1__GetFileNew data members, use only after _ns1__GetFileNew::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__GetFileNew
{ public:
/// Element "lstB" of XSD type "http://zbxhupdata.com/webservices/":ArrayOfBase64Binary.
    ns1__ArrayOfBase64Binary*            lstB                           0;	///< Optional element.
/// Element "filename" of XSD type xs:string.
    char*                                filename                       0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://zbxhupdata.com/webservices/":GetFileNewResponse
/// @brief "http://zbxhupdata.com/webservices/":GetFileNewResponse is a complexType.
///
/// class _ns1__GetFileNewResponse operations:
/// - _ns1__GetFileNewResponse* soap_new__ns1__GetFileNewResponse(soap*) allocate and default initialize
/// - _ns1__GetFileNewResponse* soap_new__ns1__GetFileNewResponse(soap*, int num) allocate array and default initialize values
/// - _ns1__GetFileNewResponse* soap_new_req__ns1__GetFileNewResponse(soap*, ...) allocate, set required members
/// - _ns1__GetFileNewResponse* soap_new_set__ns1__GetFileNewResponse(soap*, ...) allocate, set all public members
/// - _ns1__GetFileNewResponse::soap_default(soap*) default initialize members
/// - int soap_read__ns1__GetFileNewResponse(soap*, _ns1__GetFileNewResponse*) deserialize from a stream
/// - int soap_write__ns1__GetFileNewResponse(soap*, _ns1__GetFileNewResponse*) serialize to a stream
/// - _ns1__GetFileNewResponse* _ns1__GetFileNewResponse::soap_dup(soap*) returns deep copy of _ns1__GetFileNewResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GetFileNewResponse::soap_del() deep deletes _ns1__GetFileNewResponse data members, use only after _ns1__GetFileNewResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__GetFileNewResponse
{ public:
/// Element "GetFileNewResult" of XSD type xs:string.
    char*                                GetFileNewResult               0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://zbxhupdata.com/webservices/":AlterTable
/// @brief "http://zbxhupdata.com/webservices/":AlterTable is a complexType.
///
/// class _ns1__AlterTable operations:
/// - _ns1__AlterTable* soap_new__ns1__AlterTable(soap*) allocate and default initialize
/// - _ns1__AlterTable* soap_new__ns1__AlterTable(soap*, int num) allocate array and default initialize values
/// - _ns1__AlterTable* soap_new_req__ns1__AlterTable(soap*, ...) allocate, set required members
/// - _ns1__AlterTable* soap_new_set__ns1__AlterTable(soap*, ...) allocate, set all public members
/// - _ns1__AlterTable::soap_default(soap*) default initialize members
/// - int soap_read__ns1__AlterTable(soap*, _ns1__AlterTable*) deserialize from a stream
/// - int soap_write__ns1__AlterTable(soap*, _ns1__AlterTable*) serialize to a stream
/// - _ns1__AlterTable* _ns1__AlterTable::soap_dup(soap*) returns deep copy of _ns1__AlterTable, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__AlterTable::soap_del() deep deletes _ns1__AlterTable data members, use only after _ns1__AlterTable::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__AlterTable
{ public:
/// Element "fieldname" of XSD type xs:string.
    char*                                fieldname                      0;	///< Optional element.
/// Element "tabname" of XSD type xs:string.
    char*                                tabname                        0;	///< Optional element.
/// Element "ftype" of XSD type xs:string.
    char*                                ftype                          0;	///< Optional element.
/// Element "option" of XSD type xs:string.
    char*                                option                         0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://zbxhupdata.com/webservices/":AlterTableResponse
/// @brief "http://zbxhupdata.com/webservices/":AlterTableResponse is a complexType.
///
/// class _ns1__AlterTableResponse operations:
/// - _ns1__AlterTableResponse* soap_new__ns1__AlterTableResponse(soap*) allocate and default initialize
/// - _ns1__AlterTableResponse* soap_new__ns1__AlterTableResponse(soap*, int num) allocate array and default initialize values
/// - _ns1__AlterTableResponse* soap_new_req__ns1__AlterTableResponse(soap*, ...) allocate, set required members
/// - _ns1__AlterTableResponse* soap_new_set__ns1__AlterTableResponse(soap*, ...) allocate, set all public members
/// - _ns1__AlterTableResponse::soap_default(soap*) default initialize members
/// - int soap_read__ns1__AlterTableResponse(soap*, _ns1__AlterTableResponse*) deserialize from a stream
/// - int soap_write__ns1__AlterTableResponse(soap*, _ns1__AlterTableResponse*) serialize to a stream
/// - _ns1__AlterTableResponse* _ns1__AlterTableResponse::soap_dup(soap*) returns deep copy of _ns1__AlterTableResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__AlterTableResponse::soap_del() deep deletes _ns1__AlterTableResponse data members, use only after _ns1__AlterTableResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__AlterTableResponse
{ public:
/// Element "AlterTableResult" of XSD type xs:string.
    char*                                AlterTableResult               0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://zbxhupdata.com/webservices/":DownCQData
/// @brief "http://zbxhupdata.com/webservices/":DownCQData is a complexType.
///
/// class _ns1__DownCQData operations:
/// - _ns1__DownCQData* soap_new__ns1__DownCQData(soap*) allocate and default initialize
/// - _ns1__DownCQData* soap_new__ns1__DownCQData(soap*, int num) allocate array and default initialize values
/// - _ns1__DownCQData* soap_new_req__ns1__DownCQData(soap*, ...) allocate, set required members
/// - _ns1__DownCQData* soap_new_set__ns1__DownCQData(soap*, ...) allocate, set all public members
/// - _ns1__DownCQData::soap_default(soap*) default initialize members
/// - int soap_read__ns1__DownCQData(soap*, _ns1__DownCQData*) deserialize from a stream
/// - int soap_write__ns1__DownCQData(soap*, _ns1__DownCQData*) serialize to a stream
/// - _ns1__DownCQData* _ns1__DownCQData::soap_dup(soap*) returns deep copy of _ns1__DownCQData, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__DownCQData::soap_del() deep deletes _ns1__DownCQData data members, use only after _ns1__DownCQData::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__DownCQData
{ public:
/// Element "dwname" of XSD type xs:string.
    char*                                dwname                         0;	///< Optional element.
/// Element "orglevel" of XSD type xs:int.
    int                                  orglevel                       1;	///< Required element.
/// Element "tabname" of XSD type xs:string.
    char*                                tabname                        0;	///< Optional element.
/// Element "time" of XSD type xs:string.
    char*                                time                           0;	///< Optional element.
/// Element "filename" of XSD type xs:string.
    char*                                filename                       0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://zbxhupdata.com/webservices/":DownCQDataResponse
/// @brief "http://zbxhupdata.com/webservices/":DownCQDataResponse is a complexType.
///
/// class _ns1__DownCQDataResponse operations:
/// - _ns1__DownCQDataResponse* soap_new__ns1__DownCQDataResponse(soap*) allocate and default initialize
/// - _ns1__DownCQDataResponse* soap_new__ns1__DownCQDataResponse(soap*, int num) allocate array and default initialize values
/// - _ns1__DownCQDataResponse* soap_new_req__ns1__DownCQDataResponse(soap*, ...) allocate, set required members
/// - _ns1__DownCQDataResponse* soap_new_set__ns1__DownCQDataResponse(soap*, ...) allocate, set all public members
/// - _ns1__DownCQDataResponse::soap_default(soap*) default initialize members
/// - int soap_read__ns1__DownCQDataResponse(soap*, _ns1__DownCQDataResponse*) deserialize from a stream
/// - int soap_write__ns1__DownCQDataResponse(soap*, _ns1__DownCQDataResponse*) serialize to a stream
/// - _ns1__DownCQDataResponse* _ns1__DownCQDataResponse::soap_dup(soap*) returns deep copy of _ns1__DownCQDataResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__DownCQDataResponse::soap_del() deep deletes _ns1__DownCQDataResponse data members, use only after _ns1__DownCQDataResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__DownCQDataResponse
{ public:
/// Element "DownCQDataResult" of XSD type xs:string.
    char*                                DownCQDataResult               0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://zbxhupdata.com/webservices/":GetTabList
/// @brief "http://zbxhupdata.com/webservices/":GetTabList is a complexType.
///
/// class _ns1__GetTabList operations:
/// - _ns1__GetTabList* soap_new__ns1__GetTabList(soap*) allocate and default initialize
/// - _ns1__GetTabList* soap_new__ns1__GetTabList(soap*, int num) allocate array and default initialize values
/// - _ns1__GetTabList* soap_new_req__ns1__GetTabList(soap*, ...) allocate, set required members
/// - _ns1__GetTabList* soap_new_set__ns1__GetTabList(soap*, ...) allocate, set all public members
/// - _ns1__GetTabList::soap_default(soap*) default initialize members
/// - int soap_read__ns1__GetTabList(soap*, _ns1__GetTabList*) deserialize from a stream
/// - int soap_write__ns1__GetTabList(soap*, _ns1__GetTabList*) serialize to a stream
/// - _ns1__GetTabList* _ns1__GetTabList::soap_dup(soap*) returns deep copy of _ns1__GetTabList, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GetTabList::soap_del() deep deletes _ns1__GetTabList data members, use only after _ns1__GetTabList::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__GetTabList
{ public:
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://zbxhupdata.com/webservices/":GetTabListResponse
/// @brief "http://zbxhupdata.com/webservices/":GetTabListResponse is a complexType.
///
/// class _ns1__GetTabListResponse operations:
/// - _ns1__GetTabListResponse* soap_new__ns1__GetTabListResponse(soap*) allocate and default initialize
/// - _ns1__GetTabListResponse* soap_new__ns1__GetTabListResponse(soap*, int num) allocate array and default initialize values
/// - _ns1__GetTabListResponse* soap_new_req__ns1__GetTabListResponse(soap*, ...) allocate, set required members
/// - _ns1__GetTabListResponse* soap_new_set__ns1__GetTabListResponse(soap*, ...) allocate, set all public members
/// - _ns1__GetTabListResponse::soap_default(soap*) default initialize members
/// - int soap_read__ns1__GetTabListResponse(soap*, _ns1__GetTabListResponse*) deserialize from a stream
/// - int soap_write__ns1__GetTabListResponse(soap*, _ns1__GetTabListResponse*) serialize to a stream
/// - _ns1__GetTabListResponse* _ns1__GetTabListResponse::soap_dup(soap*) returns deep copy of _ns1__GetTabListResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GetTabListResponse::soap_del() deep deletes _ns1__GetTabListResponse data members, use only after _ns1__GetTabListResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__GetTabListResponse
{ public:
/// Element "GetTabListResult" of XSD type xs:string.
    char*                                GetTabListResult               0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://zbxhupdata.com/webservices/":IsOracleTable
/// @brief "http://zbxhupdata.com/webservices/":IsOracleTable is a complexType.
///
/// class _ns1__IsOracleTable operations:
/// - _ns1__IsOracleTable* soap_new__ns1__IsOracleTable(soap*) allocate and default initialize
/// - _ns1__IsOracleTable* soap_new__ns1__IsOracleTable(soap*, int num) allocate array and default initialize values
/// - _ns1__IsOracleTable* soap_new_req__ns1__IsOracleTable(soap*, ...) allocate, set required members
/// - _ns1__IsOracleTable* soap_new_set__ns1__IsOracleTable(soap*, ...) allocate, set all public members
/// - _ns1__IsOracleTable::soap_default(soap*) default initialize members
/// - int soap_read__ns1__IsOracleTable(soap*, _ns1__IsOracleTable*) deserialize from a stream
/// - int soap_write__ns1__IsOracleTable(soap*, _ns1__IsOracleTable*) serialize to a stream
/// - _ns1__IsOracleTable* _ns1__IsOracleTable::soap_dup(soap*) returns deep copy of _ns1__IsOracleTable, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__IsOracleTable::soap_del() deep deletes _ns1__IsOracleTable data members, use only after _ns1__IsOracleTable::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__IsOracleTable
{ public:
/// Element "tabname" of XSD type xs:string.
    char*                                tabname                        0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://zbxhupdata.com/webservices/":IsOracleTableResponse
/// @brief "http://zbxhupdata.com/webservices/":IsOracleTableResponse is a complexType.
///
/// class _ns1__IsOracleTableResponse operations:
/// - _ns1__IsOracleTableResponse* soap_new__ns1__IsOracleTableResponse(soap*) allocate and default initialize
/// - _ns1__IsOracleTableResponse* soap_new__ns1__IsOracleTableResponse(soap*, int num) allocate array and default initialize values
/// - _ns1__IsOracleTableResponse* soap_new_req__ns1__IsOracleTableResponse(soap*, ...) allocate, set required members
/// - _ns1__IsOracleTableResponse* soap_new_set__ns1__IsOracleTableResponse(soap*, ...) allocate, set all public members
/// - _ns1__IsOracleTableResponse::soap_default(soap*) default initialize members
/// - int soap_read__ns1__IsOracleTableResponse(soap*, _ns1__IsOracleTableResponse*) deserialize from a stream
/// - int soap_write__ns1__IsOracleTableResponse(soap*, _ns1__IsOracleTableResponse*) serialize to a stream
/// - _ns1__IsOracleTableResponse* _ns1__IsOracleTableResponse::soap_dup(soap*) returns deep copy of _ns1__IsOracleTableResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__IsOracleTableResponse::soap_del() deep deletes _ns1__IsOracleTableResponse data members, use only after _ns1__IsOracleTableResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__IsOracleTableResponse
{ public:
/// Element "IsOracleTableResult" of XSD type xs:int.
    int                                  IsOracleTableResult            1;	///< Required element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://zbxhupdata.com/webservices/":GetFieldInfo
/// @brief "http://zbxhupdata.com/webservices/":GetFieldInfo is a complexType.
///
/// class _ns1__GetFieldInfo operations:
/// - _ns1__GetFieldInfo* soap_new__ns1__GetFieldInfo(soap*) allocate and default initialize
/// - _ns1__GetFieldInfo* soap_new__ns1__GetFieldInfo(soap*, int num) allocate array and default initialize values
/// - _ns1__GetFieldInfo* soap_new_req__ns1__GetFieldInfo(soap*, ...) allocate, set required members
/// - _ns1__GetFieldInfo* soap_new_set__ns1__GetFieldInfo(soap*, ...) allocate, set all public members
/// - _ns1__GetFieldInfo::soap_default(soap*) default initialize members
/// - int soap_read__ns1__GetFieldInfo(soap*, _ns1__GetFieldInfo*) deserialize from a stream
/// - int soap_write__ns1__GetFieldInfo(soap*, _ns1__GetFieldInfo*) serialize to a stream
/// - _ns1__GetFieldInfo* _ns1__GetFieldInfo::soap_dup(soap*) returns deep copy of _ns1__GetFieldInfo, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GetFieldInfo::soap_del() deep deletes _ns1__GetFieldInfo data members, use only after _ns1__GetFieldInfo::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__GetFieldInfo
{ public:
/// Element "tabname" of XSD type xs:string.
    char*                                tabname                        0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://zbxhupdata.com/webservices/":GetFieldInfoResponse
/// @brief "http://zbxhupdata.com/webservices/":GetFieldInfoResponse is a complexType.
///
/// class _ns1__GetFieldInfoResponse operations:
/// - _ns1__GetFieldInfoResponse* soap_new__ns1__GetFieldInfoResponse(soap*) allocate and default initialize
/// - _ns1__GetFieldInfoResponse* soap_new__ns1__GetFieldInfoResponse(soap*, int num) allocate array and default initialize values
/// - _ns1__GetFieldInfoResponse* soap_new_req__ns1__GetFieldInfoResponse(soap*, ...) allocate, set required members
/// - _ns1__GetFieldInfoResponse* soap_new_set__ns1__GetFieldInfoResponse(soap*, ...) allocate, set all public members
/// - _ns1__GetFieldInfoResponse::soap_default(soap*) default initialize members
/// - int soap_read__ns1__GetFieldInfoResponse(soap*, _ns1__GetFieldInfoResponse*) deserialize from a stream
/// - int soap_write__ns1__GetFieldInfoResponse(soap*, _ns1__GetFieldInfoResponse*) serialize to a stream
/// - _ns1__GetFieldInfoResponse* _ns1__GetFieldInfoResponse::soap_dup(soap*) returns deep copy of _ns1__GetFieldInfoResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GetFieldInfoResponse::soap_del() deep deletes _ns1__GetFieldInfoResponse data members, use only after _ns1__GetFieldInfoResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__GetFieldInfoResponse
{ public:
/// Element "GetFieldInfoResult" of XSD type xs:string.
    char*                                GetFieldInfoResult             0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://zbxhupdata.com/webservices/":ExecuteSqlForFile
/// @brief "http://zbxhupdata.com/webservices/":ExecuteSqlForFile is a complexType.
///
/// class _ns1__ExecuteSqlForFile operations:
/// - _ns1__ExecuteSqlForFile* soap_new__ns1__ExecuteSqlForFile(soap*) allocate and default initialize
/// - _ns1__ExecuteSqlForFile* soap_new__ns1__ExecuteSqlForFile(soap*, int num) allocate array and default initialize values
/// - _ns1__ExecuteSqlForFile* soap_new_req__ns1__ExecuteSqlForFile(soap*, ...) allocate, set required members
/// - _ns1__ExecuteSqlForFile* soap_new_set__ns1__ExecuteSqlForFile(soap*, ...) allocate, set all public members
/// - _ns1__ExecuteSqlForFile::soap_default(soap*) default initialize members
/// - int soap_read__ns1__ExecuteSqlForFile(soap*, _ns1__ExecuteSqlForFile*) deserialize from a stream
/// - int soap_write__ns1__ExecuteSqlForFile(soap*, _ns1__ExecuteSqlForFile*) serialize to a stream
/// - _ns1__ExecuteSqlForFile* _ns1__ExecuteSqlForFile::soap_dup(soap*) returns deep copy of _ns1__ExecuteSqlForFile, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__ExecuteSqlForFile::soap_del() deep deletes _ns1__ExecuteSqlForFile data members, use only after _ns1__ExecuteSqlForFile::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__ExecuteSqlForFile
{ public:
/// Element "xml" of XSD type xs:string.
    char*                                xml                            0;	///< Optional element.
/// Element "filename" of XSD type xs:string.
    char*                                filename                       0;	///< Optional element.
/// Element "fieldValue" of XSD type xs:string.
    char*                                fieldValue                     0;	///< Optional element.
/// Element "dwname" of XSD type xs:string.
    char*                                dwname                         0;	///< Optional element.
/// Element "dirname" of XSD type xs:string.
    char*                                dirname                        0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://zbxhupdata.com/webservices/":ExecuteSqlForFileResponse
/// @brief "http://zbxhupdata.com/webservices/":ExecuteSqlForFileResponse is a complexType.
///
/// class _ns1__ExecuteSqlForFileResponse operations:
/// - _ns1__ExecuteSqlForFileResponse* soap_new__ns1__ExecuteSqlForFileResponse(soap*) allocate and default initialize
/// - _ns1__ExecuteSqlForFileResponse* soap_new__ns1__ExecuteSqlForFileResponse(soap*, int num) allocate array and default initialize values
/// - _ns1__ExecuteSqlForFileResponse* soap_new_req__ns1__ExecuteSqlForFileResponse(soap*, ...) allocate, set required members
/// - _ns1__ExecuteSqlForFileResponse* soap_new_set__ns1__ExecuteSqlForFileResponse(soap*, ...) allocate, set all public members
/// - _ns1__ExecuteSqlForFileResponse::soap_default(soap*) default initialize members
/// - int soap_read__ns1__ExecuteSqlForFileResponse(soap*, _ns1__ExecuteSqlForFileResponse*) deserialize from a stream
/// - int soap_write__ns1__ExecuteSqlForFileResponse(soap*, _ns1__ExecuteSqlForFileResponse*) serialize to a stream
/// - _ns1__ExecuteSqlForFileResponse* _ns1__ExecuteSqlForFileResponse::soap_dup(soap*) returns deep copy of _ns1__ExecuteSqlForFileResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__ExecuteSqlForFileResponse::soap_del() deep deletes _ns1__ExecuteSqlForFileResponse data members, use only after _ns1__ExecuteSqlForFileResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__ExecuteSqlForFileResponse
{ public:
/// Element "ExecuteSqlForFileResult" of XSD type xs:int.
    int                                  ExecuteSqlForFileResult        1;	///< Required element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://zbxhupdata.com/webservices/":DownLoadFile
/// @brief "http://zbxhupdata.com/webservices/":DownLoadFile is a complexType.
///
/// class _ns1__DownLoadFile operations:
/// - _ns1__DownLoadFile* soap_new__ns1__DownLoadFile(soap*) allocate and default initialize
/// - _ns1__DownLoadFile* soap_new__ns1__DownLoadFile(soap*, int num) allocate array and default initialize values
/// - _ns1__DownLoadFile* soap_new_req__ns1__DownLoadFile(soap*, ...) allocate, set required members
/// - _ns1__DownLoadFile* soap_new_set__ns1__DownLoadFile(soap*, ...) allocate, set all public members
/// - _ns1__DownLoadFile::soap_default(soap*) default initialize members
/// - int soap_read__ns1__DownLoadFile(soap*, _ns1__DownLoadFile*) deserialize from a stream
/// - int soap_write__ns1__DownLoadFile(soap*, _ns1__DownLoadFile*) serialize to a stream
/// - _ns1__DownLoadFile* _ns1__DownLoadFile::soap_dup(soap*) returns deep copy of _ns1__DownLoadFile, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__DownLoadFile::soap_del() deep deletes _ns1__DownLoadFile data members, use only after _ns1__DownLoadFile::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__DownLoadFile
{ public:
/// Element "dwname" of XSD type xs:string.
    char*                                dwname                         0;	///< Optional element.
/// Element "filename" of XSD type xs:string.
    char*                                filename                       0;	///< Optional element.
/// Element "dir" of XSD type xs:string.
    char*                                dir                            0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://zbxhupdata.com/webservices/":DownLoadFileResponse
/// @brief "http://zbxhupdata.com/webservices/":DownLoadFileResponse is a complexType.
///
/// class _ns1__DownLoadFileResponse operations:
/// - _ns1__DownLoadFileResponse* soap_new__ns1__DownLoadFileResponse(soap*) allocate and default initialize
/// - _ns1__DownLoadFileResponse* soap_new__ns1__DownLoadFileResponse(soap*, int num) allocate array and default initialize values
/// - _ns1__DownLoadFileResponse* soap_new_req__ns1__DownLoadFileResponse(soap*, ...) allocate, set required members
/// - _ns1__DownLoadFileResponse* soap_new_set__ns1__DownLoadFileResponse(soap*, ...) allocate, set all public members
/// - _ns1__DownLoadFileResponse::soap_default(soap*) default initialize members
/// - int soap_read__ns1__DownLoadFileResponse(soap*, _ns1__DownLoadFileResponse*) deserialize from a stream
/// - int soap_write__ns1__DownLoadFileResponse(soap*, _ns1__DownLoadFileResponse*) serialize to a stream
/// - _ns1__DownLoadFileResponse* _ns1__DownLoadFileResponse::soap_dup(soap*) returns deep copy of _ns1__DownLoadFileResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__DownLoadFileResponse::soap_del() deep deletes _ns1__DownLoadFileResponse data members, use only after _ns1__DownLoadFileResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__DownLoadFileResponse
{ public:
/// Element "DownLoadFileResult" of XSD type xs:string.
    char*                                DownLoadFileResult             0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://zbxhupdata.com/webservices/":WriteFile
/// @brief "http://zbxhupdata.com/webservices/":WriteFile is a complexType.
///
/// class _ns1__WriteFile operations:
/// - _ns1__WriteFile* soap_new__ns1__WriteFile(soap*) allocate and default initialize
/// - _ns1__WriteFile* soap_new__ns1__WriteFile(soap*, int num) allocate array and default initialize values
/// - _ns1__WriteFile* soap_new_req__ns1__WriteFile(soap*, ...) allocate, set required members
/// - _ns1__WriteFile* soap_new_set__ns1__WriteFile(soap*, ...) allocate, set all public members
/// - _ns1__WriteFile::soap_default(soap*) default initialize members
/// - int soap_read__ns1__WriteFile(soap*, _ns1__WriteFile*) deserialize from a stream
/// - int soap_write__ns1__WriteFile(soap*, _ns1__WriteFile*) serialize to a stream
/// - _ns1__WriteFile* _ns1__WriteFile::soap_dup(soap*) returns deep copy of _ns1__WriteFile, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__WriteFile::soap_del() deep deletes _ns1__WriteFile data members, use only after _ns1__WriteFile::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__WriteFile
{ public:
/// Element "msg" of XSD type xs:string.
    char*                                msg                            0;	///< Optional element.
/// Element "filename" of XSD type xs:string.
    char*                                filename                       0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://zbxhupdata.com/webservices/":WriteFileResponse
/// @brief "http://zbxhupdata.com/webservices/":WriteFileResponse is a complexType.
///
/// class _ns1__WriteFileResponse operations:
/// - _ns1__WriteFileResponse* soap_new__ns1__WriteFileResponse(soap*) allocate and default initialize
/// - _ns1__WriteFileResponse* soap_new__ns1__WriteFileResponse(soap*, int num) allocate array and default initialize values
/// - _ns1__WriteFileResponse* soap_new_req__ns1__WriteFileResponse(soap*, ...) allocate, set required members
/// - _ns1__WriteFileResponse* soap_new_set__ns1__WriteFileResponse(soap*, ...) allocate, set all public members
/// - _ns1__WriteFileResponse::soap_default(soap*) default initialize members
/// - int soap_read__ns1__WriteFileResponse(soap*, _ns1__WriteFileResponse*) deserialize from a stream
/// - int soap_write__ns1__WriteFileResponse(soap*, _ns1__WriteFileResponse*) serialize to a stream
/// - _ns1__WriteFileResponse* _ns1__WriteFileResponse::soap_dup(soap*) returns deep copy of _ns1__WriteFileResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__WriteFileResponse::soap_del() deep deletes _ns1__WriteFileResponse data members, use only after _ns1__WriteFileResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__WriteFileResponse
{ public:
/// Element "WriteFileResult" of XSD type xs:string.
    char*                                WriteFileResult                0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://zbxhupdata.com/webservices/":GetMapUpdateTime
/// @brief "http://zbxhupdata.com/webservices/":GetMapUpdateTime is a complexType.
///
/// class _ns1__GetMapUpdateTime operations:
/// - _ns1__GetMapUpdateTime* soap_new__ns1__GetMapUpdateTime(soap*) allocate and default initialize
/// - _ns1__GetMapUpdateTime* soap_new__ns1__GetMapUpdateTime(soap*, int num) allocate array and default initialize values
/// - _ns1__GetMapUpdateTime* soap_new_req__ns1__GetMapUpdateTime(soap*, ...) allocate, set required members
/// - _ns1__GetMapUpdateTime* soap_new_set__ns1__GetMapUpdateTime(soap*, ...) allocate, set all public members
/// - _ns1__GetMapUpdateTime::soap_default(soap*) default initialize members
/// - int soap_read__ns1__GetMapUpdateTime(soap*, _ns1__GetMapUpdateTime*) deserialize from a stream
/// - int soap_write__ns1__GetMapUpdateTime(soap*, _ns1__GetMapUpdateTime*) serialize to a stream
/// - _ns1__GetMapUpdateTime* _ns1__GetMapUpdateTime::soap_dup(soap*) returns deep copy of _ns1__GetMapUpdateTime, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GetMapUpdateTime::soap_del() deep deletes _ns1__GetMapUpdateTime data members, use only after _ns1__GetMapUpdateTime::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__GetMapUpdateTime
{ public:
/// Element "uptime" of XSD type xs:string.
    char*                                uptime                         0;	///< Optional element.
/// Element "dwname" of XSD type xs:string.
    char*                                dwname                         0;	///< Optional element.
/// Element "filename" of XSD type xs:string.
    char*                                filename                       0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://zbxhupdata.com/webservices/":GetMapUpdateTimeResponse
/// @brief "http://zbxhupdata.com/webservices/":GetMapUpdateTimeResponse is a complexType.
///
/// class _ns1__GetMapUpdateTimeResponse operations:
/// - _ns1__GetMapUpdateTimeResponse* soap_new__ns1__GetMapUpdateTimeResponse(soap*) allocate and default initialize
/// - _ns1__GetMapUpdateTimeResponse* soap_new__ns1__GetMapUpdateTimeResponse(soap*, int num) allocate array and default initialize values
/// - _ns1__GetMapUpdateTimeResponse* soap_new_req__ns1__GetMapUpdateTimeResponse(soap*, ...) allocate, set required members
/// - _ns1__GetMapUpdateTimeResponse* soap_new_set__ns1__GetMapUpdateTimeResponse(soap*, ...) allocate, set all public members
/// - _ns1__GetMapUpdateTimeResponse::soap_default(soap*) default initialize members
/// - int soap_read__ns1__GetMapUpdateTimeResponse(soap*, _ns1__GetMapUpdateTimeResponse*) deserialize from a stream
/// - int soap_write__ns1__GetMapUpdateTimeResponse(soap*, _ns1__GetMapUpdateTimeResponse*) serialize to a stream
/// - _ns1__GetMapUpdateTimeResponse* _ns1__GetMapUpdateTimeResponse::soap_dup(soap*) returns deep copy of _ns1__GetMapUpdateTimeResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GetMapUpdateTimeResponse::soap_del() deep deletes _ns1__GetMapUpdateTimeResponse data members, use only after _ns1__GetMapUpdateTimeResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__GetMapUpdateTimeResponse
{ public:
/// Element "GetMapUpdateTimeResult" of XSD type xs:string.
    char*                                GetMapUpdateTimeResult         0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://zbxhupdata.com/webservices/":GetMapTabName
/// @brief "http://zbxhupdata.com/webservices/":GetMapTabName is a complexType.
///
/// class _ns1__GetMapTabName operations:
/// - _ns1__GetMapTabName* soap_new__ns1__GetMapTabName(soap*) allocate and default initialize
/// - _ns1__GetMapTabName* soap_new__ns1__GetMapTabName(soap*, int num) allocate array and default initialize values
/// - _ns1__GetMapTabName* soap_new_req__ns1__GetMapTabName(soap*, ...) allocate, set required members
/// - _ns1__GetMapTabName* soap_new_set__ns1__GetMapTabName(soap*, ...) allocate, set all public members
/// - _ns1__GetMapTabName::soap_default(soap*) default initialize members
/// - int soap_read__ns1__GetMapTabName(soap*, _ns1__GetMapTabName*) deserialize from a stream
/// - int soap_write__ns1__GetMapTabName(soap*, _ns1__GetMapTabName*) serialize to a stream
/// - _ns1__GetMapTabName* _ns1__GetMapTabName::soap_dup(soap*) returns deep copy of _ns1__GetMapTabName, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GetMapTabName::soap_del() deep deletes _ns1__GetMapTabName data members, use only after _ns1__GetMapTabName::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__GetMapTabName
{ public:
/// Element "maptype" of XSD type xs:string.
    char*                                maptype                        0;	///< Optional element.
/// Element "filename" of XSD type xs:string.
    char*                                filename                       0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://zbxhupdata.com/webservices/":GetMapTabNameResponse
/// @brief "http://zbxhupdata.com/webservices/":GetMapTabNameResponse is a complexType.
///
/// class _ns1__GetMapTabNameResponse operations:
/// - _ns1__GetMapTabNameResponse* soap_new__ns1__GetMapTabNameResponse(soap*) allocate and default initialize
/// - _ns1__GetMapTabNameResponse* soap_new__ns1__GetMapTabNameResponse(soap*, int num) allocate array and default initialize values
/// - _ns1__GetMapTabNameResponse* soap_new_req__ns1__GetMapTabNameResponse(soap*, ...) allocate, set required members
/// - _ns1__GetMapTabNameResponse* soap_new_set__ns1__GetMapTabNameResponse(soap*, ...) allocate, set all public members
/// - _ns1__GetMapTabNameResponse::soap_default(soap*) default initialize members
/// - int soap_read__ns1__GetMapTabNameResponse(soap*, _ns1__GetMapTabNameResponse*) deserialize from a stream
/// - int soap_write__ns1__GetMapTabNameResponse(soap*, _ns1__GetMapTabNameResponse*) serialize to a stream
/// - _ns1__GetMapTabNameResponse* _ns1__GetMapTabNameResponse::soap_dup(soap*) returns deep copy of _ns1__GetMapTabNameResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GetMapTabNameResponse::soap_del() deep deletes _ns1__GetMapTabNameResponse data members, use only after _ns1__GetMapTabNameResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__GetMapTabNameResponse
{ public:
/// Element "GetMapTabNameResult" of XSD type xs:string.
    char*                                GetMapTabNameResult            0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://zbxhupdata.com/webservices/":GetMapDeviceData
/// @brief "http://zbxhupdata.com/webservices/":GetMapDeviceData is a complexType.
///
/// class _ns1__GetMapDeviceData operations:
/// - _ns1__GetMapDeviceData* soap_new__ns1__GetMapDeviceData(soap*) allocate and default initialize
/// - _ns1__GetMapDeviceData* soap_new__ns1__GetMapDeviceData(soap*, int num) allocate array and default initialize values
/// - _ns1__GetMapDeviceData* soap_new_req__ns1__GetMapDeviceData(soap*, ...) allocate, set required members
/// - _ns1__GetMapDeviceData* soap_new_set__ns1__GetMapDeviceData(soap*, ...) allocate, set all public members
/// - _ns1__GetMapDeviceData::soap_default(soap*) default initialize members
/// - int soap_read__ns1__GetMapDeviceData(soap*, _ns1__GetMapDeviceData*) deserialize from a stream
/// - int soap_write__ns1__GetMapDeviceData(soap*, _ns1__GetMapDeviceData*) serialize to a stream
/// - _ns1__GetMapDeviceData* _ns1__GetMapDeviceData::soap_dup(soap*) returns deep copy of _ns1__GetMapDeviceData, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GetMapDeviceData::soap_del() deep deletes _ns1__GetMapDeviceData data members, use only after _ns1__GetMapDeviceData::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__GetMapDeviceData
{ public:
/// Element "tabname" of XSD type xs:string.
    char*                                tabname                        0;	///< Optional element.
/// Element "Lh" of XSD type xs:string.
    char*                                Lh                             0;	///< Optional element.
/// Element "mapid" of XSD type xs:string.
    char*                                mapid                          0;	///< Optional element.
/// Element "filename" of XSD type xs:string.
    char*                                filename                       0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://zbxhupdata.com/webservices/":GetMapDeviceDataResponse
/// @brief "http://zbxhupdata.com/webservices/":GetMapDeviceDataResponse is a complexType.
///
/// class _ns1__GetMapDeviceDataResponse operations:
/// - _ns1__GetMapDeviceDataResponse* soap_new__ns1__GetMapDeviceDataResponse(soap*) allocate and default initialize
/// - _ns1__GetMapDeviceDataResponse* soap_new__ns1__GetMapDeviceDataResponse(soap*, int num) allocate array and default initialize values
/// - _ns1__GetMapDeviceDataResponse* soap_new_req__ns1__GetMapDeviceDataResponse(soap*, ...) allocate, set required members
/// - _ns1__GetMapDeviceDataResponse* soap_new_set__ns1__GetMapDeviceDataResponse(soap*, ...) allocate, set all public members
/// - _ns1__GetMapDeviceDataResponse::soap_default(soap*) default initialize members
/// - int soap_read__ns1__GetMapDeviceDataResponse(soap*, _ns1__GetMapDeviceDataResponse*) deserialize from a stream
/// - int soap_write__ns1__GetMapDeviceDataResponse(soap*, _ns1__GetMapDeviceDataResponse*) serialize to a stream
/// - _ns1__GetMapDeviceDataResponse* _ns1__GetMapDeviceDataResponse::soap_dup(soap*) returns deep copy of _ns1__GetMapDeviceDataResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GetMapDeviceDataResponse::soap_del() deep deletes _ns1__GetMapDeviceDataResponse data members, use only after _ns1__GetMapDeviceDataResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__GetMapDeviceDataResponse
{ public:
/// Element "GetMapDeviceDataResult" of XSD type xs:string.
    char*                                GetMapDeviceDataResult         0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://zbxhupdata.com/webservices/":GetMaList
/// @brief "http://zbxhupdata.com/webservices/":GetMaList is a complexType.
///
/// class _ns1__GetMaList operations:
/// - _ns1__GetMaList* soap_new__ns1__GetMaList(soap*) allocate and default initialize
/// - _ns1__GetMaList* soap_new__ns1__GetMaList(soap*, int num) allocate array and default initialize values
/// - _ns1__GetMaList* soap_new_req__ns1__GetMaList(soap*, ...) allocate, set required members
/// - _ns1__GetMaList* soap_new_set__ns1__GetMaList(soap*, ...) allocate, set all public members
/// - _ns1__GetMaList::soap_default(soap*) default initialize members
/// - int soap_read__ns1__GetMaList(soap*, _ns1__GetMaList*) deserialize from a stream
/// - int soap_write__ns1__GetMaList(soap*, _ns1__GetMaList*) serialize to a stream
/// - _ns1__GetMaList* _ns1__GetMaList::soap_dup(soap*) returns deep copy of _ns1__GetMaList, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GetMaList::soap_del() deep deletes _ns1__GetMaList data members, use only after _ns1__GetMaList::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__GetMaList
{ public:
/// Element "Lh" of XSD type xs:string.
    char*                                Lh                             0;	///< Optional element.
/// Element "mapid" of XSD type xs:string.
    char*                                mapid                          0;	///< Optional element.
/// Element "mflag" of XSD type xs:string.
    char*                                mflag                          0;	///< Optional element.
/// Element "filename" of XSD type xs:string.
    char*                                filename                       0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://zbxhupdata.com/webservices/":GetMaListResponse
/// @brief "http://zbxhupdata.com/webservices/":GetMaListResponse is a complexType.
///
/// class _ns1__GetMaListResponse operations:
/// - _ns1__GetMaListResponse* soap_new__ns1__GetMaListResponse(soap*) allocate and default initialize
/// - _ns1__GetMaListResponse* soap_new__ns1__GetMaListResponse(soap*, int num) allocate array and default initialize values
/// - _ns1__GetMaListResponse* soap_new_req__ns1__GetMaListResponse(soap*, ...) allocate, set required members
/// - _ns1__GetMaListResponse* soap_new_set__ns1__GetMaListResponse(soap*, ...) allocate, set all public members
/// - _ns1__GetMaListResponse::soap_default(soap*) default initialize members
/// - int soap_read__ns1__GetMaListResponse(soap*, _ns1__GetMaListResponse*) deserialize from a stream
/// - int soap_write__ns1__GetMaListResponse(soap*, _ns1__GetMaListResponse*) serialize to a stream
/// - _ns1__GetMaListResponse* _ns1__GetMaListResponse::soap_dup(soap*) returns deep copy of _ns1__GetMaListResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GetMaListResponse::soap_del() deep deletes _ns1__GetMaListResponse data members, use only after _ns1__GetMaListResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__GetMaListResponse
{ public:
/// Element "GetMaListResult" of XSD type xs:string.
    char*                                GetMaListResult                0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://zbxhupdata.com/webservices/":GetMangeUnit
/// @brief "http://zbxhupdata.com/webservices/":GetMangeUnit is a complexType.
///
/// class _ns1__GetMangeUnit operations:
/// - _ns1__GetMangeUnit* soap_new__ns1__GetMangeUnit(soap*) allocate and default initialize
/// - _ns1__GetMangeUnit* soap_new__ns1__GetMangeUnit(soap*, int num) allocate array and default initialize values
/// - _ns1__GetMangeUnit* soap_new_req__ns1__GetMangeUnit(soap*, ...) allocate, set required members
/// - _ns1__GetMangeUnit* soap_new_set__ns1__GetMangeUnit(soap*, ...) allocate, set all public members
/// - _ns1__GetMangeUnit::soap_default(soap*) default initialize members
/// - int soap_read__ns1__GetMangeUnit(soap*, _ns1__GetMangeUnit*) deserialize from a stream
/// - int soap_write__ns1__GetMangeUnit(soap*, _ns1__GetMangeUnit*) serialize to a stream
/// - _ns1__GetMangeUnit* _ns1__GetMangeUnit::soap_dup(soap*) returns deep copy of _ns1__GetMangeUnit, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GetMangeUnit::soap_del() deep deletes _ns1__GetMangeUnit data members, use only after _ns1__GetMangeUnit::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__GetMangeUnit
{ public:
/// Element "dwname" of XSD type xs:string.
    char*                                dwname                         0;	///< Optional element.
/// Element "filename" of XSD type xs:string.
    char*                                filename                       0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://zbxhupdata.com/webservices/":GetMangeUnitResponse
/// @brief "http://zbxhupdata.com/webservices/":GetMangeUnitResponse is a complexType.
///
/// class _ns1__GetMangeUnitResponse operations:
/// - _ns1__GetMangeUnitResponse* soap_new__ns1__GetMangeUnitResponse(soap*) allocate and default initialize
/// - _ns1__GetMangeUnitResponse* soap_new__ns1__GetMangeUnitResponse(soap*, int num) allocate array and default initialize values
/// - _ns1__GetMangeUnitResponse* soap_new_req__ns1__GetMangeUnitResponse(soap*, ...) allocate, set required members
/// - _ns1__GetMangeUnitResponse* soap_new_set__ns1__GetMangeUnitResponse(soap*, ...) allocate, set all public members
/// - _ns1__GetMangeUnitResponse::soap_default(soap*) default initialize members
/// - int soap_read__ns1__GetMangeUnitResponse(soap*, _ns1__GetMangeUnitResponse*) deserialize from a stream
/// - int soap_write__ns1__GetMangeUnitResponse(soap*, _ns1__GetMangeUnitResponse*) serialize to a stream
/// - _ns1__GetMangeUnitResponse* _ns1__GetMangeUnitResponse::soap_dup(soap*) returns deep copy of _ns1__GetMangeUnitResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GetMangeUnitResponse::soap_del() deep deletes _ns1__GetMangeUnitResponse data members, use only after _ns1__GetMangeUnitResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__GetMangeUnitResponse
{ public:
/// Element "GetMangeUnitResult" of XSD type xs:string.
    char*                                GetMangeUnitResult             0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://zbxhupdata.com/webservices/":GetMangeXb
/// @brief "http://zbxhupdata.com/webservices/":GetMangeXb is a complexType.
///
/// class _ns1__GetMangeXb operations:
/// - _ns1__GetMangeXb* soap_new__ns1__GetMangeXb(soap*) allocate and default initialize
/// - _ns1__GetMangeXb* soap_new__ns1__GetMangeXb(soap*, int num) allocate array and default initialize values
/// - _ns1__GetMangeXb* soap_new_req__ns1__GetMangeXb(soap*, ...) allocate, set required members
/// - _ns1__GetMangeXb* soap_new_set__ns1__GetMangeXb(soap*, ...) allocate, set all public members
/// - _ns1__GetMangeXb::soap_default(soap*) default initialize members
/// - int soap_read__ns1__GetMangeXb(soap*, _ns1__GetMangeXb*) deserialize from a stream
/// - int soap_write__ns1__GetMangeXb(soap*, _ns1__GetMangeXb*) serialize to a stream
/// - _ns1__GetMangeXb* _ns1__GetMangeXb::soap_dup(soap*) returns deep copy of _ns1__GetMangeXb, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GetMangeXb::soap_del() deep deletes _ns1__GetMangeXb data members, use only after _ns1__GetMangeXb::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__GetMangeXb
{ public:
/// Element "dwname" of XSD type xs:string.
    char*                                dwname                         0;	///< Optional element.
/// Element "filename" of XSD type xs:string.
    char*                                filename                       0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://zbxhupdata.com/webservices/":GetMangeXbResponse
/// @brief "http://zbxhupdata.com/webservices/":GetMangeXbResponse is a complexType.
///
/// class _ns1__GetMangeXbResponse operations:
/// - _ns1__GetMangeXbResponse* soap_new__ns1__GetMangeXbResponse(soap*) allocate and default initialize
/// - _ns1__GetMangeXbResponse* soap_new__ns1__GetMangeXbResponse(soap*, int num) allocate array and default initialize values
/// - _ns1__GetMangeXbResponse* soap_new_req__ns1__GetMangeXbResponse(soap*, ...) allocate, set required members
/// - _ns1__GetMangeXbResponse* soap_new_set__ns1__GetMangeXbResponse(soap*, ...) allocate, set all public members
/// - _ns1__GetMangeXbResponse::soap_default(soap*) default initialize members
/// - int soap_read__ns1__GetMangeXbResponse(soap*, _ns1__GetMangeXbResponse*) deserialize from a stream
/// - int soap_write__ns1__GetMangeXbResponse(soap*, _ns1__GetMangeXbResponse*) serialize to a stream
/// - _ns1__GetMangeXbResponse* _ns1__GetMangeXbResponse::soap_dup(soap*) returns deep copy of _ns1__GetMangeXbResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GetMangeXbResponse::soap_del() deep deletes _ns1__GetMangeXbResponse data members, use only after _ns1__GetMangeXbResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__GetMangeXbResponse
{ public:
/// Element "GetMangeXbResult" of XSD type xs:string.
    char*                                GetMangeXbResult               0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://zbxhupdata.com/webservices/":CheckMapVer
/// @brief "http://zbxhupdata.com/webservices/":CheckMapVer is a complexType.
///
/// class _ns1__CheckMapVer operations:
/// - _ns1__CheckMapVer* soap_new__ns1__CheckMapVer(soap*) allocate and default initialize
/// - _ns1__CheckMapVer* soap_new__ns1__CheckMapVer(soap*, int num) allocate array and default initialize values
/// - _ns1__CheckMapVer* soap_new_req__ns1__CheckMapVer(soap*, ...) allocate, set required members
/// - _ns1__CheckMapVer* soap_new_set__ns1__CheckMapVer(soap*, ...) allocate, set all public members
/// - _ns1__CheckMapVer::soap_default(soap*) default initialize members
/// - int soap_read__ns1__CheckMapVer(soap*, _ns1__CheckMapVer*) deserialize from a stream
/// - int soap_write__ns1__CheckMapVer(soap*, _ns1__CheckMapVer*) serialize to a stream
/// - _ns1__CheckMapVer* _ns1__CheckMapVer::soap_dup(soap*) returns deep copy of _ns1__CheckMapVer, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__CheckMapVer::soap_del() deep deletes _ns1__CheckMapVer data members, use only after _ns1__CheckMapVer::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__CheckMapVer
{ public:
/// Element "ver" of XSD type xs:string.
    char*                                ver                            0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://zbxhupdata.com/webservices/":CheckMapVerResponse
/// @brief "http://zbxhupdata.com/webservices/":CheckMapVerResponse is a complexType.
///
/// class _ns1__CheckMapVerResponse operations:
/// - _ns1__CheckMapVerResponse* soap_new__ns1__CheckMapVerResponse(soap*) allocate and default initialize
/// - _ns1__CheckMapVerResponse* soap_new__ns1__CheckMapVerResponse(soap*, int num) allocate array and default initialize values
/// - _ns1__CheckMapVerResponse* soap_new_req__ns1__CheckMapVerResponse(soap*, ...) allocate, set required members
/// - _ns1__CheckMapVerResponse* soap_new_set__ns1__CheckMapVerResponse(soap*, ...) allocate, set all public members
/// - _ns1__CheckMapVerResponse::soap_default(soap*) default initialize members
/// - int soap_read__ns1__CheckMapVerResponse(soap*, _ns1__CheckMapVerResponse*) deserialize from a stream
/// - int soap_write__ns1__CheckMapVerResponse(soap*, _ns1__CheckMapVerResponse*) serialize to a stream
/// - _ns1__CheckMapVerResponse* _ns1__CheckMapVerResponse::soap_dup(soap*) returns deep copy of _ns1__CheckMapVerResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__CheckMapVerResponse::soap_del() deep deletes _ns1__CheckMapVerResponse data members, use only after _ns1__CheckMapVerResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__CheckMapVerResponse
{ public:
/// Element "CheckMapVerResult" of XSD type xs:string.
    char*                                CheckMapVerResult              0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://zbxhupdata.com/webservices/":GetMap
/// @brief "http://zbxhupdata.com/webservices/":GetMap is a complexType.
///
/// class _ns1__GetMap operations:
/// - _ns1__GetMap* soap_new__ns1__GetMap(soap*) allocate and default initialize
/// - _ns1__GetMap* soap_new__ns1__GetMap(soap*, int num) allocate array and default initialize values
/// - _ns1__GetMap* soap_new_req__ns1__GetMap(soap*, ...) allocate, set required members
/// - _ns1__GetMap* soap_new_set__ns1__GetMap(soap*, ...) allocate, set all public members
/// - _ns1__GetMap::soap_default(soap*) default initialize members
/// - int soap_read__ns1__GetMap(soap*, _ns1__GetMap*) deserialize from a stream
/// - int soap_write__ns1__GetMap(soap*, _ns1__GetMap*) serialize to a stream
/// - _ns1__GetMap* _ns1__GetMap::soap_dup(soap*) returns deep copy of _ns1__GetMap, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GetMap::soap_del() deep deletes _ns1__GetMap data members, use only after _ns1__GetMap::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__GetMap
{ public:
/// Element "filename" of XSD type xs:string.
    char*                                filename                       0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://zbxhupdata.com/webservices/":GetMapResponse
/// @brief "http://zbxhupdata.com/webservices/":GetMapResponse is a complexType.
///
/// class _ns1__GetMapResponse operations:
/// - _ns1__GetMapResponse* soap_new__ns1__GetMapResponse(soap*) allocate and default initialize
/// - _ns1__GetMapResponse* soap_new__ns1__GetMapResponse(soap*, int num) allocate array and default initialize values
/// - _ns1__GetMapResponse* soap_new_req__ns1__GetMapResponse(soap*, ...) allocate, set required members
/// - _ns1__GetMapResponse* soap_new_set__ns1__GetMapResponse(soap*, ...) allocate, set all public members
/// - _ns1__GetMapResponse::soap_default(soap*) default initialize members
/// - int soap_read__ns1__GetMapResponse(soap*, _ns1__GetMapResponse*) deserialize from a stream
/// - int soap_write__ns1__GetMapResponse(soap*, _ns1__GetMapResponse*) serialize to a stream
/// - _ns1__GetMapResponse* _ns1__GetMapResponse::soap_dup(soap*) returns deep copy of _ns1__GetMapResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GetMapResponse::soap_del() deep deletes _ns1__GetMapResponse data members, use only after _ns1__GetMapResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__GetMapResponse
{ public:
/// Element "GetMapResult" of XSD type xs:string.
    char*                                GetMapResult                   0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://zbxhupdata.com/webservices/":GetTableData
/// @brief "http://zbxhupdata.com/webservices/":GetTableData is a complexType.
///
/// class _ns1__GetTableData operations:
/// - _ns1__GetTableData* soap_new__ns1__GetTableData(soap*) allocate and default initialize
/// - _ns1__GetTableData* soap_new__ns1__GetTableData(soap*, int num) allocate array and default initialize values
/// - _ns1__GetTableData* soap_new_req__ns1__GetTableData(soap*, ...) allocate, set required members
/// - _ns1__GetTableData* soap_new_set__ns1__GetTableData(soap*, ...) allocate, set all public members
/// - _ns1__GetTableData::soap_default(soap*) default initialize members
/// - int soap_read__ns1__GetTableData(soap*, _ns1__GetTableData*) deserialize from a stream
/// - int soap_write__ns1__GetTableData(soap*, _ns1__GetTableData*) serialize to a stream
/// - _ns1__GetTableData* _ns1__GetTableData::soap_dup(soap*) returns deep copy of _ns1__GetTableData, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GetTableData::soap_del() deep deletes _ns1__GetTableData data members, use only after _ns1__GetTableData::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__GetTableData
{ public:
/// Element "tabname" of XSD type xs:string.
    char*                                tabname                        0;	///< Optional element.
/// Element "filename" of XSD type xs:string.
    char*                                filename                       0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://zbxhupdata.com/webservices/":GetTableDataResponse
/// @brief "http://zbxhupdata.com/webservices/":GetTableDataResponse is a complexType.
///
/// class _ns1__GetTableDataResponse operations:
/// - _ns1__GetTableDataResponse* soap_new__ns1__GetTableDataResponse(soap*) allocate and default initialize
/// - _ns1__GetTableDataResponse* soap_new__ns1__GetTableDataResponse(soap*, int num) allocate array and default initialize values
/// - _ns1__GetTableDataResponse* soap_new_req__ns1__GetTableDataResponse(soap*, ...) allocate, set required members
/// - _ns1__GetTableDataResponse* soap_new_set__ns1__GetTableDataResponse(soap*, ...) allocate, set all public members
/// - _ns1__GetTableDataResponse::soap_default(soap*) default initialize members
/// - int soap_read__ns1__GetTableDataResponse(soap*, _ns1__GetTableDataResponse*) deserialize from a stream
/// - int soap_write__ns1__GetTableDataResponse(soap*, _ns1__GetTableDataResponse*) serialize to a stream
/// - _ns1__GetTableDataResponse* _ns1__GetTableDataResponse::soap_dup(soap*) returns deep copy of _ns1__GetTableDataResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GetTableDataResponse::soap_del() deep deletes _ns1__GetTableDataResponse data members, use only after _ns1__GetTableDataResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__GetTableDataResponse
{ public:
/// Element "GetTableDataResult" of XSD type xs:string.
    char*                                GetTableDataResult             0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://zbxhupdata.com/webservices/":ServerLevel
/// @brief "http://zbxhupdata.com/webservices/":ServerLevel is a complexType.
///
/// class _ns1__ServerLevel operations:
/// - _ns1__ServerLevel* soap_new__ns1__ServerLevel(soap*) allocate and default initialize
/// - _ns1__ServerLevel* soap_new__ns1__ServerLevel(soap*, int num) allocate array and default initialize values
/// - _ns1__ServerLevel* soap_new_req__ns1__ServerLevel(soap*, ...) allocate, set required members
/// - _ns1__ServerLevel* soap_new_set__ns1__ServerLevel(soap*, ...) allocate, set all public members
/// - _ns1__ServerLevel::soap_default(soap*) default initialize members
/// - int soap_read__ns1__ServerLevel(soap*, _ns1__ServerLevel*) deserialize from a stream
/// - int soap_write__ns1__ServerLevel(soap*, _ns1__ServerLevel*) serialize to a stream
/// - _ns1__ServerLevel* _ns1__ServerLevel::soap_dup(soap*) returns deep copy of _ns1__ServerLevel, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__ServerLevel::soap_del() deep deletes _ns1__ServerLevel data members, use only after _ns1__ServerLevel::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__ServerLevel
{ public:
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://zbxhupdata.com/webservices/":ServerLevelResponse
/// @brief "http://zbxhupdata.com/webservices/":ServerLevelResponse is a complexType.
///
/// class _ns1__ServerLevelResponse operations:
/// - _ns1__ServerLevelResponse* soap_new__ns1__ServerLevelResponse(soap*) allocate and default initialize
/// - _ns1__ServerLevelResponse* soap_new__ns1__ServerLevelResponse(soap*, int num) allocate array and default initialize values
/// - _ns1__ServerLevelResponse* soap_new_req__ns1__ServerLevelResponse(soap*, ...) allocate, set required members
/// - _ns1__ServerLevelResponse* soap_new_set__ns1__ServerLevelResponse(soap*, ...) allocate, set all public members
/// - _ns1__ServerLevelResponse::soap_default(soap*) default initialize members
/// - int soap_read__ns1__ServerLevelResponse(soap*, _ns1__ServerLevelResponse*) deserialize from a stream
/// - int soap_write__ns1__ServerLevelResponse(soap*, _ns1__ServerLevelResponse*) serialize to a stream
/// - _ns1__ServerLevelResponse* _ns1__ServerLevelResponse::soap_dup(soap*) returns deep copy of _ns1__ServerLevelResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__ServerLevelResponse::soap_del() deep deletes _ns1__ServerLevelResponse data members, use only after _ns1__ServerLevelResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__ServerLevelResponse
{ public:
/// Element "ServerLevelResult" of XSD type xs:string.
    char*                                ServerLevelResult              0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://zbxhupdata.com/webservices/":GetMapListTime
/// @brief "http://zbxhupdata.com/webservices/":GetMapListTime is a complexType.
///
/// class _ns1__GetMapListTime operations:
/// - _ns1__GetMapListTime* soap_new__ns1__GetMapListTime(soap*) allocate and default initialize
/// - _ns1__GetMapListTime* soap_new__ns1__GetMapListTime(soap*, int num) allocate array and default initialize values
/// - _ns1__GetMapListTime* soap_new_req__ns1__GetMapListTime(soap*, ...) allocate, set required members
/// - _ns1__GetMapListTime* soap_new_set__ns1__GetMapListTime(soap*, ...) allocate, set all public members
/// - _ns1__GetMapListTime::soap_default(soap*) default initialize members
/// - int soap_read__ns1__GetMapListTime(soap*, _ns1__GetMapListTime*) deserialize from a stream
/// - int soap_write__ns1__GetMapListTime(soap*, _ns1__GetMapListTime*) serialize to a stream
/// - _ns1__GetMapListTime* _ns1__GetMapListTime::soap_dup(soap*) returns deep copy of _ns1__GetMapListTime, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GetMapListTime::soap_del() deep deletes _ns1__GetMapListTime data members, use only after _ns1__GetMapListTime::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__GetMapListTime
{ public:
/// Element "uptime" of XSD type xs:string.
    char*                                uptime                         0;	///< Optional element.
/// Element "dwname" of XSD type xs:string.
    char*                                dwname                         0;	///< Optional element.
/// Element "filename" of XSD type xs:string.
    char*                                filename                       0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://zbxhupdata.com/webservices/":GetMapListTimeResponse
/// @brief "http://zbxhupdata.com/webservices/":GetMapListTimeResponse is a complexType.
///
/// class _ns1__GetMapListTimeResponse operations:
/// - _ns1__GetMapListTimeResponse* soap_new__ns1__GetMapListTimeResponse(soap*) allocate and default initialize
/// - _ns1__GetMapListTimeResponse* soap_new__ns1__GetMapListTimeResponse(soap*, int num) allocate array and default initialize values
/// - _ns1__GetMapListTimeResponse* soap_new_req__ns1__GetMapListTimeResponse(soap*, ...) allocate, set required members
/// - _ns1__GetMapListTimeResponse* soap_new_set__ns1__GetMapListTimeResponse(soap*, ...) allocate, set all public members
/// - _ns1__GetMapListTimeResponse::soap_default(soap*) default initialize members
/// - int soap_read__ns1__GetMapListTimeResponse(soap*, _ns1__GetMapListTimeResponse*) deserialize from a stream
/// - int soap_write__ns1__GetMapListTimeResponse(soap*, _ns1__GetMapListTimeResponse*) serialize to a stream
/// - _ns1__GetMapListTimeResponse* _ns1__GetMapListTimeResponse::soap_dup(soap*) returns deep copy of _ns1__GetMapListTimeResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GetMapListTimeResponse::soap_del() deep deletes _ns1__GetMapListTimeResponse data members, use only after _ns1__GetMapListTimeResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__GetMapListTimeResponse
{ public:
/// Element "GetMapListTimeResult" of XSD type xs:string.
    char*                                GetMapListTimeResult           0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://zbxhupdata.com/webservices/":UpdateGzclMap
/// @brief "http://zbxhupdata.com/webservices/":UpdateGzclMap is a complexType.
///
/// class _ns1__UpdateGzclMap operations:
/// - _ns1__UpdateGzclMap* soap_new__ns1__UpdateGzclMap(soap*) allocate and default initialize
/// - _ns1__UpdateGzclMap* soap_new__ns1__UpdateGzclMap(soap*, int num) allocate array and default initialize values
/// - _ns1__UpdateGzclMap* soap_new_req__ns1__UpdateGzclMap(soap*, ...) allocate, set required members
/// - _ns1__UpdateGzclMap* soap_new_set__ns1__UpdateGzclMap(soap*, ...) allocate, set all public members
/// - _ns1__UpdateGzclMap::soap_default(soap*) default initialize members
/// - int soap_read__ns1__UpdateGzclMap(soap*, _ns1__UpdateGzclMap*) deserialize from a stream
/// - int soap_write__ns1__UpdateGzclMap(soap*, _ns1__UpdateGzclMap*) serialize to a stream
/// - _ns1__UpdateGzclMap* _ns1__UpdateGzclMap::soap_dup(soap*) returns deep copy of _ns1__UpdateGzclMap, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__UpdateGzclMap::soap_del() deep deletes _ns1__UpdateGzclMap data members, use only after _ns1__UpdateGzclMap::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__UpdateGzclMap
{ public:
/// Element "xml" of XSD type xs:string.
    char*                                xml                            0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://zbxhupdata.com/webservices/":UpdateGzclMapResponse
/// @brief "http://zbxhupdata.com/webservices/":UpdateGzclMapResponse is a complexType.
///
/// class _ns1__UpdateGzclMapResponse operations:
/// - _ns1__UpdateGzclMapResponse* soap_new__ns1__UpdateGzclMapResponse(soap*) allocate and default initialize
/// - _ns1__UpdateGzclMapResponse* soap_new__ns1__UpdateGzclMapResponse(soap*, int num) allocate array and default initialize values
/// - _ns1__UpdateGzclMapResponse* soap_new_req__ns1__UpdateGzclMapResponse(soap*, ...) allocate, set required members
/// - _ns1__UpdateGzclMapResponse* soap_new_set__ns1__UpdateGzclMapResponse(soap*, ...) allocate, set all public members
/// - _ns1__UpdateGzclMapResponse::soap_default(soap*) default initialize members
/// - int soap_read__ns1__UpdateGzclMapResponse(soap*, _ns1__UpdateGzclMapResponse*) deserialize from a stream
/// - int soap_write__ns1__UpdateGzclMapResponse(soap*, _ns1__UpdateGzclMapResponse*) serialize to a stream
/// - _ns1__UpdateGzclMapResponse* _ns1__UpdateGzclMapResponse::soap_dup(soap*) returns deep copy of _ns1__UpdateGzclMapResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__UpdateGzclMapResponse::soap_del() deep deletes _ns1__UpdateGzclMapResponse data members, use only after _ns1__UpdateGzclMapResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__UpdateGzclMapResponse
{ public:
/// Element "UpdateGzclMapResult" of XSD type xs:string.
    char*                                UpdateGzclMapResult            0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://zbxhupdata.com/webservices/":GetUnitMapVer
/// @brief "http://zbxhupdata.com/webservices/":GetUnitMapVer is a complexType.
///
/// class _ns1__GetUnitMapVer operations:
/// - _ns1__GetUnitMapVer* soap_new__ns1__GetUnitMapVer(soap*) allocate and default initialize
/// - _ns1__GetUnitMapVer* soap_new__ns1__GetUnitMapVer(soap*, int num) allocate array and default initialize values
/// - _ns1__GetUnitMapVer* soap_new_req__ns1__GetUnitMapVer(soap*, ...) allocate, set required members
/// - _ns1__GetUnitMapVer* soap_new_set__ns1__GetUnitMapVer(soap*, ...) allocate, set all public members
/// - _ns1__GetUnitMapVer::soap_default(soap*) default initialize members
/// - int soap_read__ns1__GetUnitMapVer(soap*, _ns1__GetUnitMapVer*) deserialize from a stream
/// - int soap_write__ns1__GetUnitMapVer(soap*, _ns1__GetUnitMapVer*) serialize to a stream
/// - _ns1__GetUnitMapVer* _ns1__GetUnitMapVer::soap_dup(soap*) returns deep copy of _ns1__GetUnitMapVer, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GetUnitMapVer::soap_del() deep deletes _ns1__GetUnitMapVer data members, use only after _ns1__GetUnitMapVer::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__GetUnitMapVer
{ public:
/// Element "dwname" of XSD type xs:string.
    char*                                dwname                         0;	///< Optional element.
/// Element "unitname" of XSD type xs:string.
    char*                                unitname                       0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://zbxhupdata.com/webservices/":GetUnitMapVerResponse
/// @brief "http://zbxhupdata.com/webservices/":GetUnitMapVerResponse is a complexType.
///
/// class _ns1__GetUnitMapVerResponse operations:
/// - _ns1__GetUnitMapVerResponse* soap_new__ns1__GetUnitMapVerResponse(soap*) allocate and default initialize
/// - _ns1__GetUnitMapVerResponse* soap_new__ns1__GetUnitMapVerResponse(soap*, int num) allocate array and default initialize values
/// - _ns1__GetUnitMapVerResponse* soap_new_req__ns1__GetUnitMapVerResponse(soap*, ...) allocate, set required members
/// - _ns1__GetUnitMapVerResponse* soap_new_set__ns1__GetUnitMapVerResponse(soap*, ...) allocate, set all public members
/// - _ns1__GetUnitMapVerResponse::soap_default(soap*) default initialize members
/// - int soap_read__ns1__GetUnitMapVerResponse(soap*, _ns1__GetUnitMapVerResponse*) deserialize from a stream
/// - int soap_write__ns1__GetUnitMapVerResponse(soap*, _ns1__GetUnitMapVerResponse*) serialize to a stream
/// - _ns1__GetUnitMapVerResponse* _ns1__GetUnitMapVerResponse::soap_dup(soap*) returns deep copy of _ns1__GetUnitMapVerResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GetUnitMapVerResponse::soap_del() deep deletes _ns1__GetUnitMapVerResponse data members, use only after _ns1__GetUnitMapVerResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__GetUnitMapVerResponse
{ public:
/// Element "GetUnitMapVerResult" of XSD type xs:string.
    char*                                GetUnitMapVerResult            0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://zbxhupdata.com/webservices/":GetMangeMapUpdate
/// @brief "http://zbxhupdata.com/webservices/":GetMangeMapUpdate is a complexType.
///
/// class _ns1__GetMangeMapUpdate operations:
/// - _ns1__GetMangeMapUpdate* soap_new__ns1__GetMangeMapUpdate(soap*) allocate and default initialize
/// - _ns1__GetMangeMapUpdate* soap_new__ns1__GetMangeMapUpdate(soap*, int num) allocate array and default initialize values
/// - _ns1__GetMangeMapUpdate* soap_new_req__ns1__GetMangeMapUpdate(soap*, ...) allocate, set required members
/// - _ns1__GetMangeMapUpdate* soap_new_set__ns1__GetMangeMapUpdate(soap*, ...) allocate, set all public members
/// - _ns1__GetMangeMapUpdate::soap_default(soap*) default initialize members
/// - int soap_read__ns1__GetMangeMapUpdate(soap*, _ns1__GetMangeMapUpdate*) deserialize from a stream
/// - int soap_write__ns1__GetMangeMapUpdate(soap*, _ns1__GetMangeMapUpdate*) serialize to a stream
/// - _ns1__GetMangeMapUpdate* _ns1__GetMangeMapUpdate::soap_dup(soap*) returns deep copy of _ns1__GetMangeMapUpdate, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GetMangeMapUpdate::soap_del() deep deletes _ns1__GetMangeMapUpdate data members, use only after _ns1__GetMangeMapUpdate::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__GetMangeMapUpdate
{ public:
/// Element "dname" of XSD type xs:string.
    char*                                dname                          0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://zbxhupdata.com/webservices/":GetMangeMapUpdateResponse
/// @brief "http://zbxhupdata.com/webservices/":GetMangeMapUpdateResponse is a complexType.
///
/// class _ns1__GetMangeMapUpdateResponse operations:
/// - _ns1__GetMangeMapUpdateResponse* soap_new__ns1__GetMangeMapUpdateResponse(soap*) allocate and default initialize
/// - _ns1__GetMangeMapUpdateResponse* soap_new__ns1__GetMangeMapUpdateResponse(soap*, int num) allocate array and default initialize values
/// - _ns1__GetMangeMapUpdateResponse* soap_new_req__ns1__GetMangeMapUpdateResponse(soap*, ...) allocate, set required members
/// - _ns1__GetMangeMapUpdateResponse* soap_new_set__ns1__GetMangeMapUpdateResponse(soap*, ...) allocate, set all public members
/// - _ns1__GetMangeMapUpdateResponse::soap_default(soap*) default initialize members
/// - int soap_read__ns1__GetMangeMapUpdateResponse(soap*, _ns1__GetMangeMapUpdateResponse*) deserialize from a stream
/// - int soap_write__ns1__GetMangeMapUpdateResponse(soap*, _ns1__GetMangeMapUpdateResponse*) serialize to a stream
/// - _ns1__GetMangeMapUpdateResponse* _ns1__GetMangeMapUpdateResponse::soap_dup(soap*) returns deep copy of _ns1__GetMangeMapUpdateResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GetMangeMapUpdateResponse::soap_del() deep deletes _ns1__GetMangeMapUpdateResponse data members, use only after _ns1__GetMangeMapUpdateResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__GetMangeMapUpdateResponse
{ public:
/// Element "GetMangeMapUpdateResult" of XSD type xs:string.
    char*                                GetMangeMapUpdateResult        0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://zbxhupdata.com/webservices/":OpenProcess
/// @brief "http://zbxhupdata.com/webservices/":OpenProcess is a complexType.
///
/// class _ns1__OpenProcess operations:
/// - _ns1__OpenProcess* soap_new__ns1__OpenProcess(soap*) allocate and default initialize
/// - _ns1__OpenProcess* soap_new__ns1__OpenProcess(soap*, int num) allocate array and default initialize values
/// - _ns1__OpenProcess* soap_new_req__ns1__OpenProcess(soap*, ...) allocate, set required members
/// - _ns1__OpenProcess* soap_new_set__ns1__OpenProcess(soap*, ...) allocate, set all public members
/// - _ns1__OpenProcess::soap_default(soap*) default initialize members
/// - int soap_read__ns1__OpenProcess(soap*, _ns1__OpenProcess*) deserialize from a stream
/// - int soap_write__ns1__OpenProcess(soap*, _ns1__OpenProcess*) serialize to a stream
/// - _ns1__OpenProcess* _ns1__OpenProcess::soap_dup(soap*) returns deep copy of _ns1__OpenProcess, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__OpenProcess::soap_del() deep deletes _ns1__OpenProcess data members, use only after _ns1__OpenProcess::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__OpenProcess
{ public:
/// Element "name" of XSD type xs:string.
    char*                                name                           0;	///< Optional element.
/// Element "param" of XSD type xs:string.
    char*                                param                          0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://zbxhupdata.com/webservices/":OpenProcessResponse
/// @brief "http://zbxhupdata.com/webservices/":OpenProcessResponse is a complexType.
///
/// class _ns1__OpenProcessResponse operations:
/// - _ns1__OpenProcessResponse* soap_new__ns1__OpenProcessResponse(soap*) allocate and default initialize
/// - _ns1__OpenProcessResponse* soap_new__ns1__OpenProcessResponse(soap*, int num) allocate array and default initialize values
/// - _ns1__OpenProcessResponse* soap_new_req__ns1__OpenProcessResponse(soap*, ...) allocate, set required members
/// - _ns1__OpenProcessResponse* soap_new_set__ns1__OpenProcessResponse(soap*, ...) allocate, set all public members
/// - _ns1__OpenProcessResponse::soap_default(soap*) default initialize members
/// - int soap_read__ns1__OpenProcessResponse(soap*, _ns1__OpenProcessResponse*) deserialize from a stream
/// - int soap_write__ns1__OpenProcessResponse(soap*, _ns1__OpenProcessResponse*) serialize to a stream
/// - _ns1__OpenProcessResponse* _ns1__OpenProcessResponse::soap_dup(soap*) returns deep copy of _ns1__OpenProcessResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__OpenProcessResponse::soap_del() deep deletes _ns1__OpenProcessResponse data members, use only after _ns1__OpenProcessResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__OpenProcessResponse
{ public:
/// Element "OpenProcessResult" of XSD type xs:string.
    char*                                OpenProcessResult              0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://zbxhupdata.com/webservices/":GetEmfPngVer
/// @brief "http://zbxhupdata.com/webservices/":GetEmfPngVer is a complexType.
///
/// class _ns1__GetEmfPngVer operations:
/// - _ns1__GetEmfPngVer* soap_new__ns1__GetEmfPngVer(soap*) allocate and default initialize
/// - _ns1__GetEmfPngVer* soap_new__ns1__GetEmfPngVer(soap*, int num) allocate array and default initialize values
/// - _ns1__GetEmfPngVer* soap_new_req__ns1__GetEmfPngVer(soap*, ...) allocate, set required members
/// - _ns1__GetEmfPngVer* soap_new_set__ns1__GetEmfPngVer(soap*, ...) allocate, set all public members
/// - _ns1__GetEmfPngVer::soap_default(soap*) default initialize members
/// - int soap_read__ns1__GetEmfPngVer(soap*, _ns1__GetEmfPngVer*) deserialize from a stream
/// - int soap_write__ns1__GetEmfPngVer(soap*, _ns1__GetEmfPngVer*) serialize to a stream
/// - _ns1__GetEmfPngVer* _ns1__GetEmfPngVer::soap_dup(soap*) returns deep copy of _ns1__GetEmfPngVer, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GetEmfPngVer::soap_del() deep deletes _ns1__GetEmfPngVer data members, use only after _ns1__GetEmfPngVer::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__GetEmfPngVer
{ public:
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://zbxhupdata.com/webservices/":GetEmfPngVerResponse
/// @brief "http://zbxhupdata.com/webservices/":GetEmfPngVerResponse is a complexType.
///
/// class _ns1__GetEmfPngVerResponse operations:
/// - _ns1__GetEmfPngVerResponse* soap_new__ns1__GetEmfPngVerResponse(soap*) allocate and default initialize
/// - _ns1__GetEmfPngVerResponse* soap_new__ns1__GetEmfPngVerResponse(soap*, int num) allocate array and default initialize values
/// - _ns1__GetEmfPngVerResponse* soap_new_req__ns1__GetEmfPngVerResponse(soap*, ...) allocate, set required members
/// - _ns1__GetEmfPngVerResponse* soap_new_set__ns1__GetEmfPngVerResponse(soap*, ...) allocate, set all public members
/// - _ns1__GetEmfPngVerResponse::soap_default(soap*) default initialize members
/// - int soap_read__ns1__GetEmfPngVerResponse(soap*, _ns1__GetEmfPngVerResponse*) deserialize from a stream
/// - int soap_write__ns1__GetEmfPngVerResponse(soap*, _ns1__GetEmfPngVerResponse*) serialize to a stream
/// - _ns1__GetEmfPngVerResponse* _ns1__GetEmfPngVerResponse::soap_dup(soap*) returns deep copy of _ns1__GetEmfPngVerResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GetEmfPngVerResponse::soap_del() deep deletes _ns1__GetEmfPngVerResponse data members, use only after _ns1__GetEmfPngVerResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__GetEmfPngVerResponse
{ public:
/// Element "GetEmfPngVerResult" of XSD type xs:string.
    char*                                GetEmfPngVerResult             0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://zbxhupdata.com/webservices/":GetEmfPngFile
/// @brief "http://zbxhupdata.com/webservices/":GetEmfPngFile is a complexType.
///
/// class _ns1__GetEmfPngFile operations:
/// - _ns1__GetEmfPngFile* soap_new__ns1__GetEmfPngFile(soap*) allocate and default initialize
/// - _ns1__GetEmfPngFile* soap_new__ns1__GetEmfPngFile(soap*, int num) allocate array and default initialize values
/// - _ns1__GetEmfPngFile* soap_new_req__ns1__GetEmfPngFile(soap*, ...) allocate, set required members
/// - _ns1__GetEmfPngFile* soap_new_set__ns1__GetEmfPngFile(soap*, ...) allocate, set all public members
/// - _ns1__GetEmfPngFile::soap_default(soap*) default initialize members
/// - int soap_read__ns1__GetEmfPngFile(soap*, _ns1__GetEmfPngFile*) deserialize from a stream
/// - int soap_write__ns1__GetEmfPngFile(soap*, _ns1__GetEmfPngFile*) serialize to a stream
/// - _ns1__GetEmfPngFile* _ns1__GetEmfPngFile::soap_dup(soap*) returns deep copy of _ns1__GetEmfPngFile, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GetEmfPngFile::soap_del() deep deletes _ns1__GetEmfPngFile data members, use only after _ns1__GetEmfPngFile::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__GetEmfPngFile
{ public:
/// Element "mapid" of XSD type xs:string.
    char*                                mapid                          0;	///< Optional element.
/// Element "pagename" of XSD type xs:string.
    char*                                pagename                       0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://zbxhupdata.com/webservices/":GetEmfPngFileResponse
/// @brief "http://zbxhupdata.com/webservices/":GetEmfPngFileResponse is a complexType.
///
/// class _ns1__GetEmfPngFileResponse operations:
/// - _ns1__GetEmfPngFileResponse* soap_new__ns1__GetEmfPngFileResponse(soap*) allocate and default initialize
/// - _ns1__GetEmfPngFileResponse* soap_new__ns1__GetEmfPngFileResponse(soap*, int num) allocate array and default initialize values
/// - _ns1__GetEmfPngFileResponse* soap_new_req__ns1__GetEmfPngFileResponse(soap*, ...) allocate, set required members
/// - _ns1__GetEmfPngFileResponse* soap_new_set__ns1__GetEmfPngFileResponse(soap*, ...) allocate, set all public members
/// - _ns1__GetEmfPngFileResponse::soap_default(soap*) default initialize members
/// - int soap_read__ns1__GetEmfPngFileResponse(soap*, _ns1__GetEmfPngFileResponse*) deserialize from a stream
/// - int soap_write__ns1__GetEmfPngFileResponse(soap*, _ns1__GetEmfPngFileResponse*) serialize to a stream
/// - _ns1__GetEmfPngFileResponse* _ns1__GetEmfPngFileResponse::soap_dup(soap*) returns deep copy of _ns1__GetEmfPngFileResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GetEmfPngFileResponse::soap_del() deep deletes _ns1__GetEmfPngFileResponse data members, use only after _ns1__GetEmfPngFileResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__GetEmfPngFileResponse
{ public:
/// Element "GetEmfPngFileResult" of XSD type xs:string.
    char*                                GetEmfPngFileResult            0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://zbxhupdata.com/webservices/":OpenMapExe
/// @brief "http://zbxhupdata.com/webservices/":OpenMapExe is a complexType.
///
/// class _ns1__OpenMapExe operations:
/// - _ns1__OpenMapExe* soap_new__ns1__OpenMapExe(soap*) allocate and default initialize
/// - _ns1__OpenMapExe* soap_new__ns1__OpenMapExe(soap*, int num) allocate array and default initialize values
/// - _ns1__OpenMapExe* soap_new_req__ns1__OpenMapExe(soap*, ...) allocate, set required members
/// - _ns1__OpenMapExe* soap_new_set__ns1__OpenMapExe(soap*, ...) allocate, set all public members
/// - _ns1__OpenMapExe::soap_default(soap*) default initialize members
/// - int soap_read__ns1__OpenMapExe(soap*, _ns1__OpenMapExe*) deserialize from a stream
/// - int soap_write__ns1__OpenMapExe(soap*, _ns1__OpenMapExe*) serialize to a stream
/// - _ns1__OpenMapExe* _ns1__OpenMapExe::soap_dup(soap*) returns deep copy of _ns1__OpenMapExe, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__OpenMapExe::soap_del() deep deletes _ns1__OpenMapExe data members, use only after _ns1__OpenMapExe::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__OpenMapExe
{ public:
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://zbxhupdata.com/webservices/":OpenMapExeResponse
/// @brief "http://zbxhupdata.com/webservices/":OpenMapExeResponse is a complexType.
///
/// class _ns1__OpenMapExeResponse operations:
/// - _ns1__OpenMapExeResponse* soap_new__ns1__OpenMapExeResponse(soap*) allocate and default initialize
/// - _ns1__OpenMapExeResponse* soap_new__ns1__OpenMapExeResponse(soap*, int num) allocate array and default initialize values
/// - _ns1__OpenMapExeResponse* soap_new_req__ns1__OpenMapExeResponse(soap*, ...) allocate, set required members
/// - _ns1__OpenMapExeResponse* soap_new_set__ns1__OpenMapExeResponse(soap*, ...) allocate, set all public members
/// - _ns1__OpenMapExeResponse::soap_default(soap*) default initialize members
/// - int soap_read__ns1__OpenMapExeResponse(soap*, _ns1__OpenMapExeResponse*) deserialize from a stream
/// - int soap_write__ns1__OpenMapExeResponse(soap*, _ns1__OpenMapExeResponse*) serialize to a stream
/// - _ns1__OpenMapExeResponse* _ns1__OpenMapExeResponse::soap_dup(soap*) returns deep copy of _ns1__OpenMapExeResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__OpenMapExeResponse::soap_del() deep deletes _ns1__OpenMapExeResponse data members, use only after _ns1__OpenMapExeResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__OpenMapExeResponse
{ public:
/// Element "OpenMapExeResult" of XSD type xs:string.
    char*                                OpenMapExeResult               0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://zbxhupdata.com/webservices/":ChaoQi
/// @brief "http://zbxhupdata.com/webservices/":ChaoQi is a complexType.
///
/// class _ns1__ChaoQi operations:
/// - _ns1__ChaoQi* soap_new__ns1__ChaoQi(soap*) allocate and default initialize
/// - _ns1__ChaoQi* soap_new__ns1__ChaoQi(soap*, int num) allocate array and default initialize values
/// - _ns1__ChaoQi* soap_new_req__ns1__ChaoQi(soap*, ...) allocate, set required members
/// - _ns1__ChaoQi* soap_new_set__ns1__ChaoQi(soap*, ...) allocate, set all public members
/// - _ns1__ChaoQi::soap_default(soap*) default initialize members
/// - int soap_read__ns1__ChaoQi(soap*, _ns1__ChaoQi*) deserialize from a stream
/// - int soap_write__ns1__ChaoQi(soap*, _ns1__ChaoQi*) serialize to a stream
/// - _ns1__ChaoQi* _ns1__ChaoQi::soap_dup(soap*) returns deep copy of _ns1__ChaoQi, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__ChaoQi::soap_del() deep deletes _ns1__ChaoQi data members, use only after _ns1__ChaoQi::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__ChaoQi
{ public:
/// Element "type" of XSD type xs:string.
    char*                                type                           0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://zbxhupdata.com/webservices/":ChaoQiResponse
/// @brief "http://zbxhupdata.com/webservices/":ChaoQiResponse is a complexType.
///
/// class _ns1__ChaoQiResponse operations:
/// - _ns1__ChaoQiResponse* soap_new__ns1__ChaoQiResponse(soap*) allocate and default initialize
/// - _ns1__ChaoQiResponse* soap_new__ns1__ChaoQiResponse(soap*, int num) allocate array and default initialize values
/// - _ns1__ChaoQiResponse* soap_new_req__ns1__ChaoQiResponse(soap*, ...) allocate, set required members
/// - _ns1__ChaoQiResponse* soap_new_set__ns1__ChaoQiResponse(soap*, ...) allocate, set all public members
/// - _ns1__ChaoQiResponse::soap_default(soap*) default initialize members
/// - int soap_read__ns1__ChaoQiResponse(soap*, _ns1__ChaoQiResponse*) deserialize from a stream
/// - int soap_write__ns1__ChaoQiResponse(soap*, _ns1__ChaoQiResponse*) serialize to a stream
/// - _ns1__ChaoQiResponse* _ns1__ChaoQiResponse::soap_dup(soap*) returns deep copy of _ns1__ChaoQiResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__ChaoQiResponse::soap_del() deep deletes _ns1__ChaoQiResponse data members, use only after _ns1__ChaoQiResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__ChaoQiResponse
{ public:
/// Element "ChaoQiResult" of XSD type xs:string.
    char*                                ChaoQiResult                   0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://zbxhupdata.com/webservices/":JiChaoQi
/// @brief "http://zbxhupdata.com/webservices/":JiChaoQi is a complexType.
///
/// class _ns1__JiChaoQi operations:
/// - _ns1__JiChaoQi* soap_new__ns1__JiChaoQi(soap*) allocate and default initialize
/// - _ns1__JiChaoQi* soap_new__ns1__JiChaoQi(soap*, int num) allocate array and default initialize values
/// - _ns1__JiChaoQi* soap_new_req__ns1__JiChaoQi(soap*, ...) allocate, set required members
/// - _ns1__JiChaoQi* soap_new_set__ns1__JiChaoQi(soap*, ...) allocate, set all public members
/// - _ns1__JiChaoQi::soap_default(soap*) default initialize members
/// - int soap_read__ns1__JiChaoQi(soap*, _ns1__JiChaoQi*) deserialize from a stream
/// - int soap_write__ns1__JiChaoQi(soap*, _ns1__JiChaoQi*) serialize to a stream
/// - _ns1__JiChaoQi* _ns1__JiChaoQi::soap_dup(soap*) returns deep copy of _ns1__JiChaoQi, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__JiChaoQi::soap_del() deep deletes _ns1__JiChaoQi data members, use only after _ns1__JiChaoQi::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__JiChaoQi
{ public:
/// Element "type" of XSD type xs:string.
    char*                                type                           0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://zbxhupdata.com/webservices/":JiChaoQiResponse
/// @brief "http://zbxhupdata.com/webservices/":JiChaoQiResponse is a complexType.
///
/// class _ns1__JiChaoQiResponse operations:
/// - _ns1__JiChaoQiResponse* soap_new__ns1__JiChaoQiResponse(soap*) allocate and default initialize
/// - _ns1__JiChaoQiResponse* soap_new__ns1__JiChaoQiResponse(soap*, int num) allocate array and default initialize values
/// - _ns1__JiChaoQiResponse* soap_new_req__ns1__JiChaoQiResponse(soap*, ...) allocate, set required members
/// - _ns1__JiChaoQiResponse* soap_new_set__ns1__JiChaoQiResponse(soap*, ...) allocate, set all public members
/// - _ns1__JiChaoQiResponse::soap_default(soap*) default initialize members
/// - int soap_read__ns1__JiChaoQiResponse(soap*, _ns1__JiChaoQiResponse*) deserialize from a stream
/// - int soap_write__ns1__JiChaoQiResponse(soap*, _ns1__JiChaoQiResponse*) serialize to a stream
/// - _ns1__JiChaoQiResponse* _ns1__JiChaoQiResponse::soap_dup(soap*) returns deep copy of _ns1__JiChaoQiResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__JiChaoQiResponse::soap_del() deep deletes _ns1__JiChaoQiResponse data members, use only after _ns1__JiChaoQiResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__JiChaoQiResponse
{ public:
/// Element "JiChaoQiResult" of XSD type xs:string.
    char*                                JiChaoQiResult                 0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://zbxhupdata.com/webservices/":GetZhouQi
/// @brief "http://zbxhupdata.com/webservices/":GetZhouQi is a complexType.
///
/// class _ns1__GetZhouQi operations:
/// - _ns1__GetZhouQi* soap_new__ns1__GetZhouQi(soap*) allocate and default initialize
/// - _ns1__GetZhouQi* soap_new__ns1__GetZhouQi(soap*, int num) allocate array and default initialize values
/// - _ns1__GetZhouQi* soap_new_req__ns1__GetZhouQi(soap*, ...) allocate, set required members
/// - _ns1__GetZhouQi* soap_new_set__ns1__GetZhouQi(soap*, ...) allocate, set all public members
/// - _ns1__GetZhouQi::soap_default(soap*) default initialize members
/// - int soap_read__ns1__GetZhouQi(soap*, _ns1__GetZhouQi*) deserialize from a stream
/// - int soap_write__ns1__GetZhouQi(soap*, _ns1__GetZhouQi*) serialize to a stream
/// - _ns1__GetZhouQi* _ns1__GetZhouQi::soap_dup(soap*) returns deep copy of _ns1__GetZhouQi, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GetZhouQi::soap_del() deep deletes _ns1__GetZhouQi data members, use only after _ns1__GetZhouQi::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__GetZhouQi
{ public:
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://zbxhupdata.com/webservices/":GetZhouQiResponse
/// @brief "http://zbxhupdata.com/webservices/":GetZhouQiResponse is a complexType.
///
/// class _ns1__GetZhouQiResponse operations:
/// - _ns1__GetZhouQiResponse* soap_new__ns1__GetZhouQiResponse(soap*) allocate and default initialize
/// - _ns1__GetZhouQiResponse* soap_new__ns1__GetZhouQiResponse(soap*, int num) allocate array and default initialize values
/// - _ns1__GetZhouQiResponse* soap_new_req__ns1__GetZhouQiResponse(soap*, ...) allocate, set required members
/// - _ns1__GetZhouQiResponse* soap_new_set__ns1__GetZhouQiResponse(soap*, ...) allocate, set all public members
/// - _ns1__GetZhouQiResponse::soap_default(soap*) default initialize members
/// - int soap_read__ns1__GetZhouQiResponse(soap*, _ns1__GetZhouQiResponse*) deserialize from a stream
/// - int soap_write__ns1__GetZhouQiResponse(soap*, _ns1__GetZhouQiResponse*) serialize to a stream
/// - _ns1__GetZhouQiResponse* _ns1__GetZhouQiResponse::soap_dup(soap*) returns deep copy of _ns1__GetZhouQiResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GetZhouQiResponse::soap_del() deep deletes _ns1__GetZhouQiResponse data members, use only after _ns1__GetZhouQiResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__GetZhouQiResponse
{ public:
/// Element "GetZhouQiResult" of XSD type xs:string.
    char*                                GetZhouQiResult                0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://zbxhupdata.com/webservices/":FlowChartEmf
/// @brief "http://zbxhupdata.com/webservices/":FlowChartEmf is a complexType.
///
/// class _ns1__FlowChartEmf operations:
/// - _ns1__FlowChartEmf* soap_new__ns1__FlowChartEmf(soap*) allocate and default initialize
/// - _ns1__FlowChartEmf* soap_new__ns1__FlowChartEmf(soap*, int num) allocate array and default initialize values
/// - _ns1__FlowChartEmf* soap_new_req__ns1__FlowChartEmf(soap*, ...) allocate, set required members
/// - _ns1__FlowChartEmf* soap_new_set__ns1__FlowChartEmf(soap*, ...) allocate, set all public members
/// - _ns1__FlowChartEmf::soap_default(soap*) default initialize members
/// - int soap_read__ns1__FlowChartEmf(soap*, _ns1__FlowChartEmf*) deserialize from a stream
/// - int soap_write__ns1__FlowChartEmf(soap*, _ns1__FlowChartEmf*) serialize to a stream
/// - _ns1__FlowChartEmf* _ns1__FlowChartEmf::soap_dup(soap*) returns deep copy of _ns1__FlowChartEmf, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__FlowChartEmf::soap_del() deep deletes _ns1__FlowChartEmf data members, use only after _ns1__FlowChartEmf::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__FlowChartEmf
{ public:
/// Element "guid" of XSD type xs:string.
    char*                                guid                           0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://zbxhupdata.com/webservices/":FlowChartEmfResponse
/// @brief "http://zbxhupdata.com/webservices/":FlowChartEmfResponse is a complexType.
///
/// class _ns1__FlowChartEmfResponse operations:
/// - _ns1__FlowChartEmfResponse* soap_new__ns1__FlowChartEmfResponse(soap*) allocate and default initialize
/// - _ns1__FlowChartEmfResponse* soap_new__ns1__FlowChartEmfResponse(soap*, int num) allocate array and default initialize values
/// - _ns1__FlowChartEmfResponse* soap_new_req__ns1__FlowChartEmfResponse(soap*, ...) allocate, set required members
/// - _ns1__FlowChartEmfResponse* soap_new_set__ns1__FlowChartEmfResponse(soap*, ...) allocate, set all public members
/// - _ns1__FlowChartEmfResponse::soap_default(soap*) default initialize members
/// - int soap_read__ns1__FlowChartEmfResponse(soap*, _ns1__FlowChartEmfResponse*) deserialize from a stream
/// - int soap_write__ns1__FlowChartEmfResponse(soap*, _ns1__FlowChartEmfResponse*) serialize to a stream
/// - _ns1__FlowChartEmfResponse* _ns1__FlowChartEmfResponse::soap_dup(soap*) returns deep copy of _ns1__FlowChartEmfResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__FlowChartEmfResponse::soap_del() deep deletes _ns1__FlowChartEmfResponse data members, use only after _ns1__FlowChartEmfResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__FlowChartEmfResponse
{ public:
/// Element "FlowChartEmfResult" of XSD type xs:string.
    char*                                FlowChartEmfResult             0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://zbxhupdata.com/webservices/":SGCDrawEmf
/// @brief "http://zbxhupdata.com/webservices/":SGCDrawEmf is a complexType.
///
/// class _ns1__SGCDrawEmf operations:
/// - _ns1__SGCDrawEmf* soap_new__ns1__SGCDrawEmf(soap*) allocate and default initialize
/// - _ns1__SGCDrawEmf* soap_new__ns1__SGCDrawEmf(soap*, int num) allocate array and default initialize values
/// - _ns1__SGCDrawEmf* soap_new_req__ns1__SGCDrawEmf(soap*, ...) allocate, set required members
/// - _ns1__SGCDrawEmf* soap_new_set__ns1__SGCDrawEmf(soap*, ...) allocate, set all public members
/// - _ns1__SGCDrawEmf::soap_default(soap*) default initialize members
/// - int soap_read__ns1__SGCDrawEmf(soap*, _ns1__SGCDrawEmf*) deserialize from a stream
/// - int soap_write__ns1__SGCDrawEmf(soap*, _ns1__SGCDrawEmf*) serialize to a stream
/// - _ns1__SGCDrawEmf* _ns1__SGCDrawEmf::soap_dup(soap*) returns deep copy of _ns1__SGCDrawEmf, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__SGCDrawEmf::soap_del() deep deletes _ns1__SGCDrawEmf data members, use only after _ns1__SGCDrawEmf::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__SGCDrawEmf
{ public:
/// Element "guid" of XSD type xs:string.
    char*                                guid                           0;	///< Optional element.
/// Element "rel" of XSD type xs:string.
    char*                                rel                            0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://zbxhupdata.com/webservices/":SGCDrawEmfResponse
/// @brief "http://zbxhupdata.com/webservices/":SGCDrawEmfResponse is a complexType.
///
/// class _ns1__SGCDrawEmfResponse operations:
/// - _ns1__SGCDrawEmfResponse* soap_new__ns1__SGCDrawEmfResponse(soap*) allocate and default initialize
/// - _ns1__SGCDrawEmfResponse* soap_new__ns1__SGCDrawEmfResponse(soap*, int num) allocate array and default initialize values
/// - _ns1__SGCDrawEmfResponse* soap_new_req__ns1__SGCDrawEmfResponse(soap*, ...) allocate, set required members
/// - _ns1__SGCDrawEmfResponse* soap_new_set__ns1__SGCDrawEmfResponse(soap*, ...) allocate, set all public members
/// - _ns1__SGCDrawEmfResponse::soap_default(soap*) default initialize members
/// - int soap_read__ns1__SGCDrawEmfResponse(soap*, _ns1__SGCDrawEmfResponse*) deserialize from a stream
/// - int soap_write__ns1__SGCDrawEmfResponse(soap*, _ns1__SGCDrawEmfResponse*) serialize to a stream
/// - _ns1__SGCDrawEmfResponse* _ns1__SGCDrawEmfResponse::soap_dup(soap*) returns deep copy of _ns1__SGCDrawEmfResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__SGCDrawEmfResponse::soap_del() deep deletes _ns1__SGCDrawEmfResponse data members, use only after _ns1__SGCDrawEmfResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__SGCDrawEmfResponse
{ public:
/// Element "SGCDrawEmfResult" of XSD type xs:string.
    char*                                SGCDrawEmfResult               0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://zbxhupdata.com/webservices/":GzGetTypeList
/// @brief "http://zbxhupdata.com/webservices/":GzGetTypeList is a complexType.
///
/// class _ns1__GzGetTypeList operations:
/// - _ns1__GzGetTypeList* soap_new__ns1__GzGetTypeList(soap*) allocate and default initialize
/// - _ns1__GzGetTypeList* soap_new__ns1__GzGetTypeList(soap*, int num) allocate array and default initialize values
/// - _ns1__GzGetTypeList* soap_new_req__ns1__GzGetTypeList(soap*, ...) allocate, set required members
/// - _ns1__GzGetTypeList* soap_new_set__ns1__GzGetTypeList(soap*, ...) allocate, set all public members
/// - _ns1__GzGetTypeList::soap_default(soap*) default initialize members
/// - int soap_read__ns1__GzGetTypeList(soap*, _ns1__GzGetTypeList*) deserialize from a stream
/// - int soap_write__ns1__GzGetTypeList(soap*, _ns1__GzGetTypeList*) serialize to a stream
/// - _ns1__GzGetTypeList* _ns1__GzGetTypeList::soap_dup(soap*) returns deep copy of _ns1__GzGetTypeList, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GzGetTypeList::soap_del() deep deletes _ns1__GzGetTypeList data members, use only after _ns1__GzGetTypeList::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__GzGetTypeList
{ public:
/// Element "tztype" of XSD type xs:string.
    char*                                tztype                         0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://zbxhupdata.com/webservices/":GzGetTypeListResponse
/// @brief "http://zbxhupdata.com/webservices/":GzGetTypeListResponse is a complexType.
///
/// class _ns1__GzGetTypeListResponse operations:
/// - _ns1__GzGetTypeListResponse* soap_new__ns1__GzGetTypeListResponse(soap*) allocate and default initialize
/// - _ns1__GzGetTypeListResponse* soap_new__ns1__GzGetTypeListResponse(soap*, int num) allocate array and default initialize values
/// - _ns1__GzGetTypeListResponse* soap_new_req__ns1__GzGetTypeListResponse(soap*, ...) allocate, set required members
/// - _ns1__GzGetTypeListResponse* soap_new_set__ns1__GzGetTypeListResponse(soap*, ...) allocate, set all public members
/// - _ns1__GzGetTypeListResponse::soap_default(soap*) default initialize members
/// - int soap_read__ns1__GzGetTypeListResponse(soap*, _ns1__GzGetTypeListResponse*) deserialize from a stream
/// - int soap_write__ns1__GzGetTypeListResponse(soap*, _ns1__GzGetTypeListResponse*) serialize to a stream
/// - _ns1__GzGetTypeListResponse* _ns1__GzGetTypeListResponse::soap_dup(soap*) returns deep copy of _ns1__GzGetTypeListResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GzGetTypeListResponse::soap_del() deep deletes _ns1__GzGetTypeListResponse data members, use only after _ns1__GzGetTypeListResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__GzGetTypeListResponse
{ public:
/// Element "GzGetTypeListResult" of XSD type xs:string.
    char*                                GzGetTypeListResult            0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://zbxhupdata.com/webservices/":GzGetDeviceStruct
/// @brief "http://zbxhupdata.com/webservices/":GzGetDeviceStruct is a complexType.
///
/// class _ns1__GzGetDeviceStruct operations:
/// - _ns1__GzGetDeviceStruct* soap_new__ns1__GzGetDeviceStruct(soap*) allocate and default initialize
/// - _ns1__GzGetDeviceStruct* soap_new__ns1__GzGetDeviceStruct(soap*, int num) allocate array and default initialize values
/// - _ns1__GzGetDeviceStruct* soap_new_req__ns1__GzGetDeviceStruct(soap*, ...) allocate, set required members
/// - _ns1__GzGetDeviceStruct* soap_new_set__ns1__GzGetDeviceStruct(soap*, ...) allocate, set all public members
/// - _ns1__GzGetDeviceStruct::soap_default(soap*) default initialize members
/// - int soap_read__ns1__GzGetDeviceStruct(soap*, _ns1__GzGetDeviceStruct*) deserialize from a stream
/// - int soap_write__ns1__GzGetDeviceStruct(soap*, _ns1__GzGetDeviceStruct*) serialize to a stream
/// - _ns1__GzGetDeviceStruct* _ns1__GzGetDeviceStruct::soap_dup(soap*) returns deep copy of _ns1__GzGetDeviceStruct, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GzGetDeviceStruct::soap_del() deep deletes _ns1__GzGetDeviceStruct data members, use only after _ns1__GzGetDeviceStruct::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__GzGetDeviceStruct
{ public:
/// Element "tztype" of XSD type xs:string.
    char*                                tztype                         0;	///< Optional element.
/// Element "xb" of XSD type xs:string.
    char*                                xb                             0;	///< Optional element.
/// Element "station" of XSD type xs:string.
    char*                                station                        0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://zbxhupdata.com/webservices/":GzGetDeviceStructResponse
/// @brief "http://zbxhupdata.com/webservices/":GzGetDeviceStructResponse is a complexType.
///
/// class _ns1__GzGetDeviceStructResponse operations:
/// - _ns1__GzGetDeviceStructResponse* soap_new__ns1__GzGetDeviceStructResponse(soap*) allocate and default initialize
/// - _ns1__GzGetDeviceStructResponse* soap_new__ns1__GzGetDeviceStructResponse(soap*, int num) allocate array and default initialize values
/// - _ns1__GzGetDeviceStructResponse* soap_new_req__ns1__GzGetDeviceStructResponse(soap*, ...) allocate, set required members
/// - _ns1__GzGetDeviceStructResponse* soap_new_set__ns1__GzGetDeviceStructResponse(soap*, ...) allocate, set all public members
/// - _ns1__GzGetDeviceStructResponse::soap_default(soap*) default initialize members
/// - int soap_read__ns1__GzGetDeviceStructResponse(soap*, _ns1__GzGetDeviceStructResponse*) deserialize from a stream
/// - int soap_write__ns1__GzGetDeviceStructResponse(soap*, _ns1__GzGetDeviceStructResponse*) serialize to a stream
/// - _ns1__GzGetDeviceStructResponse* _ns1__GzGetDeviceStructResponse::soap_dup(soap*) returns deep copy of _ns1__GzGetDeviceStructResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GzGetDeviceStructResponse::soap_del() deep deletes _ns1__GzGetDeviceStructResponse data members, use only after _ns1__GzGetDeviceStructResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__GzGetDeviceStructResponse
{ public:
/// Element "GzGetDeviceStructResult" of XSD type xs:string.
    char*                                GzGetDeviceStructResult        0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://zbxhupdata.com/webservices/":SaveMapFile
/// @brief "http://zbxhupdata.com/webservices/":SaveMapFile is a complexType.
///
/// class _ns1__SaveMapFile operations:
/// - _ns1__SaveMapFile* soap_new__ns1__SaveMapFile(soap*) allocate and default initialize
/// - _ns1__SaveMapFile* soap_new__ns1__SaveMapFile(soap*, int num) allocate array and default initialize values
/// - _ns1__SaveMapFile* soap_new_req__ns1__SaveMapFile(soap*, ...) allocate, set required members
/// - _ns1__SaveMapFile* soap_new_set__ns1__SaveMapFile(soap*, ...) allocate, set all public members
/// - _ns1__SaveMapFile::soap_default(soap*) default initialize members
/// - int soap_read__ns1__SaveMapFile(soap*, _ns1__SaveMapFile*) deserialize from a stream
/// - int soap_write__ns1__SaveMapFile(soap*, _ns1__SaveMapFile*) serialize to a stream
/// - _ns1__SaveMapFile* _ns1__SaveMapFile::soap_dup(soap*) returns deep copy of _ns1__SaveMapFile, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__SaveMapFile::soap_del() deep deletes _ns1__SaveMapFile data members, use only after _ns1__SaveMapFile::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__SaveMapFile
{ public:
/// Element "Lh" of XSD type xs:string.
    char*                                Lh                             0;	///< Optional element.
/// Element "mapid" of XSD type xs:string.
    char*                                mapid                          0;	///< Optional element.
/// Element "page" of XSD type xs:string.
    char*                                page                           0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://zbxhupdata.com/webservices/":SaveMapFileResponse
/// @brief "http://zbxhupdata.com/webservices/":SaveMapFileResponse is a complexType.
///
/// class _ns1__SaveMapFileResponse operations:
/// - _ns1__SaveMapFileResponse* soap_new__ns1__SaveMapFileResponse(soap*) allocate and default initialize
/// - _ns1__SaveMapFileResponse* soap_new__ns1__SaveMapFileResponse(soap*, int num) allocate array and default initialize values
/// - _ns1__SaveMapFileResponse* soap_new_req__ns1__SaveMapFileResponse(soap*, ...) allocate, set required members
/// - _ns1__SaveMapFileResponse* soap_new_set__ns1__SaveMapFileResponse(soap*, ...) allocate, set all public members
/// - _ns1__SaveMapFileResponse::soap_default(soap*) default initialize members
/// - int soap_read__ns1__SaveMapFileResponse(soap*, _ns1__SaveMapFileResponse*) deserialize from a stream
/// - int soap_write__ns1__SaveMapFileResponse(soap*, _ns1__SaveMapFileResponse*) serialize to a stream
/// - _ns1__SaveMapFileResponse* _ns1__SaveMapFileResponse::soap_dup(soap*) returns deep copy of _ns1__SaveMapFileResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__SaveMapFileResponse::soap_del() deep deletes _ns1__SaveMapFileResponse data members, use only after _ns1__SaveMapFileResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__SaveMapFileResponse
{ public:
/// Element "SaveMapFileResult" of XSD type xs:string.
    char*                                SaveMapFileResult              0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://zbxhupdata.com/webservices/":SelectYjzhStation
/// @brief "http://zbxhupdata.com/webservices/":SelectYjzhStation is a complexType.
///
/// class _ns1__SelectYjzhStation operations:
/// - _ns1__SelectYjzhStation* soap_new__ns1__SelectYjzhStation(soap*) allocate and default initialize
/// - _ns1__SelectYjzhStation* soap_new__ns1__SelectYjzhStation(soap*, int num) allocate array and default initialize values
/// - _ns1__SelectYjzhStation* soap_new_req__ns1__SelectYjzhStation(soap*, ...) allocate, set required members
/// - _ns1__SelectYjzhStation* soap_new_set__ns1__SelectYjzhStation(soap*, ...) allocate, set all public members
/// - _ns1__SelectYjzhStation::soap_default(soap*) default initialize members
/// - int soap_read__ns1__SelectYjzhStation(soap*, _ns1__SelectYjzhStation*) deserialize from a stream
/// - int soap_write__ns1__SelectYjzhStation(soap*, _ns1__SelectYjzhStation*) serialize to a stream
/// - _ns1__SelectYjzhStation* _ns1__SelectYjzhStation::soap_dup(soap*) returns deep copy of _ns1__SelectYjzhStation, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__SelectYjzhStation::soap_del() deep deletes _ns1__SelectYjzhStation data members, use only after _ns1__SelectYjzhStation::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__SelectYjzhStation
{ public:
/// Element "xb" of XSD type xs:string.
    char*                                xb                             0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://zbxhupdata.com/webservices/":SelectYjzhStationResponse
/// @brief "http://zbxhupdata.com/webservices/":SelectYjzhStationResponse is a complexType.
///
/// class _ns1__SelectYjzhStationResponse operations:
/// - _ns1__SelectYjzhStationResponse* soap_new__ns1__SelectYjzhStationResponse(soap*) allocate and default initialize
/// - _ns1__SelectYjzhStationResponse* soap_new__ns1__SelectYjzhStationResponse(soap*, int num) allocate array and default initialize values
/// - _ns1__SelectYjzhStationResponse* soap_new_req__ns1__SelectYjzhStationResponse(soap*, ...) allocate, set required members
/// - _ns1__SelectYjzhStationResponse* soap_new_set__ns1__SelectYjzhStationResponse(soap*, ...) allocate, set all public members
/// - _ns1__SelectYjzhStationResponse::soap_default(soap*) default initialize members
/// - int soap_read__ns1__SelectYjzhStationResponse(soap*, _ns1__SelectYjzhStationResponse*) deserialize from a stream
/// - int soap_write__ns1__SelectYjzhStationResponse(soap*, _ns1__SelectYjzhStationResponse*) serialize to a stream
/// - _ns1__SelectYjzhStationResponse* _ns1__SelectYjzhStationResponse::soap_dup(soap*) returns deep copy of _ns1__SelectYjzhStationResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__SelectYjzhStationResponse::soap_del() deep deletes _ns1__SelectYjzhStationResponse data members, use only after _ns1__SelectYjzhStationResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__SelectYjzhStationResponse
{ public:
/// Element "SelectYjzhStationResult" of XSD type xs:string.
    char*                                SelectYjzhStationResult        0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://zbxhupdata.com/webservices/":SelectYjzhDevice
/// @brief "http://zbxhupdata.com/webservices/":SelectYjzhDevice is a complexType.
///
/// class _ns1__SelectYjzhDevice operations:
/// - _ns1__SelectYjzhDevice* soap_new__ns1__SelectYjzhDevice(soap*) allocate and default initialize
/// - _ns1__SelectYjzhDevice* soap_new__ns1__SelectYjzhDevice(soap*, int num) allocate array and default initialize values
/// - _ns1__SelectYjzhDevice* soap_new_req__ns1__SelectYjzhDevice(soap*, ...) allocate, set required members
/// - _ns1__SelectYjzhDevice* soap_new_set__ns1__SelectYjzhDevice(soap*, ...) allocate, set all public members
/// - _ns1__SelectYjzhDevice::soap_default(soap*) default initialize members
/// - int soap_read__ns1__SelectYjzhDevice(soap*, _ns1__SelectYjzhDevice*) deserialize from a stream
/// - int soap_write__ns1__SelectYjzhDevice(soap*, _ns1__SelectYjzhDevice*) serialize to a stream
/// - _ns1__SelectYjzhDevice* _ns1__SelectYjzhDevice::soap_dup(soap*) returns deep copy of _ns1__SelectYjzhDevice, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__SelectYjzhDevice::soap_del() deep deletes _ns1__SelectYjzhDevice data members, use only after _ns1__SelectYjzhDevice::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__SelectYjzhDevice
{ public:
/// Element "xb" of XSD type xs:string.
    char*                                xb                             0;	///< Optional element.
/// Element "station" of XSD type xs:string.
    char*                                station                        0;	///< Optional element.
/// Element "typeid" of XSD type xs:string.
    char*                                typeid_                        0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://zbxhupdata.com/webservices/":SelectYjzhDeviceResponse
/// @brief "http://zbxhupdata.com/webservices/":SelectYjzhDeviceResponse is a complexType.
///
/// class _ns1__SelectYjzhDeviceResponse operations:
/// - _ns1__SelectYjzhDeviceResponse* soap_new__ns1__SelectYjzhDeviceResponse(soap*) allocate and default initialize
/// - _ns1__SelectYjzhDeviceResponse* soap_new__ns1__SelectYjzhDeviceResponse(soap*, int num) allocate array and default initialize values
/// - _ns1__SelectYjzhDeviceResponse* soap_new_req__ns1__SelectYjzhDeviceResponse(soap*, ...) allocate, set required members
/// - _ns1__SelectYjzhDeviceResponse* soap_new_set__ns1__SelectYjzhDeviceResponse(soap*, ...) allocate, set all public members
/// - _ns1__SelectYjzhDeviceResponse::soap_default(soap*) default initialize members
/// - int soap_read__ns1__SelectYjzhDeviceResponse(soap*, _ns1__SelectYjzhDeviceResponse*) deserialize from a stream
/// - int soap_write__ns1__SelectYjzhDeviceResponse(soap*, _ns1__SelectYjzhDeviceResponse*) serialize to a stream
/// - _ns1__SelectYjzhDeviceResponse* _ns1__SelectYjzhDeviceResponse::soap_dup(soap*) returns deep copy of _ns1__SelectYjzhDeviceResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__SelectYjzhDeviceResponse::soap_del() deep deletes _ns1__SelectYjzhDeviceResponse data members, use only after _ns1__SelectYjzhDeviceResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__SelectYjzhDeviceResponse
{ public:
/// Element "SelectYjzhDeviceResult" of XSD type xs:string.
    char*                                SelectYjzhDeviceResult         0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://zbxhupdata.com/webservices/":GetYjzhZskAlarmTypes
/// @brief "http://zbxhupdata.com/webservices/":GetYjzhZskAlarmTypes is a complexType.
///
/// class _ns1__GetYjzhZskAlarmTypes operations:
/// - _ns1__GetYjzhZskAlarmTypes* soap_new__ns1__GetYjzhZskAlarmTypes(soap*) allocate and default initialize
/// - _ns1__GetYjzhZskAlarmTypes* soap_new__ns1__GetYjzhZskAlarmTypes(soap*, int num) allocate array and default initialize values
/// - _ns1__GetYjzhZskAlarmTypes* soap_new_req__ns1__GetYjzhZskAlarmTypes(soap*, ...) allocate, set required members
/// - _ns1__GetYjzhZskAlarmTypes* soap_new_set__ns1__GetYjzhZskAlarmTypes(soap*, ...) allocate, set all public members
/// - _ns1__GetYjzhZskAlarmTypes::soap_default(soap*) default initialize members
/// - int soap_read__ns1__GetYjzhZskAlarmTypes(soap*, _ns1__GetYjzhZskAlarmTypes*) deserialize from a stream
/// - int soap_write__ns1__GetYjzhZskAlarmTypes(soap*, _ns1__GetYjzhZskAlarmTypes*) serialize to a stream
/// - _ns1__GetYjzhZskAlarmTypes* _ns1__GetYjzhZskAlarmTypes::soap_dup(soap*) returns deep copy of _ns1__GetYjzhZskAlarmTypes, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GetYjzhZskAlarmTypes::soap_del() deep deletes _ns1__GetYjzhZskAlarmTypes data members, use only after _ns1__GetYjzhZskAlarmTypes::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__GetYjzhZskAlarmTypes
{ public:
/// Element "xb" of XSD type xs:string.
    char*                                xb                             0;	///< Optional element.
/// Element "cz" of XSD type xs:string.
    char*                                cz                             0;	///< Optional element.
/// Element "devtypeid" of XSD type xs:string.
    char*                                devtypeid                      0;	///< Optional element.
/// Element "devname" of XSD type xs:string.
    char*                                devname                        0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://zbxhupdata.com/webservices/":GetYjzhZskAlarmTypesResponse
/// @brief "http://zbxhupdata.com/webservices/":GetYjzhZskAlarmTypesResponse is a complexType.
///
/// class _ns1__GetYjzhZskAlarmTypesResponse operations:
/// - _ns1__GetYjzhZskAlarmTypesResponse* soap_new__ns1__GetYjzhZskAlarmTypesResponse(soap*) allocate and default initialize
/// - _ns1__GetYjzhZskAlarmTypesResponse* soap_new__ns1__GetYjzhZskAlarmTypesResponse(soap*, int num) allocate array and default initialize values
/// - _ns1__GetYjzhZskAlarmTypesResponse* soap_new_req__ns1__GetYjzhZskAlarmTypesResponse(soap*, ...) allocate, set required members
/// - _ns1__GetYjzhZskAlarmTypesResponse* soap_new_set__ns1__GetYjzhZskAlarmTypesResponse(soap*, ...) allocate, set all public members
/// - _ns1__GetYjzhZskAlarmTypesResponse::soap_default(soap*) default initialize members
/// - int soap_read__ns1__GetYjzhZskAlarmTypesResponse(soap*, _ns1__GetYjzhZskAlarmTypesResponse*) deserialize from a stream
/// - int soap_write__ns1__GetYjzhZskAlarmTypesResponse(soap*, _ns1__GetYjzhZskAlarmTypesResponse*) serialize to a stream
/// - _ns1__GetYjzhZskAlarmTypesResponse* _ns1__GetYjzhZskAlarmTypesResponse::soap_dup(soap*) returns deep copy of _ns1__GetYjzhZskAlarmTypesResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GetYjzhZskAlarmTypesResponse::soap_del() deep deletes _ns1__GetYjzhZskAlarmTypesResponse data members, use only after _ns1__GetYjzhZskAlarmTypesResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__GetYjzhZskAlarmTypesResponse
{ public:
/// Element "GetYjzhZskAlarmTypesResult" of XSD type xs:string.
    char*                                GetYjzhZskAlarmTypesResult     0;	///< Optional element.
    struct soap                         *soap                          ;
};


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://zbxhupdata.com/webservices/                                       *
 *                                                                            *
\******************************************************************************/

/// @brief Top-level root element "http://zbxhupdata.com/webservices/":string of XSD type xs:string.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://zbxhupdata.com/webservices/":int of XSD type xs:int.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://zbxhupdata.com/webservices/":long of XSD type xs:long.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://zbxhupdata.com/webservices/                                       *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Services                                                                   *
 *                                                                            *
\******************************************************************************/

// This service supports SOAP 1.2 namespaces:
#import "soap12.h"

//gsoap ns1  service name:	updataServiceSoap 
//gsoap ns1  service type:	updataServiceSoap 
//gsoap ns1  service port:	http://192.168.0.244:190/updataService.asmx 
//gsoap ns1  service namespace:	http://zbxhupdata.com/webservices/ 
//gsoap ns1  service transport:	http://schemas.xmlsoap.org/soap/http 

/** @mainpage Service Definitions

@section Service_bindings Service Bindings

  - @ref updataServiceSoap

@section Service_more More Information

  - @ref page_notes "Notes"

  - @ref page_XMLDataBinding "XML Data Binding"

  - @ref SOAP_ENV__Header "SOAP Header Content" (when applicable)

  - @ref SOAP_ENV__Detail "SOAP Fault Detail Content" (when applicable)


*/

/**

@page updataServiceSoap Binding "updataServiceSoap"

@section updataServiceSoap_operations Operations of Binding "updataServiceSoap"

  - @ref __ns1__GetYjzhZskGzFlow

  - @ref __ns1__GetYjzhZskOtherFlowChartList

  - @ref __ns1__GetYjzhZskDevFlowChartList

  - @ref __ns1__GetPropList

  - @ref __ns1__GetPropName

  - @ref __ns1__CheckLoginUser

  - @ref __ns1__GetRyUnit

  - @ref __ns1__GetDevCode

  - @ref __ns1__CheckDevCode

  - @ref __ns1__HelloWorld

  - @ref __ns1__GetDBString

  - @ref __ns1__QueryData

  - @ref __ns1__QueryDataCount

  - @ref __ns1__ExecuteSql

  - @ref __ns1__SaveData

  - @ref __ns1__SaveFileData

  - @ref __ns1__DownPic

  - @ref __ns1__DownAllPic

  - @ref __ns1__GetGxdataUpTime

  - @ref __ns1__signedUserInfo

  - @ref __ns1__GetOsDateTime

  - @ref __ns1__QueryPhotobw

  - @ref __ns1__TcdQuery

  - @ref __ns1__TcdSendup

  - @ref __ns1__UpLoadData

  - @ref __ns1__ExecuteSqlForColb

  - @ref __ns1__GetXHYDGLXTupdater

  - @ref __ns1__GetAPVupdater

  - @ref __ns1__UpLoadFile

  - @ref __ns1__upPic

  - @ref __ns1__DownloadPic

  - @ref __ns1__GetPicNames

  - @ref __ns1__GetDwInfo

  - @ref __ns1__GetDwPic

  - @ref __ns1__GetDeviceXj

  - @ref __ns1__GetJxData

  - @ref __ns1__GetStationJxData

  - @ref __ns1__GetJxPic

  - @ref __ns1__GetDevPic

  - @ref __ns1__GetBgImg

  - @ref __ns1__GetDcsData

  - @ref __ns1__DownLoadMobGPSData

  - @ref __ns1__MobDownLoadData

  - @ref __ns1__GetOpenFireInfo

  - @ref __ns1__GetDwList

  - @ref __ns1__GetUnitStation

  - @ref __ns1__GetUnitStruct

  - @ref __ns1__GetUnitPersonInfo

  - @ref __ns1__GetFileSize

  - @ref __ns1__GetXbList

  - @ref __ns1__GetXbStationList

  - @ref __ns1__GetMapDeviceType

  - @ref __ns1__GetGxDeviceData

  - @ref __ns1__GetDownFileInfo

  - @ref __ns1__DownMapfile

  - @ref __ns1__GetFileNew

  - @ref __ns1__AlterTable

  - @ref __ns1__DownCQData

  - @ref __ns1__GetTabList

  - @ref __ns1__IsOracleTable

  - @ref __ns1__GetFieldInfo

  - @ref __ns1__ExecuteSqlForFile

  - @ref __ns1__DownLoadFile

  - @ref __ns1__WriteFile

  - @ref __ns1__GetMapUpdateTime

  - @ref __ns1__GetMapTabName

  - @ref __ns1__GetMapDeviceData

  - @ref __ns1__GetMaList

  - @ref __ns1__GetMangeUnit

  - @ref __ns1__GetMangeXb

  - @ref __ns1__CheckMapVer

  - @ref __ns1__GetMap

  - @ref __ns1__GetTableData

  - @ref __ns1__ServerLevel

  - @ref __ns1__GetMapListTime

  - @ref __ns1__UpdateGzclMap

  - @ref __ns1__GetUnitMapVer

  - @ref __ns1__GetMangeMapUpdate

  - @ref __ns1__OpenProcess

  - @ref __ns1__GetEmfPngVer

  - @ref __ns1__GetEmfPngFile

  - @ref __ns1__OpenMapExe

  - @ref __ns1__ChaoQi

  - @ref __ns1__JiChaoQi

  - @ref __ns1__GetZhouQi

  - @ref __ns1__FlowChartEmf

  - @ref __ns1__SGCDrawEmf

  - @ref __ns1__GzGetTypeList

  - @ref __ns1__GzGetDeviceStruct

  - @ref __ns1__SaveMapFile

  - @ref __ns1__SelectYjzhStation

  - @ref __ns1__SelectYjzhDevice

  - @ref __ns1__GetYjzhZskAlarmTypes

  - @ref __ns1__GetYjzhZskGzFlow_

  - @ref __ns1__GetYjzhZskOtherFlowChartList_

  - @ref __ns1__GetYjzhZskDevFlowChartList_

  - @ref __ns1__GetPropList_

  - @ref __ns1__GetPropName_

  - @ref __ns1__CheckLoginUser_

  - @ref __ns1__GetRyUnit_

  - @ref __ns1__GetDevCode_

  - @ref __ns1__CheckDevCode_

  - @ref __ns1__HelloWorld_

  - @ref __ns1__GetDBString_

  - @ref __ns1__QueryData_

  - @ref __ns1__QueryDataCount_

  - @ref __ns1__ExecuteSql_

  - @ref __ns1__SaveData_

  - @ref __ns1__SaveFileData_

  - @ref __ns1__DownPic_

  - @ref __ns1__DownAllPic_

  - @ref __ns1__GetGxdataUpTime_

  - @ref __ns1__signedUserInfo_

  - @ref __ns1__GetOsDateTime_

  - @ref __ns1__QueryPhotobw_

  - @ref __ns1__TcdQuery_

  - @ref __ns1__TcdSendup_

  - @ref __ns1__UpLoadData_

  - @ref __ns1__ExecuteSqlForColb_

  - @ref __ns1__GetXHYDGLXTupdater_

  - @ref __ns1__GetAPVupdater_

  - @ref __ns1__UpLoadFile_

  - @ref __ns1__upPic_

  - @ref __ns1__DownloadPic_

  - @ref __ns1__GetPicNames_

  - @ref __ns1__GetDwInfo_

  - @ref __ns1__GetDwPic_

  - @ref __ns1__GetDeviceXj_

  - @ref __ns1__GetJxData_

  - @ref __ns1__GetStationJxData_

  - @ref __ns1__GetJxPic_

  - @ref __ns1__GetDevPic_

  - @ref __ns1__GetBgImg_

  - @ref __ns1__GetDcsData_

  - @ref __ns1__DownLoadMobGPSData_

  - @ref __ns1__MobDownLoadData_

  - @ref __ns1__GetOpenFireInfo_

  - @ref __ns1__GetDwList_

  - @ref __ns1__GetUnitStation_

  - @ref __ns1__GetUnitStruct_

  - @ref __ns1__GetUnitPersonInfo_

  - @ref __ns1__GetFileSize_

  - @ref __ns1__GetXbList_

  - @ref __ns1__GetXbStationList_

  - @ref __ns1__GetMapDeviceType_

  - @ref __ns1__GetGxDeviceData_

  - @ref __ns1__GetDownFileInfo_

  - @ref __ns1__DownMapfile_

  - @ref __ns1__GetFileNew_

  - @ref __ns1__AlterTable_

  - @ref __ns1__DownCQData_

  - @ref __ns1__GetTabList_

  - @ref __ns1__IsOracleTable_

  - @ref __ns1__GetFieldInfo_

  - @ref __ns1__ExecuteSqlForFile_

  - @ref __ns1__DownLoadFile_

  - @ref __ns1__WriteFile_

  - @ref __ns1__GetMapUpdateTime_

  - @ref __ns1__GetMapTabName_

  - @ref __ns1__GetMapDeviceData_

  - @ref __ns1__GetMaList_

  - @ref __ns1__GetMangeUnit_

  - @ref __ns1__GetMangeXb_

  - @ref __ns1__CheckMapVer_

  - @ref __ns1__GetMap_

  - @ref __ns1__GetTableData_

  - @ref __ns1__ServerLevel_

  - @ref __ns1__GetMapListTime_

  - @ref __ns1__UpdateGzclMap_

  - @ref __ns1__GetUnitMapVer_

  - @ref __ns1__GetMangeMapUpdate_

  - @ref __ns1__OpenProcess_

  - @ref __ns1__GetEmfPngVer_

  - @ref __ns1__GetEmfPngFile_

  - @ref __ns1__OpenMapExe_

  - @ref __ns1__ChaoQi_

  - @ref __ns1__JiChaoQi_

  - @ref __ns1__GetZhouQi_

  - @ref __ns1__FlowChartEmf_

  - @ref __ns1__SGCDrawEmf_

  - @ref __ns1__GzGetTypeList_

  - @ref __ns1__GzGetDeviceStruct_

  - @ref __ns1__SaveMapFile_

  - @ref __ns1__SelectYjzhStation_

  - @ref __ns1__SelectYjzhDevice_

  - @ref __ns1__GetYjzhZskAlarmTypes_

@section updataServiceSoap_ports Default endpoints of Binding "updataServiceSoap"

  - http://192.168.0.244:190/updataService.asmx

@note Multiple service bindings collected as one, use wsdl2h option -Nname to produce a separate service for each binding


*/

/******************************************************************************\
 *                                                                            *
 * Service Binding                                                            *
 *   updataServiceSoap                                                        *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetYjzhZskGzFlow                                                  *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetYjzhZskGzFlow" of service binding "updataServiceSoap".
2

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.244:190/updataService.asmx

  - Default SOAP action or REST location path:
    - "http://zbxhupdata.com/webservices/GetYjzhZskGzFlow"

  - Addressing input action: "http://zbxhupdata.com/webservices/GetYjzhZskGzFlow"

  - Addressing output action: "http://zbxhupdata.com/webservices/GetYjzhZskGzFlowResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetYjzhZskGzFlow(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetYjzhZskGzFlow*             ns1__GetYjzhZskGzFlow,
    // output parameters:
    _ns1__GetYjzhZskGzFlowResponse     &ns1__GetYjzhZskGzFlowResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetYjzhZskGzFlow(
    struct soap *soap,
    // input parameters:
    _ns1__GetYjzhZskGzFlow*             ns1__GetYjzhZskGzFlow,
    // output parameters:
    _ns1__GetYjzhZskGzFlowResponse     &ns1__GetYjzhZskGzFlowResponse
  );
@endcode

C++ proxy class (defined in soapupdataServiceSoapProxy.h generated with soapcpp2):
@code
  class updataServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapupdataServiceSoapService.h generated with soapcpp2):
@code
  class updataServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetYjzhZskGzFlow SOAP
//gsoap ns1  service method-style:	GetYjzhZskGzFlow document
//gsoap ns1  service method-encoding:	GetYjzhZskGzFlow literal
//gsoap ns1  service method-input-action:	GetYjzhZskGzFlow http://zbxhupdata.com/webservices/GetYjzhZskGzFlow
//gsoap ns1  service method-output-action:	GetYjzhZskGzFlow http://zbxhupdata.com/webservices/GetYjzhZskGzFlowResponse
int __ns1__GetYjzhZskGzFlow(
    _ns1__GetYjzhZskGzFlow*             ns1__GetYjzhZskGzFlow,	///< Input parameter
    _ns1__GetYjzhZskGzFlowResponse     &ns1__GetYjzhZskGzFlowResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetYjzhZskOtherFlowChartList                                      *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetYjzhZskOtherFlowChartList" of service binding "updataServiceSoap".
3

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.244:190/updataService.asmx

  - Default SOAP action or REST location path:
    - "http://zbxhupdata.com/webservices/GetYjzhZskOtherFlowChartList"

  - Addressing input action: "http://zbxhupdata.com/webservices/GetYjzhZskOtherFlowChartList"

  - Addressing output action: "http://zbxhupdata.com/webservices/GetYjzhZskOtherFlowChartListResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetYjzhZskOtherFlowChartList(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetYjzhZskOtherFlowChartList* ns1__GetYjzhZskOtherFlowChartList,
    // output parameters:
    _ns1__GetYjzhZskOtherFlowChartListResponse&ns1__GetYjzhZskOtherFlowChartListResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetYjzhZskOtherFlowChartList(
    struct soap *soap,
    // input parameters:
    _ns1__GetYjzhZskOtherFlowChartList* ns1__GetYjzhZskOtherFlowChartList,
    // output parameters:
    _ns1__GetYjzhZskOtherFlowChartListResponse&ns1__GetYjzhZskOtherFlowChartListResponse
  );
@endcode

C++ proxy class (defined in soapupdataServiceSoapProxy.h generated with soapcpp2):
@code
  class updataServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapupdataServiceSoapService.h generated with soapcpp2):
@code
  class updataServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetYjzhZskOtherFlowChartList SOAP
//gsoap ns1  service method-style:	GetYjzhZskOtherFlowChartList document
//gsoap ns1  service method-encoding:	GetYjzhZskOtherFlowChartList literal
//gsoap ns1  service method-input-action:	GetYjzhZskOtherFlowChartList http://zbxhupdata.com/webservices/GetYjzhZskOtherFlowChartList
//gsoap ns1  service method-output-action:	GetYjzhZskOtherFlowChartList http://zbxhupdata.com/webservices/GetYjzhZskOtherFlowChartListResponse
int __ns1__GetYjzhZskOtherFlowChartList(
    _ns1__GetYjzhZskOtherFlowChartList* ns1__GetYjzhZskOtherFlowChartList,	///< Input parameter
    _ns1__GetYjzhZskOtherFlowChartListResponse&ns1__GetYjzhZskOtherFlowChartListResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetYjzhZskDevFlowChartList                                        *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetYjzhZskDevFlowChartList" of service binding "updataServiceSoap".
4

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.244:190/updataService.asmx

  - Default SOAP action or REST location path:
    - "http://zbxhupdata.com/webservices/GetYjzhZskDevFlowChartList"

  - Addressing input action: "http://zbxhupdata.com/webservices/GetYjzhZskDevFlowChartList"

  - Addressing output action: "http://zbxhupdata.com/webservices/GetYjzhZskDevFlowChartListResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetYjzhZskDevFlowChartList(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetYjzhZskDevFlowChartList*   ns1__GetYjzhZskDevFlowChartList,
    // output parameters:
    _ns1__GetYjzhZskDevFlowChartListResponse&ns1__GetYjzhZskDevFlowChartListResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetYjzhZskDevFlowChartList(
    struct soap *soap,
    // input parameters:
    _ns1__GetYjzhZskDevFlowChartList*   ns1__GetYjzhZskDevFlowChartList,
    // output parameters:
    _ns1__GetYjzhZskDevFlowChartListResponse&ns1__GetYjzhZskDevFlowChartListResponse
  );
@endcode

C++ proxy class (defined in soapupdataServiceSoapProxy.h generated with soapcpp2):
@code
  class updataServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapupdataServiceSoapService.h generated with soapcpp2):
@code
  class updataServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetYjzhZskDevFlowChartList SOAP
//gsoap ns1  service method-style:	GetYjzhZskDevFlowChartList document
//gsoap ns1  service method-encoding:	GetYjzhZskDevFlowChartList literal
//gsoap ns1  service method-input-action:	GetYjzhZskDevFlowChartList http://zbxhupdata.com/webservices/GetYjzhZskDevFlowChartList
//gsoap ns1  service method-output-action:	GetYjzhZskDevFlowChartList http://zbxhupdata.com/webservices/GetYjzhZskDevFlowChartListResponse
int __ns1__GetYjzhZskDevFlowChartList(
    _ns1__GetYjzhZskDevFlowChartList*   ns1__GetYjzhZskDevFlowChartList,	///< Input parameter
    _ns1__GetYjzhZskDevFlowChartListResponse&ns1__GetYjzhZskDevFlowChartListResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetPropList                                                       *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetPropList" of service binding "updataServiceSoap".


  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.244:190/updataService.asmx

  - Default SOAP action or REST location path:
    - "http://zbxhupdata.com/webservices/GetPropList"

  - Addressing input action: "http://zbxhupdata.com/webservices/GetPropList"

  - Addressing output action: "http://zbxhupdata.com/webservices/GetPropListResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetPropList(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetPropList*                  ns1__GetPropList,
    // output parameters:
    _ns1__GetPropListResponse          &ns1__GetPropListResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetPropList(
    struct soap *soap,
    // input parameters:
    _ns1__GetPropList*                  ns1__GetPropList,
    // output parameters:
    _ns1__GetPropListResponse          &ns1__GetPropListResponse
  );
@endcode

C++ proxy class (defined in soapupdataServiceSoapProxy.h generated with soapcpp2):
@code
  class updataServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapupdataServiceSoapService.h generated with soapcpp2):
@code
  class updataServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetPropList SOAP
//gsoap ns1  service method-style:	GetPropList document
//gsoap ns1  service method-encoding:	GetPropList literal
//gsoap ns1  service method-input-action:	GetPropList http://zbxhupdata.com/webservices/GetPropList
//gsoap ns1  service method-output-action:	GetPropList http://zbxhupdata.com/webservices/GetPropListResponse
int __ns1__GetPropList(
    _ns1__GetPropList*                  ns1__GetPropList,	///< Input parameter
    _ns1__GetPropListResponse          &ns1__GetPropListResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetPropName                                                       *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetPropName" of service binding "updataServiceSoap".


  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.244:190/updataService.asmx

  - Default SOAP action or REST location path:
    - "http://zbxhupdata.com/webservices/GetPropName"

  - Addressing input action: "http://zbxhupdata.com/webservices/GetPropName"

  - Addressing output action: "http://zbxhupdata.com/webservices/GetPropNameResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetPropName(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetPropName*                  ns1__GetPropName,
    // output parameters:
    _ns1__GetPropNameResponse          &ns1__GetPropNameResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetPropName(
    struct soap *soap,
    // input parameters:
    _ns1__GetPropName*                  ns1__GetPropName,
    // output parameters:
    _ns1__GetPropNameResponse          &ns1__GetPropNameResponse
  );
@endcode

C++ proxy class (defined in soapupdataServiceSoapProxy.h generated with soapcpp2):
@code
  class updataServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapupdataServiceSoapService.h generated with soapcpp2):
@code
  class updataServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetPropName SOAP
//gsoap ns1  service method-style:	GetPropName document
//gsoap ns1  service method-encoding:	GetPropName literal
//gsoap ns1  service method-input-action:	GetPropName http://zbxhupdata.com/webservices/GetPropName
//gsoap ns1  service method-output-action:	GetPropName http://zbxhupdata.com/webservices/GetPropNameResponse
int __ns1__GetPropName(
    _ns1__GetPropName*                  ns1__GetPropName,	///< Input parameter
    _ns1__GetPropNameResponse          &ns1__GetPropNameResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__CheckLoginUser                                                    *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__CheckLoginUser" of service binding "updataServiceSoap".


  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.244:190/updataService.asmx

  - Default SOAP action or REST location path:
    - "http://zbxhupdata.com/webservices/CheckLoginUser"

  - Addressing input action: "http://zbxhupdata.com/webservices/CheckLoginUser"

  - Addressing output action: "http://zbxhupdata.com/webservices/CheckLoginUserResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__CheckLoginUser(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__CheckLoginUser*               ns1__CheckLoginUser,
    // output parameters:
    _ns1__CheckLoginUserResponse       &ns1__CheckLoginUserResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__CheckLoginUser(
    struct soap *soap,
    // input parameters:
    _ns1__CheckLoginUser*               ns1__CheckLoginUser,
    // output parameters:
    _ns1__CheckLoginUserResponse       &ns1__CheckLoginUserResponse
  );
@endcode

C++ proxy class (defined in soapupdataServiceSoapProxy.h generated with soapcpp2):
@code
  class updataServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapupdataServiceSoapService.h generated with soapcpp2):
@code
  class updataServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	CheckLoginUser SOAP
//gsoap ns1  service method-style:	CheckLoginUser document
//gsoap ns1  service method-encoding:	CheckLoginUser literal
//gsoap ns1  service method-input-action:	CheckLoginUser http://zbxhupdata.com/webservices/CheckLoginUser
//gsoap ns1  service method-output-action:	CheckLoginUser http://zbxhupdata.com/webservices/CheckLoginUserResponse
int __ns1__CheckLoginUser(
    _ns1__CheckLoginUser*               ns1__CheckLoginUser,	///< Input parameter
    _ns1__CheckLoginUserResponse       &ns1__CheckLoginUserResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetRyUnit                                                         *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetRyUnit" of service binding "updataServiceSoap".


  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.244:190/updataService.asmx

  - Default SOAP action or REST location path:
    - "http://zbxhupdata.com/webservices/GetRyUnit"

  - Addressing input action: "http://zbxhupdata.com/webservices/GetRyUnit"

  - Addressing output action: "http://zbxhupdata.com/webservices/GetRyUnitResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetRyUnit(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetRyUnit*                    ns1__GetRyUnit,
    // output parameters:
    _ns1__GetRyUnitResponse            &ns1__GetRyUnitResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetRyUnit(
    struct soap *soap,
    // input parameters:
    _ns1__GetRyUnit*                    ns1__GetRyUnit,
    // output parameters:
    _ns1__GetRyUnitResponse            &ns1__GetRyUnitResponse
  );
@endcode

C++ proxy class (defined in soapupdataServiceSoapProxy.h generated with soapcpp2):
@code
  class updataServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapupdataServiceSoapService.h generated with soapcpp2):
@code
  class updataServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetRyUnit SOAP
//gsoap ns1  service method-style:	GetRyUnit document
//gsoap ns1  service method-encoding:	GetRyUnit literal
//gsoap ns1  service method-input-action:	GetRyUnit http://zbxhupdata.com/webservices/GetRyUnit
//gsoap ns1  service method-output-action:	GetRyUnit http://zbxhupdata.com/webservices/GetRyUnitResponse
int __ns1__GetRyUnit(
    _ns1__GetRyUnit*                    ns1__GetRyUnit,	///< Input parameter
    _ns1__GetRyUnitResponse            &ns1__GetRyUnitResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetDevCode                                                        *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetDevCode" of service binding "updataServiceSoap".


  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.244:190/updataService.asmx

  - Default SOAP action or REST location path:
    - "http://zbxhupdata.com/webservices/GetDevCode"

  - Addressing input action: "http://zbxhupdata.com/webservices/GetDevCode"

  - Addressing output action: "http://zbxhupdata.com/webservices/GetDevCodeResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetDevCode(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetDevCode*                   ns1__GetDevCode,
    // output parameters:
    _ns1__GetDevCodeResponse           &ns1__GetDevCodeResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetDevCode(
    struct soap *soap,
    // input parameters:
    _ns1__GetDevCode*                   ns1__GetDevCode,
    // output parameters:
    _ns1__GetDevCodeResponse           &ns1__GetDevCodeResponse
  );
@endcode

C++ proxy class (defined in soapupdataServiceSoapProxy.h generated with soapcpp2):
@code
  class updataServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapupdataServiceSoapService.h generated with soapcpp2):
@code
  class updataServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetDevCode SOAP
//gsoap ns1  service method-style:	GetDevCode document
//gsoap ns1  service method-encoding:	GetDevCode literal
//gsoap ns1  service method-input-action:	GetDevCode http://zbxhupdata.com/webservices/GetDevCode
//gsoap ns1  service method-output-action:	GetDevCode http://zbxhupdata.com/webservices/GetDevCodeResponse
int __ns1__GetDevCode(
    _ns1__GetDevCode*                   ns1__GetDevCode,	///< Input parameter
    _ns1__GetDevCodeResponse           &ns1__GetDevCodeResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__CheckDevCode                                                      *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__CheckDevCode" of service binding "updataServiceSoap".


  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.244:190/updataService.asmx

  - Default SOAP action or REST location path:
    - "http://zbxhupdata.com/webservices/CheckDevCode"

  - Addressing input action: "http://zbxhupdata.com/webservices/CheckDevCode"

  - Addressing output action: "http://zbxhupdata.com/webservices/CheckDevCodeResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__CheckDevCode(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__CheckDevCode*                 ns1__CheckDevCode,
    // output parameters:
    _ns1__CheckDevCodeResponse         &ns1__CheckDevCodeResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__CheckDevCode(
    struct soap *soap,
    // input parameters:
    _ns1__CheckDevCode*                 ns1__CheckDevCode,
    // output parameters:
    _ns1__CheckDevCodeResponse         &ns1__CheckDevCodeResponse
  );
@endcode

C++ proxy class (defined in soapupdataServiceSoapProxy.h generated with soapcpp2):
@code
  class updataServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapupdataServiceSoapService.h generated with soapcpp2):
@code
  class updataServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	CheckDevCode SOAP
//gsoap ns1  service method-style:	CheckDevCode document
//gsoap ns1  service method-encoding:	CheckDevCode literal
//gsoap ns1  service method-input-action:	CheckDevCode http://zbxhupdata.com/webservices/CheckDevCode
//gsoap ns1  service method-output-action:	CheckDevCode http://zbxhupdata.com/webservices/CheckDevCodeResponse
int __ns1__CheckDevCode(
    _ns1__CheckDevCode*                 ns1__CheckDevCode,	///< Input parameter
    _ns1__CheckDevCodeResponse         &ns1__CheckDevCodeResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__HelloWorld                                                        *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__HelloWorld" of service binding "updataServiceSoap".


  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.244:190/updataService.asmx

  - Default SOAP action or REST location path:
    - "http://zbxhupdata.com/webservices/HelloWorld"

  - Addressing input action: "http://zbxhupdata.com/webservices/HelloWorld"

  - Addressing output action: "http://zbxhupdata.com/webservices/HelloWorldResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__HelloWorld(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__HelloWorld*                   ns1__HelloWorld,
    // output parameters:
    _ns1__HelloWorldResponse           &ns1__HelloWorldResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__HelloWorld(
    struct soap *soap,
    // input parameters:
    _ns1__HelloWorld*                   ns1__HelloWorld,
    // output parameters:
    _ns1__HelloWorldResponse           &ns1__HelloWorldResponse
  );
@endcode

C++ proxy class (defined in soapupdataServiceSoapProxy.h generated with soapcpp2):
@code
  class updataServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapupdataServiceSoapService.h generated with soapcpp2):
@code
  class updataServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	HelloWorld SOAP
//gsoap ns1  service method-style:	HelloWorld document
//gsoap ns1  service method-encoding:	HelloWorld literal
//gsoap ns1  service method-input-action:	HelloWorld http://zbxhupdata.com/webservices/HelloWorld
//gsoap ns1  service method-output-action:	HelloWorld http://zbxhupdata.com/webservices/HelloWorldResponse
int __ns1__HelloWorld(
    _ns1__HelloWorld*                   ns1__HelloWorld,	///< Input parameter
    _ns1__HelloWorldResponse           &ns1__HelloWorldResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetDBString                                                       *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetDBString" of service binding "updataServiceSoap".


  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.244:190/updataService.asmx

  - Default SOAP action or REST location path:
    - "http://zbxhupdata.com/webservices/GetDBString"

  - Addressing input action: "http://zbxhupdata.com/webservices/GetDBString"

  - Addressing output action: "http://zbxhupdata.com/webservices/GetDBStringResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetDBString(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetDBString*                  ns1__GetDBString,
    // output parameters:
    _ns1__GetDBStringResponse          &ns1__GetDBStringResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetDBString(
    struct soap *soap,
    // input parameters:
    _ns1__GetDBString*                  ns1__GetDBString,
    // output parameters:
    _ns1__GetDBStringResponse          &ns1__GetDBStringResponse
  );
@endcode

C++ proxy class (defined in soapupdataServiceSoapProxy.h generated with soapcpp2):
@code
  class updataServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapupdataServiceSoapService.h generated with soapcpp2):
@code
  class updataServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetDBString SOAP
//gsoap ns1  service method-style:	GetDBString document
//gsoap ns1  service method-encoding:	GetDBString literal
//gsoap ns1  service method-input-action:	GetDBString http://zbxhupdata.com/webservices/GetDBString
//gsoap ns1  service method-output-action:	GetDBString http://zbxhupdata.com/webservices/GetDBStringResponse
int __ns1__GetDBString(
    _ns1__GetDBString*                  ns1__GetDBString,	///< Input parameter
    _ns1__GetDBStringResponse          &ns1__GetDBStringResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__QueryData                                                         *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__QueryData" of service binding "updataServiceSoap".


  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.244:190/updataService.asmx

  - Default SOAP action or REST location path:
    - "http://zbxhupdata.com/webservices/QueryData"

  - Addressing input action: "http://zbxhupdata.com/webservices/QueryData"

  - Addressing output action: "http://zbxhupdata.com/webservices/QueryDataResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__QueryData(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__QueryData*                    ns1__QueryData,
    // output parameters:
    _ns1__QueryDataResponse            &ns1__QueryDataResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__QueryData(
    struct soap *soap,
    // input parameters:
    _ns1__QueryData*                    ns1__QueryData,
    // output parameters:
    _ns1__QueryDataResponse            &ns1__QueryDataResponse
  );
@endcode

C++ proxy class (defined in soapupdataServiceSoapProxy.h generated with soapcpp2):
@code
  class updataServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapupdataServiceSoapService.h generated with soapcpp2):
@code
  class updataServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	QueryData SOAP
//gsoap ns1  service method-style:	QueryData document
//gsoap ns1  service method-encoding:	QueryData literal
//gsoap ns1  service method-input-action:	QueryData http://zbxhupdata.com/webservices/QueryData
//gsoap ns1  service method-output-action:	QueryData http://zbxhupdata.com/webservices/QueryDataResponse
int __ns1__QueryData(
    _ns1__QueryData*                    ns1__QueryData,	///< Input parameter
    _ns1__QueryDataResponse            &ns1__QueryDataResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__QueryDataCount                                                    *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__QueryDataCount" of service binding "updataServiceSoap".
 

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.244:190/updataService.asmx

  - Default SOAP action or REST location path:
    - "http://zbxhupdata.com/webservices/QueryDataCount"

  - Addressing input action: "http://zbxhupdata.com/webservices/QueryDataCount"

  - Addressing output action: "http://zbxhupdata.com/webservices/QueryDataCountResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__QueryDataCount(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__QueryDataCount*               ns1__QueryDataCount,
    // output parameters:
    _ns1__QueryDataCountResponse       &ns1__QueryDataCountResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__QueryDataCount(
    struct soap *soap,
    // input parameters:
    _ns1__QueryDataCount*               ns1__QueryDataCount,
    // output parameters:
    _ns1__QueryDataCountResponse       &ns1__QueryDataCountResponse
  );
@endcode

C++ proxy class (defined in soapupdataServiceSoapProxy.h generated with soapcpp2):
@code
  class updataServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapupdataServiceSoapService.h generated with soapcpp2):
@code
  class updataServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	QueryDataCount SOAP
//gsoap ns1  service method-style:	QueryDataCount document
//gsoap ns1  service method-encoding:	QueryDataCount literal
//gsoap ns1  service method-input-action:	QueryDataCount http://zbxhupdata.com/webservices/QueryDataCount
//gsoap ns1  service method-output-action:	QueryDataCount http://zbxhupdata.com/webservices/QueryDataCountResponse
int __ns1__QueryDataCount(
    _ns1__QueryDataCount*               ns1__QueryDataCount,	///< Input parameter
    _ns1__QueryDataCountResponse       &ns1__QueryDataCountResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__ExecuteSql                                                        *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__ExecuteSql" of service binding "updataServiceSoap".
sql

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.244:190/updataService.asmx

  - Default SOAP action or REST location path:
    - "http://zbxhupdata.com/webservices/ExecuteSql"

  - Addressing input action: "http://zbxhupdata.com/webservices/ExecuteSql"

  - Addressing output action: "http://zbxhupdata.com/webservices/ExecuteSqlResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__ExecuteSql(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__ExecuteSql*                   ns1__ExecuteSql,
    // output parameters:
    _ns1__ExecuteSqlResponse           &ns1__ExecuteSqlResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__ExecuteSql(
    struct soap *soap,
    // input parameters:
    _ns1__ExecuteSql*                   ns1__ExecuteSql,
    // output parameters:
    _ns1__ExecuteSqlResponse           &ns1__ExecuteSqlResponse
  );
@endcode

C++ proxy class (defined in soapupdataServiceSoapProxy.h generated with soapcpp2):
@code
  class updataServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapupdataServiceSoapService.h generated with soapcpp2):
@code
  class updataServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	ExecuteSql SOAP
//gsoap ns1  service method-style:	ExecuteSql document
//gsoap ns1  service method-encoding:	ExecuteSql literal
//gsoap ns1  service method-input-action:	ExecuteSql http://zbxhupdata.com/webservices/ExecuteSql
//gsoap ns1  service method-output-action:	ExecuteSql http://zbxhupdata.com/webservices/ExecuteSqlResponse
int __ns1__ExecuteSql(
    _ns1__ExecuteSql*                   ns1__ExecuteSql,	///< Input parameter
    _ns1__ExecuteSqlResponse           &ns1__ExecuteSqlResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__SaveData                                                          *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__SaveData" of service binding "updataServiceSoap".


  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.244:190/updataService.asmx

  - Default SOAP action or REST location path:
    - "http://zbxhupdata.com/webservices/SaveData"

  - Addressing input action: "http://zbxhupdata.com/webservices/SaveData"

  - Addressing output action: "http://zbxhupdata.com/webservices/SaveDataResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__SaveData(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__SaveData*                     ns1__SaveData,
    // output parameters:
    _ns1__SaveDataResponse             &ns1__SaveDataResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__SaveData(
    struct soap *soap,
    // input parameters:
    _ns1__SaveData*                     ns1__SaveData,
    // output parameters:
    _ns1__SaveDataResponse             &ns1__SaveDataResponse
  );
@endcode

C++ proxy class (defined in soapupdataServiceSoapProxy.h generated with soapcpp2):
@code
  class updataServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapupdataServiceSoapService.h generated with soapcpp2):
@code
  class updataServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	SaveData SOAP
//gsoap ns1  service method-style:	SaveData document
//gsoap ns1  service method-encoding:	SaveData literal
//gsoap ns1  service method-input-action:	SaveData http://zbxhupdata.com/webservices/SaveData
//gsoap ns1  service method-output-action:	SaveData http://zbxhupdata.com/webservices/SaveDataResponse
int __ns1__SaveData(
    _ns1__SaveData*                     ns1__SaveData,	///< Input parameter
    _ns1__SaveDataResponse             &ns1__SaveDataResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__SaveFileData                                                      *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__SaveFileData" of service binding "updataServiceSoap".
 

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.244:190/updataService.asmx

  - Default SOAP action or REST location path:
    - "http://zbxhupdata.com/webservices/SaveFileData"

  - Addressing input action: "http://zbxhupdata.com/webservices/SaveFileData"

  - Addressing output action: "http://zbxhupdata.com/webservices/SaveFileDataResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__SaveFileData(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__SaveFileData*                 ns1__SaveFileData,
    // output parameters:
    _ns1__SaveFileDataResponse         &ns1__SaveFileDataResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__SaveFileData(
    struct soap *soap,
    // input parameters:
    _ns1__SaveFileData*                 ns1__SaveFileData,
    // output parameters:
    _ns1__SaveFileDataResponse         &ns1__SaveFileDataResponse
  );
@endcode

C++ proxy class (defined in soapupdataServiceSoapProxy.h generated with soapcpp2):
@code
  class updataServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapupdataServiceSoapService.h generated with soapcpp2):
@code
  class updataServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	SaveFileData SOAP
//gsoap ns1  service method-style:	SaveFileData document
//gsoap ns1  service method-encoding:	SaveFileData literal
//gsoap ns1  service method-input-action:	SaveFileData http://zbxhupdata.com/webservices/SaveFileData
//gsoap ns1  service method-output-action:	SaveFileData http://zbxhupdata.com/webservices/SaveFileDataResponse
int __ns1__SaveFileData(
    _ns1__SaveFileData*                 ns1__SaveFileData,	///< Input parameter
    _ns1__SaveFileDataResponse         &ns1__SaveFileDataResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__DownPic                                                           *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__DownPic" of service binding "updataServiceSoap".
 

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.244:190/updataService.asmx

  - Default SOAP action or REST location path:
    - "http://zbxhupdata.com/webservices/DownPic"

  - Addressing input action: "http://zbxhupdata.com/webservices/DownPic"

  - Addressing output action: "http://zbxhupdata.com/webservices/DownPicResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__DownPic(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__DownPic*                      ns1__DownPic,
    // output parameters:
    _ns1__DownPicResponse              &ns1__DownPicResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__DownPic(
    struct soap *soap,
    // input parameters:
    _ns1__DownPic*                      ns1__DownPic,
    // output parameters:
    _ns1__DownPicResponse              &ns1__DownPicResponse
  );
@endcode

C++ proxy class (defined in soapupdataServiceSoapProxy.h generated with soapcpp2):
@code
  class updataServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapupdataServiceSoapService.h generated with soapcpp2):
@code
  class updataServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	DownPic SOAP
//gsoap ns1  service method-style:	DownPic document
//gsoap ns1  service method-encoding:	DownPic literal
//gsoap ns1  service method-input-action:	DownPic http://zbxhupdata.com/webservices/DownPic
//gsoap ns1  service method-output-action:	DownPic http://zbxhupdata.com/webservices/DownPicResponse
int __ns1__DownPic(
    _ns1__DownPic*                      ns1__DownPic,	///< Input parameter
    _ns1__DownPicResponse              &ns1__DownPicResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__DownAllPic                                                        *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__DownAllPic" of service binding "updataServiceSoap".
 

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.244:190/updataService.asmx

  - Default SOAP action or REST location path:
    - "http://zbxhupdata.com/webservices/DownAllPic"

  - Addressing input action: "http://zbxhupdata.com/webservices/DownAllPic"

  - Addressing output action: "http://zbxhupdata.com/webservices/DownAllPicResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__DownAllPic(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__DownAllPic*                   ns1__DownAllPic,
    // output parameters:
    _ns1__DownAllPicResponse           &ns1__DownAllPicResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__DownAllPic(
    struct soap *soap,
    // input parameters:
    _ns1__DownAllPic*                   ns1__DownAllPic,
    // output parameters:
    _ns1__DownAllPicResponse           &ns1__DownAllPicResponse
  );
@endcode

C++ proxy class (defined in soapupdataServiceSoapProxy.h generated with soapcpp2):
@code
  class updataServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapupdataServiceSoapService.h generated with soapcpp2):
@code
  class updataServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	DownAllPic SOAP
//gsoap ns1  service method-style:	DownAllPic document
//gsoap ns1  service method-encoding:	DownAllPic literal
//gsoap ns1  service method-input-action:	DownAllPic http://zbxhupdata.com/webservices/DownAllPic
//gsoap ns1  service method-output-action:	DownAllPic http://zbxhupdata.com/webservices/DownAllPicResponse
int __ns1__DownAllPic(
    _ns1__DownAllPic*                   ns1__DownAllPic,	///< Input parameter
    _ns1__DownAllPicResponse           &ns1__DownAllPicResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetGxdataUpTime                                                   *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetGxdataUpTime" of service binding "updataServiceSoap".


  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.244:190/updataService.asmx

  - Default SOAP action or REST location path:
    - "http://zbxhupdata.com/webservices/GetGxdataUpTime"

  - Addressing input action: "http://zbxhupdata.com/webservices/GetGxdataUpTime"

  - Addressing output action: "http://zbxhupdata.com/webservices/GetGxdataUpTimeResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetGxdataUpTime(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetGxdataUpTime*              ns1__GetGxdataUpTime,
    // output parameters:
    _ns1__GetGxdataUpTimeResponse      &ns1__GetGxdataUpTimeResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetGxdataUpTime(
    struct soap *soap,
    // input parameters:
    _ns1__GetGxdataUpTime*              ns1__GetGxdataUpTime,
    // output parameters:
    _ns1__GetGxdataUpTimeResponse      &ns1__GetGxdataUpTimeResponse
  );
@endcode

C++ proxy class (defined in soapupdataServiceSoapProxy.h generated with soapcpp2):
@code
  class updataServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapupdataServiceSoapService.h generated with soapcpp2):
@code
  class updataServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetGxdataUpTime SOAP
//gsoap ns1  service method-style:	GetGxdataUpTime document
//gsoap ns1  service method-encoding:	GetGxdataUpTime literal
//gsoap ns1  service method-input-action:	GetGxdataUpTime http://zbxhupdata.com/webservices/GetGxdataUpTime
//gsoap ns1  service method-output-action:	GetGxdataUpTime http://zbxhupdata.com/webservices/GetGxdataUpTimeResponse
int __ns1__GetGxdataUpTime(
    _ns1__GetGxdataUpTime*              ns1__GetGxdataUpTime,	///< Input parameter
    _ns1__GetGxdataUpTimeResponse      &ns1__GetGxdataUpTimeResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__signedUserInfo                                                    *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__signedUserInfo" of service binding "updataServiceSoap".
 

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.244:190/updataService.asmx

  - Default SOAP action or REST location path:
    - "http://zbxhupdata.com/webservices/signedUserInfo"

  - Addressing input action: "http://zbxhupdata.com/webservices/signedUserInfo"

  - Addressing output action: "http://zbxhupdata.com/webservices/signedUserInfoResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__signedUserInfo(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__signedUserInfo*               ns1__signedUserInfo,
    // output parameters:
    _ns1__signedUserInfoResponse       &ns1__signedUserInfoResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__signedUserInfo(
    struct soap *soap,
    // input parameters:
    _ns1__signedUserInfo*               ns1__signedUserInfo,
    // output parameters:
    _ns1__signedUserInfoResponse       &ns1__signedUserInfoResponse
  );
@endcode

C++ proxy class (defined in soapupdataServiceSoapProxy.h generated with soapcpp2):
@code
  class updataServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapupdataServiceSoapService.h generated with soapcpp2):
@code
  class updataServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	signedUserInfo SOAP
//gsoap ns1  service method-style:	signedUserInfo document
//gsoap ns1  service method-encoding:	signedUserInfo literal
//gsoap ns1  service method-input-action:	signedUserInfo http://zbxhupdata.com/webservices/signedUserInfo
//gsoap ns1  service method-output-action:	signedUserInfo http://zbxhupdata.com/webservices/signedUserInfoResponse
int __ns1__signedUserInfo(
    _ns1__signedUserInfo*               ns1__signedUserInfo,	///< Input parameter
    _ns1__signedUserInfoResponse       &ns1__signedUserInfoResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetOsDateTime                                                     *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetOsDateTime" of service binding "updataServiceSoap".


  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.244:190/updataService.asmx

  - Default SOAP action or REST location path:
    - "http://zbxhupdata.com/webservices/GetOsDateTime"

  - Addressing input action: "http://zbxhupdata.com/webservices/GetOsDateTime"

  - Addressing output action: "http://zbxhupdata.com/webservices/GetOsDateTimeResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetOsDateTime(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetOsDateTime*                ns1__GetOsDateTime,
    // output parameters:
    _ns1__GetOsDateTimeResponse        &ns1__GetOsDateTimeResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetOsDateTime(
    struct soap *soap,
    // input parameters:
    _ns1__GetOsDateTime*                ns1__GetOsDateTime,
    // output parameters:
    _ns1__GetOsDateTimeResponse        &ns1__GetOsDateTimeResponse
  );
@endcode

C++ proxy class (defined in soapupdataServiceSoapProxy.h generated with soapcpp2):
@code
  class updataServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapupdataServiceSoapService.h generated with soapcpp2):
@code
  class updataServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetOsDateTime SOAP
//gsoap ns1  service method-style:	GetOsDateTime document
//gsoap ns1  service method-encoding:	GetOsDateTime literal
//gsoap ns1  service method-input-action:	GetOsDateTime http://zbxhupdata.com/webservices/GetOsDateTime
//gsoap ns1  service method-output-action:	GetOsDateTime http://zbxhupdata.com/webservices/GetOsDateTimeResponse
int __ns1__GetOsDateTime(
    _ns1__GetOsDateTime*                ns1__GetOsDateTime,	///< Input parameter
    _ns1__GetOsDateTimeResponse        &ns1__GetOsDateTimeResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__QueryPhotobw                                                      *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__QueryPhotobw" of service binding "updataServiceSoap".


  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.244:190/updataService.asmx

  - Default SOAP action or REST location path:
    - "http://zbxhupdata.com/webservices/QueryPhotobw"

  - Addressing input action: "http://zbxhupdata.com/webservices/QueryPhotobw"

  - Addressing output action: "http://zbxhupdata.com/webservices/QueryPhotobwResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__QueryPhotobw(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__QueryPhotobw*                 ns1__QueryPhotobw,
    // output parameters:
    _ns1__QueryPhotobwResponse         &ns1__QueryPhotobwResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__QueryPhotobw(
    struct soap *soap,
    // input parameters:
    _ns1__QueryPhotobw*                 ns1__QueryPhotobw,
    // output parameters:
    _ns1__QueryPhotobwResponse         &ns1__QueryPhotobwResponse
  );
@endcode

C++ proxy class (defined in soapupdataServiceSoapProxy.h generated with soapcpp2):
@code
  class updataServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapupdataServiceSoapService.h generated with soapcpp2):
@code
  class updataServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	QueryPhotobw SOAP
//gsoap ns1  service method-style:	QueryPhotobw document
//gsoap ns1  service method-encoding:	QueryPhotobw literal
//gsoap ns1  service method-input-action:	QueryPhotobw http://zbxhupdata.com/webservices/QueryPhotobw
//gsoap ns1  service method-output-action:	QueryPhotobw http://zbxhupdata.com/webservices/QueryPhotobwResponse
int __ns1__QueryPhotobw(
    _ns1__QueryPhotobw*                 ns1__QueryPhotobw,	///< Input parameter
    _ns1__QueryPhotobwResponse         &ns1__QueryPhotobwResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__TcdQuery                                                          *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__TcdQuery" of service binding "updataServiceSoap".


  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.244:190/updataService.asmx

  - Default SOAP action or REST location path:
    - "http://zbxhupdata.com/webservices/TcdQuery"

  - Addressing input action: "http://zbxhupdata.com/webservices/TcdQuery"

  - Addressing output action: "http://zbxhupdata.com/webservices/TcdQueryResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__TcdQuery(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__TcdQuery*                     ns1__TcdQuery,
    // output parameters:
    _ns1__TcdQueryResponse             &ns1__TcdQueryResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__TcdQuery(
    struct soap *soap,
    // input parameters:
    _ns1__TcdQuery*                     ns1__TcdQuery,
    // output parameters:
    _ns1__TcdQueryResponse             &ns1__TcdQueryResponse
  );
@endcode

C++ proxy class (defined in soapupdataServiceSoapProxy.h generated with soapcpp2):
@code
  class updataServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapupdataServiceSoapService.h generated with soapcpp2):
@code
  class updataServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	TcdQuery SOAP
//gsoap ns1  service method-style:	TcdQuery document
//gsoap ns1  service method-encoding:	TcdQuery literal
//gsoap ns1  service method-input-action:	TcdQuery http://zbxhupdata.com/webservices/TcdQuery
//gsoap ns1  service method-output-action:	TcdQuery http://zbxhupdata.com/webservices/TcdQueryResponse
int __ns1__TcdQuery(
    _ns1__TcdQuery*                     ns1__TcdQuery,	///< Input parameter
    _ns1__TcdQueryResponse             &ns1__TcdQueryResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__TcdSendup                                                         *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__TcdSendup" of service binding "updataServiceSoap".


  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.244:190/updataService.asmx

  - Default SOAP action or REST location path:
    - "http://zbxhupdata.com/webservices/TcdSendup"

  - Addressing input action: "http://zbxhupdata.com/webservices/TcdSendup"

  - Addressing output action: "http://zbxhupdata.com/webservices/TcdSendupResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__TcdSendup(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__TcdSendup*                    ns1__TcdSendup,
    // output parameters:
    _ns1__TcdSendupResponse            &ns1__TcdSendupResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__TcdSendup(
    struct soap *soap,
    // input parameters:
    _ns1__TcdSendup*                    ns1__TcdSendup,
    // output parameters:
    _ns1__TcdSendupResponse            &ns1__TcdSendupResponse
  );
@endcode

C++ proxy class (defined in soapupdataServiceSoapProxy.h generated with soapcpp2):
@code
  class updataServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapupdataServiceSoapService.h generated with soapcpp2):
@code
  class updataServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	TcdSendup SOAP
//gsoap ns1  service method-style:	TcdSendup document
//gsoap ns1  service method-encoding:	TcdSendup literal
//gsoap ns1  service method-input-action:	TcdSendup http://zbxhupdata.com/webservices/TcdSendup
//gsoap ns1  service method-output-action:	TcdSendup http://zbxhupdata.com/webservices/TcdSendupResponse
int __ns1__TcdSendup(
    _ns1__TcdSendup*                    ns1__TcdSendup,	///< Input parameter
    _ns1__TcdSendupResponse            &ns1__TcdSendupResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__UpLoadData                                                        *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__UpLoadData" of service binding "updataServiceSoap".
, 

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.244:190/updataService.asmx

  - Default SOAP action or REST location path:
    - "http://zbxhupdata.com/webservices/UpLoadData"

  - Addressing input action: "http://zbxhupdata.com/webservices/UpLoadData"

  - Addressing output action: "http://zbxhupdata.com/webservices/UpLoadDataResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__UpLoadData(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__UpLoadData*                   ns1__UpLoadData,
    // output parameters:
    _ns1__UpLoadDataResponse           &ns1__UpLoadDataResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__UpLoadData(
    struct soap *soap,
    // input parameters:
    _ns1__UpLoadData*                   ns1__UpLoadData,
    // output parameters:
    _ns1__UpLoadDataResponse           &ns1__UpLoadDataResponse
  );
@endcode

C++ proxy class (defined in soapupdataServiceSoapProxy.h generated with soapcpp2):
@code
  class updataServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapupdataServiceSoapService.h generated with soapcpp2):
@code
  class updataServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	UpLoadData SOAP
//gsoap ns1  service method-style:	UpLoadData document
//gsoap ns1  service method-encoding:	UpLoadData literal
//gsoap ns1  service method-input-action:	UpLoadData http://zbxhupdata.com/webservices/UpLoadData
//gsoap ns1  service method-output-action:	UpLoadData http://zbxhupdata.com/webservices/UpLoadDataResponse
int __ns1__UpLoadData(
    _ns1__UpLoadData*                   ns1__UpLoadData,	///< Input parameter
    _ns1__UpLoadDataResponse           &ns1__UpLoadDataResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__ExecuteSqlForColb                                                 *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__ExecuteSqlForColb" of service binding "updataServiceSoap".
blobsql

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.244:190/updataService.asmx

  - Default SOAP action or REST location path:
    - "http://zbxhupdata.com/webservices/ExecuteSqlForColb"

  - Addressing input action: "http://zbxhupdata.com/webservices/ExecuteSqlForColb"

  - Addressing output action: "http://zbxhupdata.com/webservices/ExecuteSqlForColbResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__ExecuteSqlForColb(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__ExecuteSqlForColb*            ns1__ExecuteSqlForColb,
    // output parameters:
    _ns1__ExecuteSqlForColbResponse    &ns1__ExecuteSqlForColbResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__ExecuteSqlForColb(
    struct soap *soap,
    // input parameters:
    _ns1__ExecuteSqlForColb*            ns1__ExecuteSqlForColb,
    // output parameters:
    _ns1__ExecuteSqlForColbResponse    &ns1__ExecuteSqlForColbResponse
  );
@endcode

C++ proxy class (defined in soapupdataServiceSoapProxy.h generated with soapcpp2):
@code
  class updataServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapupdataServiceSoapService.h generated with soapcpp2):
@code
  class updataServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	ExecuteSqlForColb SOAP
//gsoap ns1  service method-style:	ExecuteSqlForColb document
//gsoap ns1  service method-encoding:	ExecuteSqlForColb literal
//gsoap ns1  service method-input-action:	ExecuteSqlForColb http://zbxhupdata.com/webservices/ExecuteSqlForColb
//gsoap ns1  service method-output-action:	ExecuteSqlForColb http://zbxhupdata.com/webservices/ExecuteSqlForColbResponse
int __ns1__ExecuteSqlForColb(
    _ns1__ExecuteSqlForColb*            ns1__ExecuteSqlForColb,	///< Input parameter
    _ns1__ExecuteSqlForColbResponse    &ns1__ExecuteSqlForColbResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetXHYDGLXTupdater                                                *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetXHYDGLXTupdater" of service binding "updataServiceSoap".


  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.244:190/updataService.asmx

  - Default SOAP action or REST location path:
    - "http://zbxhupdata.com/webservices/GetXHYDGLXTupdater"

  - Addressing input action: "http://zbxhupdata.com/webservices/GetXHYDGLXTupdater"

  - Addressing output action: "http://zbxhupdata.com/webservices/GetXHYDGLXTupdaterResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetXHYDGLXTupdater(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetXHYDGLXTupdater*           ns1__GetXHYDGLXTupdater,
    // output parameters:
    _ns1__GetXHYDGLXTupdaterResponse   &ns1__GetXHYDGLXTupdaterResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetXHYDGLXTupdater(
    struct soap *soap,
    // input parameters:
    _ns1__GetXHYDGLXTupdater*           ns1__GetXHYDGLXTupdater,
    // output parameters:
    _ns1__GetXHYDGLXTupdaterResponse   &ns1__GetXHYDGLXTupdaterResponse
  );
@endcode

C++ proxy class (defined in soapupdataServiceSoapProxy.h generated with soapcpp2):
@code
  class updataServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapupdataServiceSoapService.h generated with soapcpp2):
@code
  class updataServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetXHYDGLXTupdater SOAP
//gsoap ns1  service method-style:	GetXHYDGLXTupdater document
//gsoap ns1  service method-encoding:	GetXHYDGLXTupdater literal
//gsoap ns1  service method-input-action:	GetXHYDGLXTupdater http://zbxhupdata.com/webservices/GetXHYDGLXTupdater
//gsoap ns1  service method-output-action:	GetXHYDGLXTupdater http://zbxhupdata.com/webservices/GetXHYDGLXTupdaterResponse
int __ns1__GetXHYDGLXTupdater(
    _ns1__GetXHYDGLXTupdater*           ns1__GetXHYDGLXTupdater,	///< Input parameter
    _ns1__GetXHYDGLXTupdaterResponse   &ns1__GetXHYDGLXTupdaterResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetAPVupdater                                                     *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetAPVupdater" of service binding "updataServiceSoap".


  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.244:190/updataService.asmx

  - Default SOAP action or REST location path:
    - "http://zbxhupdata.com/webservices/GetAPVupdater"

  - Addressing input action: "http://zbxhupdata.com/webservices/GetAPVupdater"

  - Addressing output action: "http://zbxhupdata.com/webservices/GetAPVupdaterResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetAPVupdater(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetAPVupdater*                ns1__GetAPVupdater,
    // output parameters:
    _ns1__GetAPVupdaterResponse        &ns1__GetAPVupdaterResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetAPVupdater(
    struct soap *soap,
    // input parameters:
    _ns1__GetAPVupdater*                ns1__GetAPVupdater,
    // output parameters:
    _ns1__GetAPVupdaterResponse        &ns1__GetAPVupdaterResponse
  );
@endcode

C++ proxy class (defined in soapupdataServiceSoapProxy.h generated with soapcpp2):
@code
  class updataServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapupdataServiceSoapService.h generated with soapcpp2):
@code
  class updataServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetAPVupdater SOAP
//gsoap ns1  service method-style:	GetAPVupdater document
//gsoap ns1  service method-encoding:	GetAPVupdater literal
//gsoap ns1  service method-input-action:	GetAPVupdater http://zbxhupdata.com/webservices/GetAPVupdater
//gsoap ns1  service method-output-action:	GetAPVupdater http://zbxhupdata.com/webservices/GetAPVupdaterResponse
int __ns1__GetAPVupdater(
    _ns1__GetAPVupdater*                ns1__GetAPVupdater,	///< Input parameter
    _ns1__GetAPVupdaterResponse        &ns1__GetAPVupdaterResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__UpLoadFile                                                        *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__UpLoadFile" of service binding "updataServiceSoap".
 

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.244:190/updataService.asmx

  - Default SOAP action or REST location path:
    - "http://zbxhupdata.com/webservices/UpLoadFile"

  - Addressing input action: "http://zbxhupdata.com/webservices/UpLoadFile"

  - Addressing output action: "http://zbxhupdata.com/webservices/UpLoadFileResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__UpLoadFile(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__UpLoadFile*                   ns1__UpLoadFile,
    // output parameters:
    _ns1__UpLoadFileResponse           &ns1__UpLoadFileResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__UpLoadFile(
    struct soap *soap,
    // input parameters:
    _ns1__UpLoadFile*                   ns1__UpLoadFile,
    // output parameters:
    _ns1__UpLoadFileResponse           &ns1__UpLoadFileResponse
  );
@endcode

C++ proxy class (defined in soapupdataServiceSoapProxy.h generated with soapcpp2):
@code
  class updataServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapupdataServiceSoapService.h generated with soapcpp2):
@code
  class updataServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	UpLoadFile SOAP
//gsoap ns1  service method-style:	UpLoadFile document
//gsoap ns1  service method-encoding:	UpLoadFile literal
//gsoap ns1  service method-input-action:	UpLoadFile http://zbxhupdata.com/webservices/UpLoadFile
//gsoap ns1  service method-output-action:	UpLoadFile http://zbxhupdata.com/webservices/UpLoadFileResponse
int __ns1__UpLoadFile(
    _ns1__UpLoadFile*                   ns1__UpLoadFile,	///< Input parameter
    _ns1__UpLoadFileResponse           &ns1__UpLoadFileResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__upPic                                                             *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__upPic" of service binding "updataServiceSoap".
 

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.244:190/updataService.asmx

  - Default SOAP action or REST location path:
    - "http://zbxhupdata.com/webservices/upPic"

  - Addressing input action: "http://zbxhupdata.com/webservices/upPic"

  - Addressing output action: "http://zbxhupdata.com/webservices/upPicResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__upPic(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__upPic*                        ns1__upPic,
    // output parameters:
    _ns1__upPicResponse                &ns1__upPicResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__upPic(
    struct soap *soap,
    // input parameters:
    _ns1__upPic*                        ns1__upPic,
    // output parameters:
    _ns1__upPicResponse                &ns1__upPicResponse
  );
@endcode

C++ proxy class (defined in soapupdataServiceSoapProxy.h generated with soapcpp2):
@code
  class updataServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapupdataServiceSoapService.h generated with soapcpp2):
@code
  class updataServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	upPic SOAP
//gsoap ns1  service method-style:	upPic document
//gsoap ns1  service method-encoding:	upPic literal
//gsoap ns1  service method-input-action:	upPic http://zbxhupdata.com/webservices/upPic
//gsoap ns1  service method-output-action:	upPic http://zbxhupdata.com/webservices/upPicResponse
int __ns1__upPic(
    _ns1__upPic*                        ns1__upPic,	///< Input parameter
    _ns1__upPicResponse                &ns1__upPicResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__DownloadPic                                                       *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__DownloadPic" of service binding "updataServiceSoap".
 

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.244:190/updataService.asmx

  - Default SOAP action or REST location path:
    - "http://zbxhupdata.com/webservices/DownloadPic"

  - Addressing input action: "http://zbxhupdata.com/webservices/DownloadPic"

  - Addressing output action: "http://zbxhupdata.com/webservices/DownloadPicResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__DownloadPic(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__DownloadPic*                  ns1__DownloadPic,
    // output parameters:
    _ns1__DownloadPicResponse          &ns1__DownloadPicResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__DownloadPic(
    struct soap *soap,
    // input parameters:
    _ns1__DownloadPic*                  ns1__DownloadPic,
    // output parameters:
    _ns1__DownloadPicResponse          &ns1__DownloadPicResponse
  );
@endcode

C++ proxy class (defined in soapupdataServiceSoapProxy.h generated with soapcpp2):
@code
  class updataServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapupdataServiceSoapService.h generated with soapcpp2):
@code
  class updataServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	DownloadPic SOAP
//gsoap ns1  service method-style:	DownloadPic document
//gsoap ns1  service method-encoding:	DownloadPic literal
//gsoap ns1  service method-input-action:	DownloadPic http://zbxhupdata.com/webservices/DownloadPic
//gsoap ns1  service method-output-action:	DownloadPic http://zbxhupdata.com/webservices/DownloadPicResponse
int __ns1__DownloadPic(
    _ns1__DownloadPic*                  ns1__DownloadPic,	///< Input parameter
    _ns1__DownloadPicResponse          &ns1__DownloadPicResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetPicNames                                                       *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetPicNames" of service binding "updataServiceSoap".


  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.244:190/updataService.asmx

  - Default SOAP action or REST location path:
    - "http://zbxhupdata.com/webservices/GetPicNames"

  - Addressing input action: "http://zbxhupdata.com/webservices/GetPicNames"

  - Addressing output action: "http://zbxhupdata.com/webservices/GetPicNamesResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetPicNames(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetPicNames*                  ns1__GetPicNames,
    // output parameters:
    _ns1__GetPicNamesResponse          &ns1__GetPicNamesResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetPicNames(
    struct soap *soap,
    // input parameters:
    _ns1__GetPicNames*                  ns1__GetPicNames,
    // output parameters:
    _ns1__GetPicNamesResponse          &ns1__GetPicNamesResponse
  );
@endcode

C++ proxy class (defined in soapupdataServiceSoapProxy.h generated with soapcpp2):
@code
  class updataServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapupdataServiceSoapService.h generated with soapcpp2):
@code
  class updataServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetPicNames SOAP
//gsoap ns1  service method-style:	GetPicNames document
//gsoap ns1  service method-encoding:	GetPicNames literal
//gsoap ns1  service method-input-action:	GetPicNames http://zbxhupdata.com/webservices/GetPicNames
//gsoap ns1  service method-output-action:	GetPicNames http://zbxhupdata.com/webservices/GetPicNamesResponse
int __ns1__GetPicNames(
    _ns1__GetPicNames*                  ns1__GetPicNames,	///< Input parameter
    _ns1__GetPicNamesResponse          &ns1__GetPicNamesResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetDwInfo                                                         *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetDwInfo" of service binding "updataServiceSoap".


  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.244:190/updataService.asmx

  - Default SOAP action or REST location path:
    - "http://zbxhupdata.com/webservices/GetDwInfo"

  - Addressing input action: "http://zbxhupdata.com/webservices/GetDwInfo"

  - Addressing output action: "http://zbxhupdata.com/webservices/GetDwInfoResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetDwInfo(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetDwInfo*                    ns1__GetDwInfo,
    // output parameters:
    _ns1__GetDwInfoResponse            &ns1__GetDwInfoResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetDwInfo(
    struct soap *soap,
    // input parameters:
    _ns1__GetDwInfo*                    ns1__GetDwInfo,
    // output parameters:
    _ns1__GetDwInfoResponse            &ns1__GetDwInfoResponse
  );
@endcode

C++ proxy class (defined in soapupdataServiceSoapProxy.h generated with soapcpp2):
@code
  class updataServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapupdataServiceSoapService.h generated with soapcpp2):
@code
  class updataServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetDwInfo SOAP
//gsoap ns1  service method-style:	GetDwInfo document
//gsoap ns1  service method-encoding:	GetDwInfo literal
//gsoap ns1  service method-input-action:	GetDwInfo http://zbxhupdata.com/webservices/GetDwInfo
//gsoap ns1  service method-output-action:	GetDwInfo http://zbxhupdata.com/webservices/GetDwInfoResponse
int __ns1__GetDwInfo(
    _ns1__GetDwInfo*                    ns1__GetDwInfo,	///< Input parameter
    _ns1__GetDwInfoResponse            &ns1__GetDwInfoResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetDwPic                                                          *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetDwPic" of service binding "updataServiceSoap".


  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.244:190/updataService.asmx

  - Default SOAP action or REST location path:
    - "http://zbxhupdata.com/webservices/GetDwPic"

  - Addressing input action: "http://zbxhupdata.com/webservices/GetDwPic"

  - Addressing output action: "http://zbxhupdata.com/webservices/GetDwPicResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetDwPic(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetDwPic*                     ns1__GetDwPic,
    // output parameters:
    _ns1__GetDwPicResponse             &ns1__GetDwPicResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetDwPic(
    struct soap *soap,
    // input parameters:
    _ns1__GetDwPic*                     ns1__GetDwPic,
    // output parameters:
    _ns1__GetDwPicResponse             &ns1__GetDwPicResponse
  );
@endcode

C++ proxy class (defined in soapupdataServiceSoapProxy.h generated with soapcpp2):
@code
  class updataServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapupdataServiceSoapService.h generated with soapcpp2):
@code
  class updataServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetDwPic SOAP
//gsoap ns1  service method-style:	GetDwPic document
//gsoap ns1  service method-encoding:	GetDwPic literal
//gsoap ns1  service method-input-action:	GetDwPic http://zbxhupdata.com/webservices/GetDwPic
//gsoap ns1  service method-output-action:	GetDwPic http://zbxhupdata.com/webservices/GetDwPicResponse
int __ns1__GetDwPic(
    _ns1__GetDwPic*                     ns1__GetDwPic,	///< Input parameter
    _ns1__GetDwPicResponse             &ns1__GetDwPicResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetDeviceXj                                                       *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetDeviceXj" of service binding "updataServiceSoap".


  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.244:190/updataService.asmx

  - Default SOAP action or REST location path:
    - "http://zbxhupdata.com/webservices/GetDeviceXj"

  - Addressing input action: "http://zbxhupdata.com/webservices/GetDeviceXj"

  - Addressing output action: "http://zbxhupdata.com/webservices/GetDeviceXjResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetDeviceXj(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetDeviceXj*                  ns1__GetDeviceXj,
    // output parameters:
    _ns1__GetDeviceXjResponse          &ns1__GetDeviceXjResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetDeviceXj(
    struct soap *soap,
    // input parameters:
    _ns1__GetDeviceXj*                  ns1__GetDeviceXj,
    // output parameters:
    _ns1__GetDeviceXjResponse          &ns1__GetDeviceXjResponse
  );
@endcode

C++ proxy class (defined in soapupdataServiceSoapProxy.h generated with soapcpp2):
@code
  class updataServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapupdataServiceSoapService.h generated with soapcpp2):
@code
  class updataServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetDeviceXj SOAP
//gsoap ns1  service method-style:	GetDeviceXj document
//gsoap ns1  service method-encoding:	GetDeviceXj literal
//gsoap ns1  service method-input-action:	GetDeviceXj http://zbxhupdata.com/webservices/GetDeviceXj
//gsoap ns1  service method-output-action:	GetDeviceXj http://zbxhupdata.com/webservices/GetDeviceXjResponse
int __ns1__GetDeviceXj(
    _ns1__GetDeviceXj*                  ns1__GetDeviceXj,	///< Input parameter
    _ns1__GetDeviceXjResponse          &ns1__GetDeviceXjResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetJxData                                                         *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetJxData" of service binding "updataServiceSoap".
 ,ICONNAME,TYPE,,,,,

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.244:190/updataService.asmx

  - Default SOAP action or REST location path:
    - "http://zbxhupdata.com/webservices/GetJxData"

  - Addressing input action: "http://zbxhupdata.com/webservices/GetJxData"

  - Addressing output action: "http://zbxhupdata.com/webservices/GetJxDataResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetJxData(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetJxData*                    ns1__GetJxData,
    // output parameters:
    _ns1__GetJxDataResponse            &ns1__GetJxDataResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetJxData(
    struct soap *soap,
    // input parameters:
    _ns1__GetJxData*                    ns1__GetJxData,
    // output parameters:
    _ns1__GetJxDataResponse            &ns1__GetJxDataResponse
  );
@endcode

C++ proxy class (defined in soapupdataServiceSoapProxy.h generated with soapcpp2):
@code
  class updataServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapupdataServiceSoapService.h generated with soapcpp2):
@code
  class updataServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetJxData SOAP
//gsoap ns1  service method-style:	GetJxData document
//gsoap ns1  service method-encoding:	GetJxData literal
//gsoap ns1  service method-input-action:	GetJxData http://zbxhupdata.com/webservices/GetJxData
//gsoap ns1  service method-output-action:	GetJxData http://zbxhupdata.com/webservices/GetJxDataResponse
int __ns1__GetJxData(
    _ns1__GetJxData*                    ns1__GetJxData,	///< Input parameter
    _ns1__GetJxDataResponse            &ns1__GetJxDataResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetStationJxData                                                  *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetStationJxData" of service binding "updataServiceSoap".
,sflag true or false  ,ICONNAME,TYPE,,,,,

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.244:190/updataService.asmx

  - Default SOAP action or REST location path:
    - "http://zbxhupdata.com/webservices/GetStationJxData"

  - Addressing input action: "http://zbxhupdata.com/webservices/GetStationJxData"

  - Addressing output action: "http://zbxhupdata.com/webservices/GetStationJxDataResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetStationJxData(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetStationJxData*             ns1__GetStationJxData,
    // output parameters:
    _ns1__GetStationJxDataResponse     &ns1__GetStationJxDataResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetStationJxData(
    struct soap *soap,
    // input parameters:
    _ns1__GetStationJxData*             ns1__GetStationJxData,
    // output parameters:
    _ns1__GetStationJxDataResponse     &ns1__GetStationJxDataResponse
  );
@endcode

C++ proxy class (defined in soapupdataServiceSoapProxy.h generated with soapcpp2):
@code
  class updataServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapupdataServiceSoapService.h generated with soapcpp2):
@code
  class updataServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetStationJxData SOAP
//gsoap ns1  service method-style:	GetStationJxData document
//gsoap ns1  service method-encoding:	GetStationJxData literal
//gsoap ns1  service method-input-action:	GetStationJxData http://zbxhupdata.com/webservices/GetStationJxData
//gsoap ns1  service method-output-action:	GetStationJxData http://zbxhupdata.com/webservices/GetStationJxDataResponse
int __ns1__GetStationJxData(
    _ns1__GetStationJxData*             ns1__GetStationJxData,	///< Input parameter
    _ns1__GetStationJxDataResponse     &ns1__GetStationJxDataResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetJxPic                                                          *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetJxPic" of service binding "updataServiceSoap".
time jxitem picname

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.244:190/updataService.asmx

  - Default SOAP action or REST location path:
    - "http://zbxhupdata.com/webservices/GetJxPic"

  - Addressing input action: "http://zbxhupdata.com/webservices/GetJxPic"

  - Addressing output action: "http://zbxhupdata.com/webservices/GetJxPicResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetJxPic(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetJxPic*                     ns1__GetJxPic,
    // output parameters:
    _ns1__GetJxPicResponse             &ns1__GetJxPicResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetJxPic(
    struct soap *soap,
    // input parameters:
    _ns1__GetJxPic*                     ns1__GetJxPic,
    // output parameters:
    _ns1__GetJxPicResponse             &ns1__GetJxPicResponse
  );
@endcode

C++ proxy class (defined in soapupdataServiceSoapProxy.h generated with soapcpp2):
@code
  class updataServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapupdataServiceSoapService.h generated with soapcpp2):
@code
  class updataServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetJxPic SOAP
//gsoap ns1  service method-style:	GetJxPic document
//gsoap ns1  service method-encoding:	GetJxPic literal
//gsoap ns1  service method-input-action:	GetJxPic http://zbxhupdata.com/webservices/GetJxPic
//gsoap ns1  service method-output-action:	GetJxPic http://zbxhupdata.com/webservices/GetJxPicResponse
int __ns1__GetJxPic(
    _ns1__GetJxPic*                     ns1__GetJxPic,	///< Input parameter
    _ns1__GetJxPicResponse             &ns1__GetJxPicResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetDevPic                                                         *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetDevPic" of service binding "updataServiceSoap".
sflag true or false 
,,S_UDTIME,PICNAME,PGUID

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.244:190/updataService.asmx

  - Default SOAP action or REST location path:
    - "http://zbxhupdata.com/webservices/GetDevPic"

  - Addressing input action: "http://zbxhupdata.com/webservices/GetDevPic"

  - Addressing output action: "http://zbxhupdata.com/webservices/GetDevPicResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetDevPic(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetDevPic*                    ns1__GetDevPic,
    // output parameters:
    _ns1__GetDevPicResponse            &ns1__GetDevPicResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetDevPic(
    struct soap *soap,
    // input parameters:
    _ns1__GetDevPic*                    ns1__GetDevPic,
    // output parameters:
    _ns1__GetDevPicResponse            &ns1__GetDevPicResponse
  );
@endcode

C++ proxy class (defined in soapupdataServiceSoapProxy.h generated with soapcpp2):
@code
  class updataServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapupdataServiceSoapService.h generated with soapcpp2):
@code
  class updataServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetDevPic SOAP
//gsoap ns1  service method-style:	GetDevPic document
//gsoap ns1  service method-encoding:	GetDevPic literal
//gsoap ns1  service method-input-action:	GetDevPic http://zbxhupdata.com/webservices/GetDevPic
//gsoap ns1  service method-output-action:	GetDevPic http://zbxhupdata.com/webservices/GetDevPicResponse
int __ns1__GetDevPic(
    _ns1__GetDevPic*                    ns1__GetDevPic,	///< Input parameter
    _ns1__GetDevPicResponse            &ns1__GetDevPicResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetBgImg                                                          *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetBgImg" of service binding "updataServiceSoap".
   , pguid

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.244:190/updataService.asmx

  - Default SOAP action or REST location path:
    - "http://zbxhupdata.com/webservices/GetBgImg"

  - Addressing input action: "http://zbxhupdata.com/webservices/GetBgImg"

  - Addressing output action: "http://zbxhupdata.com/webservices/GetBgImgResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetBgImg(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetBgImg*                     ns1__GetBgImg,
    // output parameters:
    _ns1__GetBgImgResponse             &ns1__GetBgImgResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetBgImg(
    struct soap *soap,
    // input parameters:
    _ns1__GetBgImg*                     ns1__GetBgImg,
    // output parameters:
    _ns1__GetBgImgResponse             &ns1__GetBgImgResponse
  );
@endcode

C++ proxy class (defined in soapupdataServiceSoapProxy.h generated with soapcpp2):
@code
  class updataServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapupdataServiceSoapService.h generated with soapcpp2):
@code
  class updataServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetBgImg SOAP
//gsoap ns1  service method-style:	GetBgImg document
//gsoap ns1  service method-encoding:	GetBgImg literal
//gsoap ns1  service method-input-action:	GetBgImg http://zbxhupdata.com/webservices/GetBgImg
//gsoap ns1  service method-output-action:	GetBgImg http://zbxhupdata.com/webservices/GetBgImgResponse
int __ns1__GetBgImg(
    _ns1__GetBgImg*                     ns1__GetBgImg,	///< Input parameter
    _ns1__GetBgImgResponse             &ns1__GetBgImgResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetDcsData                                                        *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetDcsData" of service binding "updataServiceSoap".


  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.244:190/updataService.asmx

  - Default SOAP action or REST location path:
    - "http://zbxhupdata.com/webservices/GetDcsData"

  - Addressing input action: "http://zbxhupdata.com/webservices/GetDcsData"

  - Addressing output action: "http://zbxhupdata.com/webservices/GetDcsDataResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetDcsData(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetDcsData*                   ns1__GetDcsData,
    // output parameters:
    _ns1__GetDcsDataResponse           &ns1__GetDcsDataResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetDcsData(
    struct soap *soap,
    // input parameters:
    _ns1__GetDcsData*                   ns1__GetDcsData,
    // output parameters:
    _ns1__GetDcsDataResponse           &ns1__GetDcsDataResponse
  );
@endcode

C++ proxy class (defined in soapupdataServiceSoapProxy.h generated with soapcpp2):
@code
  class updataServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapupdataServiceSoapService.h generated with soapcpp2):
@code
  class updataServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetDcsData SOAP
//gsoap ns1  service method-style:	GetDcsData document
//gsoap ns1  service method-encoding:	GetDcsData literal
//gsoap ns1  service method-input-action:	GetDcsData http://zbxhupdata.com/webservices/GetDcsData
//gsoap ns1  service method-output-action:	GetDcsData http://zbxhupdata.com/webservices/GetDcsDataResponse
int __ns1__GetDcsData(
    _ns1__GetDcsData*                   ns1__GetDcsData,	///< Input parameter
    _ns1__GetDcsDataResponse           &ns1__GetDcsDataResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__DownLoadMobGPSData                                                *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__DownLoadMobGPSData" of service binding "updataServiceSoap".


  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.244:190/updataService.asmx

  - Default SOAP action or REST location path:
    - "http://zbxhupdata.com/webservices/DownLoadMobGPSData"

  - Addressing input action: "http://zbxhupdata.com/webservices/DownLoadMobGPSData"

  - Addressing output action: "http://zbxhupdata.com/webservices/DownLoadMobGPSDataResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__DownLoadMobGPSData(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__DownLoadMobGPSData*           ns1__DownLoadMobGPSData,
    // output parameters:
    _ns1__DownLoadMobGPSDataResponse   &ns1__DownLoadMobGPSDataResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__DownLoadMobGPSData(
    struct soap *soap,
    // input parameters:
    _ns1__DownLoadMobGPSData*           ns1__DownLoadMobGPSData,
    // output parameters:
    _ns1__DownLoadMobGPSDataResponse   &ns1__DownLoadMobGPSDataResponse
  );
@endcode

C++ proxy class (defined in soapupdataServiceSoapProxy.h generated with soapcpp2):
@code
  class updataServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapupdataServiceSoapService.h generated with soapcpp2):
@code
  class updataServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	DownLoadMobGPSData SOAP
//gsoap ns1  service method-style:	DownLoadMobGPSData document
//gsoap ns1  service method-encoding:	DownLoadMobGPSData literal
//gsoap ns1  service method-input-action:	DownLoadMobGPSData http://zbxhupdata.com/webservices/DownLoadMobGPSData
//gsoap ns1  service method-output-action:	DownLoadMobGPSData http://zbxhupdata.com/webservices/DownLoadMobGPSDataResponse
int __ns1__DownLoadMobGPSData(
    _ns1__DownLoadMobGPSData*           ns1__DownLoadMobGPSData,	///< Input parameter
    _ns1__DownLoadMobGPSDataResponse   &ns1__DownLoadMobGPSDataResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__MobDownLoadData                                                   *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__MobDownLoadData" of service binding "updataServiceSoap".


  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.244:190/updataService.asmx

  - Default SOAP action or REST location path:
    - "http://zbxhupdata.com/webservices/MobDownLoadData"

  - Addressing input action: "http://zbxhupdata.com/webservices/MobDownLoadData"

  - Addressing output action: "http://zbxhupdata.com/webservices/MobDownLoadDataResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__MobDownLoadData(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__MobDownLoadData*              ns1__MobDownLoadData,
    // output parameters:
    _ns1__MobDownLoadDataResponse      &ns1__MobDownLoadDataResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__MobDownLoadData(
    struct soap *soap,
    // input parameters:
    _ns1__MobDownLoadData*              ns1__MobDownLoadData,
    // output parameters:
    _ns1__MobDownLoadDataResponse      &ns1__MobDownLoadDataResponse
  );
@endcode

C++ proxy class (defined in soapupdataServiceSoapProxy.h generated with soapcpp2):
@code
  class updataServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapupdataServiceSoapService.h generated with soapcpp2):
@code
  class updataServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	MobDownLoadData SOAP
//gsoap ns1  service method-style:	MobDownLoadData document
//gsoap ns1  service method-encoding:	MobDownLoadData literal
//gsoap ns1  service method-input-action:	MobDownLoadData http://zbxhupdata.com/webservices/MobDownLoadData
//gsoap ns1  service method-output-action:	MobDownLoadData http://zbxhupdata.com/webservices/MobDownLoadDataResponse
int __ns1__MobDownLoadData(
    _ns1__MobDownLoadData*              ns1__MobDownLoadData,	///< Input parameter
    _ns1__MobDownLoadDataResponse      &ns1__MobDownLoadDataResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetOpenFireInfo                                                   *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetOpenFireInfo" of service binding "updataServiceSoap".


  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.244:190/updataService.asmx

  - Default SOAP action or REST location path:
    - "http://zbxhupdata.com/webservices/GetOpenFireInfo"

  - Addressing input action: "http://zbxhupdata.com/webservices/GetOpenFireInfo"

  - Addressing output action: "http://zbxhupdata.com/webservices/GetOpenFireInfoResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetOpenFireInfo(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetOpenFireInfo*              ns1__GetOpenFireInfo,
    // output parameters:
    _ns1__GetOpenFireInfoResponse      &ns1__GetOpenFireInfoResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetOpenFireInfo(
    struct soap *soap,
    // input parameters:
    _ns1__GetOpenFireInfo*              ns1__GetOpenFireInfo,
    // output parameters:
    _ns1__GetOpenFireInfoResponse      &ns1__GetOpenFireInfoResponse
  );
@endcode

C++ proxy class (defined in soapupdataServiceSoapProxy.h generated with soapcpp2):
@code
  class updataServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapupdataServiceSoapService.h generated with soapcpp2):
@code
  class updataServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetOpenFireInfo SOAP
//gsoap ns1  service method-style:	GetOpenFireInfo document
//gsoap ns1  service method-encoding:	GetOpenFireInfo literal
//gsoap ns1  service method-input-action:	GetOpenFireInfo http://zbxhupdata.com/webservices/GetOpenFireInfo
//gsoap ns1  service method-output-action:	GetOpenFireInfo http://zbxhupdata.com/webservices/GetOpenFireInfoResponse
int __ns1__GetOpenFireInfo(
    _ns1__GetOpenFireInfo*              ns1__GetOpenFireInfo,	///< Input parameter
    _ns1__GetOpenFireInfoResponse      &ns1__GetOpenFireInfoResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetDwList                                                         *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetDwList" of service binding "updataServiceSoap".


  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.244:190/updataService.asmx

  - Default SOAP action or REST location path:
    - "http://zbxhupdata.com/webservices/GetDwList"

  - Addressing input action: "http://zbxhupdata.com/webservices/GetDwList"

  - Addressing output action: "http://zbxhupdata.com/webservices/GetDwListResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetDwList(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetDwList*                    ns1__GetDwList,
    // output parameters:
    _ns1__GetDwListResponse            &ns1__GetDwListResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetDwList(
    struct soap *soap,
    // input parameters:
    _ns1__GetDwList*                    ns1__GetDwList,
    // output parameters:
    _ns1__GetDwListResponse            &ns1__GetDwListResponse
  );
@endcode

C++ proxy class (defined in soapupdataServiceSoapProxy.h generated with soapcpp2):
@code
  class updataServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapupdataServiceSoapService.h generated with soapcpp2):
@code
  class updataServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetDwList SOAP
//gsoap ns1  service method-style:	GetDwList document
//gsoap ns1  service method-encoding:	GetDwList literal
//gsoap ns1  service method-input-action:	GetDwList http://zbxhupdata.com/webservices/GetDwList
//gsoap ns1  service method-output-action:	GetDwList http://zbxhupdata.com/webservices/GetDwListResponse
int __ns1__GetDwList(
    _ns1__GetDwList*                    ns1__GetDwList,	///< Input parameter
    _ns1__GetDwListResponse            &ns1__GetDwListResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetUnitStation                                                    *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetUnitStation" of service binding "updataServiceSoap".


  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.244:190/updataService.asmx

  - Default SOAP action or REST location path:
    - "http://zbxhupdata.com/webservices/GetUnitStation"

  - Addressing input action: "http://zbxhupdata.com/webservices/GetUnitStation"

  - Addressing output action: "http://zbxhupdata.com/webservices/GetUnitStationResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetUnitStation(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetUnitStation*               ns1__GetUnitStation,
    // output parameters:
    _ns1__GetUnitStationResponse       &ns1__GetUnitStationResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetUnitStation(
    struct soap *soap,
    // input parameters:
    _ns1__GetUnitStation*               ns1__GetUnitStation,
    // output parameters:
    _ns1__GetUnitStationResponse       &ns1__GetUnitStationResponse
  );
@endcode

C++ proxy class (defined in soapupdataServiceSoapProxy.h generated with soapcpp2):
@code
  class updataServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapupdataServiceSoapService.h generated with soapcpp2):
@code
  class updataServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetUnitStation SOAP
//gsoap ns1  service method-style:	GetUnitStation document
//gsoap ns1  service method-encoding:	GetUnitStation literal
//gsoap ns1  service method-input-action:	GetUnitStation http://zbxhupdata.com/webservices/GetUnitStation
//gsoap ns1  service method-output-action:	GetUnitStation http://zbxhupdata.com/webservices/GetUnitStationResponse
int __ns1__GetUnitStation(
    _ns1__GetUnitStation*               ns1__GetUnitStation,	///< Input parameter
    _ns1__GetUnitStationResponse       &ns1__GetUnitStationResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetUnitStruct                                                     *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetUnitStruct" of service binding "updataServiceSoap".


  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.244:190/updataService.asmx

  - Default SOAP action or REST location path:
    - "http://zbxhupdata.com/webservices/GetUnitStruct"

  - Addressing input action: "http://zbxhupdata.com/webservices/GetUnitStruct"

  - Addressing output action: "http://zbxhupdata.com/webservices/GetUnitStructResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetUnitStruct(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetUnitStruct*                ns1__GetUnitStruct,
    // output parameters:
    _ns1__GetUnitStructResponse        &ns1__GetUnitStructResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetUnitStruct(
    struct soap *soap,
    // input parameters:
    _ns1__GetUnitStruct*                ns1__GetUnitStruct,
    // output parameters:
    _ns1__GetUnitStructResponse        &ns1__GetUnitStructResponse
  );
@endcode

C++ proxy class (defined in soapupdataServiceSoapProxy.h generated with soapcpp2):
@code
  class updataServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapupdataServiceSoapService.h generated with soapcpp2):
@code
  class updataServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetUnitStruct SOAP
//gsoap ns1  service method-style:	GetUnitStruct document
//gsoap ns1  service method-encoding:	GetUnitStruct literal
//gsoap ns1  service method-input-action:	GetUnitStruct http://zbxhupdata.com/webservices/GetUnitStruct
//gsoap ns1  service method-output-action:	GetUnitStruct http://zbxhupdata.com/webservices/GetUnitStructResponse
int __ns1__GetUnitStruct(
    _ns1__GetUnitStruct*                ns1__GetUnitStruct,	///< Input parameter
    _ns1__GetUnitStructResponse        &ns1__GetUnitStructResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetUnitPersonInfo                                                 *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetUnitPersonInfo" of service binding "updataServiceSoap".


  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.244:190/updataService.asmx

  - Default SOAP action or REST location path:
    - "http://zbxhupdata.com/webservices/GetUnitPersonInfo"

  - Addressing input action: "http://zbxhupdata.com/webservices/GetUnitPersonInfo"

  - Addressing output action: "http://zbxhupdata.com/webservices/GetUnitPersonInfoResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetUnitPersonInfo(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetUnitPersonInfo*            ns1__GetUnitPersonInfo,
    // output parameters:
    _ns1__GetUnitPersonInfoResponse    &ns1__GetUnitPersonInfoResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetUnitPersonInfo(
    struct soap *soap,
    // input parameters:
    _ns1__GetUnitPersonInfo*            ns1__GetUnitPersonInfo,
    // output parameters:
    _ns1__GetUnitPersonInfoResponse    &ns1__GetUnitPersonInfoResponse
  );
@endcode

C++ proxy class (defined in soapupdataServiceSoapProxy.h generated with soapcpp2):
@code
  class updataServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapupdataServiceSoapService.h generated with soapcpp2):
@code
  class updataServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetUnitPersonInfo SOAP
//gsoap ns1  service method-style:	GetUnitPersonInfo document
//gsoap ns1  service method-encoding:	GetUnitPersonInfo literal
//gsoap ns1  service method-input-action:	GetUnitPersonInfo http://zbxhupdata.com/webservices/GetUnitPersonInfo
//gsoap ns1  service method-output-action:	GetUnitPersonInfo http://zbxhupdata.com/webservices/GetUnitPersonInfoResponse
int __ns1__GetUnitPersonInfo(
    _ns1__GetUnitPersonInfo*            ns1__GetUnitPersonInfo,	///< Input parameter
    _ns1__GetUnitPersonInfoResponse    &ns1__GetUnitPersonInfoResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetFileSize                                                       *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetFileSize" of service binding "updataServiceSoap".


  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.244:190/updataService.asmx

  - Default SOAP action or REST location path:
    - "http://zbxhupdata.com/webservices/GetFileSize"

  - Addressing input action: "http://zbxhupdata.com/webservices/GetFileSize"

  - Addressing output action: "http://zbxhupdata.com/webservices/GetFileSizeResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetFileSize(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetFileSize*                  ns1__GetFileSize,
    // output parameters:
    _ns1__GetFileSizeResponse          &ns1__GetFileSizeResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetFileSize(
    struct soap *soap,
    // input parameters:
    _ns1__GetFileSize*                  ns1__GetFileSize,
    // output parameters:
    _ns1__GetFileSizeResponse          &ns1__GetFileSizeResponse
  );
@endcode

C++ proxy class (defined in soapupdataServiceSoapProxy.h generated with soapcpp2):
@code
  class updataServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapupdataServiceSoapService.h generated with soapcpp2):
@code
  class updataServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetFileSize SOAP
//gsoap ns1  service method-style:	GetFileSize document
//gsoap ns1  service method-encoding:	GetFileSize literal
//gsoap ns1  service method-input-action:	GetFileSize http://zbxhupdata.com/webservices/GetFileSize
//gsoap ns1  service method-output-action:	GetFileSize http://zbxhupdata.com/webservices/GetFileSizeResponse
int __ns1__GetFileSize(
    _ns1__GetFileSize*                  ns1__GetFileSize,	///< Input parameter
    _ns1__GetFileSizeResponse          &ns1__GetFileSizeResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetXbList                                                         *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetXbList" of service binding "updataServiceSoap".


  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.244:190/updataService.asmx

  - Default SOAP action or REST location path:
    - "http://zbxhupdata.com/webservices/GetXbList"

  - Addressing input action: "http://zbxhupdata.com/webservices/GetXbList"

  - Addressing output action: "http://zbxhupdata.com/webservices/GetXbListResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetXbList(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetXbList*                    ns1__GetXbList,
    // output parameters:
    _ns1__GetXbListResponse            &ns1__GetXbListResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetXbList(
    struct soap *soap,
    // input parameters:
    _ns1__GetXbList*                    ns1__GetXbList,
    // output parameters:
    _ns1__GetXbListResponse            &ns1__GetXbListResponse
  );
@endcode

C++ proxy class (defined in soapupdataServiceSoapProxy.h generated with soapcpp2):
@code
  class updataServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapupdataServiceSoapService.h generated with soapcpp2):
@code
  class updataServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetXbList SOAP
//gsoap ns1  service method-style:	GetXbList document
//gsoap ns1  service method-encoding:	GetXbList literal
//gsoap ns1  service method-input-action:	GetXbList http://zbxhupdata.com/webservices/GetXbList
//gsoap ns1  service method-output-action:	GetXbList http://zbxhupdata.com/webservices/GetXbListResponse
int __ns1__GetXbList(
    _ns1__GetXbList*                    ns1__GetXbList,	///< Input parameter
    _ns1__GetXbListResponse            &ns1__GetXbListResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetXbStationList                                                  *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetXbStationList" of service binding "updataServiceSoap".


  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.244:190/updataService.asmx

  - Default SOAP action or REST location path:
    - "http://zbxhupdata.com/webservices/GetXbStationList"

  - Addressing input action: "http://zbxhupdata.com/webservices/GetXbStationList"

  - Addressing output action: "http://zbxhupdata.com/webservices/GetXbStationListResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetXbStationList(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetXbStationList*             ns1__GetXbStationList,
    // output parameters:
    _ns1__GetXbStationListResponse     &ns1__GetXbStationListResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetXbStationList(
    struct soap *soap,
    // input parameters:
    _ns1__GetXbStationList*             ns1__GetXbStationList,
    // output parameters:
    _ns1__GetXbStationListResponse     &ns1__GetXbStationListResponse
  );
@endcode

C++ proxy class (defined in soapupdataServiceSoapProxy.h generated with soapcpp2):
@code
  class updataServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapupdataServiceSoapService.h generated with soapcpp2):
@code
  class updataServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetXbStationList SOAP
//gsoap ns1  service method-style:	GetXbStationList document
//gsoap ns1  service method-encoding:	GetXbStationList literal
//gsoap ns1  service method-input-action:	GetXbStationList http://zbxhupdata.com/webservices/GetXbStationList
//gsoap ns1  service method-output-action:	GetXbStationList http://zbxhupdata.com/webservices/GetXbStationListResponse
int __ns1__GetXbStationList(
    _ns1__GetXbStationList*             ns1__GetXbStationList,	///< Input parameter
    _ns1__GetXbStationListResponse     &ns1__GetXbStationListResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetMapDeviceType                                                  *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetMapDeviceType" of service binding "updataServiceSoap".


  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.244:190/updataService.asmx

  - Default SOAP action or REST location path:
    - "http://zbxhupdata.com/webservices/GetMapDeviceType"

  - Addressing input action: "http://zbxhupdata.com/webservices/GetMapDeviceType"

  - Addressing output action: "http://zbxhupdata.com/webservices/GetMapDeviceTypeResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetMapDeviceType(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetMapDeviceType*             ns1__GetMapDeviceType,
    // output parameters:
    _ns1__GetMapDeviceTypeResponse     &ns1__GetMapDeviceTypeResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetMapDeviceType(
    struct soap *soap,
    // input parameters:
    _ns1__GetMapDeviceType*             ns1__GetMapDeviceType,
    // output parameters:
    _ns1__GetMapDeviceTypeResponse     &ns1__GetMapDeviceTypeResponse
  );
@endcode

C++ proxy class (defined in soapupdataServiceSoapProxy.h generated with soapcpp2):
@code
  class updataServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapupdataServiceSoapService.h generated with soapcpp2):
@code
  class updataServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetMapDeviceType SOAP
//gsoap ns1  service method-style:	GetMapDeviceType document
//gsoap ns1  service method-encoding:	GetMapDeviceType literal
//gsoap ns1  service method-input-action:	GetMapDeviceType http://zbxhupdata.com/webservices/GetMapDeviceType
//gsoap ns1  service method-output-action:	GetMapDeviceType http://zbxhupdata.com/webservices/GetMapDeviceTypeResponse
int __ns1__GetMapDeviceType(
    _ns1__GetMapDeviceType*             ns1__GetMapDeviceType,	///< Input parameter
    _ns1__GetMapDeviceTypeResponse     &ns1__GetMapDeviceTypeResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetGxDeviceData                                                   *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetGxDeviceData" of service binding "updataServiceSoap".


  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.244:190/updataService.asmx

  - Default SOAP action or REST location path:
    - "http://zbxhupdata.com/webservices/GetGxDeviceData"

  - Addressing input action: "http://zbxhupdata.com/webservices/GetGxDeviceData"

  - Addressing output action: "http://zbxhupdata.com/webservices/GetGxDeviceDataResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetGxDeviceData(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetGxDeviceData*              ns1__GetGxDeviceData,
    // output parameters:
    _ns1__GetGxDeviceDataResponse      &ns1__GetGxDeviceDataResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetGxDeviceData(
    struct soap *soap,
    // input parameters:
    _ns1__GetGxDeviceData*              ns1__GetGxDeviceData,
    // output parameters:
    _ns1__GetGxDeviceDataResponse      &ns1__GetGxDeviceDataResponse
  );
@endcode

C++ proxy class (defined in soapupdataServiceSoapProxy.h generated with soapcpp2):
@code
  class updataServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapupdataServiceSoapService.h generated with soapcpp2):
@code
  class updataServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetGxDeviceData SOAP
//gsoap ns1  service method-style:	GetGxDeviceData document
//gsoap ns1  service method-encoding:	GetGxDeviceData literal
//gsoap ns1  service method-input-action:	GetGxDeviceData http://zbxhupdata.com/webservices/GetGxDeviceData
//gsoap ns1  service method-output-action:	GetGxDeviceData http://zbxhupdata.com/webservices/GetGxDeviceDataResponse
int __ns1__GetGxDeviceData(
    _ns1__GetGxDeviceData*              ns1__GetGxDeviceData,	///< Input parameter
    _ns1__GetGxDeviceDataResponse      &ns1__GetGxDeviceDataResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetDownFileInfo                                                   *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetDownFileInfo" of service binding "updataServiceSoap".
GUID

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.244:190/updataService.asmx

  - Default SOAP action or REST location path:
    - "http://zbxhupdata.com/webservices/GetDownFileInfo"

  - Addressing input action: "http://zbxhupdata.com/webservices/GetDownFileInfo"

  - Addressing output action: "http://zbxhupdata.com/webservices/GetDownFileInfoResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetDownFileInfo(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetDownFileInfo*              ns1__GetDownFileInfo,
    // output parameters:
    _ns1__GetDownFileInfoResponse      &ns1__GetDownFileInfoResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetDownFileInfo(
    struct soap *soap,
    // input parameters:
    _ns1__GetDownFileInfo*              ns1__GetDownFileInfo,
    // output parameters:
    _ns1__GetDownFileInfoResponse      &ns1__GetDownFileInfoResponse
  );
@endcode

C++ proxy class (defined in soapupdataServiceSoapProxy.h generated with soapcpp2):
@code
  class updataServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapupdataServiceSoapService.h generated with soapcpp2):
@code
  class updataServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetDownFileInfo SOAP
//gsoap ns1  service method-style:	GetDownFileInfo document
//gsoap ns1  service method-encoding:	GetDownFileInfo literal
//gsoap ns1  service method-input-action:	GetDownFileInfo http://zbxhupdata.com/webservices/GetDownFileInfo
//gsoap ns1  service method-output-action:	GetDownFileInfo http://zbxhupdata.com/webservices/GetDownFileInfoResponse
int __ns1__GetDownFileInfo(
    _ns1__GetDownFileInfo*              ns1__GetDownFileInfo,	///< Input parameter
    _ns1__GetDownFileInfoResponse      &ns1__GetDownFileInfoResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__DownMapfile                                                       *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__DownMapfile" of service binding "updataServiceSoap".
  

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.244:190/updataService.asmx

  - Default SOAP action or REST location path:
    - "http://zbxhupdata.com/webservices/DownMapfile"

  - Addressing input action: "http://zbxhupdata.com/webservices/DownMapfile"

  - Addressing output action: "http://zbxhupdata.com/webservices/DownMapfileResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__DownMapfile(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__DownMapfile*                  ns1__DownMapfile,
    // output parameters:
    _ns1__DownMapfileResponse          &ns1__DownMapfileResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__DownMapfile(
    struct soap *soap,
    // input parameters:
    _ns1__DownMapfile*                  ns1__DownMapfile,
    // output parameters:
    _ns1__DownMapfileResponse          &ns1__DownMapfileResponse
  );
@endcode

C++ proxy class (defined in soapupdataServiceSoapProxy.h generated with soapcpp2):
@code
  class updataServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapupdataServiceSoapService.h generated with soapcpp2):
@code
  class updataServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	DownMapfile SOAP
//gsoap ns1  service method-style:	DownMapfile document
//gsoap ns1  service method-encoding:	DownMapfile literal
//gsoap ns1  service method-input-action:	DownMapfile http://zbxhupdata.com/webservices/DownMapfile
//gsoap ns1  service method-output-action:	DownMapfile http://zbxhupdata.com/webservices/DownMapfileResponse
int __ns1__DownMapfile(
    _ns1__DownMapfile*                  ns1__DownMapfile,	///< Input parameter
    _ns1__DownMapfileResponse          &ns1__DownMapfileResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetFileNew                                                        *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetFileNew" of service binding "updataServiceSoap".
web

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.244:190/updataService.asmx

  - Default SOAP action or REST location path:
    - "http://zbxhupdata.com/webservices/GetFileNew"

  - Addressing input action: "http://zbxhupdata.com/webservices/GetFileNew"

  - Addressing output action: "http://zbxhupdata.com/webservices/GetFileNewResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetFileNew(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetFileNew*                   ns1__GetFileNew,
    // output parameters:
    _ns1__GetFileNewResponse           &ns1__GetFileNewResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetFileNew(
    struct soap *soap,
    // input parameters:
    _ns1__GetFileNew*                   ns1__GetFileNew,
    // output parameters:
    _ns1__GetFileNewResponse           &ns1__GetFileNewResponse
  );
@endcode

C++ proxy class (defined in soapupdataServiceSoapProxy.h generated with soapcpp2):
@code
  class updataServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapupdataServiceSoapService.h generated with soapcpp2):
@code
  class updataServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetFileNew SOAP
//gsoap ns1  service method-style:	GetFileNew document
//gsoap ns1  service method-encoding:	GetFileNew literal
//gsoap ns1  service method-input-action:	GetFileNew http://zbxhupdata.com/webservices/GetFileNew
//gsoap ns1  service method-output-action:	GetFileNew http://zbxhupdata.com/webservices/GetFileNewResponse
int __ns1__GetFileNew(
    _ns1__GetFileNew*                   ns1__GetFileNew,	///< Input parameter
    _ns1__GetFileNewResponse           &ns1__GetFileNewResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__AlterTable                                                        *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__AlterTable" of service binding "updataServiceSoap".


  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.244:190/updataService.asmx

  - Default SOAP action or REST location path:
    - "http://zbxhupdata.com/webservices/AlterTable"

  - Addressing input action: "http://zbxhupdata.com/webservices/AlterTable"

  - Addressing output action: "http://zbxhupdata.com/webservices/AlterTableResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__AlterTable(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__AlterTable*                   ns1__AlterTable,
    // output parameters:
    _ns1__AlterTableResponse           &ns1__AlterTableResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__AlterTable(
    struct soap *soap,
    // input parameters:
    _ns1__AlterTable*                   ns1__AlterTable,
    // output parameters:
    _ns1__AlterTableResponse           &ns1__AlterTableResponse
  );
@endcode

C++ proxy class (defined in soapupdataServiceSoapProxy.h generated with soapcpp2):
@code
  class updataServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapupdataServiceSoapService.h generated with soapcpp2):
@code
  class updataServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	AlterTable SOAP
//gsoap ns1  service method-style:	AlterTable document
//gsoap ns1  service method-encoding:	AlterTable literal
//gsoap ns1  service method-input-action:	AlterTable http://zbxhupdata.com/webservices/AlterTable
//gsoap ns1  service method-output-action:	AlterTable http://zbxhupdata.com/webservices/AlterTableResponse
int __ns1__AlterTable(
    _ns1__AlterTable*                   ns1__AlterTable,	///< Input parameter
    _ns1__AlterTableResponse           &ns1__AlterTableResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__DownCQData                                                        *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__DownCQData" of service binding "updataServiceSoap".


  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.244:190/updataService.asmx

  - Default SOAP action or REST location path:
    - "http://zbxhupdata.com/webservices/DownCQData"

  - Addressing input action: "http://zbxhupdata.com/webservices/DownCQData"

  - Addressing output action: "http://zbxhupdata.com/webservices/DownCQDataResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__DownCQData(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__DownCQData*                   ns1__DownCQData,
    // output parameters:
    _ns1__DownCQDataResponse           &ns1__DownCQDataResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__DownCQData(
    struct soap *soap,
    // input parameters:
    _ns1__DownCQData*                   ns1__DownCQData,
    // output parameters:
    _ns1__DownCQDataResponse           &ns1__DownCQDataResponse
  );
@endcode

C++ proxy class (defined in soapupdataServiceSoapProxy.h generated with soapcpp2):
@code
  class updataServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapupdataServiceSoapService.h generated with soapcpp2):
@code
  class updataServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	DownCQData SOAP
//gsoap ns1  service method-style:	DownCQData document
//gsoap ns1  service method-encoding:	DownCQData literal
//gsoap ns1  service method-input-action:	DownCQData http://zbxhupdata.com/webservices/DownCQData
//gsoap ns1  service method-output-action:	DownCQData http://zbxhupdata.com/webservices/DownCQDataResponse
int __ns1__DownCQData(
    _ns1__DownCQData*                   ns1__DownCQData,	///< Input parameter
    _ns1__DownCQDataResponse           &ns1__DownCQDataResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetTabList                                                        *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetTabList" of service binding "updataServiceSoap".


  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.244:190/updataService.asmx

  - Default SOAP action or REST location path:
    - "http://zbxhupdata.com/webservices/GetTabList"

  - Addressing input action: "http://zbxhupdata.com/webservices/GetTabList"

  - Addressing output action: "http://zbxhupdata.com/webservices/GetTabListResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetTabList(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetTabList*                   ns1__GetTabList,
    // output parameters:
    _ns1__GetTabListResponse           &ns1__GetTabListResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetTabList(
    struct soap *soap,
    // input parameters:
    _ns1__GetTabList*                   ns1__GetTabList,
    // output parameters:
    _ns1__GetTabListResponse           &ns1__GetTabListResponse
  );
@endcode

C++ proxy class (defined in soapupdataServiceSoapProxy.h generated with soapcpp2):
@code
  class updataServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapupdataServiceSoapService.h generated with soapcpp2):
@code
  class updataServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetTabList SOAP
//gsoap ns1  service method-style:	GetTabList document
//gsoap ns1  service method-encoding:	GetTabList literal
//gsoap ns1  service method-input-action:	GetTabList http://zbxhupdata.com/webservices/GetTabList
//gsoap ns1  service method-output-action:	GetTabList http://zbxhupdata.com/webservices/GetTabListResponse
int __ns1__GetTabList(
    _ns1__GetTabList*                   ns1__GetTabList,	///< Input parameter
    _ns1__GetTabListResponse           &ns1__GetTabListResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__IsOracleTable                                                     *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__IsOracleTable" of service binding "updataServiceSoap".
Oracle

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.244:190/updataService.asmx

  - Default SOAP action or REST location path:
    - "http://zbxhupdata.com/webservices/IsOracleTable"

  - Addressing input action: "http://zbxhupdata.com/webservices/IsOracleTable"

  - Addressing output action: "http://zbxhupdata.com/webservices/IsOracleTableResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__IsOracleTable(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__IsOracleTable*                ns1__IsOracleTable,
    // output parameters:
    _ns1__IsOracleTableResponse        &ns1__IsOracleTableResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__IsOracleTable(
    struct soap *soap,
    // input parameters:
    _ns1__IsOracleTable*                ns1__IsOracleTable,
    // output parameters:
    _ns1__IsOracleTableResponse        &ns1__IsOracleTableResponse
  );
@endcode

C++ proxy class (defined in soapupdataServiceSoapProxy.h generated with soapcpp2):
@code
  class updataServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapupdataServiceSoapService.h generated with soapcpp2):
@code
  class updataServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	IsOracleTable SOAP
//gsoap ns1  service method-style:	IsOracleTable document
//gsoap ns1  service method-encoding:	IsOracleTable literal
//gsoap ns1  service method-input-action:	IsOracleTable http://zbxhupdata.com/webservices/IsOracleTable
//gsoap ns1  service method-output-action:	IsOracleTable http://zbxhupdata.com/webservices/IsOracleTableResponse
int __ns1__IsOracleTable(
    _ns1__IsOracleTable*                ns1__IsOracleTable,	///< Input parameter
    _ns1__IsOracleTableResponse        &ns1__IsOracleTableResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetFieldInfo                                                      *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetFieldInfo" of service binding "updataServiceSoap".


  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.244:190/updataService.asmx

  - Default SOAP action or REST location path:
    - "http://zbxhupdata.com/webservices/GetFieldInfo"

  - Addressing input action: "http://zbxhupdata.com/webservices/GetFieldInfo"

  - Addressing output action: "http://zbxhupdata.com/webservices/GetFieldInfoResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetFieldInfo(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetFieldInfo*                 ns1__GetFieldInfo,
    // output parameters:
    _ns1__GetFieldInfoResponse         &ns1__GetFieldInfoResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetFieldInfo(
    struct soap *soap,
    // input parameters:
    _ns1__GetFieldInfo*                 ns1__GetFieldInfo,
    // output parameters:
    _ns1__GetFieldInfoResponse         &ns1__GetFieldInfoResponse
  );
@endcode

C++ proxy class (defined in soapupdataServiceSoapProxy.h generated with soapcpp2):
@code
  class updataServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapupdataServiceSoapService.h generated with soapcpp2):
@code
  class updataServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetFieldInfo SOAP
//gsoap ns1  service method-style:	GetFieldInfo document
//gsoap ns1  service method-encoding:	GetFieldInfo literal
//gsoap ns1  service method-input-action:	GetFieldInfo http://zbxhupdata.com/webservices/GetFieldInfo
//gsoap ns1  service method-output-action:	GetFieldInfo http://zbxhupdata.com/webservices/GetFieldInfoResponse
int __ns1__GetFieldInfo(
    _ns1__GetFieldInfo*                 ns1__GetFieldInfo,	///< Input parameter
    _ns1__GetFieldInfoResponse         &ns1__GetFieldInfoResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__ExecuteSqlForFile                                                 *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__ExecuteSqlForFile" of service binding "updataServiceSoap".


  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.244:190/updataService.asmx

  - Default SOAP action or REST location path:
    - "http://zbxhupdata.com/webservices/ExecuteSqlForFile"

  - Addressing input action: "http://zbxhupdata.com/webservices/ExecuteSqlForFile"

  - Addressing output action: "http://zbxhupdata.com/webservices/ExecuteSqlForFileResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__ExecuteSqlForFile(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__ExecuteSqlForFile*            ns1__ExecuteSqlForFile,
    // output parameters:
    _ns1__ExecuteSqlForFileResponse    &ns1__ExecuteSqlForFileResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__ExecuteSqlForFile(
    struct soap *soap,
    // input parameters:
    _ns1__ExecuteSqlForFile*            ns1__ExecuteSqlForFile,
    // output parameters:
    _ns1__ExecuteSqlForFileResponse    &ns1__ExecuteSqlForFileResponse
  );
@endcode

C++ proxy class (defined in soapupdataServiceSoapProxy.h generated with soapcpp2):
@code
  class updataServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapupdataServiceSoapService.h generated with soapcpp2):
@code
  class updataServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	ExecuteSqlForFile SOAP
//gsoap ns1  service method-style:	ExecuteSqlForFile document
//gsoap ns1  service method-encoding:	ExecuteSqlForFile literal
//gsoap ns1  service method-input-action:	ExecuteSqlForFile http://zbxhupdata.com/webservices/ExecuteSqlForFile
//gsoap ns1  service method-output-action:	ExecuteSqlForFile http://zbxhupdata.com/webservices/ExecuteSqlForFileResponse
int __ns1__ExecuteSqlForFile(
    _ns1__ExecuteSqlForFile*            ns1__ExecuteSqlForFile,	///< Input parameter
    _ns1__ExecuteSqlForFileResponse    &ns1__ExecuteSqlForFileResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__DownLoadFile                                                      *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__DownLoadFile" of service binding "updataServiceSoap".


  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.244:190/updataService.asmx

  - Default SOAP action or REST location path:
    - "http://zbxhupdata.com/webservices/DownLoadFile"

  - Addressing input action: "http://zbxhupdata.com/webservices/DownLoadFile"

  - Addressing output action: "http://zbxhupdata.com/webservices/DownLoadFileResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__DownLoadFile(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__DownLoadFile*                 ns1__DownLoadFile,
    // output parameters:
    _ns1__DownLoadFileResponse         &ns1__DownLoadFileResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__DownLoadFile(
    struct soap *soap,
    // input parameters:
    _ns1__DownLoadFile*                 ns1__DownLoadFile,
    // output parameters:
    _ns1__DownLoadFileResponse         &ns1__DownLoadFileResponse
  );
@endcode

C++ proxy class (defined in soapupdataServiceSoapProxy.h generated with soapcpp2):
@code
  class updataServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapupdataServiceSoapService.h generated with soapcpp2):
@code
  class updataServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	DownLoadFile SOAP
//gsoap ns1  service method-style:	DownLoadFile document
//gsoap ns1  service method-encoding:	DownLoadFile literal
//gsoap ns1  service method-input-action:	DownLoadFile http://zbxhupdata.com/webservices/DownLoadFile
//gsoap ns1  service method-output-action:	DownLoadFile http://zbxhupdata.com/webservices/DownLoadFileResponse
int __ns1__DownLoadFile(
    _ns1__DownLoadFile*                 ns1__DownLoadFile,	///< Input parameter
    _ns1__DownLoadFileResponse         &ns1__DownLoadFileResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__WriteFile                                                         *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__WriteFile" of service binding "updataServiceSoap".
Text

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.244:190/updataService.asmx

  - Default SOAP action or REST location path:
    - "http://zbxhupdata.com/webservices/WriteFile"

  - Addressing input action: "http://zbxhupdata.com/webservices/WriteFile"

  - Addressing output action: "http://zbxhupdata.com/webservices/WriteFileResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__WriteFile(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__WriteFile*                    ns1__WriteFile,
    // output parameters:
    _ns1__WriteFileResponse            &ns1__WriteFileResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__WriteFile(
    struct soap *soap,
    // input parameters:
    _ns1__WriteFile*                    ns1__WriteFile,
    // output parameters:
    _ns1__WriteFileResponse            &ns1__WriteFileResponse
  );
@endcode

C++ proxy class (defined in soapupdataServiceSoapProxy.h generated with soapcpp2):
@code
  class updataServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapupdataServiceSoapService.h generated with soapcpp2):
@code
  class updataServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	WriteFile SOAP
//gsoap ns1  service method-style:	WriteFile document
//gsoap ns1  service method-encoding:	WriteFile literal
//gsoap ns1  service method-input-action:	WriteFile http://zbxhupdata.com/webservices/WriteFile
//gsoap ns1  service method-output-action:	WriteFile http://zbxhupdata.com/webservices/WriteFileResponse
int __ns1__WriteFile(
    _ns1__WriteFile*                    ns1__WriteFile,	///< Input parameter
    _ns1__WriteFileResponse            &ns1__WriteFileResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetMapUpdateTime                                                  *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetMapUpdateTime" of service binding "updataServiceSoap".


  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.244:190/updataService.asmx

  - Default SOAP action or REST location path:
    - "http://zbxhupdata.com/webservices/GetMapUpdateTime"

  - Addressing input action: "http://zbxhupdata.com/webservices/GetMapUpdateTime"

  - Addressing output action: "http://zbxhupdata.com/webservices/GetMapUpdateTimeResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetMapUpdateTime(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetMapUpdateTime*             ns1__GetMapUpdateTime,
    // output parameters:
    _ns1__GetMapUpdateTimeResponse     &ns1__GetMapUpdateTimeResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetMapUpdateTime(
    struct soap *soap,
    // input parameters:
    _ns1__GetMapUpdateTime*             ns1__GetMapUpdateTime,
    // output parameters:
    _ns1__GetMapUpdateTimeResponse     &ns1__GetMapUpdateTimeResponse
  );
@endcode

C++ proxy class (defined in soapupdataServiceSoapProxy.h generated with soapcpp2):
@code
  class updataServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapupdataServiceSoapService.h generated with soapcpp2):
@code
  class updataServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetMapUpdateTime SOAP
//gsoap ns1  service method-style:	GetMapUpdateTime document
//gsoap ns1  service method-encoding:	GetMapUpdateTime literal
//gsoap ns1  service method-input-action:	GetMapUpdateTime http://zbxhupdata.com/webservices/GetMapUpdateTime
//gsoap ns1  service method-output-action:	GetMapUpdateTime http://zbxhupdata.com/webservices/GetMapUpdateTimeResponse
int __ns1__GetMapUpdateTime(
    _ns1__GetMapUpdateTime*             ns1__GetMapUpdateTime,	///< Input parameter
    _ns1__GetMapUpdateTimeResponse     &ns1__GetMapUpdateTimeResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetMapTabName                                                     *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetMapTabName" of service binding "updataServiceSoap".


  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.244:190/updataService.asmx

  - Default SOAP action or REST location path:
    - "http://zbxhupdata.com/webservices/GetMapTabName"

  - Addressing input action: "http://zbxhupdata.com/webservices/GetMapTabName"

  - Addressing output action: "http://zbxhupdata.com/webservices/GetMapTabNameResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetMapTabName(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetMapTabName*                ns1__GetMapTabName,
    // output parameters:
    _ns1__GetMapTabNameResponse        &ns1__GetMapTabNameResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetMapTabName(
    struct soap *soap,
    // input parameters:
    _ns1__GetMapTabName*                ns1__GetMapTabName,
    // output parameters:
    _ns1__GetMapTabNameResponse        &ns1__GetMapTabNameResponse
  );
@endcode

C++ proxy class (defined in soapupdataServiceSoapProxy.h generated with soapcpp2):
@code
  class updataServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapupdataServiceSoapService.h generated with soapcpp2):
@code
  class updataServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetMapTabName SOAP
//gsoap ns1  service method-style:	GetMapTabName document
//gsoap ns1  service method-encoding:	GetMapTabName literal
//gsoap ns1  service method-input-action:	GetMapTabName http://zbxhupdata.com/webservices/GetMapTabName
//gsoap ns1  service method-output-action:	GetMapTabName http://zbxhupdata.com/webservices/GetMapTabNameResponse
int __ns1__GetMapTabName(
    _ns1__GetMapTabName*                ns1__GetMapTabName,	///< Input parameter
    _ns1__GetMapTabNameResponse        &ns1__GetMapTabNameResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetMapDeviceData                                                  *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetMapDeviceData" of service binding "updataServiceSoap".


  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.244:190/updataService.asmx

  - Default SOAP action or REST location path:
    - "http://zbxhupdata.com/webservices/GetMapDeviceData"

  - Addressing input action: "http://zbxhupdata.com/webservices/GetMapDeviceData"

  - Addressing output action: "http://zbxhupdata.com/webservices/GetMapDeviceDataResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetMapDeviceData(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetMapDeviceData*             ns1__GetMapDeviceData,
    // output parameters:
    _ns1__GetMapDeviceDataResponse     &ns1__GetMapDeviceDataResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetMapDeviceData(
    struct soap *soap,
    // input parameters:
    _ns1__GetMapDeviceData*             ns1__GetMapDeviceData,
    // output parameters:
    _ns1__GetMapDeviceDataResponse     &ns1__GetMapDeviceDataResponse
  );
@endcode

C++ proxy class (defined in soapupdataServiceSoapProxy.h generated with soapcpp2):
@code
  class updataServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapupdataServiceSoapService.h generated with soapcpp2):
@code
  class updataServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetMapDeviceData SOAP
//gsoap ns1  service method-style:	GetMapDeviceData document
//gsoap ns1  service method-encoding:	GetMapDeviceData literal
//gsoap ns1  service method-input-action:	GetMapDeviceData http://zbxhupdata.com/webservices/GetMapDeviceData
//gsoap ns1  service method-output-action:	GetMapDeviceData http://zbxhupdata.com/webservices/GetMapDeviceDataResponse
int __ns1__GetMapDeviceData(
    _ns1__GetMapDeviceData*             ns1__GetMapDeviceData,	///< Input parameter
    _ns1__GetMapDeviceDataResponse     &ns1__GetMapDeviceDataResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetMaList                                                         *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetMaList" of service binding "updataServiceSoap".


  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.244:190/updataService.asmx

  - Default SOAP action or REST location path:
    - "http://zbxhupdata.com/webservices/GetMaList"

  - Addressing input action: "http://zbxhupdata.com/webservices/GetMaList"

  - Addressing output action: "http://zbxhupdata.com/webservices/GetMaListResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetMaList(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetMaList*                    ns1__GetMaList,
    // output parameters:
    _ns1__GetMaListResponse            &ns1__GetMaListResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetMaList(
    struct soap *soap,
    // input parameters:
    _ns1__GetMaList*                    ns1__GetMaList,
    // output parameters:
    _ns1__GetMaListResponse            &ns1__GetMaListResponse
  );
@endcode

C++ proxy class (defined in soapupdataServiceSoapProxy.h generated with soapcpp2):
@code
  class updataServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapupdataServiceSoapService.h generated with soapcpp2):
@code
  class updataServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetMaList SOAP
//gsoap ns1  service method-style:	GetMaList document
//gsoap ns1  service method-encoding:	GetMaList literal
//gsoap ns1  service method-input-action:	GetMaList http://zbxhupdata.com/webservices/GetMaList
//gsoap ns1  service method-output-action:	GetMaList http://zbxhupdata.com/webservices/GetMaListResponse
int __ns1__GetMaList(
    _ns1__GetMaList*                    ns1__GetMaList,	///< Input parameter
    _ns1__GetMaListResponse            &ns1__GetMaListResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetMangeUnit                                                      *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetMangeUnit" of service binding "updataServiceSoap".
Mangeunit

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.244:190/updataService.asmx

  - Default SOAP action or REST location path:
    - "http://zbxhupdata.com/webservices/GetMangeUnit"

  - Addressing input action: "http://zbxhupdata.com/webservices/GetMangeUnit"

  - Addressing output action: "http://zbxhupdata.com/webservices/GetMangeUnitResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetMangeUnit(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetMangeUnit*                 ns1__GetMangeUnit,
    // output parameters:
    _ns1__GetMangeUnitResponse         &ns1__GetMangeUnitResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetMangeUnit(
    struct soap *soap,
    // input parameters:
    _ns1__GetMangeUnit*                 ns1__GetMangeUnit,
    // output parameters:
    _ns1__GetMangeUnitResponse         &ns1__GetMangeUnitResponse
  );
@endcode

C++ proxy class (defined in soapupdataServiceSoapProxy.h generated with soapcpp2):
@code
  class updataServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapupdataServiceSoapService.h generated with soapcpp2):
@code
  class updataServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetMangeUnit SOAP
//gsoap ns1  service method-style:	GetMangeUnit document
//gsoap ns1  service method-encoding:	GetMangeUnit literal
//gsoap ns1  service method-input-action:	GetMangeUnit http://zbxhupdata.com/webservices/GetMangeUnit
//gsoap ns1  service method-output-action:	GetMangeUnit http://zbxhupdata.com/webservices/GetMangeUnitResponse
int __ns1__GetMangeUnit(
    _ns1__GetMangeUnit*                 ns1__GetMangeUnit,	///< Input parameter
    _ns1__GetMangeUnitResponse         &ns1__GetMangeUnitResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetMangeXb                                                        *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetMangeXb" of service binding "updataServiceSoap".


  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.244:190/updataService.asmx

  - Default SOAP action or REST location path:
    - "http://zbxhupdata.com/webservices/GetMangeXb"

  - Addressing input action: "http://zbxhupdata.com/webservices/GetMangeXb"

  - Addressing output action: "http://zbxhupdata.com/webservices/GetMangeXbResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetMangeXb(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetMangeXb*                   ns1__GetMangeXb,
    // output parameters:
    _ns1__GetMangeXbResponse           &ns1__GetMangeXbResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetMangeXb(
    struct soap *soap,
    // input parameters:
    _ns1__GetMangeXb*                   ns1__GetMangeXb,
    // output parameters:
    _ns1__GetMangeXbResponse           &ns1__GetMangeXbResponse
  );
@endcode

C++ proxy class (defined in soapupdataServiceSoapProxy.h generated with soapcpp2):
@code
  class updataServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapupdataServiceSoapService.h generated with soapcpp2):
@code
  class updataServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetMangeXb SOAP
//gsoap ns1  service method-style:	GetMangeXb document
//gsoap ns1  service method-encoding:	GetMangeXb literal
//gsoap ns1  service method-input-action:	GetMangeXb http://zbxhupdata.com/webservices/GetMangeXb
//gsoap ns1  service method-output-action:	GetMangeXb http://zbxhupdata.com/webservices/GetMangeXbResponse
int __ns1__GetMangeXb(
    _ns1__GetMangeXb*                   ns1__GetMangeXb,	///< Input parameter
    _ns1__GetMangeXbResponse           &ns1__GetMangeXbResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__CheckMapVer                                                       *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__CheckMapVer" of service binding "updataServiceSoap".


  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.244:190/updataService.asmx

  - Default SOAP action or REST location path:
    - "http://zbxhupdata.com/webservices/CheckMapVer"

  - Addressing input action: "http://zbxhupdata.com/webservices/CheckMapVer"

  - Addressing output action: "http://zbxhupdata.com/webservices/CheckMapVerResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__CheckMapVer(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__CheckMapVer*                  ns1__CheckMapVer,
    // output parameters:
    _ns1__CheckMapVerResponse          &ns1__CheckMapVerResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__CheckMapVer(
    struct soap *soap,
    // input parameters:
    _ns1__CheckMapVer*                  ns1__CheckMapVer,
    // output parameters:
    _ns1__CheckMapVerResponse          &ns1__CheckMapVerResponse
  );
@endcode

C++ proxy class (defined in soapupdataServiceSoapProxy.h generated with soapcpp2):
@code
  class updataServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapupdataServiceSoapService.h generated with soapcpp2):
@code
  class updataServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	CheckMapVer SOAP
//gsoap ns1  service method-style:	CheckMapVer document
//gsoap ns1  service method-encoding:	CheckMapVer literal
//gsoap ns1  service method-input-action:	CheckMapVer http://zbxhupdata.com/webservices/CheckMapVer
//gsoap ns1  service method-output-action:	CheckMapVer http://zbxhupdata.com/webservices/CheckMapVerResponse
int __ns1__CheckMapVer(
    _ns1__CheckMapVer*                  ns1__CheckMapVer,	///< Input parameter
    _ns1__CheckMapVerResponse          &ns1__CheckMapVerResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetMap                                                            *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetMap" of service binding "updataServiceSoap".


  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.244:190/updataService.asmx

  - Default SOAP action or REST location path:
    - "http://zbxhupdata.com/webservices/GetMap"

  - Addressing input action: "http://zbxhupdata.com/webservices/GetMap"

  - Addressing output action: "http://zbxhupdata.com/webservices/GetMapResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetMap(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetMap*                       ns1__GetMap,
    // output parameters:
    _ns1__GetMapResponse               &ns1__GetMapResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetMap(
    struct soap *soap,
    // input parameters:
    _ns1__GetMap*                       ns1__GetMap,
    // output parameters:
    _ns1__GetMapResponse               &ns1__GetMapResponse
  );
@endcode

C++ proxy class (defined in soapupdataServiceSoapProxy.h generated with soapcpp2):
@code
  class updataServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapupdataServiceSoapService.h generated with soapcpp2):
@code
  class updataServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetMap SOAP
//gsoap ns1  service method-style:	GetMap document
//gsoap ns1  service method-encoding:	GetMap literal
//gsoap ns1  service method-input-action:	GetMap http://zbxhupdata.com/webservices/GetMap
//gsoap ns1  service method-output-action:	GetMap http://zbxhupdata.com/webservices/GetMapResponse
int __ns1__GetMap(
    _ns1__GetMap*                       ns1__GetMap,	///< Input parameter
    _ns1__GetMapResponse               &ns1__GetMapResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetTableData                                                      *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetTableData" of service binding "updataServiceSoap".


  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.244:190/updataService.asmx

  - Default SOAP action or REST location path:
    - "http://zbxhupdata.com/webservices/GetTableData"

  - Addressing input action: "http://zbxhupdata.com/webservices/GetTableData"

  - Addressing output action: "http://zbxhupdata.com/webservices/GetTableDataResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetTableData(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetTableData*                 ns1__GetTableData,
    // output parameters:
    _ns1__GetTableDataResponse         &ns1__GetTableDataResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetTableData(
    struct soap *soap,
    // input parameters:
    _ns1__GetTableData*                 ns1__GetTableData,
    // output parameters:
    _ns1__GetTableDataResponse         &ns1__GetTableDataResponse
  );
@endcode

C++ proxy class (defined in soapupdataServiceSoapProxy.h generated with soapcpp2):
@code
  class updataServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapupdataServiceSoapService.h generated with soapcpp2):
@code
  class updataServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetTableData SOAP
//gsoap ns1  service method-style:	GetTableData document
//gsoap ns1  service method-encoding:	GetTableData literal
//gsoap ns1  service method-input-action:	GetTableData http://zbxhupdata.com/webservices/GetTableData
//gsoap ns1  service method-output-action:	GetTableData http://zbxhupdata.com/webservices/GetTableDataResponse
int __ns1__GetTableData(
    _ns1__GetTableData*                 ns1__GetTableData,	///< Input parameter
    _ns1__GetTableDataResponse         &ns1__GetTableDataResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__ServerLevel                                                       *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__ServerLevel" of service binding "updataServiceSoap".
24

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.244:190/updataService.asmx

  - Default SOAP action or REST location path:
    - "http://zbxhupdata.com/webservices/ServerLevel"

  - Addressing input action: "http://zbxhupdata.com/webservices/ServerLevel"

  - Addressing output action: "http://zbxhupdata.com/webservices/ServerLevelResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__ServerLevel(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__ServerLevel*                  ns1__ServerLevel,
    // output parameters:
    _ns1__ServerLevelResponse          &ns1__ServerLevelResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__ServerLevel(
    struct soap *soap,
    // input parameters:
    _ns1__ServerLevel*                  ns1__ServerLevel,
    // output parameters:
    _ns1__ServerLevelResponse          &ns1__ServerLevelResponse
  );
@endcode

C++ proxy class (defined in soapupdataServiceSoapProxy.h generated with soapcpp2):
@code
  class updataServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapupdataServiceSoapService.h generated with soapcpp2):
@code
  class updataServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	ServerLevel SOAP
//gsoap ns1  service method-style:	ServerLevel document
//gsoap ns1  service method-encoding:	ServerLevel literal
//gsoap ns1  service method-input-action:	ServerLevel http://zbxhupdata.com/webservices/ServerLevel
//gsoap ns1  service method-output-action:	ServerLevel http://zbxhupdata.com/webservices/ServerLevelResponse
int __ns1__ServerLevel(
    _ns1__ServerLevel*                  ns1__ServerLevel,	///< Input parameter
    _ns1__ServerLevelResponse          &ns1__ServerLevelResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetMapListTime                                                    *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetMapListTime" of service binding "updataServiceSoap".
maplistmob

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.244:190/updataService.asmx

  - Default SOAP action or REST location path:
    - "http://zbxhupdata.com/webservices/GetMapListTime"

  - Addressing input action: "http://zbxhupdata.com/webservices/GetMapListTime"

  - Addressing output action: "http://zbxhupdata.com/webservices/GetMapListTimeResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetMapListTime(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetMapListTime*               ns1__GetMapListTime,
    // output parameters:
    _ns1__GetMapListTimeResponse       &ns1__GetMapListTimeResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetMapListTime(
    struct soap *soap,
    // input parameters:
    _ns1__GetMapListTime*               ns1__GetMapListTime,
    // output parameters:
    _ns1__GetMapListTimeResponse       &ns1__GetMapListTimeResponse
  );
@endcode

C++ proxy class (defined in soapupdataServiceSoapProxy.h generated with soapcpp2):
@code
  class updataServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapupdataServiceSoapService.h generated with soapcpp2):
@code
  class updataServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetMapListTime SOAP
//gsoap ns1  service method-style:	GetMapListTime document
//gsoap ns1  service method-encoding:	GetMapListTime literal
//gsoap ns1  service method-input-action:	GetMapListTime http://zbxhupdata.com/webservices/GetMapListTime
//gsoap ns1  service method-output-action:	GetMapListTime http://zbxhupdata.com/webservices/GetMapListTimeResponse
int __ns1__GetMapListTime(
    _ns1__GetMapListTime*               ns1__GetMapListTime,	///< Input parameter
    _ns1__GetMapListTimeResponse       &ns1__GetMapListTimeResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__UpdateGzclMap                                                     *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__UpdateGzclMap" of service binding "updataServiceSoap".


  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.244:190/updataService.asmx

  - Default SOAP action or REST location path:
    - "http://zbxhupdata.com/webservices/UpdateGzclMap"

  - Addressing input action: "http://zbxhupdata.com/webservices/UpdateGzclMap"

  - Addressing output action: "http://zbxhupdata.com/webservices/UpdateGzclMapResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__UpdateGzclMap(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__UpdateGzclMap*                ns1__UpdateGzclMap,
    // output parameters:
    _ns1__UpdateGzclMapResponse        &ns1__UpdateGzclMapResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__UpdateGzclMap(
    struct soap *soap,
    // input parameters:
    _ns1__UpdateGzclMap*                ns1__UpdateGzclMap,
    // output parameters:
    _ns1__UpdateGzclMapResponse        &ns1__UpdateGzclMapResponse
  );
@endcode

C++ proxy class (defined in soapupdataServiceSoapProxy.h generated with soapcpp2):
@code
  class updataServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapupdataServiceSoapService.h generated with soapcpp2):
@code
  class updataServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	UpdateGzclMap SOAP
//gsoap ns1  service method-style:	UpdateGzclMap document
//gsoap ns1  service method-encoding:	UpdateGzclMap literal
//gsoap ns1  service method-input-action:	UpdateGzclMap http://zbxhupdata.com/webservices/UpdateGzclMap
//gsoap ns1  service method-output-action:	UpdateGzclMap http://zbxhupdata.com/webservices/UpdateGzclMapResponse
int __ns1__UpdateGzclMap(
    _ns1__UpdateGzclMap*                ns1__UpdateGzclMap,	///< Input parameter
    _ns1__UpdateGzclMapResponse        &ns1__UpdateGzclMapResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetUnitMapVer                                                     *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetUnitMapVer" of service binding "updataServiceSoap".


  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.244:190/updataService.asmx

  - Default SOAP action or REST location path:
    - "http://zbxhupdata.com/webservices/GetUnitMapVer"

  - Addressing input action: "http://zbxhupdata.com/webservices/GetUnitMapVer"

  - Addressing output action: "http://zbxhupdata.com/webservices/GetUnitMapVerResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetUnitMapVer(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetUnitMapVer*                ns1__GetUnitMapVer,
    // output parameters:
    _ns1__GetUnitMapVerResponse        &ns1__GetUnitMapVerResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetUnitMapVer(
    struct soap *soap,
    // input parameters:
    _ns1__GetUnitMapVer*                ns1__GetUnitMapVer,
    // output parameters:
    _ns1__GetUnitMapVerResponse        &ns1__GetUnitMapVerResponse
  );
@endcode

C++ proxy class (defined in soapupdataServiceSoapProxy.h generated with soapcpp2):
@code
  class updataServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapupdataServiceSoapService.h generated with soapcpp2):
@code
  class updataServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetUnitMapVer SOAP
//gsoap ns1  service method-style:	GetUnitMapVer document
//gsoap ns1  service method-encoding:	GetUnitMapVer literal
//gsoap ns1  service method-input-action:	GetUnitMapVer http://zbxhupdata.com/webservices/GetUnitMapVer
//gsoap ns1  service method-output-action:	GetUnitMapVer http://zbxhupdata.com/webservices/GetUnitMapVerResponse
int __ns1__GetUnitMapVer(
    _ns1__GetUnitMapVer*                ns1__GetUnitMapVer,	///< Input parameter
    _ns1__GetUnitMapVerResponse        &ns1__GetUnitMapVerResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetMangeMapUpdate                                                 *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetMangeMapUpdate" of service binding "updataServiceSoap".
MangeMap

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.244:190/updataService.asmx

  - Default SOAP action or REST location path:
    - "http://zbxhupdata.com/webservices/GetMangeMapUpdate"

  - Addressing input action: "http://zbxhupdata.com/webservices/GetMangeMapUpdate"

  - Addressing output action: "http://zbxhupdata.com/webservices/GetMangeMapUpdateResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetMangeMapUpdate(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetMangeMapUpdate*            ns1__GetMangeMapUpdate,
    // output parameters:
    _ns1__GetMangeMapUpdateResponse    &ns1__GetMangeMapUpdateResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetMangeMapUpdate(
    struct soap *soap,
    // input parameters:
    _ns1__GetMangeMapUpdate*            ns1__GetMangeMapUpdate,
    // output parameters:
    _ns1__GetMangeMapUpdateResponse    &ns1__GetMangeMapUpdateResponse
  );
@endcode

C++ proxy class (defined in soapupdataServiceSoapProxy.h generated with soapcpp2):
@code
  class updataServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapupdataServiceSoapService.h generated with soapcpp2):
@code
  class updataServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetMangeMapUpdate SOAP
//gsoap ns1  service method-style:	GetMangeMapUpdate document
//gsoap ns1  service method-encoding:	GetMangeMapUpdate literal
//gsoap ns1  service method-input-action:	GetMangeMapUpdate http://zbxhupdata.com/webservices/GetMangeMapUpdate
//gsoap ns1  service method-output-action:	GetMangeMapUpdate http://zbxhupdata.com/webservices/GetMangeMapUpdateResponse
int __ns1__GetMangeMapUpdate(
    _ns1__GetMangeMapUpdate*            ns1__GetMangeMapUpdate,	///< Input parameter
    _ns1__GetMangeMapUpdateResponse    &ns1__GetMangeMapUpdateResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__OpenProcess                                                       *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__OpenProcess" of service binding "updataServiceSoap".


  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.244:190/updataService.asmx

  - Default SOAP action or REST location path:
    - "http://zbxhupdata.com/webservices/OpenProcess"

  - Addressing input action: "http://zbxhupdata.com/webservices/OpenProcess"

  - Addressing output action: "http://zbxhupdata.com/webservices/OpenProcessResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__OpenProcess(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__OpenProcess*                  ns1__OpenProcess,
    // output parameters:
    _ns1__OpenProcessResponse          &ns1__OpenProcessResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__OpenProcess(
    struct soap *soap,
    // input parameters:
    _ns1__OpenProcess*                  ns1__OpenProcess,
    // output parameters:
    _ns1__OpenProcessResponse          &ns1__OpenProcessResponse
  );
@endcode

C++ proxy class (defined in soapupdataServiceSoapProxy.h generated with soapcpp2):
@code
  class updataServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapupdataServiceSoapService.h generated with soapcpp2):
@code
  class updataServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	OpenProcess SOAP
//gsoap ns1  service method-style:	OpenProcess document
//gsoap ns1  service method-encoding:	OpenProcess literal
//gsoap ns1  service method-input-action:	OpenProcess http://zbxhupdata.com/webservices/OpenProcess
//gsoap ns1  service method-output-action:	OpenProcess http://zbxhupdata.com/webservices/OpenProcessResponse
int __ns1__OpenProcess(
    _ns1__OpenProcess*                  ns1__OpenProcess,	///< Input parameter
    _ns1__OpenProcessResponse          &ns1__OpenProcessResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetEmfPngVer                                                      *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetEmfPngVer" of service binding "updataServiceSoap".
emf2png

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.244:190/updataService.asmx

  - Default SOAP action or REST location path:
    - "http://zbxhupdata.com/webservices/GetEmfPngVer"

  - Addressing input action: "http://zbxhupdata.com/webservices/GetEmfPngVer"

  - Addressing output action: "http://zbxhupdata.com/webservices/GetEmfPngVerResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetEmfPngVer(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetEmfPngVer*                 ns1__GetEmfPngVer,
    // output parameters:
    _ns1__GetEmfPngVerResponse         &ns1__GetEmfPngVerResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetEmfPngVer(
    struct soap *soap,
    // input parameters:
    _ns1__GetEmfPngVer*                 ns1__GetEmfPngVer,
    // output parameters:
    _ns1__GetEmfPngVerResponse         &ns1__GetEmfPngVerResponse
  );
@endcode

C++ proxy class (defined in soapupdataServiceSoapProxy.h generated with soapcpp2):
@code
  class updataServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapupdataServiceSoapService.h generated with soapcpp2):
@code
  class updataServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetEmfPngVer SOAP
//gsoap ns1  service method-style:	GetEmfPngVer document
//gsoap ns1  service method-encoding:	GetEmfPngVer literal
//gsoap ns1  service method-input-action:	GetEmfPngVer http://zbxhupdata.com/webservices/GetEmfPngVer
//gsoap ns1  service method-output-action:	GetEmfPngVer http://zbxhupdata.com/webservices/GetEmfPngVerResponse
int __ns1__GetEmfPngVer(
    _ns1__GetEmfPngVer*                 ns1__GetEmfPngVer,	///< Input parameter
    _ns1__GetEmfPngVerResponse         &ns1__GetEmfPngVerResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetEmfPngFile                                                     *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetEmfPngFile" of service binding "updataServiceSoap".
mapidpagename

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.244:190/updataService.asmx

  - Default SOAP action or REST location path:
    - "http://zbxhupdata.com/webservices/GetEmfPngFile"

  - Addressing input action: "http://zbxhupdata.com/webservices/GetEmfPngFile"

  - Addressing output action: "http://zbxhupdata.com/webservices/GetEmfPngFileResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetEmfPngFile(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetEmfPngFile*                ns1__GetEmfPngFile,
    // output parameters:
    _ns1__GetEmfPngFileResponse        &ns1__GetEmfPngFileResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetEmfPngFile(
    struct soap *soap,
    // input parameters:
    _ns1__GetEmfPngFile*                ns1__GetEmfPngFile,
    // output parameters:
    _ns1__GetEmfPngFileResponse        &ns1__GetEmfPngFileResponse
  );
@endcode

C++ proxy class (defined in soapupdataServiceSoapProxy.h generated with soapcpp2):
@code
  class updataServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapupdataServiceSoapService.h generated with soapcpp2):
@code
  class updataServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetEmfPngFile SOAP
//gsoap ns1  service method-style:	GetEmfPngFile document
//gsoap ns1  service method-encoding:	GetEmfPngFile literal
//gsoap ns1  service method-input-action:	GetEmfPngFile http://zbxhupdata.com/webservices/GetEmfPngFile
//gsoap ns1  service method-output-action:	GetEmfPngFile http://zbxhupdata.com/webservices/GetEmfPngFileResponse
int __ns1__GetEmfPngFile(
    _ns1__GetEmfPngFile*                ns1__GetEmfPngFile,	///< Input parameter
    _ns1__GetEmfPngFileResponse        &ns1__GetEmfPngFileResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__OpenMapExe                                                        *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__OpenMapExe" of service binding "updataServiceSoap".


  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.244:190/updataService.asmx

  - Default SOAP action or REST location path:
    - "http://zbxhupdata.com/webservices/OpenMapExe"

  - Addressing input action: "http://zbxhupdata.com/webservices/OpenMapExe"

  - Addressing output action: "http://zbxhupdata.com/webservices/OpenMapExeResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__OpenMapExe(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__OpenMapExe*                   ns1__OpenMapExe,
    // output parameters:
    _ns1__OpenMapExeResponse           &ns1__OpenMapExeResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__OpenMapExe(
    struct soap *soap,
    // input parameters:
    _ns1__OpenMapExe*                   ns1__OpenMapExe,
    // output parameters:
    _ns1__OpenMapExeResponse           &ns1__OpenMapExeResponse
  );
@endcode

C++ proxy class (defined in soapupdataServiceSoapProxy.h generated with soapcpp2):
@code
  class updataServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapupdataServiceSoapService.h generated with soapcpp2):
@code
  class updataServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	OpenMapExe SOAP
//gsoap ns1  service method-style:	OpenMapExe document
//gsoap ns1  service method-encoding:	OpenMapExe literal
//gsoap ns1  service method-input-action:	OpenMapExe http://zbxhupdata.com/webservices/OpenMapExe
//gsoap ns1  service method-output-action:	OpenMapExe http://zbxhupdata.com/webservices/OpenMapExeResponse
int __ns1__OpenMapExe(
    _ns1__OpenMapExe*                   ns1__OpenMapExe,	///< Input parameter
    _ns1__OpenMapExeResponse           &ns1__OpenMapExeResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__ChaoQi                                                            *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__ChaoQi" of service binding "updataServiceSoap".


  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.244:190/updataService.asmx

  - Default SOAP action or REST location path:
    - "http://zbxhupdata.com/webservices/ChaoQi"

  - Addressing input action: "http://zbxhupdata.com/webservices/ChaoQi"

  - Addressing output action: "http://zbxhupdata.com/webservices/ChaoQiResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__ChaoQi(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__ChaoQi*                       ns1__ChaoQi,
    // output parameters:
    _ns1__ChaoQiResponse               &ns1__ChaoQiResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__ChaoQi(
    struct soap *soap,
    // input parameters:
    _ns1__ChaoQi*                       ns1__ChaoQi,
    // output parameters:
    _ns1__ChaoQiResponse               &ns1__ChaoQiResponse
  );
@endcode

C++ proxy class (defined in soapupdataServiceSoapProxy.h generated with soapcpp2):
@code
  class updataServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapupdataServiceSoapService.h generated with soapcpp2):
@code
  class updataServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	ChaoQi SOAP
//gsoap ns1  service method-style:	ChaoQi document
//gsoap ns1  service method-encoding:	ChaoQi literal
//gsoap ns1  service method-input-action:	ChaoQi http://zbxhupdata.com/webservices/ChaoQi
//gsoap ns1  service method-output-action:	ChaoQi http://zbxhupdata.com/webservices/ChaoQiResponse
int __ns1__ChaoQi(
    _ns1__ChaoQi*                       ns1__ChaoQi,	///< Input parameter
    _ns1__ChaoQiResponse               &ns1__ChaoQiResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__JiChaoQi                                                          *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__JiChaoQi" of service binding "updataServiceSoap".


  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.244:190/updataService.asmx

  - Default SOAP action or REST location path:
    - "http://zbxhupdata.com/webservices/JiChaoQi"

  - Addressing input action: "http://zbxhupdata.com/webservices/JiChaoQi"

  - Addressing output action: "http://zbxhupdata.com/webservices/JiChaoQiResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__JiChaoQi(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__JiChaoQi*                     ns1__JiChaoQi,
    // output parameters:
    _ns1__JiChaoQiResponse             &ns1__JiChaoQiResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__JiChaoQi(
    struct soap *soap,
    // input parameters:
    _ns1__JiChaoQi*                     ns1__JiChaoQi,
    // output parameters:
    _ns1__JiChaoQiResponse             &ns1__JiChaoQiResponse
  );
@endcode

C++ proxy class (defined in soapupdataServiceSoapProxy.h generated with soapcpp2):
@code
  class updataServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapupdataServiceSoapService.h generated with soapcpp2):
@code
  class updataServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	JiChaoQi SOAP
//gsoap ns1  service method-style:	JiChaoQi document
//gsoap ns1  service method-encoding:	JiChaoQi literal
//gsoap ns1  service method-input-action:	JiChaoQi http://zbxhupdata.com/webservices/JiChaoQi
//gsoap ns1  service method-output-action:	JiChaoQi http://zbxhupdata.com/webservices/JiChaoQiResponse
int __ns1__JiChaoQi(
    _ns1__JiChaoQi*                     ns1__JiChaoQi,	///< Input parameter
    _ns1__JiChaoQiResponse             &ns1__JiChaoQiResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetZhouQi                                                         *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetZhouQi" of service binding "updataServiceSoap".


  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.244:190/updataService.asmx

  - Default SOAP action or REST location path:
    - "http://zbxhupdata.com/webservices/GetZhouQi"

  - Addressing input action: "http://zbxhupdata.com/webservices/GetZhouQi"

  - Addressing output action: "http://zbxhupdata.com/webservices/GetZhouQiResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetZhouQi(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetZhouQi*                    ns1__GetZhouQi,
    // output parameters:
    _ns1__GetZhouQiResponse            &ns1__GetZhouQiResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetZhouQi(
    struct soap *soap,
    // input parameters:
    _ns1__GetZhouQi*                    ns1__GetZhouQi,
    // output parameters:
    _ns1__GetZhouQiResponse            &ns1__GetZhouQiResponse
  );
@endcode

C++ proxy class (defined in soapupdataServiceSoapProxy.h generated with soapcpp2):
@code
  class updataServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapupdataServiceSoapService.h generated with soapcpp2):
@code
  class updataServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetZhouQi SOAP
//gsoap ns1  service method-style:	GetZhouQi document
//gsoap ns1  service method-encoding:	GetZhouQi literal
//gsoap ns1  service method-input-action:	GetZhouQi http://zbxhupdata.com/webservices/GetZhouQi
//gsoap ns1  service method-output-action:	GetZhouQi http://zbxhupdata.com/webservices/GetZhouQiResponse
int __ns1__GetZhouQi(
    _ns1__GetZhouQi*                    ns1__GetZhouQi,	///< Input parameter
    _ns1__GetZhouQiResponse            &ns1__GetZhouQiResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__FlowChartEmf                                                      *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__FlowChartEmf" of service binding "updataServiceSoap".
FlowChart

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.244:190/updataService.asmx

  - Default SOAP action or REST location path:
    - "http://zbxhupdata.com/webservices/FlowChartEmf"

  - Addressing input action: "http://zbxhupdata.com/webservices/FlowChartEmf"

  - Addressing output action: "http://zbxhupdata.com/webservices/FlowChartEmfResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__FlowChartEmf(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__FlowChartEmf*                 ns1__FlowChartEmf,
    // output parameters:
    _ns1__FlowChartEmfResponse         &ns1__FlowChartEmfResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__FlowChartEmf(
    struct soap *soap,
    // input parameters:
    _ns1__FlowChartEmf*                 ns1__FlowChartEmf,
    // output parameters:
    _ns1__FlowChartEmfResponse         &ns1__FlowChartEmfResponse
  );
@endcode

C++ proxy class (defined in soapupdataServiceSoapProxy.h generated with soapcpp2):
@code
  class updataServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapupdataServiceSoapService.h generated with soapcpp2):
@code
  class updataServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	FlowChartEmf SOAP
//gsoap ns1  service method-style:	FlowChartEmf document
//gsoap ns1  service method-encoding:	FlowChartEmf literal
//gsoap ns1  service method-input-action:	FlowChartEmf http://zbxhupdata.com/webservices/FlowChartEmf
//gsoap ns1  service method-output-action:	FlowChartEmf http://zbxhupdata.com/webservices/FlowChartEmfResponse
int __ns1__FlowChartEmf(
    _ns1__FlowChartEmf*                 ns1__FlowChartEmf,	///< Input parameter
    _ns1__FlowChartEmfResponse         &ns1__FlowChartEmfResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__SGCDrawEmf                                                        *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__SGCDrawEmf" of service binding "updataServiceSoap".
SGCDrawing

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.244:190/updataService.asmx

  - Default SOAP action or REST location path:
    - "http://zbxhupdata.com/webservices/SGCDrawEmf"

  - Addressing input action: "http://zbxhupdata.com/webservices/SGCDrawEmf"

  - Addressing output action: "http://zbxhupdata.com/webservices/SGCDrawEmfResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__SGCDrawEmf(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__SGCDrawEmf*                   ns1__SGCDrawEmf,
    // output parameters:
    _ns1__SGCDrawEmfResponse           &ns1__SGCDrawEmfResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__SGCDrawEmf(
    struct soap *soap,
    // input parameters:
    _ns1__SGCDrawEmf*                   ns1__SGCDrawEmf,
    // output parameters:
    _ns1__SGCDrawEmfResponse           &ns1__SGCDrawEmfResponse
  );
@endcode

C++ proxy class (defined in soapupdataServiceSoapProxy.h generated with soapcpp2):
@code
  class updataServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapupdataServiceSoapService.h generated with soapcpp2):
@code
  class updataServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	SGCDrawEmf SOAP
//gsoap ns1  service method-style:	SGCDrawEmf document
//gsoap ns1  service method-encoding:	SGCDrawEmf literal
//gsoap ns1  service method-input-action:	SGCDrawEmf http://zbxhupdata.com/webservices/SGCDrawEmf
//gsoap ns1  service method-output-action:	SGCDrawEmf http://zbxhupdata.com/webservices/SGCDrawEmfResponse
int __ns1__SGCDrawEmf(
    _ns1__SGCDrawEmf*                   ns1__SGCDrawEmf,	///< Input parameter
    _ns1__SGCDrawEmfResponse           &ns1__SGCDrawEmfResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GzGetTypeList                                                     *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GzGetTypeList" of service binding "updataServiceSoap".
360

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.244:190/updataService.asmx

  - Default SOAP action or REST location path:
    - "http://zbxhupdata.com/webservices/GzGetTypeList"

  - Addressing input action: "http://zbxhupdata.com/webservices/GzGetTypeList"

  - Addressing output action: "http://zbxhupdata.com/webservices/GzGetTypeListResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GzGetTypeList(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GzGetTypeList*                ns1__GzGetTypeList,
    // output parameters:
    _ns1__GzGetTypeListResponse        &ns1__GzGetTypeListResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GzGetTypeList(
    struct soap *soap,
    // input parameters:
    _ns1__GzGetTypeList*                ns1__GzGetTypeList,
    // output parameters:
    _ns1__GzGetTypeListResponse        &ns1__GzGetTypeListResponse
  );
@endcode

C++ proxy class (defined in soapupdataServiceSoapProxy.h generated with soapcpp2):
@code
  class updataServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapupdataServiceSoapService.h generated with soapcpp2):
@code
  class updataServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GzGetTypeList SOAP
//gsoap ns1  service method-style:	GzGetTypeList document
//gsoap ns1  service method-encoding:	GzGetTypeList literal
//gsoap ns1  service method-input-action:	GzGetTypeList http://zbxhupdata.com/webservices/GzGetTypeList
//gsoap ns1  service method-output-action:	GzGetTypeList http://zbxhupdata.com/webservices/GzGetTypeListResponse
int __ns1__GzGetTypeList(
    _ns1__GzGetTypeList*                ns1__GzGetTypeList,	///< Input parameter
    _ns1__GzGetTypeListResponse        &ns1__GzGetTypeListResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GzGetDeviceStruct                                                 *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GzGetDeviceStruct" of service binding "updataServiceSoap".
360

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.244:190/updataService.asmx

  - Default SOAP action or REST location path:
    - "http://zbxhupdata.com/webservices/GzGetDeviceStruct"

  - Addressing input action: "http://zbxhupdata.com/webservices/GzGetDeviceStruct"

  - Addressing output action: "http://zbxhupdata.com/webservices/GzGetDeviceStructResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GzGetDeviceStruct(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GzGetDeviceStruct*            ns1__GzGetDeviceStruct,
    // output parameters:
    _ns1__GzGetDeviceStructResponse    &ns1__GzGetDeviceStructResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GzGetDeviceStruct(
    struct soap *soap,
    // input parameters:
    _ns1__GzGetDeviceStruct*            ns1__GzGetDeviceStruct,
    // output parameters:
    _ns1__GzGetDeviceStructResponse    &ns1__GzGetDeviceStructResponse
  );
@endcode

C++ proxy class (defined in soapupdataServiceSoapProxy.h generated with soapcpp2):
@code
  class updataServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapupdataServiceSoapService.h generated with soapcpp2):
@code
  class updataServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GzGetDeviceStruct SOAP
//gsoap ns1  service method-style:	GzGetDeviceStruct document
//gsoap ns1  service method-encoding:	GzGetDeviceStruct literal
//gsoap ns1  service method-input-action:	GzGetDeviceStruct http://zbxhupdata.com/webservices/GzGetDeviceStruct
//gsoap ns1  service method-output-action:	GzGetDeviceStruct http://zbxhupdata.com/webservices/GzGetDeviceStructResponse
int __ns1__GzGetDeviceStruct(
    _ns1__GzGetDeviceStruct*            ns1__GzGetDeviceStruct,	///< Input parameter
    _ns1__GzGetDeviceStructResponse    &ns1__GzGetDeviceStructResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__SaveMapFile                                                       *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__SaveMapFile" of service binding "updataServiceSoap".


  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.244:190/updataService.asmx

  - Default SOAP action or REST location path:
    - "http://zbxhupdata.com/webservices/SaveMapFile"

  - Addressing input action: "http://zbxhupdata.com/webservices/SaveMapFile"

  - Addressing output action: "http://zbxhupdata.com/webservices/SaveMapFileResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__SaveMapFile(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__SaveMapFile*                  ns1__SaveMapFile,
    // output parameters:
    _ns1__SaveMapFileResponse          &ns1__SaveMapFileResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__SaveMapFile(
    struct soap *soap,
    // input parameters:
    _ns1__SaveMapFile*                  ns1__SaveMapFile,
    // output parameters:
    _ns1__SaveMapFileResponse          &ns1__SaveMapFileResponse
  );
@endcode

C++ proxy class (defined in soapupdataServiceSoapProxy.h generated with soapcpp2):
@code
  class updataServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapupdataServiceSoapService.h generated with soapcpp2):
@code
  class updataServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	SaveMapFile SOAP
//gsoap ns1  service method-style:	SaveMapFile document
//gsoap ns1  service method-encoding:	SaveMapFile literal
//gsoap ns1  service method-input-action:	SaveMapFile http://zbxhupdata.com/webservices/SaveMapFile
//gsoap ns1  service method-output-action:	SaveMapFile http://zbxhupdata.com/webservices/SaveMapFileResponse
int __ns1__SaveMapFile(
    _ns1__SaveMapFile*                  ns1__SaveMapFile,	///< Input parameter
    _ns1__SaveMapFileResponse          &ns1__SaveMapFileResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__SelectYjzhStation                                                 *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__SelectYjzhStation" of service binding "updataServiceSoap".
,

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.244:190/updataService.asmx

  - Default SOAP action or REST location path:
    - "http://zbxhupdata.com/webservices/SelectYjzhStation"

  - Addressing input action: "http://zbxhupdata.com/webservices/SelectYjzhStation"

  - Addressing output action: "http://zbxhupdata.com/webservices/SelectYjzhStationResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__SelectYjzhStation(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__SelectYjzhStation*            ns1__SelectYjzhStation,
    // output parameters:
    _ns1__SelectYjzhStationResponse    &ns1__SelectYjzhStationResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__SelectYjzhStation(
    struct soap *soap,
    // input parameters:
    _ns1__SelectYjzhStation*            ns1__SelectYjzhStation,
    // output parameters:
    _ns1__SelectYjzhStationResponse    &ns1__SelectYjzhStationResponse
  );
@endcode

C++ proxy class (defined in soapupdataServiceSoapProxy.h generated with soapcpp2):
@code
  class updataServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapupdataServiceSoapService.h generated with soapcpp2):
@code
  class updataServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	SelectYjzhStation SOAP
//gsoap ns1  service method-style:	SelectYjzhStation document
//gsoap ns1  service method-encoding:	SelectYjzhStation literal
//gsoap ns1  service method-input-action:	SelectYjzhStation http://zbxhupdata.com/webservices/SelectYjzhStation
//gsoap ns1  service method-output-action:	SelectYjzhStation http://zbxhupdata.com/webservices/SelectYjzhStationResponse
int __ns1__SelectYjzhStation(
    _ns1__SelectYjzhStation*            ns1__SelectYjzhStation,	///< Input parameter
    _ns1__SelectYjzhStationResponse    &ns1__SelectYjzhStationResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__SelectYjzhDevice                                                  *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__SelectYjzhDevice" of service binding "updataServiceSoap".
,typeid

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.244:190/updataService.asmx

  - Default SOAP action or REST location path:
    - "http://zbxhupdata.com/webservices/SelectYjzhDevice"

  - Addressing input action: "http://zbxhupdata.com/webservices/SelectYjzhDevice"

  - Addressing output action: "http://zbxhupdata.com/webservices/SelectYjzhDeviceResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__SelectYjzhDevice(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__SelectYjzhDevice*             ns1__SelectYjzhDevice,
    // output parameters:
    _ns1__SelectYjzhDeviceResponse     &ns1__SelectYjzhDeviceResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__SelectYjzhDevice(
    struct soap *soap,
    // input parameters:
    _ns1__SelectYjzhDevice*             ns1__SelectYjzhDevice,
    // output parameters:
    _ns1__SelectYjzhDeviceResponse     &ns1__SelectYjzhDeviceResponse
  );
@endcode

C++ proxy class (defined in soapupdataServiceSoapProxy.h generated with soapcpp2):
@code
  class updataServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapupdataServiceSoapService.h generated with soapcpp2):
@code
  class updataServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	SelectYjzhDevice SOAP
//gsoap ns1  service method-style:	SelectYjzhDevice document
//gsoap ns1  service method-encoding:	SelectYjzhDevice literal
//gsoap ns1  service method-input-action:	SelectYjzhDevice http://zbxhupdata.com/webservices/SelectYjzhDevice
//gsoap ns1  service method-output-action:	SelectYjzhDevice http://zbxhupdata.com/webservices/SelectYjzhDeviceResponse
int __ns1__SelectYjzhDevice(
    _ns1__SelectYjzhDevice*             ns1__SelectYjzhDevice,	///< Input parameter
    _ns1__SelectYjzhDeviceResponse     &ns1__SelectYjzhDeviceResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetYjzhZskAlarmTypes                                              *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetYjzhZskAlarmTypes" of service binding "updataServiceSoap".
1

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.244:190/updataService.asmx

  - Default SOAP action or REST location path:
    - "http://zbxhupdata.com/webservices/GetYjzhZskAlarmTypes"

  - Addressing input action: "http://zbxhupdata.com/webservices/GetYjzhZskAlarmTypes"

  - Addressing output action: "http://zbxhupdata.com/webservices/GetYjzhZskAlarmTypesResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetYjzhZskAlarmTypes(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetYjzhZskAlarmTypes*         ns1__GetYjzhZskAlarmTypes,
    // output parameters:
    _ns1__GetYjzhZskAlarmTypesResponse &ns1__GetYjzhZskAlarmTypesResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetYjzhZskAlarmTypes(
    struct soap *soap,
    // input parameters:
    _ns1__GetYjzhZskAlarmTypes*         ns1__GetYjzhZskAlarmTypes,
    // output parameters:
    _ns1__GetYjzhZskAlarmTypesResponse &ns1__GetYjzhZskAlarmTypesResponse
  );
@endcode

C++ proxy class (defined in soapupdataServiceSoapProxy.h generated with soapcpp2):
@code
  class updataServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapupdataServiceSoapService.h generated with soapcpp2):
@code
  class updataServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetYjzhZskAlarmTypes SOAP
//gsoap ns1  service method-style:	GetYjzhZskAlarmTypes document
//gsoap ns1  service method-encoding:	GetYjzhZskAlarmTypes literal
//gsoap ns1  service method-input-action:	GetYjzhZskAlarmTypes http://zbxhupdata.com/webservices/GetYjzhZskAlarmTypes
//gsoap ns1  service method-output-action:	GetYjzhZskAlarmTypes http://zbxhupdata.com/webservices/GetYjzhZskAlarmTypesResponse
int __ns1__GetYjzhZskAlarmTypes(
    _ns1__GetYjzhZskAlarmTypes*         ns1__GetYjzhZskAlarmTypes,	///< Input parameter
    _ns1__GetYjzhZskAlarmTypesResponse &ns1__GetYjzhZskAlarmTypesResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetYjzhZskGzFlow_                                                 *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetYjzhZskGzFlow_" of service binding "updataServiceSoap".
2

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.244:190/updataService.asmx

  - Default SOAP action or REST location path:
    - "http://zbxhupdata.com/webservices/GetYjzhZskGzFlow"

  - Addressing input action: "http://zbxhupdata.com/webservices/GetYjzhZskGzFlow"

  - Addressing output action: "http://zbxhupdata.com/webservices/GetYjzhZskGzFlowResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetYjzhZskGzFlow_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetYjzhZskGzFlow*             ns1__GetYjzhZskGzFlow,
    // output parameters:
    _ns1__GetYjzhZskGzFlowResponse     &ns1__GetYjzhZskGzFlowResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetYjzhZskGzFlow_(
    struct soap *soap,
    // input parameters:
    _ns1__GetYjzhZskGzFlow*             ns1__GetYjzhZskGzFlow,
    // output parameters:
    _ns1__GetYjzhZskGzFlowResponse     &ns1__GetYjzhZskGzFlowResponse
  );
@endcode

C++ proxy class (defined in soapupdataServiceSoapProxy.h generated with soapcpp2):
@code
  class updataServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapupdataServiceSoapService.h generated with soapcpp2):
@code
  class updataServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetYjzhZskGzFlow_ SOAP
//gsoap ns1  service method-style:	GetYjzhZskGzFlow_ document
//gsoap ns1  service method-encoding:	GetYjzhZskGzFlow_ literal
//gsoap ns1  service method-input-action:	GetYjzhZskGzFlow_ http://zbxhupdata.com/webservices/GetYjzhZskGzFlow
//gsoap ns1  service method-output-action:	GetYjzhZskGzFlow_ http://zbxhupdata.com/webservices/GetYjzhZskGzFlowResponse
int __ns1__GetYjzhZskGzFlow_(
    _ns1__GetYjzhZskGzFlow*             ns1__GetYjzhZskGzFlow,	///< Input parameter
    _ns1__GetYjzhZskGzFlowResponse     &ns1__GetYjzhZskGzFlowResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetYjzhZskOtherFlowChartList_                                     *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetYjzhZskOtherFlowChartList_" of service binding "updataServiceSoap".
3

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.244:190/updataService.asmx

  - Default SOAP action or REST location path:
    - "http://zbxhupdata.com/webservices/GetYjzhZskOtherFlowChartList"

  - Addressing input action: "http://zbxhupdata.com/webservices/GetYjzhZskOtherFlowChartList"

  - Addressing output action: "http://zbxhupdata.com/webservices/GetYjzhZskOtherFlowChartListResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetYjzhZskOtherFlowChartList_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetYjzhZskOtherFlowChartList* ns1__GetYjzhZskOtherFlowChartList,
    // output parameters:
    _ns1__GetYjzhZskOtherFlowChartListResponse&ns1__GetYjzhZskOtherFlowChartListResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetYjzhZskOtherFlowChartList_(
    struct soap *soap,
    // input parameters:
    _ns1__GetYjzhZskOtherFlowChartList* ns1__GetYjzhZskOtherFlowChartList,
    // output parameters:
    _ns1__GetYjzhZskOtherFlowChartListResponse&ns1__GetYjzhZskOtherFlowChartListResponse
  );
@endcode

C++ proxy class (defined in soapupdataServiceSoapProxy.h generated with soapcpp2):
@code
  class updataServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapupdataServiceSoapService.h generated with soapcpp2):
@code
  class updataServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetYjzhZskOtherFlowChartList_ SOAP
//gsoap ns1  service method-style:	GetYjzhZskOtherFlowChartList_ document
//gsoap ns1  service method-encoding:	GetYjzhZskOtherFlowChartList_ literal
//gsoap ns1  service method-input-action:	GetYjzhZskOtherFlowChartList_ http://zbxhupdata.com/webservices/GetYjzhZskOtherFlowChartList
//gsoap ns1  service method-output-action:	GetYjzhZskOtherFlowChartList_ http://zbxhupdata.com/webservices/GetYjzhZskOtherFlowChartListResponse
int __ns1__GetYjzhZskOtherFlowChartList_(
    _ns1__GetYjzhZskOtherFlowChartList* ns1__GetYjzhZskOtherFlowChartList,	///< Input parameter
    _ns1__GetYjzhZskOtherFlowChartListResponse&ns1__GetYjzhZskOtherFlowChartListResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetYjzhZskDevFlowChartList_                                       *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetYjzhZskDevFlowChartList_" of service binding "updataServiceSoap".
4

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.244:190/updataService.asmx

  - Default SOAP action or REST location path:
    - "http://zbxhupdata.com/webservices/GetYjzhZskDevFlowChartList"

  - Addressing input action: "http://zbxhupdata.com/webservices/GetYjzhZskDevFlowChartList"

  - Addressing output action: "http://zbxhupdata.com/webservices/GetYjzhZskDevFlowChartListResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetYjzhZskDevFlowChartList_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetYjzhZskDevFlowChartList*   ns1__GetYjzhZskDevFlowChartList,
    // output parameters:
    _ns1__GetYjzhZskDevFlowChartListResponse&ns1__GetYjzhZskDevFlowChartListResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetYjzhZskDevFlowChartList_(
    struct soap *soap,
    // input parameters:
    _ns1__GetYjzhZskDevFlowChartList*   ns1__GetYjzhZskDevFlowChartList,
    // output parameters:
    _ns1__GetYjzhZskDevFlowChartListResponse&ns1__GetYjzhZskDevFlowChartListResponse
  );
@endcode

C++ proxy class (defined in soapupdataServiceSoapProxy.h generated with soapcpp2):
@code
  class updataServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapupdataServiceSoapService.h generated with soapcpp2):
@code
  class updataServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetYjzhZskDevFlowChartList_ SOAP
//gsoap ns1  service method-style:	GetYjzhZskDevFlowChartList_ document
//gsoap ns1  service method-encoding:	GetYjzhZskDevFlowChartList_ literal
//gsoap ns1  service method-input-action:	GetYjzhZskDevFlowChartList_ http://zbxhupdata.com/webservices/GetYjzhZskDevFlowChartList
//gsoap ns1  service method-output-action:	GetYjzhZskDevFlowChartList_ http://zbxhupdata.com/webservices/GetYjzhZskDevFlowChartListResponse
int __ns1__GetYjzhZskDevFlowChartList_(
    _ns1__GetYjzhZskDevFlowChartList*   ns1__GetYjzhZskDevFlowChartList,	///< Input parameter
    _ns1__GetYjzhZskDevFlowChartListResponse&ns1__GetYjzhZskDevFlowChartListResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetPropList_                                                      *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetPropList_" of service binding "updataServiceSoap".


  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.244:190/updataService.asmx

  - Default SOAP action or REST location path:
    - "http://zbxhupdata.com/webservices/GetPropList"

  - Addressing input action: "http://zbxhupdata.com/webservices/GetPropList"

  - Addressing output action: "http://zbxhupdata.com/webservices/GetPropListResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetPropList_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetPropList*                  ns1__GetPropList,
    // output parameters:
    _ns1__GetPropListResponse          &ns1__GetPropListResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetPropList_(
    struct soap *soap,
    // input parameters:
    _ns1__GetPropList*                  ns1__GetPropList,
    // output parameters:
    _ns1__GetPropListResponse          &ns1__GetPropListResponse
  );
@endcode

C++ proxy class (defined in soapupdataServiceSoapProxy.h generated with soapcpp2):
@code
  class updataServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapupdataServiceSoapService.h generated with soapcpp2):
@code
  class updataServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetPropList_ SOAP
//gsoap ns1  service method-style:	GetPropList_ document
//gsoap ns1  service method-encoding:	GetPropList_ literal
//gsoap ns1  service method-input-action:	GetPropList_ http://zbxhupdata.com/webservices/GetPropList
//gsoap ns1  service method-output-action:	GetPropList_ http://zbxhupdata.com/webservices/GetPropListResponse
int __ns1__GetPropList_(
    _ns1__GetPropList*                  ns1__GetPropList,	///< Input parameter
    _ns1__GetPropListResponse          &ns1__GetPropListResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetPropName_                                                      *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetPropName_" of service binding "updataServiceSoap".


  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.244:190/updataService.asmx

  - Default SOAP action or REST location path:
    - "http://zbxhupdata.com/webservices/GetPropName"

  - Addressing input action: "http://zbxhupdata.com/webservices/GetPropName"

  - Addressing output action: "http://zbxhupdata.com/webservices/GetPropNameResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetPropName_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetPropName*                  ns1__GetPropName,
    // output parameters:
    _ns1__GetPropNameResponse          &ns1__GetPropNameResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetPropName_(
    struct soap *soap,
    // input parameters:
    _ns1__GetPropName*                  ns1__GetPropName,
    // output parameters:
    _ns1__GetPropNameResponse          &ns1__GetPropNameResponse
  );
@endcode

C++ proxy class (defined in soapupdataServiceSoapProxy.h generated with soapcpp2):
@code
  class updataServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapupdataServiceSoapService.h generated with soapcpp2):
@code
  class updataServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetPropName_ SOAP
//gsoap ns1  service method-style:	GetPropName_ document
//gsoap ns1  service method-encoding:	GetPropName_ literal
//gsoap ns1  service method-input-action:	GetPropName_ http://zbxhupdata.com/webservices/GetPropName
//gsoap ns1  service method-output-action:	GetPropName_ http://zbxhupdata.com/webservices/GetPropNameResponse
int __ns1__GetPropName_(
    _ns1__GetPropName*                  ns1__GetPropName,	///< Input parameter
    _ns1__GetPropNameResponse          &ns1__GetPropNameResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__CheckLoginUser_                                                   *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__CheckLoginUser_" of service binding "updataServiceSoap".


  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.244:190/updataService.asmx

  - Default SOAP action or REST location path:
    - "http://zbxhupdata.com/webservices/CheckLoginUser"

  - Addressing input action: "http://zbxhupdata.com/webservices/CheckLoginUser"

  - Addressing output action: "http://zbxhupdata.com/webservices/CheckLoginUserResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__CheckLoginUser_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__CheckLoginUser*               ns1__CheckLoginUser,
    // output parameters:
    _ns1__CheckLoginUserResponse       &ns1__CheckLoginUserResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__CheckLoginUser_(
    struct soap *soap,
    // input parameters:
    _ns1__CheckLoginUser*               ns1__CheckLoginUser,
    // output parameters:
    _ns1__CheckLoginUserResponse       &ns1__CheckLoginUserResponse
  );
@endcode

C++ proxy class (defined in soapupdataServiceSoapProxy.h generated with soapcpp2):
@code
  class updataServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapupdataServiceSoapService.h generated with soapcpp2):
@code
  class updataServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	CheckLoginUser_ SOAP
//gsoap ns1  service method-style:	CheckLoginUser_ document
//gsoap ns1  service method-encoding:	CheckLoginUser_ literal
//gsoap ns1  service method-input-action:	CheckLoginUser_ http://zbxhupdata.com/webservices/CheckLoginUser
//gsoap ns1  service method-output-action:	CheckLoginUser_ http://zbxhupdata.com/webservices/CheckLoginUserResponse
int __ns1__CheckLoginUser_(
    _ns1__CheckLoginUser*               ns1__CheckLoginUser,	///< Input parameter
    _ns1__CheckLoginUserResponse       &ns1__CheckLoginUserResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetRyUnit_                                                        *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetRyUnit_" of service binding "updataServiceSoap".


  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.244:190/updataService.asmx

  - Default SOAP action or REST location path:
    - "http://zbxhupdata.com/webservices/GetRyUnit"

  - Addressing input action: "http://zbxhupdata.com/webservices/GetRyUnit"

  - Addressing output action: "http://zbxhupdata.com/webservices/GetRyUnitResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetRyUnit_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetRyUnit*                    ns1__GetRyUnit,
    // output parameters:
    _ns1__GetRyUnitResponse            &ns1__GetRyUnitResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetRyUnit_(
    struct soap *soap,
    // input parameters:
    _ns1__GetRyUnit*                    ns1__GetRyUnit,
    // output parameters:
    _ns1__GetRyUnitResponse            &ns1__GetRyUnitResponse
  );
@endcode

C++ proxy class (defined in soapupdataServiceSoapProxy.h generated with soapcpp2):
@code
  class updataServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapupdataServiceSoapService.h generated with soapcpp2):
@code
  class updataServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetRyUnit_ SOAP
//gsoap ns1  service method-style:	GetRyUnit_ document
//gsoap ns1  service method-encoding:	GetRyUnit_ literal
//gsoap ns1  service method-input-action:	GetRyUnit_ http://zbxhupdata.com/webservices/GetRyUnit
//gsoap ns1  service method-output-action:	GetRyUnit_ http://zbxhupdata.com/webservices/GetRyUnitResponse
int __ns1__GetRyUnit_(
    _ns1__GetRyUnit*                    ns1__GetRyUnit,	///< Input parameter
    _ns1__GetRyUnitResponse            &ns1__GetRyUnitResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetDevCode_                                                       *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetDevCode_" of service binding "updataServiceSoap".


  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.244:190/updataService.asmx

  - Default SOAP action or REST location path:
    - "http://zbxhupdata.com/webservices/GetDevCode"

  - Addressing input action: "http://zbxhupdata.com/webservices/GetDevCode"

  - Addressing output action: "http://zbxhupdata.com/webservices/GetDevCodeResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetDevCode_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetDevCode*                   ns1__GetDevCode,
    // output parameters:
    _ns1__GetDevCodeResponse           &ns1__GetDevCodeResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetDevCode_(
    struct soap *soap,
    // input parameters:
    _ns1__GetDevCode*                   ns1__GetDevCode,
    // output parameters:
    _ns1__GetDevCodeResponse           &ns1__GetDevCodeResponse
  );
@endcode

C++ proxy class (defined in soapupdataServiceSoapProxy.h generated with soapcpp2):
@code
  class updataServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapupdataServiceSoapService.h generated with soapcpp2):
@code
  class updataServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetDevCode_ SOAP
//gsoap ns1  service method-style:	GetDevCode_ document
//gsoap ns1  service method-encoding:	GetDevCode_ literal
//gsoap ns1  service method-input-action:	GetDevCode_ http://zbxhupdata.com/webservices/GetDevCode
//gsoap ns1  service method-output-action:	GetDevCode_ http://zbxhupdata.com/webservices/GetDevCodeResponse
int __ns1__GetDevCode_(
    _ns1__GetDevCode*                   ns1__GetDevCode,	///< Input parameter
    _ns1__GetDevCodeResponse           &ns1__GetDevCodeResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__CheckDevCode_                                                     *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__CheckDevCode_" of service binding "updataServiceSoap".


  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.244:190/updataService.asmx

  - Default SOAP action or REST location path:
    - "http://zbxhupdata.com/webservices/CheckDevCode"

  - Addressing input action: "http://zbxhupdata.com/webservices/CheckDevCode"

  - Addressing output action: "http://zbxhupdata.com/webservices/CheckDevCodeResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__CheckDevCode_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__CheckDevCode*                 ns1__CheckDevCode,
    // output parameters:
    _ns1__CheckDevCodeResponse         &ns1__CheckDevCodeResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__CheckDevCode_(
    struct soap *soap,
    // input parameters:
    _ns1__CheckDevCode*                 ns1__CheckDevCode,
    // output parameters:
    _ns1__CheckDevCodeResponse         &ns1__CheckDevCodeResponse
  );
@endcode

C++ proxy class (defined in soapupdataServiceSoapProxy.h generated with soapcpp2):
@code
  class updataServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapupdataServiceSoapService.h generated with soapcpp2):
@code
  class updataServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	CheckDevCode_ SOAP
//gsoap ns1  service method-style:	CheckDevCode_ document
//gsoap ns1  service method-encoding:	CheckDevCode_ literal
//gsoap ns1  service method-input-action:	CheckDevCode_ http://zbxhupdata.com/webservices/CheckDevCode
//gsoap ns1  service method-output-action:	CheckDevCode_ http://zbxhupdata.com/webservices/CheckDevCodeResponse
int __ns1__CheckDevCode_(
    _ns1__CheckDevCode*                 ns1__CheckDevCode,	///< Input parameter
    _ns1__CheckDevCodeResponse         &ns1__CheckDevCodeResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__HelloWorld_                                                       *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__HelloWorld_" of service binding "updataServiceSoap".


  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.244:190/updataService.asmx

  - Default SOAP action or REST location path:
    - "http://zbxhupdata.com/webservices/HelloWorld"

  - Addressing input action: "http://zbxhupdata.com/webservices/HelloWorld"

  - Addressing output action: "http://zbxhupdata.com/webservices/HelloWorldResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__HelloWorld_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__HelloWorld*                   ns1__HelloWorld,
    // output parameters:
    _ns1__HelloWorldResponse           &ns1__HelloWorldResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__HelloWorld_(
    struct soap *soap,
    // input parameters:
    _ns1__HelloWorld*                   ns1__HelloWorld,
    // output parameters:
    _ns1__HelloWorldResponse           &ns1__HelloWorldResponse
  );
@endcode

C++ proxy class (defined in soapupdataServiceSoapProxy.h generated with soapcpp2):
@code
  class updataServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapupdataServiceSoapService.h generated with soapcpp2):
@code
  class updataServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	HelloWorld_ SOAP
//gsoap ns1  service method-style:	HelloWorld_ document
//gsoap ns1  service method-encoding:	HelloWorld_ literal
//gsoap ns1  service method-input-action:	HelloWorld_ http://zbxhupdata.com/webservices/HelloWorld
//gsoap ns1  service method-output-action:	HelloWorld_ http://zbxhupdata.com/webservices/HelloWorldResponse
int __ns1__HelloWorld_(
    _ns1__HelloWorld*                   ns1__HelloWorld,	///< Input parameter
    _ns1__HelloWorldResponse           &ns1__HelloWorldResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetDBString_                                                      *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetDBString_" of service binding "updataServiceSoap".


  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.244:190/updataService.asmx

  - Default SOAP action or REST location path:
    - "http://zbxhupdata.com/webservices/GetDBString"

  - Addressing input action: "http://zbxhupdata.com/webservices/GetDBString"

  - Addressing output action: "http://zbxhupdata.com/webservices/GetDBStringResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetDBString_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetDBString*                  ns1__GetDBString,
    // output parameters:
    _ns1__GetDBStringResponse          &ns1__GetDBStringResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetDBString_(
    struct soap *soap,
    // input parameters:
    _ns1__GetDBString*                  ns1__GetDBString,
    // output parameters:
    _ns1__GetDBStringResponse          &ns1__GetDBStringResponse
  );
@endcode

C++ proxy class (defined in soapupdataServiceSoapProxy.h generated with soapcpp2):
@code
  class updataServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapupdataServiceSoapService.h generated with soapcpp2):
@code
  class updataServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetDBString_ SOAP
//gsoap ns1  service method-style:	GetDBString_ document
//gsoap ns1  service method-encoding:	GetDBString_ literal
//gsoap ns1  service method-input-action:	GetDBString_ http://zbxhupdata.com/webservices/GetDBString
//gsoap ns1  service method-output-action:	GetDBString_ http://zbxhupdata.com/webservices/GetDBStringResponse
int __ns1__GetDBString_(
    _ns1__GetDBString*                  ns1__GetDBString,	///< Input parameter
    _ns1__GetDBStringResponse          &ns1__GetDBStringResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__QueryData_                                                        *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__QueryData_" of service binding "updataServiceSoap".


  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.244:190/updataService.asmx

  - Default SOAP action or REST location path:
    - "http://zbxhupdata.com/webservices/QueryData"

  - Addressing input action: "http://zbxhupdata.com/webservices/QueryData"

  - Addressing output action: "http://zbxhupdata.com/webservices/QueryDataResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__QueryData_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__QueryData*                    ns1__QueryData,
    // output parameters:
    _ns1__QueryDataResponse            &ns1__QueryDataResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__QueryData_(
    struct soap *soap,
    // input parameters:
    _ns1__QueryData*                    ns1__QueryData,
    // output parameters:
    _ns1__QueryDataResponse            &ns1__QueryDataResponse
  );
@endcode

C++ proxy class (defined in soapupdataServiceSoapProxy.h generated with soapcpp2):
@code
  class updataServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapupdataServiceSoapService.h generated with soapcpp2):
@code
  class updataServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	QueryData_ SOAP
//gsoap ns1  service method-style:	QueryData_ document
//gsoap ns1  service method-encoding:	QueryData_ literal
//gsoap ns1  service method-input-action:	QueryData_ http://zbxhupdata.com/webservices/QueryData
//gsoap ns1  service method-output-action:	QueryData_ http://zbxhupdata.com/webservices/QueryDataResponse
int __ns1__QueryData_(
    _ns1__QueryData*                    ns1__QueryData,	///< Input parameter
    _ns1__QueryDataResponse            &ns1__QueryDataResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__QueryDataCount_                                                   *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__QueryDataCount_" of service binding "updataServiceSoap".
 

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.244:190/updataService.asmx

  - Default SOAP action or REST location path:
    - "http://zbxhupdata.com/webservices/QueryDataCount"

  - Addressing input action: "http://zbxhupdata.com/webservices/QueryDataCount"

  - Addressing output action: "http://zbxhupdata.com/webservices/QueryDataCountResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__QueryDataCount_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__QueryDataCount*               ns1__QueryDataCount,
    // output parameters:
    _ns1__QueryDataCountResponse       &ns1__QueryDataCountResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__QueryDataCount_(
    struct soap *soap,
    // input parameters:
    _ns1__QueryDataCount*               ns1__QueryDataCount,
    // output parameters:
    _ns1__QueryDataCountResponse       &ns1__QueryDataCountResponse
  );
@endcode

C++ proxy class (defined in soapupdataServiceSoapProxy.h generated with soapcpp2):
@code
  class updataServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapupdataServiceSoapService.h generated with soapcpp2):
@code
  class updataServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	QueryDataCount_ SOAP
//gsoap ns1  service method-style:	QueryDataCount_ document
//gsoap ns1  service method-encoding:	QueryDataCount_ literal
//gsoap ns1  service method-input-action:	QueryDataCount_ http://zbxhupdata.com/webservices/QueryDataCount
//gsoap ns1  service method-output-action:	QueryDataCount_ http://zbxhupdata.com/webservices/QueryDataCountResponse
int __ns1__QueryDataCount_(
    _ns1__QueryDataCount*               ns1__QueryDataCount,	///< Input parameter
    _ns1__QueryDataCountResponse       &ns1__QueryDataCountResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__ExecuteSql_                                                       *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__ExecuteSql_" of service binding "updataServiceSoap".
sql

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.244:190/updataService.asmx

  - Default SOAP action or REST location path:
    - "http://zbxhupdata.com/webservices/ExecuteSql"

  - Addressing input action: "http://zbxhupdata.com/webservices/ExecuteSql"

  - Addressing output action: "http://zbxhupdata.com/webservices/ExecuteSqlResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__ExecuteSql_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__ExecuteSql*                   ns1__ExecuteSql,
    // output parameters:
    _ns1__ExecuteSqlResponse           &ns1__ExecuteSqlResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__ExecuteSql_(
    struct soap *soap,
    // input parameters:
    _ns1__ExecuteSql*                   ns1__ExecuteSql,
    // output parameters:
    _ns1__ExecuteSqlResponse           &ns1__ExecuteSqlResponse
  );
@endcode

C++ proxy class (defined in soapupdataServiceSoapProxy.h generated with soapcpp2):
@code
  class updataServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapupdataServiceSoapService.h generated with soapcpp2):
@code
  class updataServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	ExecuteSql_ SOAP
//gsoap ns1  service method-style:	ExecuteSql_ document
//gsoap ns1  service method-encoding:	ExecuteSql_ literal
//gsoap ns1  service method-input-action:	ExecuteSql_ http://zbxhupdata.com/webservices/ExecuteSql
//gsoap ns1  service method-output-action:	ExecuteSql_ http://zbxhupdata.com/webservices/ExecuteSqlResponse
int __ns1__ExecuteSql_(
    _ns1__ExecuteSql*                   ns1__ExecuteSql,	///< Input parameter
    _ns1__ExecuteSqlResponse           &ns1__ExecuteSqlResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__SaveData_                                                         *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__SaveData_" of service binding "updataServiceSoap".


  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.244:190/updataService.asmx

  - Default SOAP action or REST location path:
    - "http://zbxhupdata.com/webservices/SaveData"

  - Addressing input action: "http://zbxhupdata.com/webservices/SaveData"

  - Addressing output action: "http://zbxhupdata.com/webservices/SaveDataResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__SaveData_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__SaveData*                     ns1__SaveData,
    // output parameters:
    _ns1__SaveDataResponse             &ns1__SaveDataResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__SaveData_(
    struct soap *soap,
    // input parameters:
    _ns1__SaveData*                     ns1__SaveData,
    // output parameters:
    _ns1__SaveDataResponse             &ns1__SaveDataResponse
  );
@endcode

C++ proxy class (defined in soapupdataServiceSoapProxy.h generated with soapcpp2):
@code
  class updataServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapupdataServiceSoapService.h generated with soapcpp2):
@code
  class updataServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	SaveData_ SOAP
//gsoap ns1  service method-style:	SaveData_ document
//gsoap ns1  service method-encoding:	SaveData_ literal
//gsoap ns1  service method-input-action:	SaveData_ http://zbxhupdata.com/webservices/SaveData
//gsoap ns1  service method-output-action:	SaveData_ http://zbxhupdata.com/webservices/SaveDataResponse
int __ns1__SaveData_(
    _ns1__SaveData*                     ns1__SaveData,	///< Input parameter
    _ns1__SaveDataResponse             &ns1__SaveDataResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__SaveFileData_                                                     *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__SaveFileData_" of service binding "updataServiceSoap".
 

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.244:190/updataService.asmx

  - Default SOAP action or REST location path:
    - "http://zbxhupdata.com/webservices/SaveFileData"

  - Addressing input action: "http://zbxhupdata.com/webservices/SaveFileData"

  - Addressing output action: "http://zbxhupdata.com/webservices/SaveFileDataResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__SaveFileData_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__SaveFileData*                 ns1__SaveFileData,
    // output parameters:
    _ns1__SaveFileDataResponse         &ns1__SaveFileDataResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__SaveFileData_(
    struct soap *soap,
    // input parameters:
    _ns1__SaveFileData*                 ns1__SaveFileData,
    // output parameters:
    _ns1__SaveFileDataResponse         &ns1__SaveFileDataResponse
  );
@endcode

C++ proxy class (defined in soapupdataServiceSoapProxy.h generated with soapcpp2):
@code
  class updataServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapupdataServiceSoapService.h generated with soapcpp2):
@code
  class updataServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	SaveFileData_ SOAP
//gsoap ns1  service method-style:	SaveFileData_ document
//gsoap ns1  service method-encoding:	SaveFileData_ literal
//gsoap ns1  service method-input-action:	SaveFileData_ http://zbxhupdata.com/webservices/SaveFileData
//gsoap ns1  service method-output-action:	SaveFileData_ http://zbxhupdata.com/webservices/SaveFileDataResponse
int __ns1__SaveFileData_(
    _ns1__SaveFileData*                 ns1__SaveFileData,	///< Input parameter
    _ns1__SaveFileDataResponse         &ns1__SaveFileDataResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__DownPic_                                                          *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__DownPic_" of service binding "updataServiceSoap".
 

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.244:190/updataService.asmx

  - Default SOAP action or REST location path:
    - "http://zbxhupdata.com/webservices/DownPic"

  - Addressing input action: "http://zbxhupdata.com/webservices/DownPic"

  - Addressing output action: "http://zbxhupdata.com/webservices/DownPicResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__DownPic_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__DownPic*                      ns1__DownPic,
    // output parameters:
    _ns1__DownPicResponse              &ns1__DownPicResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__DownPic_(
    struct soap *soap,
    // input parameters:
    _ns1__DownPic*                      ns1__DownPic,
    // output parameters:
    _ns1__DownPicResponse              &ns1__DownPicResponse
  );
@endcode

C++ proxy class (defined in soapupdataServiceSoapProxy.h generated with soapcpp2):
@code
  class updataServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapupdataServiceSoapService.h generated with soapcpp2):
@code
  class updataServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	DownPic_ SOAP
//gsoap ns1  service method-style:	DownPic_ document
//gsoap ns1  service method-encoding:	DownPic_ literal
//gsoap ns1  service method-input-action:	DownPic_ http://zbxhupdata.com/webservices/DownPic
//gsoap ns1  service method-output-action:	DownPic_ http://zbxhupdata.com/webservices/DownPicResponse
int __ns1__DownPic_(
    _ns1__DownPic*                      ns1__DownPic,	///< Input parameter
    _ns1__DownPicResponse              &ns1__DownPicResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__DownAllPic_                                                       *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__DownAllPic_" of service binding "updataServiceSoap".
 

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.244:190/updataService.asmx

  - Default SOAP action or REST location path:
    - "http://zbxhupdata.com/webservices/DownAllPic"

  - Addressing input action: "http://zbxhupdata.com/webservices/DownAllPic"

  - Addressing output action: "http://zbxhupdata.com/webservices/DownAllPicResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__DownAllPic_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__DownAllPic*                   ns1__DownAllPic,
    // output parameters:
    _ns1__DownAllPicResponse           &ns1__DownAllPicResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__DownAllPic_(
    struct soap *soap,
    // input parameters:
    _ns1__DownAllPic*                   ns1__DownAllPic,
    // output parameters:
    _ns1__DownAllPicResponse           &ns1__DownAllPicResponse
  );
@endcode

C++ proxy class (defined in soapupdataServiceSoapProxy.h generated with soapcpp2):
@code
  class updataServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapupdataServiceSoapService.h generated with soapcpp2):
@code
  class updataServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	DownAllPic_ SOAP
//gsoap ns1  service method-style:	DownAllPic_ document
//gsoap ns1  service method-encoding:	DownAllPic_ literal
//gsoap ns1  service method-input-action:	DownAllPic_ http://zbxhupdata.com/webservices/DownAllPic
//gsoap ns1  service method-output-action:	DownAllPic_ http://zbxhupdata.com/webservices/DownAllPicResponse
int __ns1__DownAllPic_(
    _ns1__DownAllPic*                   ns1__DownAllPic,	///< Input parameter
    _ns1__DownAllPicResponse           &ns1__DownAllPicResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetGxdataUpTime_                                                  *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetGxdataUpTime_" of service binding "updataServiceSoap".


  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.244:190/updataService.asmx

  - Default SOAP action or REST location path:
    - "http://zbxhupdata.com/webservices/GetGxdataUpTime"

  - Addressing input action: "http://zbxhupdata.com/webservices/GetGxdataUpTime"

  - Addressing output action: "http://zbxhupdata.com/webservices/GetGxdataUpTimeResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetGxdataUpTime_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetGxdataUpTime*              ns1__GetGxdataUpTime,
    // output parameters:
    _ns1__GetGxdataUpTimeResponse      &ns1__GetGxdataUpTimeResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetGxdataUpTime_(
    struct soap *soap,
    // input parameters:
    _ns1__GetGxdataUpTime*              ns1__GetGxdataUpTime,
    // output parameters:
    _ns1__GetGxdataUpTimeResponse      &ns1__GetGxdataUpTimeResponse
  );
@endcode

C++ proxy class (defined in soapupdataServiceSoapProxy.h generated with soapcpp2):
@code
  class updataServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapupdataServiceSoapService.h generated with soapcpp2):
@code
  class updataServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetGxdataUpTime_ SOAP
//gsoap ns1  service method-style:	GetGxdataUpTime_ document
//gsoap ns1  service method-encoding:	GetGxdataUpTime_ literal
//gsoap ns1  service method-input-action:	GetGxdataUpTime_ http://zbxhupdata.com/webservices/GetGxdataUpTime
//gsoap ns1  service method-output-action:	GetGxdataUpTime_ http://zbxhupdata.com/webservices/GetGxdataUpTimeResponse
int __ns1__GetGxdataUpTime_(
    _ns1__GetGxdataUpTime*              ns1__GetGxdataUpTime,	///< Input parameter
    _ns1__GetGxdataUpTimeResponse      &ns1__GetGxdataUpTimeResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__signedUserInfo_                                                   *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__signedUserInfo_" of service binding "updataServiceSoap".
 

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.244:190/updataService.asmx

  - Default SOAP action or REST location path:
    - "http://zbxhupdata.com/webservices/signedUserInfo"

  - Addressing input action: "http://zbxhupdata.com/webservices/signedUserInfo"

  - Addressing output action: "http://zbxhupdata.com/webservices/signedUserInfoResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__signedUserInfo_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__signedUserInfo*               ns1__signedUserInfo,
    // output parameters:
    _ns1__signedUserInfoResponse       &ns1__signedUserInfoResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__signedUserInfo_(
    struct soap *soap,
    // input parameters:
    _ns1__signedUserInfo*               ns1__signedUserInfo,
    // output parameters:
    _ns1__signedUserInfoResponse       &ns1__signedUserInfoResponse
  );
@endcode

C++ proxy class (defined in soapupdataServiceSoapProxy.h generated with soapcpp2):
@code
  class updataServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapupdataServiceSoapService.h generated with soapcpp2):
@code
  class updataServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	signedUserInfo_ SOAP
//gsoap ns1  service method-style:	signedUserInfo_ document
//gsoap ns1  service method-encoding:	signedUserInfo_ literal
//gsoap ns1  service method-input-action:	signedUserInfo_ http://zbxhupdata.com/webservices/signedUserInfo
//gsoap ns1  service method-output-action:	signedUserInfo_ http://zbxhupdata.com/webservices/signedUserInfoResponse
int __ns1__signedUserInfo_(
    _ns1__signedUserInfo*               ns1__signedUserInfo,	///< Input parameter
    _ns1__signedUserInfoResponse       &ns1__signedUserInfoResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetOsDateTime_                                                    *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetOsDateTime_" of service binding "updataServiceSoap".


  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.244:190/updataService.asmx

  - Default SOAP action or REST location path:
    - "http://zbxhupdata.com/webservices/GetOsDateTime"

  - Addressing input action: "http://zbxhupdata.com/webservices/GetOsDateTime"

  - Addressing output action: "http://zbxhupdata.com/webservices/GetOsDateTimeResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetOsDateTime_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetOsDateTime*                ns1__GetOsDateTime,
    // output parameters:
    _ns1__GetOsDateTimeResponse        &ns1__GetOsDateTimeResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetOsDateTime_(
    struct soap *soap,
    // input parameters:
    _ns1__GetOsDateTime*                ns1__GetOsDateTime,
    // output parameters:
    _ns1__GetOsDateTimeResponse        &ns1__GetOsDateTimeResponse
  );
@endcode

C++ proxy class (defined in soapupdataServiceSoapProxy.h generated with soapcpp2):
@code
  class updataServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapupdataServiceSoapService.h generated with soapcpp2):
@code
  class updataServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetOsDateTime_ SOAP
//gsoap ns1  service method-style:	GetOsDateTime_ document
//gsoap ns1  service method-encoding:	GetOsDateTime_ literal
//gsoap ns1  service method-input-action:	GetOsDateTime_ http://zbxhupdata.com/webservices/GetOsDateTime
//gsoap ns1  service method-output-action:	GetOsDateTime_ http://zbxhupdata.com/webservices/GetOsDateTimeResponse
int __ns1__GetOsDateTime_(
    _ns1__GetOsDateTime*                ns1__GetOsDateTime,	///< Input parameter
    _ns1__GetOsDateTimeResponse        &ns1__GetOsDateTimeResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__QueryPhotobw_                                                     *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__QueryPhotobw_" of service binding "updataServiceSoap".


  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.244:190/updataService.asmx

  - Default SOAP action or REST location path:
    - "http://zbxhupdata.com/webservices/QueryPhotobw"

  - Addressing input action: "http://zbxhupdata.com/webservices/QueryPhotobw"

  - Addressing output action: "http://zbxhupdata.com/webservices/QueryPhotobwResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__QueryPhotobw_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__QueryPhotobw*                 ns1__QueryPhotobw,
    // output parameters:
    _ns1__QueryPhotobwResponse         &ns1__QueryPhotobwResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__QueryPhotobw_(
    struct soap *soap,
    // input parameters:
    _ns1__QueryPhotobw*                 ns1__QueryPhotobw,
    // output parameters:
    _ns1__QueryPhotobwResponse         &ns1__QueryPhotobwResponse
  );
@endcode

C++ proxy class (defined in soapupdataServiceSoapProxy.h generated with soapcpp2):
@code
  class updataServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapupdataServiceSoapService.h generated with soapcpp2):
@code
  class updataServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	QueryPhotobw_ SOAP
//gsoap ns1  service method-style:	QueryPhotobw_ document
//gsoap ns1  service method-encoding:	QueryPhotobw_ literal
//gsoap ns1  service method-input-action:	QueryPhotobw_ http://zbxhupdata.com/webservices/QueryPhotobw
//gsoap ns1  service method-output-action:	QueryPhotobw_ http://zbxhupdata.com/webservices/QueryPhotobwResponse
int __ns1__QueryPhotobw_(
    _ns1__QueryPhotobw*                 ns1__QueryPhotobw,	///< Input parameter
    _ns1__QueryPhotobwResponse         &ns1__QueryPhotobwResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__TcdQuery_                                                         *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__TcdQuery_" of service binding "updataServiceSoap".


  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.244:190/updataService.asmx

  - Default SOAP action or REST location path:
    - "http://zbxhupdata.com/webservices/TcdQuery"

  - Addressing input action: "http://zbxhupdata.com/webservices/TcdQuery"

  - Addressing output action: "http://zbxhupdata.com/webservices/TcdQueryResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__TcdQuery_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__TcdQuery*                     ns1__TcdQuery,
    // output parameters:
    _ns1__TcdQueryResponse             &ns1__TcdQueryResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__TcdQuery_(
    struct soap *soap,
    // input parameters:
    _ns1__TcdQuery*                     ns1__TcdQuery,
    // output parameters:
    _ns1__TcdQueryResponse             &ns1__TcdQueryResponse
  );
@endcode

C++ proxy class (defined in soapupdataServiceSoapProxy.h generated with soapcpp2):
@code
  class updataServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapupdataServiceSoapService.h generated with soapcpp2):
@code
  class updataServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	TcdQuery_ SOAP
//gsoap ns1  service method-style:	TcdQuery_ document
//gsoap ns1  service method-encoding:	TcdQuery_ literal
//gsoap ns1  service method-input-action:	TcdQuery_ http://zbxhupdata.com/webservices/TcdQuery
//gsoap ns1  service method-output-action:	TcdQuery_ http://zbxhupdata.com/webservices/TcdQueryResponse
int __ns1__TcdQuery_(
    _ns1__TcdQuery*                     ns1__TcdQuery,	///< Input parameter
    _ns1__TcdQueryResponse             &ns1__TcdQueryResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__TcdSendup_                                                        *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__TcdSendup_" of service binding "updataServiceSoap".


  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.244:190/updataService.asmx

  - Default SOAP action or REST location path:
    - "http://zbxhupdata.com/webservices/TcdSendup"

  - Addressing input action: "http://zbxhupdata.com/webservices/TcdSendup"

  - Addressing output action: "http://zbxhupdata.com/webservices/TcdSendupResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__TcdSendup_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__TcdSendup*                    ns1__TcdSendup,
    // output parameters:
    _ns1__TcdSendupResponse            &ns1__TcdSendupResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__TcdSendup_(
    struct soap *soap,
    // input parameters:
    _ns1__TcdSendup*                    ns1__TcdSendup,
    // output parameters:
    _ns1__TcdSendupResponse            &ns1__TcdSendupResponse
  );
@endcode

C++ proxy class (defined in soapupdataServiceSoapProxy.h generated with soapcpp2):
@code
  class updataServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapupdataServiceSoapService.h generated with soapcpp2):
@code
  class updataServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	TcdSendup_ SOAP
//gsoap ns1  service method-style:	TcdSendup_ document
//gsoap ns1  service method-encoding:	TcdSendup_ literal
//gsoap ns1  service method-input-action:	TcdSendup_ http://zbxhupdata.com/webservices/TcdSendup
//gsoap ns1  service method-output-action:	TcdSendup_ http://zbxhupdata.com/webservices/TcdSendupResponse
int __ns1__TcdSendup_(
    _ns1__TcdSendup*                    ns1__TcdSendup,	///< Input parameter
    _ns1__TcdSendupResponse            &ns1__TcdSendupResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__UpLoadData_                                                       *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__UpLoadData_" of service binding "updataServiceSoap".
, 

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.244:190/updataService.asmx

  - Default SOAP action or REST location path:
    - "http://zbxhupdata.com/webservices/UpLoadData"

  - Addressing input action: "http://zbxhupdata.com/webservices/UpLoadData"

  - Addressing output action: "http://zbxhupdata.com/webservices/UpLoadDataResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__UpLoadData_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__UpLoadData*                   ns1__UpLoadData,
    // output parameters:
    _ns1__UpLoadDataResponse           &ns1__UpLoadDataResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__UpLoadData_(
    struct soap *soap,
    // input parameters:
    _ns1__UpLoadData*                   ns1__UpLoadData,
    // output parameters:
    _ns1__UpLoadDataResponse           &ns1__UpLoadDataResponse
  );
@endcode

C++ proxy class (defined in soapupdataServiceSoapProxy.h generated with soapcpp2):
@code
  class updataServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapupdataServiceSoapService.h generated with soapcpp2):
@code
  class updataServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	UpLoadData_ SOAP
//gsoap ns1  service method-style:	UpLoadData_ document
//gsoap ns1  service method-encoding:	UpLoadData_ literal
//gsoap ns1  service method-input-action:	UpLoadData_ http://zbxhupdata.com/webservices/UpLoadData
//gsoap ns1  service method-output-action:	UpLoadData_ http://zbxhupdata.com/webservices/UpLoadDataResponse
int __ns1__UpLoadData_(
    _ns1__UpLoadData*                   ns1__UpLoadData,	///< Input parameter
    _ns1__UpLoadDataResponse           &ns1__UpLoadDataResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__ExecuteSqlForColb_                                                *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__ExecuteSqlForColb_" of service binding "updataServiceSoap".
blobsql

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.244:190/updataService.asmx

  - Default SOAP action or REST location path:
    - "http://zbxhupdata.com/webservices/ExecuteSqlForColb"

  - Addressing input action: "http://zbxhupdata.com/webservices/ExecuteSqlForColb"

  - Addressing output action: "http://zbxhupdata.com/webservices/ExecuteSqlForColbResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__ExecuteSqlForColb_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__ExecuteSqlForColb*            ns1__ExecuteSqlForColb,
    // output parameters:
    _ns1__ExecuteSqlForColbResponse    &ns1__ExecuteSqlForColbResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__ExecuteSqlForColb_(
    struct soap *soap,
    // input parameters:
    _ns1__ExecuteSqlForColb*            ns1__ExecuteSqlForColb,
    // output parameters:
    _ns1__ExecuteSqlForColbResponse    &ns1__ExecuteSqlForColbResponse
  );
@endcode

C++ proxy class (defined in soapupdataServiceSoapProxy.h generated with soapcpp2):
@code
  class updataServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapupdataServiceSoapService.h generated with soapcpp2):
@code
  class updataServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	ExecuteSqlForColb_ SOAP
//gsoap ns1  service method-style:	ExecuteSqlForColb_ document
//gsoap ns1  service method-encoding:	ExecuteSqlForColb_ literal
//gsoap ns1  service method-input-action:	ExecuteSqlForColb_ http://zbxhupdata.com/webservices/ExecuteSqlForColb
//gsoap ns1  service method-output-action:	ExecuteSqlForColb_ http://zbxhupdata.com/webservices/ExecuteSqlForColbResponse
int __ns1__ExecuteSqlForColb_(
    _ns1__ExecuteSqlForColb*            ns1__ExecuteSqlForColb,	///< Input parameter
    _ns1__ExecuteSqlForColbResponse    &ns1__ExecuteSqlForColbResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetXHYDGLXTupdater_                                               *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetXHYDGLXTupdater_" of service binding "updataServiceSoap".


  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.244:190/updataService.asmx

  - Default SOAP action or REST location path:
    - "http://zbxhupdata.com/webservices/GetXHYDGLXTupdater"

  - Addressing input action: "http://zbxhupdata.com/webservices/GetXHYDGLXTupdater"

  - Addressing output action: "http://zbxhupdata.com/webservices/GetXHYDGLXTupdaterResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetXHYDGLXTupdater_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetXHYDGLXTupdater*           ns1__GetXHYDGLXTupdater,
    // output parameters:
    _ns1__GetXHYDGLXTupdaterResponse   &ns1__GetXHYDGLXTupdaterResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetXHYDGLXTupdater_(
    struct soap *soap,
    // input parameters:
    _ns1__GetXHYDGLXTupdater*           ns1__GetXHYDGLXTupdater,
    // output parameters:
    _ns1__GetXHYDGLXTupdaterResponse   &ns1__GetXHYDGLXTupdaterResponse
  );
@endcode

C++ proxy class (defined in soapupdataServiceSoapProxy.h generated with soapcpp2):
@code
  class updataServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapupdataServiceSoapService.h generated with soapcpp2):
@code
  class updataServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetXHYDGLXTupdater_ SOAP
//gsoap ns1  service method-style:	GetXHYDGLXTupdater_ document
//gsoap ns1  service method-encoding:	GetXHYDGLXTupdater_ literal
//gsoap ns1  service method-input-action:	GetXHYDGLXTupdater_ http://zbxhupdata.com/webservices/GetXHYDGLXTupdater
//gsoap ns1  service method-output-action:	GetXHYDGLXTupdater_ http://zbxhupdata.com/webservices/GetXHYDGLXTupdaterResponse
int __ns1__GetXHYDGLXTupdater_(
    _ns1__GetXHYDGLXTupdater*           ns1__GetXHYDGLXTupdater,	///< Input parameter
    _ns1__GetXHYDGLXTupdaterResponse   &ns1__GetXHYDGLXTupdaterResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetAPVupdater_                                                    *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetAPVupdater_" of service binding "updataServiceSoap".


  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.244:190/updataService.asmx

  - Default SOAP action or REST location path:
    - "http://zbxhupdata.com/webservices/GetAPVupdater"

  - Addressing input action: "http://zbxhupdata.com/webservices/GetAPVupdater"

  - Addressing output action: "http://zbxhupdata.com/webservices/GetAPVupdaterResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetAPVupdater_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetAPVupdater*                ns1__GetAPVupdater,
    // output parameters:
    _ns1__GetAPVupdaterResponse        &ns1__GetAPVupdaterResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetAPVupdater_(
    struct soap *soap,
    // input parameters:
    _ns1__GetAPVupdater*                ns1__GetAPVupdater,
    // output parameters:
    _ns1__GetAPVupdaterResponse        &ns1__GetAPVupdaterResponse
  );
@endcode

C++ proxy class (defined in soapupdataServiceSoapProxy.h generated with soapcpp2):
@code
  class updataServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapupdataServiceSoapService.h generated with soapcpp2):
@code
  class updataServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetAPVupdater_ SOAP
//gsoap ns1  service method-style:	GetAPVupdater_ document
//gsoap ns1  service method-encoding:	GetAPVupdater_ literal
//gsoap ns1  service method-input-action:	GetAPVupdater_ http://zbxhupdata.com/webservices/GetAPVupdater
//gsoap ns1  service method-output-action:	GetAPVupdater_ http://zbxhupdata.com/webservices/GetAPVupdaterResponse
int __ns1__GetAPVupdater_(
    _ns1__GetAPVupdater*                ns1__GetAPVupdater,	///< Input parameter
    _ns1__GetAPVupdaterResponse        &ns1__GetAPVupdaterResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__UpLoadFile_                                                       *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__UpLoadFile_" of service binding "updataServiceSoap".
 

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.244:190/updataService.asmx

  - Default SOAP action or REST location path:
    - "http://zbxhupdata.com/webservices/UpLoadFile"

  - Addressing input action: "http://zbxhupdata.com/webservices/UpLoadFile"

  - Addressing output action: "http://zbxhupdata.com/webservices/UpLoadFileResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__UpLoadFile_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__UpLoadFile*                   ns1__UpLoadFile,
    // output parameters:
    _ns1__UpLoadFileResponse           &ns1__UpLoadFileResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__UpLoadFile_(
    struct soap *soap,
    // input parameters:
    _ns1__UpLoadFile*                   ns1__UpLoadFile,
    // output parameters:
    _ns1__UpLoadFileResponse           &ns1__UpLoadFileResponse
  );
@endcode

C++ proxy class (defined in soapupdataServiceSoapProxy.h generated with soapcpp2):
@code
  class updataServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapupdataServiceSoapService.h generated with soapcpp2):
@code
  class updataServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	UpLoadFile_ SOAP
//gsoap ns1  service method-style:	UpLoadFile_ document
//gsoap ns1  service method-encoding:	UpLoadFile_ literal
//gsoap ns1  service method-input-action:	UpLoadFile_ http://zbxhupdata.com/webservices/UpLoadFile
//gsoap ns1  service method-output-action:	UpLoadFile_ http://zbxhupdata.com/webservices/UpLoadFileResponse
int __ns1__UpLoadFile_(
    _ns1__UpLoadFile*                   ns1__UpLoadFile,	///< Input parameter
    _ns1__UpLoadFileResponse           &ns1__UpLoadFileResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__upPic_                                                            *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__upPic_" of service binding "updataServiceSoap".
 

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.244:190/updataService.asmx

  - Default SOAP action or REST location path:
    - "http://zbxhupdata.com/webservices/upPic"

  - Addressing input action: "http://zbxhupdata.com/webservices/upPic"

  - Addressing output action: "http://zbxhupdata.com/webservices/upPicResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__upPic_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__upPic*                        ns1__upPic,
    // output parameters:
    _ns1__upPicResponse                &ns1__upPicResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__upPic_(
    struct soap *soap,
    // input parameters:
    _ns1__upPic*                        ns1__upPic,
    // output parameters:
    _ns1__upPicResponse                &ns1__upPicResponse
  );
@endcode

C++ proxy class (defined in soapupdataServiceSoapProxy.h generated with soapcpp2):
@code
  class updataServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapupdataServiceSoapService.h generated with soapcpp2):
@code
  class updataServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	upPic_ SOAP
//gsoap ns1  service method-style:	upPic_ document
//gsoap ns1  service method-encoding:	upPic_ literal
//gsoap ns1  service method-input-action:	upPic_ http://zbxhupdata.com/webservices/upPic
//gsoap ns1  service method-output-action:	upPic_ http://zbxhupdata.com/webservices/upPicResponse
int __ns1__upPic_(
    _ns1__upPic*                        ns1__upPic,	///< Input parameter
    _ns1__upPicResponse                &ns1__upPicResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__DownloadPic_                                                      *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__DownloadPic_" of service binding "updataServiceSoap".
 

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.244:190/updataService.asmx

  - Default SOAP action or REST location path:
    - "http://zbxhupdata.com/webservices/DownloadPic"

  - Addressing input action: "http://zbxhupdata.com/webservices/DownloadPic"

  - Addressing output action: "http://zbxhupdata.com/webservices/DownloadPicResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__DownloadPic_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__DownloadPic*                  ns1__DownloadPic,
    // output parameters:
    _ns1__DownloadPicResponse          &ns1__DownloadPicResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__DownloadPic_(
    struct soap *soap,
    // input parameters:
    _ns1__DownloadPic*                  ns1__DownloadPic,
    // output parameters:
    _ns1__DownloadPicResponse          &ns1__DownloadPicResponse
  );
@endcode

C++ proxy class (defined in soapupdataServiceSoapProxy.h generated with soapcpp2):
@code
  class updataServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapupdataServiceSoapService.h generated with soapcpp2):
@code
  class updataServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	DownloadPic_ SOAP
//gsoap ns1  service method-style:	DownloadPic_ document
//gsoap ns1  service method-encoding:	DownloadPic_ literal
//gsoap ns1  service method-input-action:	DownloadPic_ http://zbxhupdata.com/webservices/DownloadPic
//gsoap ns1  service method-output-action:	DownloadPic_ http://zbxhupdata.com/webservices/DownloadPicResponse
int __ns1__DownloadPic_(
    _ns1__DownloadPic*                  ns1__DownloadPic,	///< Input parameter
    _ns1__DownloadPicResponse          &ns1__DownloadPicResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetPicNames_                                                      *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetPicNames_" of service binding "updataServiceSoap".


  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.244:190/updataService.asmx

  - Default SOAP action or REST location path:
    - "http://zbxhupdata.com/webservices/GetPicNames"

  - Addressing input action: "http://zbxhupdata.com/webservices/GetPicNames"

  - Addressing output action: "http://zbxhupdata.com/webservices/GetPicNamesResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetPicNames_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetPicNames*                  ns1__GetPicNames,
    // output parameters:
    _ns1__GetPicNamesResponse          &ns1__GetPicNamesResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetPicNames_(
    struct soap *soap,
    // input parameters:
    _ns1__GetPicNames*                  ns1__GetPicNames,
    // output parameters:
    _ns1__GetPicNamesResponse          &ns1__GetPicNamesResponse
  );
@endcode

C++ proxy class (defined in soapupdataServiceSoapProxy.h generated with soapcpp2):
@code
  class updataServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapupdataServiceSoapService.h generated with soapcpp2):
@code
  class updataServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetPicNames_ SOAP
//gsoap ns1  service method-style:	GetPicNames_ document
//gsoap ns1  service method-encoding:	GetPicNames_ literal
//gsoap ns1  service method-input-action:	GetPicNames_ http://zbxhupdata.com/webservices/GetPicNames
//gsoap ns1  service method-output-action:	GetPicNames_ http://zbxhupdata.com/webservices/GetPicNamesResponse
int __ns1__GetPicNames_(
    _ns1__GetPicNames*                  ns1__GetPicNames,	///< Input parameter
    _ns1__GetPicNamesResponse          &ns1__GetPicNamesResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetDwInfo_                                                        *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetDwInfo_" of service binding "updataServiceSoap".


  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.244:190/updataService.asmx

  - Default SOAP action or REST location path:
    - "http://zbxhupdata.com/webservices/GetDwInfo"

  - Addressing input action: "http://zbxhupdata.com/webservices/GetDwInfo"

  - Addressing output action: "http://zbxhupdata.com/webservices/GetDwInfoResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetDwInfo_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetDwInfo*                    ns1__GetDwInfo,
    // output parameters:
    _ns1__GetDwInfoResponse            &ns1__GetDwInfoResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetDwInfo_(
    struct soap *soap,
    // input parameters:
    _ns1__GetDwInfo*                    ns1__GetDwInfo,
    // output parameters:
    _ns1__GetDwInfoResponse            &ns1__GetDwInfoResponse
  );
@endcode

C++ proxy class (defined in soapupdataServiceSoapProxy.h generated with soapcpp2):
@code
  class updataServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapupdataServiceSoapService.h generated with soapcpp2):
@code
  class updataServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetDwInfo_ SOAP
//gsoap ns1  service method-style:	GetDwInfo_ document
//gsoap ns1  service method-encoding:	GetDwInfo_ literal
//gsoap ns1  service method-input-action:	GetDwInfo_ http://zbxhupdata.com/webservices/GetDwInfo
//gsoap ns1  service method-output-action:	GetDwInfo_ http://zbxhupdata.com/webservices/GetDwInfoResponse
int __ns1__GetDwInfo_(
    _ns1__GetDwInfo*                    ns1__GetDwInfo,	///< Input parameter
    _ns1__GetDwInfoResponse            &ns1__GetDwInfoResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetDwPic_                                                         *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetDwPic_" of service binding "updataServiceSoap".


  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.244:190/updataService.asmx

  - Default SOAP action or REST location path:
    - "http://zbxhupdata.com/webservices/GetDwPic"

  - Addressing input action: "http://zbxhupdata.com/webservices/GetDwPic"

  - Addressing output action: "http://zbxhupdata.com/webservices/GetDwPicResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetDwPic_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetDwPic*                     ns1__GetDwPic,
    // output parameters:
    _ns1__GetDwPicResponse             &ns1__GetDwPicResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetDwPic_(
    struct soap *soap,
    // input parameters:
    _ns1__GetDwPic*                     ns1__GetDwPic,
    // output parameters:
    _ns1__GetDwPicResponse             &ns1__GetDwPicResponse
  );
@endcode

C++ proxy class (defined in soapupdataServiceSoapProxy.h generated with soapcpp2):
@code
  class updataServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapupdataServiceSoapService.h generated with soapcpp2):
@code
  class updataServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetDwPic_ SOAP
//gsoap ns1  service method-style:	GetDwPic_ document
//gsoap ns1  service method-encoding:	GetDwPic_ literal
//gsoap ns1  service method-input-action:	GetDwPic_ http://zbxhupdata.com/webservices/GetDwPic
//gsoap ns1  service method-output-action:	GetDwPic_ http://zbxhupdata.com/webservices/GetDwPicResponse
int __ns1__GetDwPic_(
    _ns1__GetDwPic*                     ns1__GetDwPic,	///< Input parameter
    _ns1__GetDwPicResponse             &ns1__GetDwPicResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetDeviceXj_                                                      *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetDeviceXj_" of service binding "updataServiceSoap".


  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.244:190/updataService.asmx

  - Default SOAP action or REST location path:
    - "http://zbxhupdata.com/webservices/GetDeviceXj"

  - Addressing input action: "http://zbxhupdata.com/webservices/GetDeviceXj"

  - Addressing output action: "http://zbxhupdata.com/webservices/GetDeviceXjResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetDeviceXj_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetDeviceXj*                  ns1__GetDeviceXj,
    // output parameters:
    _ns1__GetDeviceXjResponse          &ns1__GetDeviceXjResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetDeviceXj_(
    struct soap *soap,
    // input parameters:
    _ns1__GetDeviceXj*                  ns1__GetDeviceXj,
    // output parameters:
    _ns1__GetDeviceXjResponse          &ns1__GetDeviceXjResponse
  );
@endcode

C++ proxy class (defined in soapupdataServiceSoapProxy.h generated with soapcpp2):
@code
  class updataServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapupdataServiceSoapService.h generated with soapcpp2):
@code
  class updataServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetDeviceXj_ SOAP
//gsoap ns1  service method-style:	GetDeviceXj_ document
//gsoap ns1  service method-encoding:	GetDeviceXj_ literal
//gsoap ns1  service method-input-action:	GetDeviceXj_ http://zbxhupdata.com/webservices/GetDeviceXj
//gsoap ns1  service method-output-action:	GetDeviceXj_ http://zbxhupdata.com/webservices/GetDeviceXjResponse
int __ns1__GetDeviceXj_(
    _ns1__GetDeviceXj*                  ns1__GetDeviceXj,	///< Input parameter
    _ns1__GetDeviceXjResponse          &ns1__GetDeviceXjResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetJxData_                                                        *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetJxData_" of service binding "updataServiceSoap".
 ,ICONNAME,TYPE,,,,,

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.244:190/updataService.asmx

  - Default SOAP action or REST location path:
    - "http://zbxhupdata.com/webservices/GetJxData"

  - Addressing input action: "http://zbxhupdata.com/webservices/GetJxData"

  - Addressing output action: "http://zbxhupdata.com/webservices/GetJxDataResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetJxData_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetJxData*                    ns1__GetJxData,
    // output parameters:
    _ns1__GetJxDataResponse            &ns1__GetJxDataResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetJxData_(
    struct soap *soap,
    // input parameters:
    _ns1__GetJxData*                    ns1__GetJxData,
    // output parameters:
    _ns1__GetJxDataResponse            &ns1__GetJxDataResponse
  );
@endcode

C++ proxy class (defined in soapupdataServiceSoapProxy.h generated with soapcpp2):
@code
  class updataServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapupdataServiceSoapService.h generated with soapcpp2):
@code
  class updataServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetJxData_ SOAP
//gsoap ns1  service method-style:	GetJxData_ document
//gsoap ns1  service method-encoding:	GetJxData_ literal
//gsoap ns1  service method-input-action:	GetJxData_ http://zbxhupdata.com/webservices/GetJxData
//gsoap ns1  service method-output-action:	GetJxData_ http://zbxhupdata.com/webservices/GetJxDataResponse
int __ns1__GetJxData_(
    _ns1__GetJxData*                    ns1__GetJxData,	///< Input parameter
    _ns1__GetJxDataResponse            &ns1__GetJxDataResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetStationJxData_                                                 *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetStationJxData_" of service binding "updataServiceSoap".
,sflag true or false  ,ICONNAME,TYPE,,,,,

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.244:190/updataService.asmx

  - Default SOAP action or REST location path:
    - "http://zbxhupdata.com/webservices/GetStationJxData"

  - Addressing input action: "http://zbxhupdata.com/webservices/GetStationJxData"

  - Addressing output action: "http://zbxhupdata.com/webservices/GetStationJxDataResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetStationJxData_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetStationJxData*             ns1__GetStationJxData,
    // output parameters:
    _ns1__GetStationJxDataResponse     &ns1__GetStationJxDataResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetStationJxData_(
    struct soap *soap,
    // input parameters:
    _ns1__GetStationJxData*             ns1__GetStationJxData,
    // output parameters:
    _ns1__GetStationJxDataResponse     &ns1__GetStationJxDataResponse
  );
@endcode

C++ proxy class (defined in soapupdataServiceSoapProxy.h generated with soapcpp2):
@code
  class updataServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapupdataServiceSoapService.h generated with soapcpp2):
@code
  class updataServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetStationJxData_ SOAP
//gsoap ns1  service method-style:	GetStationJxData_ document
//gsoap ns1  service method-encoding:	GetStationJxData_ literal
//gsoap ns1  service method-input-action:	GetStationJxData_ http://zbxhupdata.com/webservices/GetStationJxData
//gsoap ns1  service method-output-action:	GetStationJxData_ http://zbxhupdata.com/webservices/GetStationJxDataResponse
int __ns1__GetStationJxData_(
    _ns1__GetStationJxData*             ns1__GetStationJxData,	///< Input parameter
    _ns1__GetStationJxDataResponse     &ns1__GetStationJxDataResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetJxPic_                                                         *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetJxPic_" of service binding "updataServiceSoap".
time jxitem picname

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.244:190/updataService.asmx

  - Default SOAP action or REST location path:
    - "http://zbxhupdata.com/webservices/GetJxPic"

  - Addressing input action: "http://zbxhupdata.com/webservices/GetJxPic"

  - Addressing output action: "http://zbxhupdata.com/webservices/GetJxPicResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetJxPic_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetJxPic*                     ns1__GetJxPic,
    // output parameters:
    _ns1__GetJxPicResponse             &ns1__GetJxPicResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetJxPic_(
    struct soap *soap,
    // input parameters:
    _ns1__GetJxPic*                     ns1__GetJxPic,
    // output parameters:
    _ns1__GetJxPicResponse             &ns1__GetJxPicResponse
  );
@endcode

C++ proxy class (defined in soapupdataServiceSoapProxy.h generated with soapcpp2):
@code
  class updataServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapupdataServiceSoapService.h generated with soapcpp2):
@code
  class updataServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetJxPic_ SOAP
//gsoap ns1  service method-style:	GetJxPic_ document
//gsoap ns1  service method-encoding:	GetJxPic_ literal
//gsoap ns1  service method-input-action:	GetJxPic_ http://zbxhupdata.com/webservices/GetJxPic
//gsoap ns1  service method-output-action:	GetJxPic_ http://zbxhupdata.com/webservices/GetJxPicResponse
int __ns1__GetJxPic_(
    _ns1__GetJxPic*                     ns1__GetJxPic,	///< Input parameter
    _ns1__GetJxPicResponse             &ns1__GetJxPicResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetDevPic_                                                        *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetDevPic_" of service binding "updataServiceSoap".
sflag true or false 
,,S_UDTIME,PICNAME,PGUID

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.244:190/updataService.asmx

  - Default SOAP action or REST location path:
    - "http://zbxhupdata.com/webservices/GetDevPic"

  - Addressing input action: "http://zbxhupdata.com/webservices/GetDevPic"

  - Addressing output action: "http://zbxhupdata.com/webservices/GetDevPicResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetDevPic_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetDevPic*                    ns1__GetDevPic,
    // output parameters:
    _ns1__GetDevPicResponse            &ns1__GetDevPicResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetDevPic_(
    struct soap *soap,
    // input parameters:
    _ns1__GetDevPic*                    ns1__GetDevPic,
    // output parameters:
    _ns1__GetDevPicResponse            &ns1__GetDevPicResponse
  );
@endcode

C++ proxy class (defined in soapupdataServiceSoapProxy.h generated with soapcpp2):
@code
  class updataServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapupdataServiceSoapService.h generated with soapcpp2):
@code
  class updataServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetDevPic_ SOAP
//gsoap ns1  service method-style:	GetDevPic_ document
//gsoap ns1  service method-encoding:	GetDevPic_ literal
//gsoap ns1  service method-input-action:	GetDevPic_ http://zbxhupdata.com/webservices/GetDevPic
//gsoap ns1  service method-output-action:	GetDevPic_ http://zbxhupdata.com/webservices/GetDevPicResponse
int __ns1__GetDevPic_(
    _ns1__GetDevPic*                    ns1__GetDevPic,	///< Input parameter
    _ns1__GetDevPicResponse            &ns1__GetDevPicResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetBgImg_                                                         *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetBgImg_" of service binding "updataServiceSoap".
   , pguid

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.244:190/updataService.asmx

  - Default SOAP action or REST location path:
    - "http://zbxhupdata.com/webservices/GetBgImg"

  - Addressing input action: "http://zbxhupdata.com/webservices/GetBgImg"

  - Addressing output action: "http://zbxhupdata.com/webservices/GetBgImgResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetBgImg_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetBgImg*                     ns1__GetBgImg,
    // output parameters:
    _ns1__GetBgImgResponse             &ns1__GetBgImgResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetBgImg_(
    struct soap *soap,
    // input parameters:
    _ns1__GetBgImg*                     ns1__GetBgImg,
    // output parameters:
    _ns1__GetBgImgResponse             &ns1__GetBgImgResponse
  );
@endcode

C++ proxy class (defined in soapupdataServiceSoapProxy.h generated with soapcpp2):
@code
  class updataServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapupdataServiceSoapService.h generated with soapcpp2):
@code
  class updataServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetBgImg_ SOAP
//gsoap ns1  service method-style:	GetBgImg_ document
//gsoap ns1  service method-encoding:	GetBgImg_ literal
//gsoap ns1  service method-input-action:	GetBgImg_ http://zbxhupdata.com/webservices/GetBgImg
//gsoap ns1  service method-output-action:	GetBgImg_ http://zbxhupdata.com/webservices/GetBgImgResponse
int __ns1__GetBgImg_(
    _ns1__GetBgImg*                     ns1__GetBgImg,	///< Input parameter
    _ns1__GetBgImgResponse             &ns1__GetBgImgResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetDcsData_                                                       *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetDcsData_" of service binding "updataServiceSoap".


  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.244:190/updataService.asmx

  - Default SOAP action or REST location path:
    - "http://zbxhupdata.com/webservices/GetDcsData"

  - Addressing input action: "http://zbxhupdata.com/webservices/GetDcsData"

  - Addressing output action: "http://zbxhupdata.com/webservices/GetDcsDataResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetDcsData_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetDcsData*                   ns1__GetDcsData,
    // output parameters:
    _ns1__GetDcsDataResponse           &ns1__GetDcsDataResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetDcsData_(
    struct soap *soap,
    // input parameters:
    _ns1__GetDcsData*                   ns1__GetDcsData,
    // output parameters:
    _ns1__GetDcsDataResponse           &ns1__GetDcsDataResponse
  );
@endcode

C++ proxy class (defined in soapupdataServiceSoapProxy.h generated with soapcpp2):
@code
  class updataServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapupdataServiceSoapService.h generated with soapcpp2):
@code
  class updataServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetDcsData_ SOAP
//gsoap ns1  service method-style:	GetDcsData_ document
//gsoap ns1  service method-encoding:	GetDcsData_ literal
//gsoap ns1  service method-input-action:	GetDcsData_ http://zbxhupdata.com/webservices/GetDcsData
//gsoap ns1  service method-output-action:	GetDcsData_ http://zbxhupdata.com/webservices/GetDcsDataResponse
int __ns1__GetDcsData_(
    _ns1__GetDcsData*                   ns1__GetDcsData,	///< Input parameter
    _ns1__GetDcsDataResponse           &ns1__GetDcsDataResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__DownLoadMobGPSData_                                               *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__DownLoadMobGPSData_" of service binding "updataServiceSoap".


  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.244:190/updataService.asmx

  - Default SOAP action or REST location path:
    - "http://zbxhupdata.com/webservices/DownLoadMobGPSData"

  - Addressing input action: "http://zbxhupdata.com/webservices/DownLoadMobGPSData"

  - Addressing output action: "http://zbxhupdata.com/webservices/DownLoadMobGPSDataResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__DownLoadMobGPSData_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__DownLoadMobGPSData*           ns1__DownLoadMobGPSData,
    // output parameters:
    _ns1__DownLoadMobGPSDataResponse   &ns1__DownLoadMobGPSDataResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__DownLoadMobGPSData_(
    struct soap *soap,
    // input parameters:
    _ns1__DownLoadMobGPSData*           ns1__DownLoadMobGPSData,
    // output parameters:
    _ns1__DownLoadMobGPSDataResponse   &ns1__DownLoadMobGPSDataResponse
  );
@endcode

C++ proxy class (defined in soapupdataServiceSoapProxy.h generated with soapcpp2):
@code
  class updataServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapupdataServiceSoapService.h generated with soapcpp2):
@code
  class updataServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	DownLoadMobGPSData_ SOAP
//gsoap ns1  service method-style:	DownLoadMobGPSData_ document
//gsoap ns1  service method-encoding:	DownLoadMobGPSData_ literal
//gsoap ns1  service method-input-action:	DownLoadMobGPSData_ http://zbxhupdata.com/webservices/DownLoadMobGPSData
//gsoap ns1  service method-output-action:	DownLoadMobGPSData_ http://zbxhupdata.com/webservices/DownLoadMobGPSDataResponse
int __ns1__DownLoadMobGPSData_(
    _ns1__DownLoadMobGPSData*           ns1__DownLoadMobGPSData,	///< Input parameter
    _ns1__DownLoadMobGPSDataResponse   &ns1__DownLoadMobGPSDataResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__MobDownLoadData_                                                  *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__MobDownLoadData_" of service binding "updataServiceSoap".


  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.244:190/updataService.asmx

  - Default SOAP action or REST location path:
    - "http://zbxhupdata.com/webservices/MobDownLoadData"

  - Addressing input action: "http://zbxhupdata.com/webservices/MobDownLoadData"

  - Addressing output action: "http://zbxhupdata.com/webservices/MobDownLoadDataResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__MobDownLoadData_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__MobDownLoadData*              ns1__MobDownLoadData,
    // output parameters:
    _ns1__MobDownLoadDataResponse      &ns1__MobDownLoadDataResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__MobDownLoadData_(
    struct soap *soap,
    // input parameters:
    _ns1__MobDownLoadData*              ns1__MobDownLoadData,
    // output parameters:
    _ns1__MobDownLoadDataResponse      &ns1__MobDownLoadDataResponse
  );
@endcode

C++ proxy class (defined in soapupdataServiceSoapProxy.h generated with soapcpp2):
@code
  class updataServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapupdataServiceSoapService.h generated with soapcpp2):
@code
  class updataServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	MobDownLoadData_ SOAP
//gsoap ns1  service method-style:	MobDownLoadData_ document
//gsoap ns1  service method-encoding:	MobDownLoadData_ literal
//gsoap ns1  service method-input-action:	MobDownLoadData_ http://zbxhupdata.com/webservices/MobDownLoadData
//gsoap ns1  service method-output-action:	MobDownLoadData_ http://zbxhupdata.com/webservices/MobDownLoadDataResponse
int __ns1__MobDownLoadData_(
    _ns1__MobDownLoadData*              ns1__MobDownLoadData,	///< Input parameter
    _ns1__MobDownLoadDataResponse      &ns1__MobDownLoadDataResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetOpenFireInfo_                                                  *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetOpenFireInfo_" of service binding "updataServiceSoap".


  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.244:190/updataService.asmx

  - Default SOAP action or REST location path:
    - "http://zbxhupdata.com/webservices/GetOpenFireInfo"

  - Addressing input action: "http://zbxhupdata.com/webservices/GetOpenFireInfo"

  - Addressing output action: "http://zbxhupdata.com/webservices/GetOpenFireInfoResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetOpenFireInfo_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetOpenFireInfo*              ns1__GetOpenFireInfo,
    // output parameters:
    _ns1__GetOpenFireInfoResponse      &ns1__GetOpenFireInfoResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetOpenFireInfo_(
    struct soap *soap,
    // input parameters:
    _ns1__GetOpenFireInfo*              ns1__GetOpenFireInfo,
    // output parameters:
    _ns1__GetOpenFireInfoResponse      &ns1__GetOpenFireInfoResponse
  );
@endcode

C++ proxy class (defined in soapupdataServiceSoapProxy.h generated with soapcpp2):
@code
  class updataServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapupdataServiceSoapService.h generated with soapcpp2):
@code
  class updataServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetOpenFireInfo_ SOAP
//gsoap ns1  service method-style:	GetOpenFireInfo_ document
//gsoap ns1  service method-encoding:	GetOpenFireInfo_ literal
//gsoap ns1  service method-input-action:	GetOpenFireInfo_ http://zbxhupdata.com/webservices/GetOpenFireInfo
//gsoap ns1  service method-output-action:	GetOpenFireInfo_ http://zbxhupdata.com/webservices/GetOpenFireInfoResponse
int __ns1__GetOpenFireInfo_(
    _ns1__GetOpenFireInfo*              ns1__GetOpenFireInfo,	///< Input parameter
    _ns1__GetOpenFireInfoResponse      &ns1__GetOpenFireInfoResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetDwList_                                                        *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetDwList_" of service binding "updataServiceSoap".


  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.244:190/updataService.asmx

  - Default SOAP action or REST location path:
    - "http://zbxhupdata.com/webservices/GetDwList"

  - Addressing input action: "http://zbxhupdata.com/webservices/GetDwList"

  - Addressing output action: "http://zbxhupdata.com/webservices/GetDwListResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetDwList_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetDwList*                    ns1__GetDwList,
    // output parameters:
    _ns1__GetDwListResponse            &ns1__GetDwListResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetDwList_(
    struct soap *soap,
    // input parameters:
    _ns1__GetDwList*                    ns1__GetDwList,
    // output parameters:
    _ns1__GetDwListResponse            &ns1__GetDwListResponse
  );
@endcode

C++ proxy class (defined in soapupdataServiceSoapProxy.h generated with soapcpp2):
@code
  class updataServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapupdataServiceSoapService.h generated with soapcpp2):
@code
  class updataServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetDwList_ SOAP
//gsoap ns1  service method-style:	GetDwList_ document
//gsoap ns1  service method-encoding:	GetDwList_ literal
//gsoap ns1  service method-input-action:	GetDwList_ http://zbxhupdata.com/webservices/GetDwList
//gsoap ns1  service method-output-action:	GetDwList_ http://zbxhupdata.com/webservices/GetDwListResponse
int __ns1__GetDwList_(
    _ns1__GetDwList*                    ns1__GetDwList,	///< Input parameter
    _ns1__GetDwListResponse            &ns1__GetDwListResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetUnitStation_                                                   *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetUnitStation_" of service binding "updataServiceSoap".


  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.244:190/updataService.asmx

  - Default SOAP action or REST location path:
    - "http://zbxhupdata.com/webservices/GetUnitStation"

  - Addressing input action: "http://zbxhupdata.com/webservices/GetUnitStation"

  - Addressing output action: "http://zbxhupdata.com/webservices/GetUnitStationResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetUnitStation_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetUnitStation*               ns1__GetUnitStation,
    // output parameters:
    _ns1__GetUnitStationResponse       &ns1__GetUnitStationResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetUnitStation_(
    struct soap *soap,
    // input parameters:
    _ns1__GetUnitStation*               ns1__GetUnitStation,
    // output parameters:
    _ns1__GetUnitStationResponse       &ns1__GetUnitStationResponse
  );
@endcode

C++ proxy class (defined in soapupdataServiceSoapProxy.h generated with soapcpp2):
@code
  class updataServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapupdataServiceSoapService.h generated with soapcpp2):
@code
  class updataServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetUnitStation_ SOAP
//gsoap ns1  service method-style:	GetUnitStation_ document
//gsoap ns1  service method-encoding:	GetUnitStation_ literal
//gsoap ns1  service method-input-action:	GetUnitStation_ http://zbxhupdata.com/webservices/GetUnitStation
//gsoap ns1  service method-output-action:	GetUnitStation_ http://zbxhupdata.com/webservices/GetUnitStationResponse
int __ns1__GetUnitStation_(
    _ns1__GetUnitStation*               ns1__GetUnitStation,	///< Input parameter
    _ns1__GetUnitStationResponse       &ns1__GetUnitStationResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetUnitStruct_                                                    *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetUnitStruct_" of service binding "updataServiceSoap".


  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.244:190/updataService.asmx

  - Default SOAP action or REST location path:
    - "http://zbxhupdata.com/webservices/GetUnitStruct"

  - Addressing input action: "http://zbxhupdata.com/webservices/GetUnitStruct"

  - Addressing output action: "http://zbxhupdata.com/webservices/GetUnitStructResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetUnitStruct_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetUnitStruct*                ns1__GetUnitStruct,
    // output parameters:
    _ns1__GetUnitStructResponse        &ns1__GetUnitStructResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetUnitStruct_(
    struct soap *soap,
    // input parameters:
    _ns1__GetUnitStruct*                ns1__GetUnitStruct,
    // output parameters:
    _ns1__GetUnitStructResponse        &ns1__GetUnitStructResponse
  );
@endcode

C++ proxy class (defined in soapupdataServiceSoapProxy.h generated with soapcpp2):
@code
  class updataServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapupdataServiceSoapService.h generated with soapcpp2):
@code
  class updataServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetUnitStruct_ SOAP
//gsoap ns1  service method-style:	GetUnitStruct_ document
//gsoap ns1  service method-encoding:	GetUnitStruct_ literal
//gsoap ns1  service method-input-action:	GetUnitStruct_ http://zbxhupdata.com/webservices/GetUnitStruct
//gsoap ns1  service method-output-action:	GetUnitStruct_ http://zbxhupdata.com/webservices/GetUnitStructResponse
int __ns1__GetUnitStruct_(
    _ns1__GetUnitStruct*                ns1__GetUnitStruct,	///< Input parameter
    _ns1__GetUnitStructResponse        &ns1__GetUnitStructResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetUnitPersonInfo_                                                *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetUnitPersonInfo_" of service binding "updataServiceSoap".


  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.244:190/updataService.asmx

  - Default SOAP action or REST location path:
    - "http://zbxhupdata.com/webservices/GetUnitPersonInfo"

  - Addressing input action: "http://zbxhupdata.com/webservices/GetUnitPersonInfo"

  - Addressing output action: "http://zbxhupdata.com/webservices/GetUnitPersonInfoResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetUnitPersonInfo_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetUnitPersonInfo*            ns1__GetUnitPersonInfo,
    // output parameters:
    _ns1__GetUnitPersonInfoResponse    &ns1__GetUnitPersonInfoResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetUnitPersonInfo_(
    struct soap *soap,
    // input parameters:
    _ns1__GetUnitPersonInfo*            ns1__GetUnitPersonInfo,
    // output parameters:
    _ns1__GetUnitPersonInfoResponse    &ns1__GetUnitPersonInfoResponse
  );
@endcode

C++ proxy class (defined in soapupdataServiceSoapProxy.h generated with soapcpp2):
@code
  class updataServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapupdataServiceSoapService.h generated with soapcpp2):
@code
  class updataServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetUnitPersonInfo_ SOAP
//gsoap ns1  service method-style:	GetUnitPersonInfo_ document
//gsoap ns1  service method-encoding:	GetUnitPersonInfo_ literal
//gsoap ns1  service method-input-action:	GetUnitPersonInfo_ http://zbxhupdata.com/webservices/GetUnitPersonInfo
//gsoap ns1  service method-output-action:	GetUnitPersonInfo_ http://zbxhupdata.com/webservices/GetUnitPersonInfoResponse
int __ns1__GetUnitPersonInfo_(
    _ns1__GetUnitPersonInfo*            ns1__GetUnitPersonInfo,	///< Input parameter
    _ns1__GetUnitPersonInfoResponse    &ns1__GetUnitPersonInfoResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetFileSize_                                                      *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetFileSize_" of service binding "updataServiceSoap".


  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.244:190/updataService.asmx

  - Default SOAP action or REST location path:
    - "http://zbxhupdata.com/webservices/GetFileSize"

  - Addressing input action: "http://zbxhupdata.com/webservices/GetFileSize"

  - Addressing output action: "http://zbxhupdata.com/webservices/GetFileSizeResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetFileSize_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetFileSize*                  ns1__GetFileSize,
    // output parameters:
    _ns1__GetFileSizeResponse          &ns1__GetFileSizeResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetFileSize_(
    struct soap *soap,
    // input parameters:
    _ns1__GetFileSize*                  ns1__GetFileSize,
    // output parameters:
    _ns1__GetFileSizeResponse          &ns1__GetFileSizeResponse
  );
@endcode

C++ proxy class (defined in soapupdataServiceSoapProxy.h generated with soapcpp2):
@code
  class updataServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapupdataServiceSoapService.h generated with soapcpp2):
@code
  class updataServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetFileSize_ SOAP
//gsoap ns1  service method-style:	GetFileSize_ document
//gsoap ns1  service method-encoding:	GetFileSize_ literal
//gsoap ns1  service method-input-action:	GetFileSize_ http://zbxhupdata.com/webservices/GetFileSize
//gsoap ns1  service method-output-action:	GetFileSize_ http://zbxhupdata.com/webservices/GetFileSizeResponse
int __ns1__GetFileSize_(
    _ns1__GetFileSize*                  ns1__GetFileSize,	///< Input parameter
    _ns1__GetFileSizeResponse          &ns1__GetFileSizeResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetXbList_                                                        *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetXbList_" of service binding "updataServiceSoap".


  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.244:190/updataService.asmx

  - Default SOAP action or REST location path:
    - "http://zbxhupdata.com/webservices/GetXbList"

  - Addressing input action: "http://zbxhupdata.com/webservices/GetXbList"

  - Addressing output action: "http://zbxhupdata.com/webservices/GetXbListResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetXbList_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetXbList*                    ns1__GetXbList,
    // output parameters:
    _ns1__GetXbListResponse            &ns1__GetXbListResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetXbList_(
    struct soap *soap,
    // input parameters:
    _ns1__GetXbList*                    ns1__GetXbList,
    // output parameters:
    _ns1__GetXbListResponse            &ns1__GetXbListResponse
  );
@endcode

C++ proxy class (defined in soapupdataServiceSoapProxy.h generated with soapcpp2):
@code
  class updataServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapupdataServiceSoapService.h generated with soapcpp2):
@code
  class updataServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetXbList_ SOAP
//gsoap ns1  service method-style:	GetXbList_ document
//gsoap ns1  service method-encoding:	GetXbList_ literal
//gsoap ns1  service method-input-action:	GetXbList_ http://zbxhupdata.com/webservices/GetXbList
//gsoap ns1  service method-output-action:	GetXbList_ http://zbxhupdata.com/webservices/GetXbListResponse
int __ns1__GetXbList_(
    _ns1__GetXbList*                    ns1__GetXbList,	///< Input parameter
    _ns1__GetXbListResponse            &ns1__GetXbListResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetXbStationList_                                                 *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetXbStationList_" of service binding "updataServiceSoap".


  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.244:190/updataService.asmx

  - Default SOAP action or REST location path:
    - "http://zbxhupdata.com/webservices/GetXbStationList"

  - Addressing input action: "http://zbxhupdata.com/webservices/GetXbStationList"

  - Addressing output action: "http://zbxhupdata.com/webservices/GetXbStationListResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetXbStationList_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetXbStationList*             ns1__GetXbStationList,
    // output parameters:
    _ns1__GetXbStationListResponse     &ns1__GetXbStationListResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetXbStationList_(
    struct soap *soap,
    // input parameters:
    _ns1__GetXbStationList*             ns1__GetXbStationList,
    // output parameters:
    _ns1__GetXbStationListResponse     &ns1__GetXbStationListResponse
  );
@endcode

C++ proxy class (defined in soapupdataServiceSoapProxy.h generated with soapcpp2):
@code
  class updataServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapupdataServiceSoapService.h generated with soapcpp2):
@code
  class updataServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetXbStationList_ SOAP
//gsoap ns1  service method-style:	GetXbStationList_ document
//gsoap ns1  service method-encoding:	GetXbStationList_ literal
//gsoap ns1  service method-input-action:	GetXbStationList_ http://zbxhupdata.com/webservices/GetXbStationList
//gsoap ns1  service method-output-action:	GetXbStationList_ http://zbxhupdata.com/webservices/GetXbStationListResponse
int __ns1__GetXbStationList_(
    _ns1__GetXbStationList*             ns1__GetXbStationList,	///< Input parameter
    _ns1__GetXbStationListResponse     &ns1__GetXbStationListResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetMapDeviceType_                                                 *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetMapDeviceType_" of service binding "updataServiceSoap".


  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.244:190/updataService.asmx

  - Default SOAP action or REST location path:
    - "http://zbxhupdata.com/webservices/GetMapDeviceType"

  - Addressing input action: "http://zbxhupdata.com/webservices/GetMapDeviceType"

  - Addressing output action: "http://zbxhupdata.com/webservices/GetMapDeviceTypeResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetMapDeviceType_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetMapDeviceType*             ns1__GetMapDeviceType,
    // output parameters:
    _ns1__GetMapDeviceTypeResponse     &ns1__GetMapDeviceTypeResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetMapDeviceType_(
    struct soap *soap,
    // input parameters:
    _ns1__GetMapDeviceType*             ns1__GetMapDeviceType,
    // output parameters:
    _ns1__GetMapDeviceTypeResponse     &ns1__GetMapDeviceTypeResponse
  );
@endcode

C++ proxy class (defined in soapupdataServiceSoapProxy.h generated with soapcpp2):
@code
  class updataServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapupdataServiceSoapService.h generated with soapcpp2):
@code
  class updataServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetMapDeviceType_ SOAP
//gsoap ns1  service method-style:	GetMapDeviceType_ document
//gsoap ns1  service method-encoding:	GetMapDeviceType_ literal
//gsoap ns1  service method-input-action:	GetMapDeviceType_ http://zbxhupdata.com/webservices/GetMapDeviceType
//gsoap ns1  service method-output-action:	GetMapDeviceType_ http://zbxhupdata.com/webservices/GetMapDeviceTypeResponse
int __ns1__GetMapDeviceType_(
    _ns1__GetMapDeviceType*             ns1__GetMapDeviceType,	///< Input parameter
    _ns1__GetMapDeviceTypeResponse     &ns1__GetMapDeviceTypeResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetGxDeviceData_                                                  *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetGxDeviceData_" of service binding "updataServiceSoap".


  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.244:190/updataService.asmx

  - Default SOAP action or REST location path:
    - "http://zbxhupdata.com/webservices/GetGxDeviceData"

  - Addressing input action: "http://zbxhupdata.com/webservices/GetGxDeviceData"

  - Addressing output action: "http://zbxhupdata.com/webservices/GetGxDeviceDataResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetGxDeviceData_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetGxDeviceData*              ns1__GetGxDeviceData,
    // output parameters:
    _ns1__GetGxDeviceDataResponse      &ns1__GetGxDeviceDataResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetGxDeviceData_(
    struct soap *soap,
    // input parameters:
    _ns1__GetGxDeviceData*              ns1__GetGxDeviceData,
    // output parameters:
    _ns1__GetGxDeviceDataResponse      &ns1__GetGxDeviceDataResponse
  );
@endcode

C++ proxy class (defined in soapupdataServiceSoapProxy.h generated with soapcpp2):
@code
  class updataServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapupdataServiceSoapService.h generated with soapcpp2):
@code
  class updataServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetGxDeviceData_ SOAP
//gsoap ns1  service method-style:	GetGxDeviceData_ document
//gsoap ns1  service method-encoding:	GetGxDeviceData_ literal
//gsoap ns1  service method-input-action:	GetGxDeviceData_ http://zbxhupdata.com/webservices/GetGxDeviceData
//gsoap ns1  service method-output-action:	GetGxDeviceData_ http://zbxhupdata.com/webservices/GetGxDeviceDataResponse
int __ns1__GetGxDeviceData_(
    _ns1__GetGxDeviceData*              ns1__GetGxDeviceData,	///< Input parameter
    _ns1__GetGxDeviceDataResponse      &ns1__GetGxDeviceDataResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetDownFileInfo_                                                  *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetDownFileInfo_" of service binding "updataServiceSoap".
GUID

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.244:190/updataService.asmx

  - Default SOAP action or REST location path:
    - "http://zbxhupdata.com/webservices/GetDownFileInfo"

  - Addressing input action: "http://zbxhupdata.com/webservices/GetDownFileInfo"

  - Addressing output action: "http://zbxhupdata.com/webservices/GetDownFileInfoResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetDownFileInfo_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetDownFileInfo*              ns1__GetDownFileInfo,
    // output parameters:
    _ns1__GetDownFileInfoResponse      &ns1__GetDownFileInfoResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetDownFileInfo_(
    struct soap *soap,
    // input parameters:
    _ns1__GetDownFileInfo*              ns1__GetDownFileInfo,
    // output parameters:
    _ns1__GetDownFileInfoResponse      &ns1__GetDownFileInfoResponse
  );
@endcode

C++ proxy class (defined in soapupdataServiceSoapProxy.h generated with soapcpp2):
@code
  class updataServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapupdataServiceSoapService.h generated with soapcpp2):
@code
  class updataServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetDownFileInfo_ SOAP
//gsoap ns1  service method-style:	GetDownFileInfo_ document
//gsoap ns1  service method-encoding:	GetDownFileInfo_ literal
//gsoap ns1  service method-input-action:	GetDownFileInfo_ http://zbxhupdata.com/webservices/GetDownFileInfo
//gsoap ns1  service method-output-action:	GetDownFileInfo_ http://zbxhupdata.com/webservices/GetDownFileInfoResponse
int __ns1__GetDownFileInfo_(
    _ns1__GetDownFileInfo*              ns1__GetDownFileInfo,	///< Input parameter
    _ns1__GetDownFileInfoResponse      &ns1__GetDownFileInfoResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__DownMapfile_                                                      *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__DownMapfile_" of service binding "updataServiceSoap".
  

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.244:190/updataService.asmx

  - Default SOAP action or REST location path:
    - "http://zbxhupdata.com/webservices/DownMapfile"

  - Addressing input action: "http://zbxhupdata.com/webservices/DownMapfile"

  - Addressing output action: "http://zbxhupdata.com/webservices/DownMapfileResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__DownMapfile_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__DownMapfile*                  ns1__DownMapfile,
    // output parameters:
    _ns1__DownMapfileResponse          &ns1__DownMapfileResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__DownMapfile_(
    struct soap *soap,
    // input parameters:
    _ns1__DownMapfile*                  ns1__DownMapfile,
    // output parameters:
    _ns1__DownMapfileResponse          &ns1__DownMapfileResponse
  );
@endcode

C++ proxy class (defined in soapupdataServiceSoapProxy.h generated with soapcpp2):
@code
  class updataServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapupdataServiceSoapService.h generated with soapcpp2):
@code
  class updataServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	DownMapfile_ SOAP
//gsoap ns1  service method-style:	DownMapfile_ document
//gsoap ns1  service method-encoding:	DownMapfile_ literal
//gsoap ns1  service method-input-action:	DownMapfile_ http://zbxhupdata.com/webservices/DownMapfile
//gsoap ns1  service method-output-action:	DownMapfile_ http://zbxhupdata.com/webservices/DownMapfileResponse
int __ns1__DownMapfile_(
    _ns1__DownMapfile*                  ns1__DownMapfile,	///< Input parameter
    _ns1__DownMapfileResponse          &ns1__DownMapfileResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetFileNew_                                                       *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetFileNew_" of service binding "updataServiceSoap".
web

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.244:190/updataService.asmx

  - Default SOAP action or REST location path:
    - "http://zbxhupdata.com/webservices/GetFileNew"

  - Addressing input action: "http://zbxhupdata.com/webservices/GetFileNew"

  - Addressing output action: "http://zbxhupdata.com/webservices/GetFileNewResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetFileNew_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetFileNew*                   ns1__GetFileNew,
    // output parameters:
    _ns1__GetFileNewResponse           &ns1__GetFileNewResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetFileNew_(
    struct soap *soap,
    // input parameters:
    _ns1__GetFileNew*                   ns1__GetFileNew,
    // output parameters:
    _ns1__GetFileNewResponse           &ns1__GetFileNewResponse
  );
@endcode

C++ proxy class (defined in soapupdataServiceSoapProxy.h generated with soapcpp2):
@code
  class updataServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapupdataServiceSoapService.h generated with soapcpp2):
@code
  class updataServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetFileNew_ SOAP
//gsoap ns1  service method-style:	GetFileNew_ document
//gsoap ns1  service method-encoding:	GetFileNew_ literal
//gsoap ns1  service method-input-action:	GetFileNew_ http://zbxhupdata.com/webservices/GetFileNew
//gsoap ns1  service method-output-action:	GetFileNew_ http://zbxhupdata.com/webservices/GetFileNewResponse
int __ns1__GetFileNew_(
    _ns1__GetFileNew*                   ns1__GetFileNew,	///< Input parameter
    _ns1__GetFileNewResponse           &ns1__GetFileNewResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__AlterTable_                                                       *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__AlterTable_" of service binding "updataServiceSoap".


  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.244:190/updataService.asmx

  - Default SOAP action or REST location path:
    - "http://zbxhupdata.com/webservices/AlterTable"

  - Addressing input action: "http://zbxhupdata.com/webservices/AlterTable"

  - Addressing output action: "http://zbxhupdata.com/webservices/AlterTableResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__AlterTable_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__AlterTable*                   ns1__AlterTable,
    // output parameters:
    _ns1__AlterTableResponse           &ns1__AlterTableResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__AlterTable_(
    struct soap *soap,
    // input parameters:
    _ns1__AlterTable*                   ns1__AlterTable,
    // output parameters:
    _ns1__AlterTableResponse           &ns1__AlterTableResponse
  );
@endcode

C++ proxy class (defined in soapupdataServiceSoapProxy.h generated with soapcpp2):
@code
  class updataServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapupdataServiceSoapService.h generated with soapcpp2):
@code
  class updataServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	AlterTable_ SOAP
//gsoap ns1  service method-style:	AlterTable_ document
//gsoap ns1  service method-encoding:	AlterTable_ literal
//gsoap ns1  service method-input-action:	AlterTable_ http://zbxhupdata.com/webservices/AlterTable
//gsoap ns1  service method-output-action:	AlterTable_ http://zbxhupdata.com/webservices/AlterTableResponse
int __ns1__AlterTable_(
    _ns1__AlterTable*                   ns1__AlterTable,	///< Input parameter
    _ns1__AlterTableResponse           &ns1__AlterTableResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__DownCQData_                                                       *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__DownCQData_" of service binding "updataServiceSoap".


  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.244:190/updataService.asmx

  - Default SOAP action or REST location path:
    - "http://zbxhupdata.com/webservices/DownCQData"

  - Addressing input action: "http://zbxhupdata.com/webservices/DownCQData"

  - Addressing output action: "http://zbxhupdata.com/webservices/DownCQDataResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__DownCQData_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__DownCQData*                   ns1__DownCQData,
    // output parameters:
    _ns1__DownCQDataResponse           &ns1__DownCQDataResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__DownCQData_(
    struct soap *soap,
    // input parameters:
    _ns1__DownCQData*                   ns1__DownCQData,
    // output parameters:
    _ns1__DownCQDataResponse           &ns1__DownCQDataResponse
  );
@endcode

C++ proxy class (defined in soapupdataServiceSoapProxy.h generated with soapcpp2):
@code
  class updataServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapupdataServiceSoapService.h generated with soapcpp2):
@code
  class updataServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	DownCQData_ SOAP
//gsoap ns1  service method-style:	DownCQData_ document
//gsoap ns1  service method-encoding:	DownCQData_ literal
//gsoap ns1  service method-input-action:	DownCQData_ http://zbxhupdata.com/webservices/DownCQData
//gsoap ns1  service method-output-action:	DownCQData_ http://zbxhupdata.com/webservices/DownCQDataResponse
int __ns1__DownCQData_(
    _ns1__DownCQData*                   ns1__DownCQData,	///< Input parameter
    _ns1__DownCQDataResponse           &ns1__DownCQDataResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetTabList_                                                       *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetTabList_" of service binding "updataServiceSoap".


  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.244:190/updataService.asmx

  - Default SOAP action or REST location path:
    - "http://zbxhupdata.com/webservices/GetTabList"

  - Addressing input action: "http://zbxhupdata.com/webservices/GetTabList"

  - Addressing output action: "http://zbxhupdata.com/webservices/GetTabListResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetTabList_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetTabList*                   ns1__GetTabList,
    // output parameters:
    _ns1__GetTabListResponse           &ns1__GetTabListResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetTabList_(
    struct soap *soap,
    // input parameters:
    _ns1__GetTabList*                   ns1__GetTabList,
    // output parameters:
    _ns1__GetTabListResponse           &ns1__GetTabListResponse
  );
@endcode

C++ proxy class (defined in soapupdataServiceSoapProxy.h generated with soapcpp2):
@code
  class updataServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapupdataServiceSoapService.h generated with soapcpp2):
@code
  class updataServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetTabList_ SOAP
//gsoap ns1  service method-style:	GetTabList_ document
//gsoap ns1  service method-encoding:	GetTabList_ literal
//gsoap ns1  service method-input-action:	GetTabList_ http://zbxhupdata.com/webservices/GetTabList
//gsoap ns1  service method-output-action:	GetTabList_ http://zbxhupdata.com/webservices/GetTabListResponse
int __ns1__GetTabList_(
    _ns1__GetTabList*                   ns1__GetTabList,	///< Input parameter
    _ns1__GetTabListResponse           &ns1__GetTabListResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__IsOracleTable_                                                    *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__IsOracleTable_" of service binding "updataServiceSoap".
Oracle

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.244:190/updataService.asmx

  - Default SOAP action or REST location path:
    - "http://zbxhupdata.com/webservices/IsOracleTable"

  - Addressing input action: "http://zbxhupdata.com/webservices/IsOracleTable"

  - Addressing output action: "http://zbxhupdata.com/webservices/IsOracleTableResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__IsOracleTable_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__IsOracleTable*                ns1__IsOracleTable,
    // output parameters:
    _ns1__IsOracleTableResponse        &ns1__IsOracleTableResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__IsOracleTable_(
    struct soap *soap,
    // input parameters:
    _ns1__IsOracleTable*                ns1__IsOracleTable,
    // output parameters:
    _ns1__IsOracleTableResponse        &ns1__IsOracleTableResponse
  );
@endcode

C++ proxy class (defined in soapupdataServiceSoapProxy.h generated with soapcpp2):
@code
  class updataServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapupdataServiceSoapService.h generated with soapcpp2):
@code
  class updataServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	IsOracleTable_ SOAP
//gsoap ns1  service method-style:	IsOracleTable_ document
//gsoap ns1  service method-encoding:	IsOracleTable_ literal
//gsoap ns1  service method-input-action:	IsOracleTable_ http://zbxhupdata.com/webservices/IsOracleTable
//gsoap ns1  service method-output-action:	IsOracleTable_ http://zbxhupdata.com/webservices/IsOracleTableResponse
int __ns1__IsOracleTable_(
    _ns1__IsOracleTable*                ns1__IsOracleTable,	///< Input parameter
    _ns1__IsOracleTableResponse        &ns1__IsOracleTableResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetFieldInfo_                                                     *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetFieldInfo_" of service binding "updataServiceSoap".


  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.244:190/updataService.asmx

  - Default SOAP action or REST location path:
    - "http://zbxhupdata.com/webservices/GetFieldInfo"

  - Addressing input action: "http://zbxhupdata.com/webservices/GetFieldInfo"

  - Addressing output action: "http://zbxhupdata.com/webservices/GetFieldInfoResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetFieldInfo_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetFieldInfo*                 ns1__GetFieldInfo,
    // output parameters:
    _ns1__GetFieldInfoResponse         &ns1__GetFieldInfoResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetFieldInfo_(
    struct soap *soap,
    // input parameters:
    _ns1__GetFieldInfo*                 ns1__GetFieldInfo,
    // output parameters:
    _ns1__GetFieldInfoResponse         &ns1__GetFieldInfoResponse
  );
@endcode

C++ proxy class (defined in soapupdataServiceSoapProxy.h generated with soapcpp2):
@code
  class updataServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapupdataServiceSoapService.h generated with soapcpp2):
@code
  class updataServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetFieldInfo_ SOAP
//gsoap ns1  service method-style:	GetFieldInfo_ document
//gsoap ns1  service method-encoding:	GetFieldInfo_ literal
//gsoap ns1  service method-input-action:	GetFieldInfo_ http://zbxhupdata.com/webservices/GetFieldInfo
//gsoap ns1  service method-output-action:	GetFieldInfo_ http://zbxhupdata.com/webservices/GetFieldInfoResponse
int __ns1__GetFieldInfo_(
    _ns1__GetFieldInfo*                 ns1__GetFieldInfo,	///< Input parameter
    _ns1__GetFieldInfoResponse         &ns1__GetFieldInfoResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__ExecuteSqlForFile_                                                *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__ExecuteSqlForFile_" of service binding "updataServiceSoap".


  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.244:190/updataService.asmx

  - Default SOAP action or REST location path:
    - "http://zbxhupdata.com/webservices/ExecuteSqlForFile"

  - Addressing input action: "http://zbxhupdata.com/webservices/ExecuteSqlForFile"

  - Addressing output action: "http://zbxhupdata.com/webservices/ExecuteSqlForFileResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__ExecuteSqlForFile_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__ExecuteSqlForFile*            ns1__ExecuteSqlForFile,
    // output parameters:
    _ns1__ExecuteSqlForFileResponse    &ns1__ExecuteSqlForFileResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__ExecuteSqlForFile_(
    struct soap *soap,
    // input parameters:
    _ns1__ExecuteSqlForFile*            ns1__ExecuteSqlForFile,
    // output parameters:
    _ns1__ExecuteSqlForFileResponse    &ns1__ExecuteSqlForFileResponse
  );
@endcode

C++ proxy class (defined in soapupdataServiceSoapProxy.h generated with soapcpp2):
@code
  class updataServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapupdataServiceSoapService.h generated with soapcpp2):
@code
  class updataServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	ExecuteSqlForFile_ SOAP
//gsoap ns1  service method-style:	ExecuteSqlForFile_ document
//gsoap ns1  service method-encoding:	ExecuteSqlForFile_ literal
//gsoap ns1  service method-input-action:	ExecuteSqlForFile_ http://zbxhupdata.com/webservices/ExecuteSqlForFile
//gsoap ns1  service method-output-action:	ExecuteSqlForFile_ http://zbxhupdata.com/webservices/ExecuteSqlForFileResponse
int __ns1__ExecuteSqlForFile_(
    _ns1__ExecuteSqlForFile*            ns1__ExecuteSqlForFile,	///< Input parameter
    _ns1__ExecuteSqlForFileResponse    &ns1__ExecuteSqlForFileResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__DownLoadFile_                                                     *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__DownLoadFile_" of service binding "updataServiceSoap".


  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.244:190/updataService.asmx

  - Default SOAP action or REST location path:
    - "http://zbxhupdata.com/webservices/DownLoadFile"

  - Addressing input action: "http://zbxhupdata.com/webservices/DownLoadFile"

  - Addressing output action: "http://zbxhupdata.com/webservices/DownLoadFileResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__DownLoadFile_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__DownLoadFile*                 ns1__DownLoadFile,
    // output parameters:
    _ns1__DownLoadFileResponse         &ns1__DownLoadFileResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__DownLoadFile_(
    struct soap *soap,
    // input parameters:
    _ns1__DownLoadFile*                 ns1__DownLoadFile,
    // output parameters:
    _ns1__DownLoadFileResponse         &ns1__DownLoadFileResponse
  );
@endcode

C++ proxy class (defined in soapupdataServiceSoapProxy.h generated with soapcpp2):
@code
  class updataServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapupdataServiceSoapService.h generated with soapcpp2):
@code
  class updataServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	DownLoadFile_ SOAP
//gsoap ns1  service method-style:	DownLoadFile_ document
//gsoap ns1  service method-encoding:	DownLoadFile_ literal
//gsoap ns1  service method-input-action:	DownLoadFile_ http://zbxhupdata.com/webservices/DownLoadFile
//gsoap ns1  service method-output-action:	DownLoadFile_ http://zbxhupdata.com/webservices/DownLoadFileResponse
int __ns1__DownLoadFile_(
    _ns1__DownLoadFile*                 ns1__DownLoadFile,	///< Input parameter
    _ns1__DownLoadFileResponse         &ns1__DownLoadFileResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__WriteFile_                                                        *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__WriteFile_" of service binding "updataServiceSoap".
Text

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.244:190/updataService.asmx

  - Default SOAP action or REST location path:
    - "http://zbxhupdata.com/webservices/WriteFile"

  - Addressing input action: "http://zbxhupdata.com/webservices/WriteFile"

  - Addressing output action: "http://zbxhupdata.com/webservices/WriteFileResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__WriteFile_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__WriteFile*                    ns1__WriteFile,
    // output parameters:
    _ns1__WriteFileResponse            &ns1__WriteFileResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__WriteFile_(
    struct soap *soap,
    // input parameters:
    _ns1__WriteFile*                    ns1__WriteFile,
    // output parameters:
    _ns1__WriteFileResponse            &ns1__WriteFileResponse
  );
@endcode

C++ proxy class (defined in soapupdataServiceSoapProxy.h generated with soapcpp2):
@code
  class updataServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapupdataServiceSoapService.h generated with soapcpp2):
@code
  class updataServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	WriteFile_ SOAP
//gsoap ns1  service method-style:	WriteFile_ document
//gsoap ns1  service method-encoding:	WriteFile_ literal
//gsoap ns1  service method-input-action:	WriteFile_ http://zbxhupdata.com/webservices/WriteFile
//gsoap ns1  service method-output-action:	WriteFile_ http://zbxhupdata.com/webservices/WriteFileResponse
int __ns1__WriteFile_(
    _ns1__WriteFile*                    ns1__WriteFile,	///< Input parameter
    _ns1__WriteFileResponse            &ns1__WriteFileResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetMapUpdateTime_                                                 *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetMapUpdateTime_" of service binding "updataServiceSoap".


  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.244:190/updataService.asmx

  - Default SOAP action or REST location path:
    - "http://zbxhupdata.com/webservices/GetMapUpdateTime"

  - Addressing input action: "http://zbxhupdata.com/webservices/GetMapUpdateTime"

  - Addressing output action: "http://zbxhupdata.com/webservices/GetMapUpdateTimeResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetMapUpdateTime_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetMapUpdateTime*             ns1__GetMapUpdateTime,
    // output parameters:
    _ns1__GetMapUpdateTimeResponse     &ns1__GetMapUpdateTimeResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetMapUpdateTime_(
    struct soap *soap,
    // input parameters:
    _ns1__GetMapUpdateTime*             ns1__GetMapUpdateTime,
    // output parameters:
    _ns1__GetMapUpdateTimeResponse     &ns1__GetMapUpdateTimeResponse
  );
@endcode

C++ proxy class (defined in soapupdataServiceSoapProxy.h generated with soapcpp2):
@code
  class updataServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapupdataServiceSoapService.h generated with soapcpp2):
@code
  class updataServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetMapUpdateTime_ SOAP
//gsoap ns1  service method-style:	GetMapUpdateTime_ document
//gsoap ns1  service method-encoding:	GetMapUpdateTime_ literal
//gsoap ns1  service method-input-action:	GetMapUpdateTime_ http://zbxhupdata.com/webservices/GetMapUpdateTime
//gsoap ns1  service method-output-action:	GetMapUpdateTime_ http://zbxhupdata.com/webservices/GetMapUpdateTimeResponse
int __ns1__GetMapUpdateTime_(
    _ns1__GetMapUpdateTime*             ns1__GetMapUpdateTime,	///< Input parameter
    _ns1__GetMapUpdateTimeResponse     &ns1__GetMapUpdateTimeResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetMapTabName_                                                    *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetMapTabName_" of service binding "updataServiceSoap".


  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.244:190/updataService.asmx

  - Default SOAP action or REST location path:
    - "http://zbxhupdata.com/webservices/GetMapTabName"

  - Addressing input action: "http://zbxhupdata.com/webservices/GetMapTabName"

  - Addressing output action: "http://zbxhupdata.com/webservices/GetMapTabNameResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetMapTabName_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetMapTabName*                ns1__GetMapTabName,
    // output parameters:
    _ns1__GetMapTabNameResponse        &ns1__GetMapTabNameResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetMapTabName_(
    struct soap *soap,
    // input parameters:
    _ns1__GetMapTabName*                ns1__GetMapTabName,
    // output parameters:
    _ns1__GetMapTabNameResponse        &ns1__GetMapTabNameResponse
  );
@endcode

C++ proxy class (defined in soapupdataServiceSoapProxy.h generated with soapcpp2):
@code
  class updataServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapupdataServiceSoapService.h generated with soapcpp2):
@code
  class updataServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetMapTabName_ SOAP
//gsoap ns1  service method-style:	GetMapTabName_ document
//gsoap ns1  service method-encoding:	GetMapTabName_ literal
//gsoap ns1  service method-input-action:	GetMapTabName_ http://zbxhupdata.com/webservices/GetMapTabName
//gsoap ns1  service method-output-action:	GetMapTabName_ http://zbxhupdata.com/webservices/GetMapTabNameResponse
int __ns1__GetMapTabName_(
    _ns1__GetMapTabName*                ns1__GetMapTabName,	///< Input parameter
    _ns1__GetMapTabNameResponse        &ns1__GetMapTabNameResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetMapDeviceData_                                                 *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetMapDeviceData_" of service binding "updataServiceSoap".


  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.244:190/updataService.asmx

  - Default SOAP action or REST location path:
    - "http://zbxhupdata.com/webservices/GetMapDeviceData"

  - Addressing input action: "http://zbxhupdata.com/webservices/GetMapDeviceData"

  - Addressing output action: "http://zbxhupdata.com/webservices/GetMapDeviceDataResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetMapDeviceData_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetMapDeviceData*             ns1__GetMapDeviceData,
    // output parameters:
    _ns1__GetMapDeviceDataResponse     &ns1__GetMapDeviceDataResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetMapDeviceData_(
    struct soap *soap,
    // input parameters:
    _ns1__GetMapDeviceData*             ns1__GetMapDeviceData,
    // output parameters:
    _ns1__GetMapDeviceDataResponse     &ns1__GetMapDeviceDataResponse
  );
@endcode

C++ proxy class (defined in soapupdataServiceSoapProxy.h generated with soapcpp2):
@code
  class updataServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapupdataServiceSoapService.h generated with soapcpp2):
@code
  class updataServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetMapDeviceData_ SOAP
//gsoap ns1  service method-style:	GetMapDeviceData_ document
//gsoap ns1  service method-encoding:	GetMapDeviceData_ literal
//gsoap ns1  service method-input-action:	GetMapDeviceData_ http://zbxhupdata.com/webservices/GetMapDeviceData
//gsoap ns1  service method-output-action:	GetMapDeviceData_ http://zbxhupdata.com/webservices/GetMapDeviceDataResponse
int __ns1__GetMapDeviceData_(
    _ns1__GetMapDeviceData*             ns1__GetMapDeviceData,	///< Input parameter
    _ns1__GetMapDeviceDataResponse     &ns1__GetMapDeviceDataResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetMaList_                                                        *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetMaList_" of service binding "updataServiceSoap".


  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.244:190/updataService.asmx

  - Default SOAP action or REST location path:
    - "http://zbxhupdata.com/webservices/GetMaList"

  - Addressing input action: "http://zbxhupdata.com/webservices/GetMaList"

  - Addressing output action: "http://zbxhupdata.com/webservices/GetMaListResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetMaList_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetMaList*                    ns1__GetMaList,
    // output parameters:
    _ns1__GetMaListResponse            &ns1__GetMaListResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetMaList_(
    struct soap *soap,
    // input parameters:
    _ns1__GetMaList*                    ns1__GetMaList,
    // output parameters:
    _ns1__GetMaListResponse            &ns1__GetMaListResponse
  );
@endcode

C++ proxy class (defined in soapupdataServiceSoapProxy.h generated with soapcpp2):
@code
  class updataServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapupdataServiceSoapService.h generated with soapcpp2):
@code
  class updataServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetMaList_ SOAP
//gsoap ns1  service method-style:	GetMaList_ document
//gsoap ns1  service method-encoding:	GetMaList_ literal
//gsoap ns1  service method-input-action:	GetMaList_ http://zbxhupdata.com/webservices/GetMaList
//gsoap ns1  service method-output-action:	GetMaList_ http://zbxhupdata.com/webservices/GetMaListResponse
int __ns1__GetMaList_(
    _ns1__GetMaList*                    ns1__GetMaList,	///< Input parameter
    _ns1__GetMaListResponse            &ns1__GetMaListResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetMangeUnit_                                                     *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetMangeUnit_" of service binding "updataServiceSoap".
Mangeunit

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.244:190/updataService.asmx

  - Default SOAP action or REST location path:
    - "http://zbxhupdata.com/webservices/GetMangeUnit"

  - Addressing input action: "http://zbxhupdata.com/webservices/GetMangeUnit"

  - Addressing output action: "http://zbxhupdata.com/webservices/GetMangeUnitResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetMangeUnit_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetMangeUnit*                 ns1__GetMangeUnit,
    // output parameters:
    _ns1__GetMangeUnitResponse         &ns1__GetMangeUnitResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetMangeUnit_(
    struct soap *soap,
    // input parameters:
    _ns1__GetMangeUnit*                 ns1__GetMangeUnit,
    // output parameters:
    _ns1__GetMangeUnitResponse         &ns1__GetMangeUnitResponse
  );
@endcode

C++ proxy class (defined in soapupdataServiceSoapProxy.h generated with soapcpp2):
@code
  class updataServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapupdataServiceSoapService.h generated with soapcpp2):
@code
  class updataServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetMangeUnit_ SOAP
//gsoap ns1  service method-style:	GetMangeUnit_ document
//gsoap ns1  service method-encoding:	GetMangeUnit_ literal
//gsoap ns1  service method-input-action:	GetMangeUnit_ http://zbxhupdata.com/webservices/GetMangeUnit
//gsoap ns1  service method-output-action:	GetMangeUnit_ http://zbxhupdata.com/webservices/GetMangeUnitResponse
int __ns1__GetMangeUnit_(
    _ns1__GetMangeUnit*                 ns1__GetMangeUnit,	///< Input parameter
    _ns1__GetMangeUnitResponse         &ns1__GetMangeUnitResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetMangeXb_                                                       *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetMangeXb_" of service binding "updataServiceSoap".


  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.244:190/updataService.asmx

  - Default SOAP action or REST location path:
    - "http://zbxhupdata.com/webservices/GetMangeXb"

  - Addressing input action: "http://zbxhupdata.com/webservices/GetMangeXb"

  - Addressing output action: "http://zbxhupdata.com/webservices/GetMangeXbResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetMangeXb_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetMangeXb*                   ns1__GetMangeXb,
    // output parameters:
    _ns1__GetMangeXbResponse           &ns1__GetMangeXbResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetMangeXb_(
    struct soap *soap,
    // input parameters:
    _ns1__GetMangeXb*                   ns1__GetMangeXb,
    // output parameters:
    _ns1__GetMangeXbResponse           &ns1__GetMangeXbResponse
  );
@endcode

C++ proxy class (defined in soapupdataServiceSoapProxy.h generated with soapcpp2):
@code
  class updataServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapupdataServiceSoapService.h generated with soapcpp2):
@code
  class updataServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetMangeXb_ SOAP
//gsoap ns1  service method-style:	GetMangeXb_ document
//gsoap ns1  service method-encoding:	GetMangeXb_ literal
//gsoap ns1  service method-input-action:	GetMangeXb_ http://zbxhupdata.com/webservices/GetMangeXb
//gsoap ns1  service method-output-action:	GetMangeXb_ http://zbxhupdata.com/webservices/GetMangeXbResponse
int __ns1__GetMangeXb_(
    _ns1__GetMangeXb*                   ns1__GetMangeXb,	///< Input parameter
    _ns1__GetMangeXbResponse           &ns1__GetMangeXbResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__CheckMapVer_                                                      *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__CheckMapVer_" of service binding "updataServiceSoap".


  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.244:190/updataService.asmx

  - Default SOAP action or REST location path:
    - "http://zbxhupdata.com/webservices/CheckMapVer"

  - Addressing input action: "http://zbxhupdata.com/webservices/CheckMapVer"

  - Addressing output action: "http://zbxhupdata.com/webservices/CheckMapVerResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__CheckMapVer_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__CheckMapVer*                  ns1__CheckMapVer,
    // output parameters:
    _ns1__CheckMapVerResponse          &ns1__CheckMapVerResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__CheckMapVer_(
    struct soap *soap,
    // input parameters:
    _ns1__CheckMapVer*                  ns1__CheckMapVer,
    // output parameters:
    _ns1__CheckMapVerResponse          &ns1__CheckMapVerResponse
  );
@endcode

C++ proxy class (defined in soapupdataServiceSoapProxy.h generated with soapcpp2):
@code
  class updataServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapupdataServiceSoapService.h generated with soapcpp2):
@code
  class updataServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	CheckMapVer_ SOAP
//gsoap ns1  service method-style:	CheckMapVer_ document
//gsoap ns1  service method-encoding:	CheckMapVer_ literal
//gsoap ns1  service method-input-action:	CheckMapVer_ http://zbxhupdata.com/webservices/CheckMapVer
//gsoap ns1  service method-output-action:	CheckMapVer_ http://zbxhupdata.com/webservices/CheckMapVerResponse
int __ns1__CheckMapVer_(
    _ns1__CheckMapVer*                  ns1__CheckMapVer,	///< Input parameter
    _ns1__CheckMapVerResponse          &ns1__CheckMapVerResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetMap_                                                           *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetMap_" of service binding "updataServiceSoap".


  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.244:190/updataService.asmx

  - Default SOAP action or REST location path:
    - "http://zbxhupdata.com/webservices/GetMap"

  - Addressing input action: "http://zbxhupdata.com/webservices/GetMap"

  - Addressing output action: "http://zbxhupdata.com/webservices/GetMapResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetMap_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetMap*                       ns1__GetMap,
    // output parameters:
    _ns1__GetMapResponse               &ns1__GetMapResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetMap_(
    struct soap *soap,
    // input parameters:
    _ns1__GetMap*                       ns1__GetMap,
    // output parameters:
    _ns1__GetMapResponse               &ns1__GetMapResponse
  );
@endcode

C++ proxy class (defined in soapupdataServiceSoapProxy.h generated with soapcpp2):
@code
  class updataServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapupdataServiceSoapService.h generated with soapcpp2):
@code
  class updataServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetMap_ SOAP
//gsoap ns1  service method-style:	GetMap_ document
//gsoap ns1  service method-encoding:	GetMap_ literal
//gsoap ns1  service method-input-action:	GetMap_ http://zbxhupdata.com/webservices/GetMap
//gsoap ns1  service method-output-action:	GetMap_ http://zbxhupdata.com/webservices/GetMapResponse
int __ns1__GetMap_(
    _ns1__GetMap*                       ns1__GetMap,	///< Input parameter
    _ns1__GetMapResponse               &ns1__GetMapResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetTableData_                                                     *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetTableData_" of service binding "updataServiceSoap".


  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.244:190/updataService.asmx

  - Default SOAP action or REST location path:
    - "http://zbxhupdata.com/webservices/GetTableData"

  - Addressing input action: "http://zbxhupdata.com/webservices/GetTableData"

  - Addressing output action: "http://zbxhupdata.com/webservices/GetTableDataResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetTableData_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetTableData*                 ns1__GetTableData,
    // output parameters:
    _ns1__GetTableDataResponse         &ns1__GetTableDataResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetTableData_(
    struct soap *soap,
    // input parameters:
    _ns1__GetTableData*                 ns1__GetTableData,
    // output parameters:
    _ns1__GetTableDataResponse         &ns1__GetTableDataResponse
  );
@endcode

C++ proxy class (defined in soapupdataServiceSoapProxy.h generated with soapcpp2):
@code
  class updataServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapupdataServiceSoapService.h generated with soapcpp2):
@code
  class updataServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetTableData_ SOAP
//gsoap ns1  service method-style:	GetTableData_ document
//gsoap ns1  service method-encoding:	GetTableData_ literal
//gsoap ns1  service method-input-action:	GetTableData_ http://zbxhupdata.com/webservices/GetTableData
//gsoap ns1  service method-output-action:	GetTableData_ http://zbxhupdata.com/webservices/GetTableDataResponse
int __ns1__GetTableData_(
    _ns1__GetTableData*                 ns1__GetTableData,	///< Input parameter
    _ns1__GetTableDataResponse         &ns1__GetTableDataResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__ServerLevel_                                                      *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__ServerLevel_" of service binding "updataServiceSoap".
24

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.244:190/updataService.asmx

  - Default SOAP action or REST location path:
    - "http://zbxhupdata.com/webservices/ServerLevel"

  - Addressing input action: "http://zbxhupdata.com/webservices/ServerLevel"

  - Addressing output action: "http://zbxhupdata.com/webservices/ServerLevelResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__ServerLevel_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__ServerLevel*                  ns1__ServerLevel,
    // output parameters:
    _ns1__ServerLevelResponse          &ns1__ServerLevelResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__ServerLevel_(
    struct soap *soap,
    // input parameters:
    _ns1__ServerLevel*                  ns1__ServerLevel,
    // output parameters:
    _ns1__ServerLevelResponse          &ns1__ServerLevelResponse
  );
@endcode

C++ proxy class (defined in soapupdataServiceSoapProxy.h generated with soapcpp2):
@code
  class updataServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapupdataServiceSoapService.h generated with soapcpp2):
@code
  class updataServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	ServerLevel_ SOAP
//gsoap ns1  service method-style:	ServerLevel_ document
//gsoap ns1  service method-encoding:	ServerLevel_ literal
//gsoap ns1  service method-input-action:	ServerLevel_ http://zbxhupdata.com/webservices/ServerLevel
//gsoap ns1  service method-output-action:	ServerLevel_ http://zbxhupdata.com/webservices/ServerLevelResponse
int __ns1__ServerLevel_(
    _ns1__ServerLevel*                  ns1__ServerLevel,	///< Input parameter
    _ns1__ServerLevelResponse          &ns1__ServerLevelResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetMapListTime_                                                   *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetMapListTime_" of service binding "updataServiceSoap".
maplistmob

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.244:190/updataService.asmx

  - Default SOAP action or REST location path:
    - "http://zbxhupdata.com/webservices/GetMapListTime"

  - Addressing input action: "http://zbxhupdata.com/webservices/GetMapListTime"

  - Addressing output action: "http://zbxhupdata.com/webservices/GetMapListTimeResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetMapListTime_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetMapListTime*               ns1__GetMapListTime,
    // output parameters:
    _ns1__GetMapListTimeResponse       &ns1__GetMapListTimeResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetMapListTime_(
    struct soap *soap,
    // input parameters:
    _ns1__GetMapListTime*               ns1__GetMapListTime,
    // output parameters:
    _ns1__GetMapListTimeResponse       &ns1__GetMapListTimeResponse
  );
@endcode

C++ proxy class (defined in soapupdataServiceSoapProxy.h generated with soapcpp2):
@code
  class updataServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapupdataServiceSoapService.h generated with soapcpp2):
@code
  class updataServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetMapListTime_ SOAP
//gsoap ns1  service method-style:	GetMapListTime_ document
//gsoap ns1  service method-encoding:	GetMapListTime_ literal
//gsoap ns1  service method-input-action:	GetMapListTime_ http://zbxhupdata.com/webservices/GetMapListTime
//gsoap ns1  service method-output-action:	GetMapListTime_ http://zbxhupdata.com/webservices/GetMapListTimeResponse
int __ns1__GetMapListTime_(
    _ns1__GetMapListTime*               ns1__GetMapListTime,	///< Input parameter
    _ns1__GetMapListTimeResponse       &ns1__GetMapListTimeResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__UpdateGzclMap_                                                    *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__UpdateGzclMap_" of service binding "updataServiceSoap".


  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.244:190/updataService.asmx

  - Default SOAP action or REST location path:
    - "http://zbxhupdata.com/webservices/UpdateGzclMap"

  - Addressing input action: "http://zbxhupdata.com/webservices/UpdateGzclMap"

  - Addressing output action: "http://zbxhupdata.com/webservices/UpdateGzclMapResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__UpdateGzclMap_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__UpdateGzclMap*                ns1__UpdateGzclMap,
    // output parameters:
    _ns1__UpdateGzclMapResponse        &ns1__UpdateGzclMapResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__UpdateGzclMap_(
    struct soap *soap,
    // input parameters:
    _ns1__UpdateGzclMap*                ns1__UpdateGzclMap,
    // output parameters:
    _ns1__UpdateGzclMapResponse        &ns1__UpdateGzclMapResponse
  );
@endcode

C++ proxy class (defined in soapupdataServiceSoapProxy.h generated with soapcpp2):
@code
  class updataServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapupdataServiceSoapService.h generated with soapcpp2):
@code
  class updataServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	UpdateGzclMap_ SOAP
//gsoap ns1  service method-style:	UpdateGzclMap_ document
//gsoap ns1  service method-encoding:	UpdateGzclMap_ literal
//gsoap ns1  service method-input-action:	UpdateGzclMap_ http://zbxhupdata.com/webservices/UpdateGzclMap
//gsoap ns1  service method-output-action:	UpdateGzclMap_ http://zbxhupdata.com/webservices/UpdateGzclMapResponse
int __ns1__UpdateGzclMap_(
    _ns1__UpdateGzclMap*                ns1__UpdateGzclMap,	///< Input parameter
    _ns1__UpdateGzclMapResponse        &ns1__UpdateGzclMapResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetUnitMapVer_                                                    *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetUnitMapVer_" of service binding "updataServiceSoap".


  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.244:190/updataService.asmx

  - Default SOAP action or REST location path:
    - "http://zbxhupdata.com/webservices/GetUnitMapVer"

  - Addressing input action: "http://zbxhupdata.com/webservices/GetUnitMapVer"

  - Addressing output action: "http://zbxhupdata.com/webservices/GetUnitMapVerResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetUnitMapVer_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetUnitMapVer*                ns1__GetUnitMapVer,
    // output parameters:
    _ns1__GetUnitMapVerResponse        &ns1__GetUnitMapVerResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetUnitMapVer_(
    struct soap *soap,
    // input parameters:
    _ns1__GetUnitMapVer*                ns1__GetUnitMapVer,
    // output parameters:
    _ns1__GetUnitMapVerResponse        &ns1__GetUnitMapVerResponse
  );
@endcode

C++ proxy class (defined in soapupdataServiceSoapProxy.h generated with soapcpp2):
@code
  class updataServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapupdataServiceSoapService.h generated with soapcpp2):
@code
  class updataServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetUnitMapVer_ SOAP
//gsoap ns1  service method-style:	GetUnitMapVer_ document
//gsoap ns1  service method-encoding:	GetUnitMapVer_ literal
//gsoap ns1  service method-input-action:	GetUnitMapVer_ http://zbxhupdata.com/webservices/GetUnitMapVer
//gsoap ns1  service method-output-action:	GetUnitMapVer_ http://zbxhupdata.com/webservices/GetUnitMapVerResponse
int __ns1__GetUnitMapVer_(
    _ns1__GetUnitMapVer*                ns1__GetUnitMapVer,	///< Input parameter
    _ns1__GetUnitMapVerResponse        &ns1__GetUnitMapVerResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetMangeMapUpdate_                                                *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetMangeMapUpdate_" of service binding "updataServiceSoap".
MangeMap

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.244:190/updataService.asmx

  - Default SOAP action or REST location path:
    - "http://zbxhupdata.com/webservices/GetMangeMapUpdate"

  - Addressing input action: "http://zbxhupdata.com/webservices/GetMangeMapUpdate"

  - Addressing output action: "http://zbxhupdata.com/webservices/GetMangeMapUpdateResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetMangeMapUpdate_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetMangeMapUpdate*            ns1__GetMangeMapUpdate,
    // output parameters:
    _ns1__GetMangeMapUpdateResponse    &ns1__GetMangeMapUpdateResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetMangeMapUpdate_(
    struct soap *soap,
    // input parameters:
    _ns1__GetMangeMapUpdate*            ns1__GetMangeMapUpdate,
    // output parameters:
    _ns1__GetMangeMapUpdateResponse    &ns1__GetMangeMapUpdateResponse
  );
@endcode

C++ proxy class (defined in soapupdataServiceSoapProxy.h generated with soapcpp2):
@code
  class updataServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapupdataServiceSoapService.h generated with soapcpp2):
@code
  class updataServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetMangeMapUpdate_ SOAP
//gsoap ns1  service method-style:	GetMangeMapUpdate_ document
//gsoap ns1  service method-encoding:	GetMangeMapUpdate_ literal
//gsoap ns1  service method-input-action:	GetMangeMapUpdate_ http://zbxhupdata.com/webservices/GetMangeMapUpdate
//gsoap ns1  service method-output-action:	GetMangeMapUpdate_ http://zbxhupdata.com/webservices/GetMangeMapUpdateResponse
int __ns1__GetMangeMapUpdate_(
    _ns1__GetMangeMapUpdate*            ns1__GetMangeMapUpdate,	///< Input parameter
    _ns1__GetMangeMapUpdateResponse    &ns1__GetMangeMapUpdateResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__OpenProcess_                                                      *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__OpenProcess_" of service binding "updataServiceSoap".


  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.244:190/updataService.asmx

  - Default SOAP action or REST location path:
    - "http://zbxhupdata.com/webservices/OpenProcess"

  - Addressing input action: "http://zbxhupdata.com/webservices/OpenProcess"

  - Addressing output action: "http://zbxhupdata.com/webservices/OpenProcessResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__OpenProcess_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__OpenProcess*                  ns1__OpenProcess,
    // output parameters:
    _ns1__OpenProcessResponse          &ns1__OpenProcessResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__OpenProcess_(
    struct soap *soap,
    // input parameters:
    _ns1__OpenProcess*                  ns1__OpenProcess,
    // output parameters:
    _ns1__OpenProcessResponse          &ns1__OpenProcessResponse
  );
@endcode

C++ proxy class (defined in soapupdataServiceSoapProxy.h generated with soapcpp2):
@code
  class updataServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapupdataServiceSoapService.h generated with soapcpp2):
@code
  class updataServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	OpenProcess_ SOAP
//gsoap ns1  service method-style:	OpenProcess_ document
//gsoap ns1  service method-encoding:	OpenProcess_ literal
//gsoap ns1  service method-input-action:	OpenProcess_ http://zbxhupdata.com/webservices/OpenProcess
//gsoap ns1  service method-output-action:	OpenProcess_ http://zbxhupdata.com/webservices/OpenProcessResponse
int __ns1__OpenProcess_(
    _ns1__OpenProcess*                  ns1__OpenProcess,	///< Input parameter
    _ns1__OpenProcessResponse          &ns1__OpenProcessResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetEmfPngVer_                                                     *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetEmfPngVer_" of service binding "updataServiceSoap".
emf2png

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.244:190/updataService.asmx

  - Default SOAP action or REST location path:
    - "http://zbxhupdata.com/webservices/GetEmfPngVer"

  - Addressing input action: "http://zbxhupdata.com/webservices/GetEmfPngVer"

  - Addressing output action: "http://zbxhupdata.com/webservices/GetEmfPngVerResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetEmfPngVer_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetEmfPngVer*                 ns1__GetEmfPngVer,
    // output parameters:
    _ns1__GetEmfPngVerResponse         &ns1__GetEmfPngVerResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetEmfPngVer_(
    struct soap *soap,
    // input parameters:
    _ns1__GetEmfPngVer*                 ns1__GetEmfPngVer,
    // output parameters:
    _ns1__GetEmfPngVerResponse         &ns1__GetEmfPngVerResponse
  );
@endcode

C++ proxy class (defined in soapupdataServiceSoapProxy.h generated with soapcpp2):
@code
  class updataServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapupdataServiceSoapService.h generated with soapcpp2):
@code
  class updataServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetEmfPngVer_ SOAP
//gsoap ns1  service method-style:	GetEmfPngVer_ document
//gsoap ns1  service method-encoding:	GetEmfPngVer_ literal
//gsoap ns1  service method-input-action:	GetEmfPngVer_ http://zbxhupdata.com/webservices/GetEmfPngVer
//gsoap ns1  service method-output-action:	GetEmfPngVer_ http://zbxhupdata.com/webservices/GetEmfPngVerResponse
int __ns1__GetEmfPngVer_(
    _ns1__GetEmfPngVer*                 ns1__GetEmfPngVer,	///< Input parameter
    _ns1__GetEmfPngVerResponse         &ns1__GetEmfPngVerResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetEmfPngFile_                                                    *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetEmfPngFile_" of service binding "updataServiceSoap".
mapidpagename

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.244:190/updataService.asmx

  - Default SOAP action or REST location path:
    - "http://zbxhupdata.com/webservices/GetEmfPngFile"

  - Addressing input action: "http://zbxhupdata.com/webservices/GetEmfPngFile"

  - Addressing output action: "http://zbxhupdata.com/webservices/GetEmfPngFileResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetEmfPngFile_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetEmfPngFile*                ns1__GetEmfPngFile,
    // output parameters:
    _ns1__GetEmfPngFileResponse        &ns1__GetEmfPngFileResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetEmfPngFile_(
    struct soap *soap,
    // input parameters:
    _ns1__GetEmfPngFile*                ns1__GetEmfPngFile,
    // output parameters:
    _ns1__GetEmfPngFileResponse        &ns1__GetEmfPngFileResponse
  );
@endcode

C++ proxy class (defined in soapupdataServiceSoapProxy.h generated with soapcpp2):
@code
  class updataServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapupdataServiceSoapService.h generated with soapcpp2):
@code
  class updataServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetEmfPngFile_ SOAP
//gsoap ns1  service method-style:	GetEmfPngFile_ document
//gsoap ns1  service method-encoding:	GetEmfPngFile_ literal
//gsoap ns1  service method-input-action:	GetEmfPngFile_ http://zbxhupdata.com/webservices/GetEmfPngFile
//gsoap ns1  service method-output-action:	GetEmfPngFile_ http://zbxhupdata.com/webservices/GetEmfPngFileResponse
int __ns1__GetEmfPngFile_(
    _ns1__GetEmfPngFile*                ns1__GetEmfPngFile,	///< Input parameter
    _ns1__GetEmfPngFileResponse        &ns1__GetEmfPngFileResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__OpenMapExe_                                                       *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__OpenMapExe_" of service binding "updataServiceSoap".


  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.244:190/updataService.asmx

  - Default SOAP action or REST location path:
    - "http://zbxhupdata.com/webservices/OpenMapExe"

  - Addressing input action: "http://zbxhupdata.com/webservices/OpenMapExe"

  - Addressing output action: "http://zbxhupdata.com/webservices/OpenMapExeResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__OpenMapExe_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__OpenMapExe*                   ns1__OpenMapExe,
    // output parameters:
    _ns1__OpenMapExeResponse           &ns1__OpenMapExeResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__OpenMapExe_(
    struct soap *soap,
    // input parameters:
    _ns1__OpenMapExe*                   ns1__OpenMapExe,
    // output parameters:
    _ns1__OpenMapExeResponse           &ns1__OpenMapExeResponse
  );
@endcode

C++ proxy class (defined in soapupdataServiceSoapProxy.h generated with soapcpp2):
@code
  class updataServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapupdataServiceSoapService.h generated with soapcpp2):
@code
  class updataServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	OpenMapExe_ SOAP
//gsoap ns1  service method-style:	OpenMapExe_ document
//gsoap ns1  service method-encoding:	OpenMapExe_ literal
//gsoap ns1  service method-input-action:	OpenMapExe_ http://zbxhupdata.com/webservices/OpenMapExe
//gsoap ns1  service method-output-action:	OpenMapExe_ http://zbxhupdata.com/webservices/OpenMapExeResponse
int __ns1__OpenMapExe_(
    _ns1__OpenMapExe*                   ns1__OpenMapExe,	///< Input parameter
    _ns1__OpenMapExeResponse           &ns1__OpenMapExeResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__ChaoQi_                                                           *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__ChaoQi_" of service binding "updataServiceSoap".


  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.244:190/updataService.asmx

  - Default SOAP action or REST location path:
    - "http://zbxhupdata.com/webservices/ChaoQi"

  - Addressing input action: "http://zbxhupdata.com/webservices/ChaoQi"

  - Addressing output action: "http://zbxhupdata.com/webservices/ChaoQiResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__ChaoQi_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__ChaoQi*                       ns1__ChaoQi,
    // output parameters:
    _ns1__ChaoQiResponse               &ns1__ChaoQiResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__ChaoQi_(
    struct soap *soap,
    // input parameters:
    _ns1__ChaoQi*                       ns1__ChaoQi,
    // output parameters:
    _ns1__ChaoQiResponse               &ns1__ChaoQiResponse
  );
@endcode

C++ proxy class (defined in soapupdataServiceSoapProxy.h generated with soapcpp2):
@code
  class updataServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapupdataServiceSoapService.h generated with soapcpp2):
@code
  class updataServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	ChaoQi_ SOAP
//gsoap ns1  service method-style:	ChaoQi_ document
//gsoap ns1  service method-encoding:	ChaoQi_ literal
//gsoap ns1  service method-input-action:	ChaoQi_ http://zbxhupdata.com/webservices/ChaoQi
//gsoap ns1  service method-output-action:	ChaoQi_ http://zbxhupdata.com/webservices/ChaoQiResponse
int __ns1__ChaoQi_(
    _ns1__ChaoQi*                       ns1__ChaoQi,	///< Input parameter
    _ns1__ChaoQiResponse               &ns1__ChaoQiResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__JiChaoQi_                                                         *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__JiChaoQi_" of service binding "updataServiceSoap".


  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.244:190/updataService.asmx

  - Default SOAP action or REST location path:
    - "http://zbxhupdata.com/webservices/JiChaoQi"

  - Addressing input action: "http://zbxhupdata.com/webservices/JiChaoQi"

  - Addressing output action: "http://zbxhupdata.com/webservices/JiChaoQiResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__JiChaoQi_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__JiChaoQi*                     ns1__JiChaoQi,
    // output parameters:
    _ns1__JiChaoQiResponse             &ns1__JiChaoQiResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__JiChaoQi_(
    struct soap *soap,
    // input parameters:
    _ns1__JiChaoQi*                     ns1__JiChaoQi,
    // output parameters:
    _ns1__JiChaoQiResponse             &ns1__JiChaoQiResponse
  );
@endcode

C++ proxy class (defined in soapupdataServiceSoapProxy.h generated with soapcpp2):
@code
  class updataServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapupdataServiceSoapService.h generated with soapcpp2):
@code
  class updataServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	JiChaoQi_ SOAP
//gsoap ns1  service method-style:	JiChaoQi_ document
//gsoap ns1  service method-encoding:	JiChaoQi_ literal
//gsoap ns1  service method-input-action:	JiChaoQi_ http://zbxhupdata.com/webservices/JiChaoQi
//gsoap ns1  service method-output-action:	JiChaoQi_ http://zbxhupdata.com/webservices/JiChaoQiResponse
int __ns1__JiChaoQi_(
    _ns1__JiChaoQi*                     ns1__JiChaoQi,	///< Input parameter
    _ns1__JiChaoQiResponse             &ns1__JiChaoQiResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetZhouQi_                                                        *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetZhouQi_" of service binding "updataServiceSoap".


  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.244:190/updataService.asmx

  - Default SOAP action or REST location path:
    - "http://zbxhupdata.com/webservices/GetZhouQi"

  - Addressing input action: "http://zbxhupdata.com/webservices/GetZhouQi"

  - Addressing output action: "http://zbxhupdata.com/webservices/GetZhouQiResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetZhouQi_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetZhouQi*                    ns1__GetZhouQi,
    // output parameters:
    _ns1__GetZhouQiResponse            &ns1__GetZhouQiResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetZhouQi_(
    struct soap *soap,
    // input parameters:
    _ns1__GetZhouQi*                    ns1__GetZhouQi,
    // output parameters:
    _ns1__GetZhouQiResponse            &ns1__GetZhouQiResponse
  );
@endcode

C++ proxy class (defined in soapupdataServiceSoapProxy.h generated with soapcpp2):
@code
  class updataServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapupdataServiceSoapService.h generated with soapcpp2):
@code
  class updataServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetZhouQi_ SOAP
//gsoap ns1  service method-style:	GetZhouQi_ document
//gsoap ns1  service method-encoding:	GetZhouQi_ literal
//gsoap ns1  service method-input-action:	GetZhouQi_ http://zbxhupdata.com/webservices/GetZhouQi
//gsoap ns1  service method-output-action:	GetZhouQi_ http://zbxhupdata.com/webservices/GetZhouQiResponse
int __ns1__GetZhouQi_(
    _ns1__GetZhouQi*                    ns1__GetZhouQi,	///< Input parameter
    _ns1__GetZhouQiResponse            &ns1__GetZhouQiResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__FlowChartEmf_                                                     *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__FlowChartEmf_" of service binding "updataServiceSoap".
FlowChart

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.244:190/updataService.asmx

  - Default SOAP action or REST location path:
    - "http://zbxhupdata.com/webservices/FlowChartEmf"

  - Addressing input action: "http://zbxhupdata.com/webservices/FlowChartEmf"

  - Addressing output action: "http://zbxhupdata.com/webservices/FlowChartEmfResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__FlowChartEmf_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__FlowChartEmf*                 ns1__FlowChartEmf,
    // output parameters:
    _ns1__FlowChartEmfResponse         &ns1__FlowChartEmfResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__FlowChartEmf_(
    struct soap *soap,
    // input parameters:
    _ns1__FlowChartEmf*                 ns1__FlowChartEmf,
    // output parameters:
    _ns1__FlowChartEmfResponse         &ns1__FlowChartEmfResponse
  );
@endcode

C++ proxy class (defined in soapupdataServiceSoapProxy.h generated with soapcpp2):
@code
  class updataServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapupdataServiceSoapService.h generated with soapcpp2):
@code
  class updataServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	FlowChartEmf_ SOAP
//gsoap ns1  service method-style:	FlowChartEmf_ document
//gsoap ns1  service method-encoding:	FlowChartEmf_ literal
//gsoap ns1  service method-input-action:	FlowChartEmf_ http://zbxhupdata.com/webservices/FlowChartEmf
//gsoap ns1  service method-output-action:	FlowChartEmf_ http://zbxhupdata.com/webservices/FlowChartEmfResponse
int __ns1__FlowChartEmf_(
    _ns1__FlowChartEmf*                 ns1__FlowChartEmf,	///< Input parameter
    _ns1__FlowChartEmfResponse         &ns1__FlowChartEmfResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__SGCDrawEmf_                                                       *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__SGCDrawEmf_" of service binding "updataServiceSoap".
SGCDrawing

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.244:190/updataService.asmx

  - Default SOAP action or REST location path:
    - "http://zbxhupdata.com/webservices/SGCDrawEmf"

  - Addressing input action: "http://zbxhupdata.com/webservices/SGCDrawEmf"

  - Addressing output action: "http://zbxhupdata.com/webservices/SGCDrawEmfResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__SGCDrawEmf_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__SGCDrawEmf*                   ns1__SGCDrawEmf,
    // output parameters:
    _ns1__SGCDrawEmfResponse           &ns1__SGCDrawEmfResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__SGCDrawEmf_(
    struct soap *soap,
    // input parameters:
    _ns1__SGCDrawEmf*                   ns1__SGCDrawEmf,
    // output parameters:
    _ns1__SGCDrawEmfResponse           &ns1__SGCDrawEmfResponse
  );
@endcode

C++ proxy class (defined in soapupdataServiceSoapProxy.h generated with soapcpp2):
@code
  class updataServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapupdataServiceSoapService.h generated with soapcpp2):
@code
  class updataServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	SGCDrawEmf_ SOAP
//gsoap ns1  service method-style:	SGCDrawEmf_ document
//gsoap ns1  service method-encoding:	SGCDrawEmf_ literal
//gsoap ns1  service method-input-action:	SGCDrawEmf_ http://zbxhupdata.com/webservices/SGCDrawEmf
//gsoap ns1  service method-output-action:	SGCDrawEmf_ http://zbxhupdata.com/webservices/SGCDrawEmfResponse
int __ns1__SGCDrawEmf_(
    _ns1__SGCDrawEmf*                   ns1__SGCDrawEmf,	///< Input parameter
    _ns1__SGCDrawEmfResponse           &ns1__SGCDrawEmfResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GzGetTypeList_                                                    *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GzGetTypeList_" of service binding "updataServiceSoap".
360

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.244:190/updataService.asmx

  - Default SOAP action or REST location path:
    - "http://zbxhupdata.com/webservices/GzGetTypeList"

  - Addressing input action: "http://zbxhupdata.com/webservices/GzGetTypeList"

  - Addressing output action: "http://zbxhupdata.com/webservices/GzGetTypeListResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GzGetTypeList_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GzGetTypeList*                ns1__GzGetTypeList,
    // output parameters:
    _ns1__GzGetTypeListResponse        &ns1__GzGetTypeListResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GzGetTypeList_(
    struct soap *soap,
    // input parameters:
    _ns1__GzGetTypeList*                ns1__GzGetTypeList,
    // output parameters:
    _ns1__GzGetTypeListResponse        &ns1__GzGetTypeListResponse
  );
@endcode

C++ proxy class (defined in soapupdataServiceSoapProxy.h generated with soapcpp2):
@code
  class updataServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapupdataServiceSoapService.h generated with soapcpp2):
@code
  class updataServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GzGetTypeList_ SOAP
//gsoap ns1  service method-style:	GzGetTypeList_ document
//gsoap ns1  service method-encoding:	GzGetTypeList_ literal
//gsoap ns1  service method-input-action:	GzGetTypeList_ http://zbxhupdata.com/webservices/GzGetTypeList
//gsoap ns1  service method-output-action:	GzGetTypeList_ http://zbxhupdata.com/webservices/GzGetTypeListResponse
int __ns1__GzGetTypeList_(
    _ns1__GzGetTypeList*                ns1__GzGetTypeList,	///< Input parameter
    _ns1__GzGetTypeListResponse        &ns1__GzGetTypeListResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GzGetDeviceStruct_                                                *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GzGetDeviceStruct_" of service binding "updataServiceSoap".
360

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.244:190/updataService.asmx

  - Default SOAP action or REST location path:
    - "http://zbxhupdata.com/webservices/GzGetDeviceStruct"

  - Addressing input action: "http://zbxhupdata.com/webservices/GzGetDeviceStruct"

  - Addressing output action: "http://zbxhupdata.com/webservices/GzGetDeviceStructResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GzGetDeviceStruct_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GzGetDeviceStruct*            ns1__GzGetDeviceStruct,
    // output parameters:
    _ns1__GzGetDeviceStructResponse    &ns1__GzGetDeviceStructResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GzGetDeviceStruct_(
    struct soap *soap,
    // input parameters:
    _ns1__GzGetDeviceStruct*            ns1__GzGetDeviceStruct,
    // output parameters:
    _ns1__GzGetDeviceStructResponse    &ns1__GzGetDeviceStructResponse
  );
@endcode

C++ proxy class (defined in soapupdataServiceSoapProxy.h generated with soapcpp2):
@code
  class updataServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapupdataServiceSoapService.h generated with soapcpp2):
@code
  class updataServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GzGetDeviceStruct_ SOAP
//gsoap ns1  service method-style:	GzGetDeviceStruct_ document
//gsoap ns1  service method-encoding:	GzGetDeviceStruct_ literal
//gsoap ns1  service method-input-action:	GzGetDeviceStruct_ http://zbxhupdata.com/webservices/GzGetDeviceStruct
//gsoap ns1  service method-output-action:	GzGetDeviceStruct_ http://zbxhupdata.com/webservices/GzGetDeviceStructResponse
int __ns1__GzGetDeviceStruct_(
    _ns1__GzGetDeviceStruct*            ns1__GzGetDeviceStruct,	///< Input parameter
    _ns1__GzGetDeviceStructResponse    &ns1__GzGetDeviceStructResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__SaveMapFile_                                                      *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__SaveMapFile_" of service binding "updataServiceSoap".


  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.244:190/updataService.asmx

  - Default SOAP action or REST location path:
    - "http://zbxhupdata.com/webservices/SaveMapFile"

  - Addressing input action: "http://zbxhupdata.com/webservices/SaveMapFile"

  - Addressing output action: "http://zbxhupdata.com/webservices/SaveMapFileResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__SaveMapFile_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__SaveMapFile*                  ns1__SaveMapFile,
    // output parameters:
    _ns1__SaveMapFileResponse          &ns1__SaveMapFileResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__SaveMapFile_(
    struct soap *soap,
    // input parameters:
    _ns1__SaveMapFile*                  ns1__SaveMapFile,
    // output parameters:
    _ns1__SaveMapFileResponse          &ns1__SaveMapFileResponse
  );
@endcode

C++ proxy class (defined in soapupdataServiceSoapProxy.h generated with soapcpp2):
@code
  class updataServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapupdataServiceSoapService.h generated with soapcpp2):
@code
  class updataServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	SaveMapFile_ SOAP
//gsoap ns1  service method-style:	SaveMapFile_ document
//gsoap ns1  service method-encoding:	SaveMapFile_ literal
//gsoap ns1  service method-input-action:	SaveMapFile_ http://zbxhupdata.com/webservices/SaveMapFile
//gsoap ns1  service method-output-action:	SaveMapFile_ http://zbxhupdata.com/webservices/SaveMapFileResponse
int __ns1__SaveMapFile_(
    _ns1__SaveMapFile*                  ns1__SaveMapFile,	///< Input parameter
    _ns1__SaveMapFileResponse          &ns1__SaveMapFileResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__SelectYjzhStation_                                                *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__SelectYjzhStation_" of service binding "updataServiceSoap".
,

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.244:190/updataService.asmx

  - Default SOAP action or REST location path:
    - "http://zbxhupdata.com/webservices/SelectYjzhStation"

  - Addressing input action: "http://zbxhupdata.com/webservices/SelectYjzhStation"

  - Addressing output action: "http://zbxhupdata.com/webservices/SelectYjzhStationResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__SelectYjzhStation_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__SelectYjzhStation*            ns1__SelectYjzhStation,
    // output parameters:
    _ns1__SelectYjzhStationResponse    &ns1__SelectYjzhStationResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__SelectYjzhStation_(
    struct soap *soap,
    // input parameters:
    _ns1__SelectYjzhStation*            ns1__SelectYjzhStation,
    // output parameters:
    _ns1__SelectYjzhStationResponse    &ns1__SelectYjzhStationResponse
  );
@endcode

C++ proxy class (defined in soapupdataServiceSoapProxy.h generated with soapcpp2):
@code
  class updataServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapupdataServiceSoapService.h generated with soapcpp2):
@code
  class updataServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	SelectYjzhStation_ SOAP
//gsoap ns1  service method-style:	SelectYjzhStation_ document
//gsoap ns1  service method-encoding:	SelectYjzhStation_ literal
//gsoap ns1  service method-input-action:	SelectYjzhStation_ http://zbxhupdata.com/webservices/SelectYjzhStation
//gsoap ns1  service method-output-action:	SelectYjzhStation_ http://zbxhupdata.com/webservices/SelectYjzhStationResponse
int __ns1__SelectYjzhStation_(
    _ns1__SelectYjzhStation*            ns1__SelectYjzhStation,	///< Input parameter
    _ns1__SelectYjzhStationResponse    &ns1__SelectYjzhStationResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__SelectYjzhDevice_                                                 *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__SelectYjzhDevice_" of service binding "updataServiceSoap".
,typeid

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.244:190/updataService.asmx

  - Default SOAP action or REST location path:
    - "http://zbxhupdata.com/webservices/SelectYjzhDevice"

  - Addressing input action: "http://zbxhupdata.com/webservices/SelectYjzhDevice"

  - Addressing output action: "http://zbxhupdata.com/webservices/SelectYjzhDeviceResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__SelectYjzhDevice_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__SelectYjzhDevice*             ns1__SelectYjzhDevice,
    // output parameters:
    _ns1__SelectYjzhDeviceResponse     &ns1__SelectYjzhDeviceResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__SelectYjzhDevice_(
    struct soap *soap,
    // input parameters:
    _ns1__SelectYjzhDevice*             ns1__SelectYjzhDevice,
    // output parameters:
    _ns1__SelectYjzhDeviceResponse     &ns1__SelectYjzhDeviceResponse
  );
@endcode

C++ proxy class (defined in soapupdataServiceSoapProxy.h generated with soapcpp2):
@code
  class updataServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapupdataServiceSoapService.h generated with soapcpp2):
@code
  class updataServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	SelectYjzhDevice_ SOAP
//gsoap ns1  service method-style:	SelectYjzhDevice_ document
//gsoap ns1  service method-encoding:	SelectYjzhDevice_ literal
//gsoap ns1  service method-input-action:	SelectYjzhDevice_ http://zbxhupdata.com/webservices/SelectYjzhDevice
//gsoap ns1  service method-output-action:	SelectYjzhDevice_ http://zbxhupdata.com/webservices/SelectYjzhDeviceResponse
int __ns1__SelectYjzhDevice_(
    _ns1__SelectYjzhDevice*             ns1__SelectYjzhDevice,	///< Input parameter
    _ns1__SelectYjzhDeviceResponse     &ns1__SelectYjzhDeviceResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetYjzhZskAlarmTypes_                                             *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetYjzhZskAlarmTypes_" of service binding "updataServiceSoap".
1

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.244:190/updataService.asmx

  - Default SOAP action or REST location path:
    - "http://zbxhupdata.com/webservices/GetYjzhZskAlarmTypes"

  - Addressing input action: "http://zbxhupdata.com/webservices/GetYjzhZskAlarmTypes"

  - Addressing output action: "http://zbxhupdata.com/webservices/GetYjzhZskAlarmTypesResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetYjzhZskAlarmTypes_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetYjzhZskAlarmTypes*         ns1__GetYjzhZskAlarmTypes,
    // output parameters:
    _ns1__GetYjzhZskAlarmTypesResponse &ns1__GetYjzhZskAlarmTypesResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetYjzhZskAlarmTypes_(
    struct soap *soap,
    // input parameters:
    _ns1__GetYjzhZskAlarmTypes*         ns1__GetYjzhZskAlarmTypes,
    // output parameters:
    _ns1__GetYjzhZskAlarmTypesResponse &ns1__GetYjzhZskAlarmTypesResponse
  );
@endcode

C++ proxy class (defined in soapupdataServiceSoapProxy.h generated with soapcpp2):
@code
  class updataServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapupdataServiceSoapService.h generated with soapcpp2):
@code
  class updataServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetYjzhZskAlarmTypes_ SOAP
//gsoap ns1  service method-style:	GetYjzhZskAlarmTypes_ document
//gsoap ns1  service method-encoding:	GetYjzhZskAlarmTypes_ literal
//gsoap ns1  service method-input-action:	GetYjzhZskAlarmTypes_ http://zbxhupdata.com/webservices/GetYjzhZskAlarmTypes
//gsoap ns1  service method-output-action:	GetYjzhZskAlarmTypes_ http://zbxhupdata.com/webservices/GetYjzhZskAlarmTypesResponse
int __ns1__GetYjzhZskAlarmTypes_(
    _ns1__GetYjzhZskAlarmTypes*         ns1__GetYjzhZskAlarmTypes,	///< Input parameter
    _ns1__GetYjzhZskAlarmTypesResponse &ns1__GetYjzhZskAlarmTypesResponse	///< Output parameter
);

/**

@page updataServiceSoap Binding "updataServiceSoap"

@section updataServiceSoap_policy_enablers Policy Enablers of Binding "updataServiceSoap"

None specified.

*/

/******************************************************************************\
 *                                                                            *
 * XML Data Binding                                                           *
 *                                                                            *
\******************************************************************************/


/**

@page page_XMLDataBinding XML Data Binding

SOAP/XML services use data bindings contractually bound by WSDL and auto-
generated by wsdl2h and soapcpp2 (see Service Bindings). Plain data bindings
are adopted from XML schemas as part of the WSDL types section or when running
wsdl2h on a set of schemas to produce non-SOAP-based XML data bindings.

The following readers and writers are C/C++ data type (de)serializers auto-
generated by wsdl2h and soapcpp2. Run soapcpp2 on this file to generate the
(de)serialization code, which is stored in soapC.c[pp]. Include "soapH.h" in
your code to import these data type and function declarations. Only use the
soapcpp2-generated files in your project build. Do not include the wsdl2h-
generated .h file in your code.

Data can be read and deserialized from:
  - an int file descriptor, using soap->recvfd = fd
  - a socket, using soap->socket = (int)...
  - a C++ stream (istream, stringstream), using soap->is = (istream*)...
  - a C string, using soap->is = (const char*)...
  - any input, using the soap->frecv() callback

Data can be serialized and written to:
  - an int file descriptor, using soap->sendfd = (int)...
  - a socket, using soap->socket = (int)...
  - a C++ stream (ostream, stringstream), using soap->os = (ostream*)...
  - a C string, using soap->os = (const char**)...
  - any output, using the soap->fsend() callback

The following options are available for (de)serialization control:
  - soap->encodingStyle = NULL; to remove SOAP 1.1/1.2 encodingStyle
  - soap_mode(soap, SOAP_XML_TREE); XML without id-ref (no cycles!)
  - soap_mode(soap, SOAP_XML_GRAPH); XML with id-ref (including cycles)
  - soap_set_namespaces(soap, struct Namespace *nsmap); to set xmlns bindings


@section ns1 Top-level root elements of schema "http://zbxhupdata.com/webservices/"

  - <ns1:GetYjzhZskGzFlow> @ref _ns1__GetYjzhZskGzFlow
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetYjzhZskGzFlow(struct soap*, _ns1__GetYjzhZskGzFlow*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetYjzhZskGzFlow(struct soap*, _ns1__GetYjzhZskGzFlow*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__GetYjzhZskGzFlow(struct soap*, const char *URL, _ns1__GetYjzhZskGzFlow*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__GetYjzhZskGzFlow(struct soap*, const char *URL, _ns1__GetYjzhZskGzFlow*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__GetYjzhZskGzFlow(struct soap*, const char *URL, _ns1__GetYjzhZskGzFlow*);
    soap_POST_recv__ns1__GetYjzhZskGzFlow(struct soap*, _ns1__GetYjzhZskGzFlow*);
    @endcode

  - <ns1:GetYjzhZskGzFlowResponse> @ref _ns1__GetYjzhZskGzFlowResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetYjzhZskGzFlowResponse(struct soap*, _ns1__GetYjzhZskGzFlowResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetYjzhZskGzFlowResponse(struct soap*, _ns1__GetYjzhZskGzFlowResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__GetYjzhZskGzFlowResponse(struct soap*, const char *URL, _ns1__GetYjzhZskGzFlowResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__GetYjzhZskGzFlowResponse(struct soap*, const char *URL, _ns1__GetYjzhZskGzFlowResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__GetYjzhZskGzFlowResponse(struct soap*, const char *URL, _ns1__GetYjzhZskGzFlowResponse*);
    soap_POST_recv__ns1__GetYjzhZskGzFlowResponse(struct soap*, _ns1__GetYjzhZskGzFlowResponse*);
    @endcode

  - <ns1:GetYjzhZskOtherFlowChartList> @ref _ns1__GetYjzhZskOtherFlowChartList
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetYjzhZskOtherFlowChartList(struct soap*, _ns1__GetYjzhZskOtherFlowChartList*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetYjzhZskOtherFlowChartList(struct soap*, _ns1__GetYjzhZskOtherFlowChartList*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__GetYjzhZskOtherFlowChartList(struct soap*, const char *URL, _ns1__GetYjzhZskOtherFlowChartList*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__GetYjzhZskOtherFlowChartList(struct soap*, const char *URL, _ns1__GetYjzhZskOtherFlowChartList*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__GetYjzhZskOtherFlowChartList(struct soap*, const char *URL, _ns1__GetYjzhZskOtherFlowChartList*);
    soap_POST_recv__ns1__GetYjzhZskOtherFlowChartList(struct soap*, _ns1__GetYjzhZskOtherFlowChartList*);
    @endcode

  - <ns1:GetYjzhZskOtherFlowChartListResponse> @ref _ns1__GetYjzhZskOtherFlowChartListResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetYjzhZskOtherFlowChartListResponse(struct soap*, _ns1__GetYjzhZskOtherFlowChartListResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetYjzhZskOtherFlowChartListResponse(struct soap*, _ns1__GetYjzhZskOtherFlowChartListResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__GetYjzhZskOtherFlowChartListResponse(struct soap*, const char *URL, _ns1__GetYjzhZskOtherFlowChartListResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__GetYjzhZskOtherFlowChartListResponse(struct soap*, const char *URL, _ns1__GetYjzhZskOtherFlowChartListResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__GetYjzhZskOtherFlowChartListResponse(struct soap*, const char *URL, _ns1__GetYjzhZskOtherFlowChartListResponse*);
    soap_POST_recv__ns1__GetYjzhZskOtherFlowChartListResponse(struct soap*, _ns1__GetYjzhZskOtherFlowChartListResponse*);
    @endcode

  - <ns1:GetYjzhZskDevFlowChartList> @ref _ns1__GetYjzhZskDevFlowChartList
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetYjzhZskDevFlowChartList(struct soap*, _ns1__GetYjzhZskDevFlowChartList*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetYjzhZskDevFlowChartList(struct soap*, _ns1__GetYjzhZskDevFlowChartList*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__GetYjzhZskDevFlowChartList(struct soap*, const char *URL, _ns1__GetYjzhZskDevFlowChartList*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__GetYjzhZskDevFlowChartList(struct soap*, const char *URL, _ns1__GetYjzhZskDevFlowChartList*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__GetYjzhZskDevFlowChartList(struct soap*, const char *URL, _ns1__GetYjzhZskDevFlowChartList*);
    soap_POST_recv__ns1__GetYjzhZskDevFlowChartList(struct soap*, _ns1__GetYjzhZskDevFlowChartList*);
    @endcode

  - <ns1:GetYjzhZskDevFlowChartListResponse> @ref _ns1__GetYjzhZskDevFlowChartListResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetYjzhZskDevFlowChartListResponse(struct soap*, _ns1__GetYjzhZskDevFlowChartListResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetYjzhZskDevFlowChartListResponse(struct soap*, _ns1__GetYjzhZskDevFlowChartListResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__GetYjzhZskDevFlowChartListResponse(struct soap*, const char *URL, _ns1__GetYjzhZskDevFlowChartListResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__GetYjzhZskDevFlowChartListResponse(struct soap*, const char *URL, _ns1__GetYjzhZskDevFlowChartListResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__GetYjzhZskDevFlowChartListResponse(struct soap*, const char *URL, _ns1__GetYjzhZskDevFlowChartListResponse*);
    soap_POST_recv__ns1__GetYjzhZskDevFlowChartListResponse(struct soap*, _ns1__GetYjzhZskDevFlowChartListResponse*);
    @endcode

  - <ns1:GetPropList> @ref _ns1__GetPropList
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetPropList(struct soap*, _ns1__GetPropList*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetPropList(struct soap*, _ns1__GetPropList*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__GetPropList(struct soap*, const char *URL, _ns1__GetPropList*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__GetPropList(struct soap*, const char *URL, _ns1__GetPropList*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__GetPropList(struct soap*, const char *URL, _ns1__GetPropList*);
    soap_POST_recv__ns1__GetPropList(struct soap*, _ns1__GetPropList*);
    @endcode

  - <ns1:GetPropListResponse> @ref _ns1__GetPropListResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetPropListResponse(struct soap*, _ns1__GetPropListResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetPropListResponse(struct soap*, _ns1__GetPropListResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__GetPropListResponse(struct soap*, const char *URL, _ns1__GetPropListResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__GetPropListResponse(struct soap*, const char *URL, _ns1__GetPropListResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__GetPropListResponse(struct soap*, const char *URL, _ns1__GetPropListResponse*);
    soap_POST_recv__ns1__GetPropListResponse(struct soap*, _ns1__GetPropListResponse*);
    @endcode

  - <ns1:GetPropName> @ref _ns1__GetPropName
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetPropName(struct soap*, _ns1__GetPropName*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetPropName(struct soap*, _ns1__GetPropName*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__GetPropName(struct soap*, const char *URL, _ns1__GetPropName*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__GetPropName(struct soap*, const char *URL, _ns1__GetPropName*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__GetPropName(struct soap*, const char *URL, _ns1__GetPropName*);
    soap_POST_recv__ns1__GetPropName(struct soap*, _ns1__GetPropName*);
    @endcode

  - <ns1:GetPropNameResponse> @ref _ns1__GetPropNameResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetPropNameResponse(struct soap*, _ns1__GetPropNameResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetPropNameResponse(struct soap*, _ns1__GetPropNameResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__GetPropNameResponse(struct soap*, const char *URL, _ns1__GetPropNameResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__GetPropNameResponse(struct soap*, const char *URL, _ns1__GetPropNameResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__GetPropNameResponse(struct soap*, const char *URL, _ns1__GetPropNameResponse*);
    soap_POST_recv__ns1__GetPropNameResponse(struct soap*, _ns1__GetPropNameResponse*);
    @endcode

  - <ns1:CheckLoginUser> @ref _ns1__CheckLoginUser
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__CheckLoginUser(struct soap*, _ns1__CheckLoginUser*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__CheckLoginUser(struct soap*, _ns1__CheckLoginUser*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__CheckLoginUser(struct soap*, const char *URL, _ns1__CheckLoginUser*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__CheckLoginUser(struct soap*, const char *URL, _ns1__CheckLoginUser*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__CheckLoginUser(struct soap*, const char *URL, _ns1__CheckLoginUser*);
    soap_POST_recv__ns1__CheckLoginUser(struct soap*, _ns1__CheckLoginUser*);
    @endcode

  - <ns1:CheckLoginUserResponse> @ref _ns1__CheckLoginUserResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__CheckLoginUserResponse(struct soap*, _ns1__CheckLoginUserResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__CheckLoginUserResponse(struct soap*, _ns1__CheckLoginUserResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__CheckLoginUserResponse(struct soap*, const char *URL, _ns1__CheckLoginUserResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__CheckLoginUserResponse(struct soap*, const char *URL, _ns1__CheckLoginUserResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__CheckLoginUserResponse(struct soap*, const char *URL, _ns1__CheckLoginUserResponse*);
    soap_POST_recv__ns1__CheckLoginUserResponse(struct soap*, _ns1__CheckLoginUserResponse*);
    @endcode

  - <ns1:GetRyUnit> @ref _ns1__GetRyUnit
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetRyUnit(struct soap*, _ns1__GetRyUnit*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetRyUnit(struct soap*, _ns1__GetRyUnit*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__GetRyUnit(struct soap*, const char *URL, _ns1__GetRyUnit*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__GetRyUnit(struct soap*, const char *URL, _ns1__GetRyUnit*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__GetRyUnit(struct soap*, const char *URL, _ns1__GetRyUnit*);
    soap_POST_recv__ns1__GetRyUnit(struct soap*, _ns1__GetRyUnit*);
    @endcode

  - <ns1:GetRyUnitResponse> @ref _ns1__GetRyUnitResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetRyUnitResponse(struct soap*, _ns1__GetRyUnitResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetRyUnitResponse(struct soap*, _ns1__GetRyUnitResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__GetRyUnitResponse(struct soap*, const char *URL, _ns1__GetRyUnitResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__GetRyUnitResponse(struct soap*, const char *URL, _ns1__GetRyUnitResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__GetRyUnitResponse(struct soap*, const char *URL, _ns1__GetRyUnitResponse*);
    soap_POST_recv__ns1__GetRyUnitResponse(struct soap*, _ns1__GetRyUnitResponse*);
    @endcode

  - <ns1:GetDevCode> @ref _ns1__GetDevCode
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetDevCode(struct soap*, _ns1__GetDevCode*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetDevCode(struct soap*, _ns1__GetDevCode*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__GetDevCode(struct soap*, const char *URL, _ns1__GetDevCode*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__GetDevCode(struct soap*, const char *URL, _ns1__GetDevCode*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__GetDevCode(struct soap*, const char *URL, _ns1__GetDevCode*);
    soap_POST_recv__ns1__GetDevCode(struct soap*, _ns1__GetDevCode*);
    @endcode

  - <ns1:GetDevCodeResponse> @ref _ns1__GetDevCodeResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetDevCodeResponse(struct soap*, _ns1__GetDevCodeResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetDevCodeResponse(struct soap*, _ns1__GetDevCodeResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__GetDevCodeResponse(struct soap*, const char *URL, _ns1__GetDevCodeResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__GetDevCodeResponse(struct soap*, const char *URL, _ns1__GetDevCodeResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__GetDevCodeResponse(struct soap*, const char *URL, _ns1__GetDevCodeResponse*);
    soap_POST_recv__ns1__GetDevCodeResponse(struct soap*, _ns1__GetDevCodeResponse*);
    @endcode

  - <ns1:CheckDevCode> @ref _ns1__CheckDevCode
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__CheckDevCode(struct soap*, _ns1__CheckDevCode*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__CheckDevCode(struct soap*, _ns1__CheckDevCode*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__CheckDevCode(struct soap*, const char *URL, _ns1__CheckDevCode*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__CheckDevCode(struct soap*, const char *URL, _ns1__CheckDevCode*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__CheckDevCode(struct soap*, const char *URL, _ns1__CheckDevCode*);
    soap_POST_recv__ns1__CheckDevCode(struct soap*, _ns1__CheckDevCode*);
    @endcode

  - <ns1:CheckDevCodeResponse> @ref _ns1__CheckDevCodeResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__CheckDevCodeResponse(struct soap*, _ns1__CheckDevCodeResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__CheckDevCodeResponse(struct soap*, _ns1__CheckDevCodeResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__CheckDevCodeResponse(struct soap*, const char *URL, _ns1__CheckDevCodeResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__CheckDevCodeResponse(struct soap*, const char *URL, _ns1__CheckDevCodeResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__CheckDevCodeResponse(struct soap*, const char *URL, _ns1__CheckDevCodeResponse*);
    soap_POST_recv__ns1__CheckDevCodeResponse(struct soap*, _ns1__CheckDevCodeResponse*);
    @endcode

  - <ns1:HelloWorld> @ref _ns1__HelloWorld
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__HelloWorld(struct soap*, _ns1__HelloWorld*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__HelloWorld(struct soap*, _ns1__HelloWorld*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__HelloWorld(struct soap*, const char *URL, _ns1__HelloWorld*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__HelloWorld(struct soap*, const char *URL, _ns1__HelloWorld*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__HelloWorld(struct soap*, const char *URL, _ns1__HelloWorld*);
    soap_POST_recv__ns1__HelloWorld(struct soap*, _ns1__HelloWorld*);
    @endcode

  - <ns1:HelloWorldResponse> @ref _ns1__HelloWorldResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__HelloWorldResponse(struct soap*, _ns1__HelloWorldResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__HelloWorldResponse(struct soap*, _ns1__HelloWorldResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__HelloWorldResponse(struct soap*, const char *URL, _ns1__HelloWorldResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__HelloWorldResponse(struct soap*, const char *URL, _ns1__HelloWorldResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__HelloWorldResponse(struct soap*, const char *URL, _ns1__HelloWorldResponse*);
    soap_POST_recv__ns1__HelloWorldResponse(struct soap*, _ns1__HelloWorldResponse*);
    @endcode

  - <ns1:GetDBString> @ref _ns1__GetDBString
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetDBString(struct soap*, _ns1__GetDBString*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetDBString(struct soap*, _ns1__GetDBString*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__GetDBString(struct soap*, const char *URL, _ns1__GetDBString*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__GetDBString(struct soap*, const char *URL, _ns1__GetDBString*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__GetDBString(struct soap*, const char *URL, _ns1__GetDBString*);
    soap_POST_recv__ns1__GetDBString(struct soap*, _ns1__GetDBString*);
    @endcode

  - <ns1:GetDBStringResponse> @ref _ns1__GetDBStringResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetDBStringResponse(struct soap*, _ns1__GetDBStringResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetDBStringResponse(struct soap*, _ns1__GetDBStringResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__GetDBStringResponse(struct soap*, const char *URL, _ns1__GetDBStringResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__GetDBStringResponse(struct soap*, const char *URL, _ns1__GetDBStringResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__GetDBStringResponse(struct soap*, const char *URL, _ns1__GetDBStringResponse*);
    soap_POST_recv__ns1__GetDBStringResponse(struct soap*, _ns1__GetDBStringResponse*);
    @endcode

  - <ns1:QueryData> @ref _ns1__QueryData
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__QueryData(struct soap*, _ns1__QueryData*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__QueryData(struct soap*, _ns1__QueryData*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__QueryData(struct soap*, const char *URL, _ns1__QueryData*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__QueryData(struct soap*, const char *URL, _ns1__QueryData*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__QueryData(struct soap*, const char *URL, _ns1__QueryData*);
    soap_POST_recv__ns1__QueryData(struct soap*, _ns1__QueryData*);
    @endcode

  - <ns1:QueryDataResponse> @ref _ns1__QueryDataResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__QueryDataResponse(struct soap*, _ns1__QueryDataResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__QueryDataResponse(struct soap*, _ns1__QueryDataResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__QueryDataResponse(struct soap*, const char *URL, _ns1__QueryDataResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__QueryDataResponse(struct soap*, const char *URL, _ns1__QueryDataResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__QueryDataResponse(struct soap*, const char *URL, _ns1__QueryDataResponse*);
    soap_POST_recv__ns1__QueryDataResponse(struct soap*, _ns1__QueryDataResponse*);
    @endcode

  - <ns1:QueryDataCount> @ref _ns1__QueryDataCount
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__QueryDataCount(struct soap*, _ns1__QueryDataCount*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__QueryDataCount(struct soap*, _ns1__QueryDataCount*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__QueryDataCount(struct soap*, const char *URL, _ns1__QueryDataCount*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__QueryDataCount(struct soap*, const char *URL, _ns1__QueryDataCount*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__QueryDataCount(struct soap*, const char *URL, _ns1__QueryDataCount*);
    soap_POST_recv__ns1__QueryDataCount(struct soap*, _ns1__QueryDataCount*);
    @endcode

  - <ns1:QueryDataCountResponse> @ref _ns1__QueryDataCountResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__QueryDataCountResponse(struct soap*, _ns1__QueryDataCountResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__QueryDataCountResponse(struct soap*, _ns1__QueryDataCountResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__QueryDataCountResponse(struct soap*, const char *URL, _ns1__QueryDataCountResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__QueryDataCountResponse(struct soap*, const char *URL, _ns1__QueryDataCountResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__QueryDataCountResponse(struct soap*, const char *URL, _ns1__QueryDataCountResponse*);
    soap_POST_recv__ns1__QueryDataCountResponse(struct soap*, _ns1__QueryDataCountResponse*);
    @endcode

  - <ns1:ExecuteSql> @ref _ns1__ExecuteSql
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__ExecuteSql(struct soap*, _ns1__ExecuteSql*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__ExecuteSql(struct soap*, _ns1__ExecuteSql*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__ExecuteSql(struct soap*, const char *URL, _ns1__ExecuteSql*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__ExecuteSql(struct soap*, const char *URL, _ns1__ExecuteSql*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__ExecuteSql(struct soap*, const char *URL, _ns1__ExecuteSql*);
    soap_POST_recv__ns1__ExecuteSql(struct soap*, _ns1__ExecuteSql*);
    @endcode

  - <ns1:ExecuteSqlResponse> @ref _ns1__ExecuteSqlResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__ExecuteSqlResponse(struct soap*, _ns1__ExecuteSqlResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__ExecuteSqlResponse(struct soap*, _ns1__ExecuteSqlResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__ExecuteSqlResponse(struct soap*, const char *URL, _ns1__ExecuteSqlResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__ExecuteSqlResponse(struct soap*, const char *URL, _ns1__ExecuteSqlResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__ExecuteSqlResponse(struct soap*, const char *URL, _ns1__ExecuteSqlResponse*);
    soap_POST_recv__ns1__ExecuteSqlResponse(struct soap*, _ns1__ExecuteSqlResponse*);
    @endcode

  - <ns1:SaveData> @ref _ns1__SaveData
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__SaveData(struct soap*, _ns1__SaveData*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__SaveData(struct soap*, _ns1__SaveData*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__SaveData(struct soap*, const char *URL, _ns1__SaveData*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__SaveData(struct soap*, const char *URL, _ns1__SaveData*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__SaveData(struct soap*, const char *URL, _ns1__SaveData*);
    soap_POST_recv__ns1__SaveData(struct soap*, _ns1__SaveData*);
    @endcode

  - <ns1:SaveDataResponse> @ref _ns1__SaveDataResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__SaveDataResponse(struct soap*, _ns1__SaveDataResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__SaveDataResponse(struct soap*, _ns1__SaveDataResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__SaveDataResponse(struct soap*, const char *URL, _ns1__SaveDataResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__SaveDataResponse(struct soap*, const char *URL, _ns1__SaveDataResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__SaveDataResponse(struct soap*, const char *URL, _ns1__SaveDataResponse*);
    soap_POST_recv__ns1__SaveDataResponse(struct soap*, _ns1__SaveDataResponse*);
    @endcode

  - <ns1:SaveFileData> @ref _ns1__SaveFileData
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__SaveFileData(struct soap*, _ns1__SaveFileData*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__SaveFileData(struct soap*, _ns1__SaveFileData*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__SaveFileData(struct soap*, const char *URL, _ns1__SaveFileData*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__SaveFileData(struct soap*, const char *URL, _ns1__SaveFileData*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__SaveFileData(struct soap*, const char *URL, _ns1__SaveFileData*);
    soap_POST_recv__ns1__SaveFileData(struct soap*, _ns1__SaveFileData*);
    @endcode

  - <ns1:SaveFileDataResponse> @ref _ns1__SaveFileDataResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__SaveFileDataResponse(struct soap*, _ns1__SaveFileDataResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__SaveFileDataResponse(struct soap*, _ns1__SaveFileDataResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__SaveFileDataResponse(struct soap*, const char *URL, _ns1__SaveFileDataResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__SaveFileDataResponse(struct soap*, const char *URL, _ns1__SaveFileDataResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__SaveFileDataResponse(struct soap*, const char *URL, _ns1__SaveFileDataResponse*);
    soap_POST_recv__ns1__SaveFileDataResponse(struct soap*, _ns1__SaveFileDataResponse*);
    @endcode

  - <ns1:DownPic> @ref _ns1__DownPic
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__DownPic(struct soap*, _ns1__DownPic*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__DownPic(struct soap*, _ns1__DownPic*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__DownPic(struct soap*, const char *URL, _ns1__DownPic*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__DownPic(struct soap*, const char *URL, _ns1__DownPic*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__DownPic(struct soap*, const char *URL, _ns1__DownPic*);
    soap_POST_recv__ns1__DownPic(struct soap*, _ns1__DownPic*);
    @endcode

  - <ns1:DownPicResponse> @ref _ns1__DownPicResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__DownPicResponse(struct soap*, _ns1__DownPicResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__DownPicResponse(struct soap*, _ns1__DownPicResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__DownPicResponse(struct soap*, const char *URL, _ns1__DownPicResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__DownPicResponse(struct soap*, const char *URL, _ns1__DownPicResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__DownPicResponse(struct soap*, const char *URL, _ns1__DownPicResponse*);
    soap_POST_recv__ns1__DownPicResponse(struct soap*, _ns1__DownPicResponse*);
    @endcode

  - <ns1:DownAllPic> @ref _ns1__DownAllPic
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__DownAllPic(struct soap*, _ns1__DownAllPic*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__DownAllPic(struct soap*, _ns1__DownAllPic*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__DownAllPic(struct soap*, const char *URL, _ns1__DownAllPic*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__DownAllPic(struct soap*, const char *URL, _ns1__DownAllPic*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__DownAllPic(struct soap*, const char *URL, _ns1__DownAllPic*);
    soap_POST_recv__ns1__DownAllPic(struct soap*, _ns1__DownAllPic*);
    @endcode

  - <ns1:DownAllPicResponse> @ref _ns1__DownAllPicResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__DownAllPicResponse(struct soap*, _ns1__DownAllPicResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__DownAllPicResponse(struct soap*, _ns1__DownAllPicResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__DownAllPicResponse(struct soap*, const char *URL, _ns1__DownAllPicResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__DownAllPicResponse(struct soap*, const char *URL, _ns1__DownAllPicResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__DownAllPicResponse(struct soap*, const char *URL, _ns1__DownAllPicResponse*);
    soap_POST_recv__ns1__DownAllPicResponse(struct soap*, _ns1__DownAllPicResponse*);
    @endcode

  - <ns1:GetGxdataUpTime> @ref _ns1__GetGxdataUpTime
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetGxdataUpTime(struct soap*, _ns1__GetGxdataUpTime*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetGxdataUpTime(struct soap*, _ns1__GetGxdataUpTime*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__GetGxdataUpTime(struct soap*, const char *URL, _ns1__GetGxdataUpTime*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__GetGxdataUpTime(struct soap*, const char *URL, _ns1__GetGxdataUpTime*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__GetGxdataUpTime(struct soap*, const char *URL, _ns1__GetGxdataUpTime*);
    soap_POST_recv__ns1__GetGxdataUpTime(struct soap*, _ns1__GetGxdataUpTime*);
    @endcode

  - <ns1:GetGxdataUpTimeResponse> @ref _ns1__GetGxdataUpTimeResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetGxdataUpTimeResponse(struct soap*, _ns1__GetGxdataUpTimeResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetGxdataUpTimeResponse(struct soap*, _ns1__GetGxdataUpTimeResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__GetGxdataUpTimeResponse(struct soap*, const char *URL, _ns1__GetGxdataUpTimeResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__GetGxdataUpTimeResponse(struct soap*, const char *URL, _ns1__GetGxdataUpTimeResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__GetGxdataUpTimeResponse(struct soap*, const char *URL, _ns1__GetGxdataUpTimeResponse*);
    soap_POST_recv__ns1__GetGxdataUpTimeResponse(struct soap*, _ns1__GetGxdataUpTimeResponse*);
    @endcode

  - <ns1:signedUserInfo> @ref _ns1__signedUserInfo
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__signedUserInfo(struct soap*, _ns1__signedUserInfo*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__signedUserInfo(struct soap*, _ns1__signedUserInfo*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__signedUserInfo(struct soap*, const char *URL, _ns1__signedUserInfo*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__signedUserInfo(struct soap*, const char *URL, _ns1__signedUserInfo*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__signedUserInfo(struct soap*, const char *URL, _ns1__signedUserInfo*);
    soap_POST_recv__ns1__signedUserInfo(struct soap*, _ns1__signedUserInfo*);
    @endcode

  - <ns1:signedUserInfoResponse> @ref _ns1__signedUserInfoResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__signedUserInfoResponse(struct soap*, _ns1__signedUserInfoResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__signedUserInfoResponse(struct soap*, _ns1__signedUserInfoResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__signedUserInfoResponse(struct soap*, const char *URL, _ns1__signedUserInfoResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__signedUserInfoResponse(struct soap*, const char *URL, _ns1__signedUserInfoResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__signedUserInfoResponse(struct soap*, const char *URL, _ns1__signedUserInfoResponse*);
    soap_POST_recv__ns1__signedUserInfoResponse(struct soap*, _ns1__signedUserInfoResponse*);
    @endcode

  - <ns1:GetOsDateTime> @ref _ns1__GetOsDateTime
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetOsDateTime(struct soap*, _ns1__GetOsDateTime*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetOsDateTime(struct soap*, _ns1__GetOsDateTime*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__GetOsDateTime(struct soap*, const char *URL, _ns1__GetOsDateTime*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__GetOsDateTime(struct soap*, const char *URL, _ns1__GetOsDateTime*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__GetOsDateTime(struct soap*, const char *URL, _ns1__GetOsDateTime*);
    soap_POST_recv__ns1__GetOsDateTime(struct soap*, _ns1__GetOsDateTime*);
    @endcode

  - <ns1:GetOsDateTimeResponse> @ref _ns1__GetOsDateTimeResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetOsDateTimeResponse(struct soap*, _ns1__GetOsDateTimeResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetOsDateTimeResponse(struct soap*, _ns1__GetOsDateTimeResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__GetOsDateTimeResponse(struct soap*, const char *URL, _ns1__GetOsDateTimeResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__GetOsDateTimeResponse(struct soap*, const char *URL, _ns1__GetOsDateTimeResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__GetOsDateTimeResponse(struct soap*, const char *URL, _ns1__GetOsDateTimeResponse*);
    soap_POST_recv__ns1__GetOsDateTimeResponse(struct soap*, _ns1__GetOsDateTimeResponse*);
    @endcode

  - <ns1:QueryPhotobw> @ref _ns1__QueryPhotobw
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__QueryPhotobw(struct soap*, _ns1__QueryPhotobw*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__QueryPhotobw(struct soap*, _ns1__QueryPhotobw*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__QueryPhotobw(struct soap*, const char *URL, _ns1__QueryPhotobw*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__QueryPhotobw(struct soap*, const char *URL, _ns1__QueryPhotobw*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__QueryPhotobw(struct soap*, const char *URL, _ns1__QueryPhotobw*);
    soap_POST_recv__ns1__QueryPhotobw(struct soap*, _ns1__QueryPhotobw*);
    @endcode

  - <ns1:QueryPhotobwResponse> @ref _ns1__QueryPhotobwResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__QueryPhotobwResponse(struct soap*, _ns1__QueryPhotobwResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__QueryPhotobwResponse(struct soap*, _ns1__QueryPhotobwResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__QueryPhotobwResponse(struct soap*, const char *URL, _ns1__QueryPhotobwResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__QueryPhotobwResponse(struct soap*, const char *URL, _ns1__QueryPhotobwResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__QueryPhotobwResponse(struct soap*, const char *URL, _ns1__QueryPhotobwResponse*);
    soap_POST_recv__ns1__QueryPhotobwResponse(struct soap*, _ns1__QueryPhotobwResponse*);
    @endcode

  - <ns1:TcdQuery> @ref _ns1__TcdQuery
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__TcdQuery(struct soap*, _ns1__TcdQuery*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__TcdQuery(struct soap*, _ns1__TcdQuery*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__TcdQuery(struct soap*, const char *URL, _ns1__TcdQuery*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__TcdQuery(struct soap*, const char *URL, _ns1__TcdQuery*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__TcdQuery(struct soap*, const char *URL, _ns1__TcdQuery*);
    soap_POST_recv__ns1__TcdQuery(struct soap*, _ns1__TcdQuery*);
    @endcode

  - <ns1:TcdQueryResponse> @ref _ns1__TcdQueryResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__TcdQueryResponse(struct soap*, _ns1__TcdQueryResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__TcdQueryResponse(struct soap*, _ns1__TcdQueryResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__TcdQueryResponse(struct soap*, const char *URL, _ns1__TcdQueryResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__TcdQueryResponse(struct soap*, const char *URL, _ns1__TcdQueryResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__TcdQueryResponse(struct soap*, const char *URL, _ns1__TcdQueryResponse*);
    soap_POST_recv__ns1__TcdQueryResponse(struct soap*, _ns1__TcdQueryResponse*);
    @endcode

  - <ns1:TcdSendup> @ref _ns1__TcdSendup
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__TcdSendup(struct soap*, _ns1__TcdSendup*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__TcdSendup(struct soap*, _ns1__TcdSendup*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__TcdSendup(struct soap*, const char *URL, _ns1__TcdSendup*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__TcdSendup(struct soap*, const char *URL, _ns1__TcdSendup*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__TcdSendup(struct soap*, const char *URL, _ns1__TcdSendup*);
    soap_POST_recv__ns1__TcdSendup(struct soap*, _ns1__TcdSendup*);
    @endcode

  - <ns1:TcdSendupResponse> @ref _ns1__TcdSendupResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__TcdSendupResponse(struct soap*, _ns1__TcdSendupResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__TcdSendupResponse(struct soap*, _ns1__TcdSendupResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__TcdSendupResponse(struct soap*, const char *URL, _ns1__TcdSendupResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__TcdSendupResponse(struct soap*, const char *URL, _ns1__TcdSendupResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__TcdSendupResponse(struct soap*, const char *URL, _ns1__TcdSendupResponse*);
    soap_POST_recv__ns1__TcdSendupResponse(struct soap*, _ns1__TcdSendupResponse*);
    @endcode

  - <ns1:UpLoadData> @ref _ns1__UpLoadData
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__UpLoadData(struct soap*, _ns1__UpLoadData*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__UpLoadData(struct soap*, _ns1__UpLoadData*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__UpLoadData(struct soap*, const char *URL, _ns1__UpLoadData*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__UpLoadData(struct soap*, const char *URL, _ns1__UpLoadData*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__UpLoadData(struct soap*, const char *URL, _ns1__UpLoadData*);
    soap_POST_recv__ns1__UpLoadData(struct soap*, _ns1__UpLoadData*);
    @endcode

  - <ns1:UpLoadDataResponse> @ref _ns1__UpLoadDataResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__UpLoadDataResponse(struct soap*, _ns1__UpLoadDataResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__UpLoadDataResponse(struct soap*, _ns1__UpLoadDataResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__UpLoadDataResponse(struct soap*, const char *URL, _ns1__UpLoadDataResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__UpLoadDataResponse(struct soap*, const char *URL, _ns1__UpLoadDataResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__UpLoadDataResponse(struct soap*, const char *URL, _ns1__UpLoadDataResponse*);
    soap_POST_recv__ns1__UpLoadDataResponse(struct soap*, _ns1__UpLoadDataResponse*);
    @endcode

  - <ns1:ExecuteSqlForColb> @ref _ns1__ExecuteSqlForColb
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__ExecuteSqlForColb(struct soap*, _ns1__ExecuteSqlForColb*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__ExecuteSqlForColb(struct soap*, _ns1__ExecuteSqlForColb*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__ExecuteSqlForColb(struct soap*, const char *URL, _ns1__ExecuteSqlForColb*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__ExecuteSqlForColb(struct soap*, const char *URL, _ns1__ExecuteSqlForColb*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__ExecuteSqlForColb(struct soap*, const char *URL, _ns1__ExecuteSqlForColb*);
    soap_POST_recv__ns1__ExecuteSqlForColb(struct soap*, _ns1__ExecuteSqlForColb*);
    @endcode

  - <ns1:ExecuteSqlForColbResponse> @ref _ns1__ExecuteSqlForColbResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__ExecuteSqlForColbResponse(struct soap*, _ns1__ExecuteSqlForColbResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__ExecuteSqlForColbResponse(struct soap*, _ns1__ExecuteSqlForColbResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__ExecuteSqlForColbResponse(struct soap*, const char *URL, _ns1__ExecuteSqlForColbResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__ExecuteSqlForColbResponse(struct soap*, const char *URL, _ns1__ExecuteSqlForColbResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__ExecuteSqlForColbResponse(struct soap*, const char *URL, _ns1__ExecuteSqlForColbResponse*);
    soap_POST_recv__ns1__ExecuteSqlForColbResponse(struct soap*, _ns1__ExecuteSqlForColbResponse*);
    @endcode

  - <ns1:GetXHYDGLXTupdater> @ref _ns1__GetXHYDGLXTupdater
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetXHYDGLXTupdater(struct soap*, _ns1__GetXHYDGLXTupdater*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetXHYDGLXTupdater(struct soap*, _ns1__GetXHYDGLXTupdater*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__GetXHYDGLXTupdater(struct soap*, const char *URL, _ns1__GetXHYDGLXTupdater*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__GetXHYDGLXTupdater(struct soap*, const char *URL, _ns1__GetXHYDGLXTupdater*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__GetXHYDGLXTupdater(struct soap*, const char *URL, _ns1__GetXHYDGLXTupdater*);
    soap_POST_recv__ns1__GetXHYDGLXTupdater(struct soap*, _ns1__GetXHYDGLXTupdater*);
    @endcode

  - <ns1:GetXHYDGLXTupdaterResponse> @ref _ns1__GetXHYDGLXTupdaterResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetXHYDGLXTupdaterResponse(struct soap*, _ns1__GetXHYDGLXTupdaterResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetXHYDGLXTupdaterResponse(struct soap*, _ns1__GetXHYDGLXTupdaterResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__GetXHYDGLXTupdaterResponse(struct soap*, const char *URL, _ns1__GetXHYDGLXTupdaterResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__GetXHYDGLXTupdaterResponse(struct soap*, const char *URL, _ns1__GetXHYDGLXTupdaterResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__GetXHYDGLXTupdaterResponse(struct soap*, const char *URL, _ns1__GetXHYDGLXTupdaterResponse*);
    soap_POST_recv__ns1__GetXHYDGLXTupdaterResponse(struct soap*, _ns1__GetXHYDGLXTupdaterResponse*);
    @endcode

  - <ns1:GetAPVupdater> @ref _ns1__GetAPVupdater
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetAPVupdater(struct soap*, _ns1__GetAPVupdater*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetAPVupdater(struct soap*, _ns1__GetAPVupdater*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__GetAPVupdater(struct soap*, const char *URL, _ns1__GetAPVupdater*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__GetAPVupdater(struct soap*, const char *URL, _ns1__GetAPVupdater*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__GetAPVupdater(struct soap*, const char *URL, _ns1__GetAPVupdater*);
    soap_POST_recv__ns1__GetAPVupdater(struct soap*, _ns1__GetAPVupdater*);
    @endcode

  - <ns1:GetAPVupdaterResponse> @ref _ns1__GetAPVupdaterResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetAPVupdaterResponse(struct soap*, _ns1__GetAPVupdaterResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetAPVupdaterResponse(struct soap*, _ns1__GetAPVupdaterResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__GetAPVupdaterResponse(struct soap*, const char *URL, _ns1__GetAPVupdaterResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__GetAPVupdaterResponse(struct soap*, const char *URL, _ns1__GetAPVupdaterResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__GetAPVupdaterResponse(struct soap*, const char *URL, _ns1__GetAPVupdaterResponse*);
    soap_POST_recv__ns1__GetAPVupdaterResponse(struct soap*, _ns1__GetAPVupdaterResponse*);
    @endcode

  - <ns1:UpLoadFile> @ref _ns1__UpLoadFile
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__UpLoadFile(struct soap*, _ns1__UpLoadFile*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__UpLoadFile(struct soap*, _ns1__UpLoadFile*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__UpLoadFile(struct soap*, const char *URL, _ns1__UpLoadFile*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__UpLoadFile(struct soap*, const char *URL, _ns1__UpLoadFile*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__UpLoadFile(struct soap*, const char *URL, _ns1__UpLoadFile*);
    soap_POST_recv__ns1__UpLoadFile(struct soap*, _ns1__UpLoadFile*);
    @endcode

  - <ns1:UpLoadFileResponse> @ref _ns1__UpLoadFileResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__UpLoadFileResponse(struct soap*, _ns1__UpLoadFileResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__UpLoadFileResponse(struct soap*, _ns1__UpLoadFileResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__UpLoadFileResponse(struct soap*, const char *URL, _ns1__UpLoadFileResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__UpLoadFileResponse(struct soap*, const char *URL, _ns1__UpLoadFileResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__UpLoadFileResponse(struct soap*, const char *URL, _ns1__UpLoadFileResponse*);
    soap_POST_recv__ns1__UpLoadFileResponse(struct soap*, _ns1__UpLoadFileResponse*);
    @endcode

  - <ns1:upPic> @ref _ns1__upPic
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__upPic(struct soap*, _ns1__upPic*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__upPic(struct soap*, _ns1__upPic*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__upPic(struct soap*, const char *URL, _ns1__upPic*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__upPic(struct soap*, const char *URL, _ns1__upPic*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__upPic(struct soap*, const char *URL, _ns1__upPic*);
    soap_POST_recv__ns1__upPic(struct soap*, _ns1__upPic*);
    @endcode

  - <ns1:upPicResponse> @ref _ns1__upPicResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__upPicResponse(struct soap*, _ns1__upPicResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__upPicResponse(struct soap*, _ns1__upPicResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__upPicResponse(struct soap*, const char *URL, _ns1__upPicResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__upPicResponse(struct soap*, const char *URL, _ns1__upPicResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__upPicResponse(struct soap*, const char *URL, _ns1__upPicResponse*);
    soap_POST_recv__ns1__upPicResponse(struct soap*, _ns1__upPicResponse*);
    @endcode

  - <ns1:DownloadPic> @ref _ns1__DownloadPic
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__DownloadPic(struct soap*, _ns1__DownloadPic*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__DownloadPic(struct soap*, _ns1__DownloadPic*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__DownloadPic(struct soap*, const char *URL, _ns1__DownloadPic*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__DownloadPic(struct soap*, const char *URL, _ns1__DownloadPic*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__DownloadPic(struct soap*, const char *URL, _ns1__DownloadPic*);
    soap_POST_recv__ns1__DownloadPic(struct soap*, _ns1__DownloadPic*);
    @endcode

  - <ns1:DownloadPicResponse> @ref _ns1__DownloadPicResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__DownloadPicResponse(struct soap*, _ns1__DownloadPicResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__DownloadPicResponse(struct soap*, _ns1__DownloadPicResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__DownloadPicResponse(struct soap*, const char *URL, _ns1__DownloadPicResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__DownloadPicResponse(struct soap*, const char *URL, _ns1__DownloadPicResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__DownloadPicResponse(struct soap*, const char *URL, _ns1__DownloadPicResponse*);
    soap_POST_recv__ns1__DownloadPicResponse(struct soap*, _ns1__DownloadPicResponse*);
    @endcode

  - <ns1:GetPicNames> @ref _ns1__GetPicNames
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetPicNames(struct soap*, _ns1__GetPicNames*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetPicNames(struct soap*, _ns1__GetPicNames*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__GetPicNames(struct soap*, const char *URL, _ns1__GetPicNames*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__GetPicNames(struct soap*, const char *URL, _ns1__GetPicNames*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__GetPicNames(struct soap*, const char *URL, _ns1__GetPicNames*);
    soap_POST_recv__ns1__GetPicNames(struct soap*, _ns1__GetPicNames*);
    @endcode

  - <ns1:GetPicNamesResponse> @ref _ns1__GetPicNamesResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetPicNamesResponse(struct soap*, _ns1__GetPicNamesResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetPicNamesResponse(struct soap*, _ns1__GetPicNamesResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__GetPicNamesResponse(struct soap*, const char *URL, _ns1__GetPicNamesResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__GetPicNamesResponse(struct soap*, const char *URL, _ns1__GetPicNamesResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__GetPicNamesResponse(struct soap*, const char *URL, _ns1__GetPicNamesResponse*);
    soap_POST_recv__ns1__GetPicNamesResponse(struct soap*, _ns1__GetPicNamesResponse*);
    @endcode

  - <ns1:GetDwInfo> @ref _ns1__GetDwInfo
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetDwInfo(struct soap*, _ns1__GetDwInfo*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetDwInfo(struct soap*, _ns1__GetDwInfo*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__GetDwInfo(struct soap*, const char *URL, _ns1__GetDwInfo*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__GetDwInfo(struct soap*, const char *URL, _ns1__GetDwInfo*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__GetDwInfo(struct soap*, const char *URL, _ns1__GetDwInfo*);
    soap_POST_recv__ns1__GetDwInfo(struct soap*, _ns1__GetDwInfo*);
    @endcode

  - <ns1:GetDwInfoResponse> @ref _ns1__GetDwInfoResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetDwInfoResponse(struct soap*, _ns1__GetDwInfoResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetDwInfoResponse(struct soap*, _ns1__GetDwInfoResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__GetDwInfoResponse(struct soap*, const char *URL, _ns1__GetDwInfoResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__GetDwInfoResponse(struct soap*, const char *URL, _ns1__GetDwInfoResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__GetDwInfoResponse(struct soap*, const char *URL, _ns1__GetDwInfoResponse*);
    soap_POST_recv__ns1__GetDwInfoResponse(struct soap*, _ns1__GetDwInfoResponse*);
    @endcode

  - <ns1:GetDwPic> @ref _ns1__GetDwPic
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetDwPic(struct soap*, _ns1__GetDwPic*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetDwPic(struct soap*, _ns1__GetDwPic*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__GetDwPic(struct soap*, const char *URL, _ns1__GetDwPic*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__GetDwPic(struct soap*, const char *URL, _ns1__GetDwPic*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__GetDwPic(struct soap*, const char *URL, _ns1__GetDwPic*);
    soap_POST_recv__ns1__GetDwPic(struct soap*, _ns1__GetDwPic*);
    @endcode

  - <ns1:GetDwPicResponse> @ref _ns1__GetDwPicResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetDwPicResponse(struct soap*, _ns1__GetDwPicResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetDwPicResponse(struct soap*, _ns1__GetDwPicResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__GetDwPicResponse(struct soap*, const char *URL, _ns1__GetDwPicResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__GetDwPicResponse(struct soap*, const char *URL, _ns1__GetDwPicResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__GetDwPicResponse(struct soap*, const char *URL, _ns1__GetDwPicResponse*);
    soap_POST_recv__ns1__GetDwPicResponse(struct soap*, _ns1__GetDwPicResponse*);
    @endcode

  - <ns1:GetDeviceXj> @ref _ns1__GetDeviceXj
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetDeviceXj(struct soap*, _ns1__GetDeviceXj*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetDeviceXj(struct soap*, _ns1__GetDeviceXj*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__GetDeviceXj(struct soap*, const char *URL, _ns1__GetDeviceXj*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__GetDeviceXj(struct soap*, const char *URL, _ns1__GetDeviceXj*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__GetDeviceXj(struct soap*, const char *URL, _ns1__GetDeviceXj*);
    soap_POST_recv__ns1__GetDeviceXj(struct soap*, _ns1__GetDeviceXj*);
    @endcode

  - <ns1:GetDeviceXjResponse> @ref _ns1__GetDeviceXjResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetDeviceXjResponse(struct soap*, _ns1__GetDeviceXjResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetDeviceXjResponse(struct soap*, _ns1__GetDeviceXjResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__GetDeviceXjResponse(struct soap*, const char *URL, _ns1__GetDeviceXjResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__GetDeviceXjResponse(struct soap*, const char *URL, _ns1__GetDeviceXjResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__GetDeviceXjResponse(struct soap*, const char *URL, _ns1__GetDeviceXjResponse*);
    soap_POST_recv__ns1__GetDeviceXjResponse(struct soap*, _ns1__GetDeviceXjResponse*);
    @endcode

  - <ns1:GetJxData> @ref _ns1__GetJxData
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetJxData(struct soap*, _ns1__GetJxData*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetJxData(struct soap*, _ns1__GetJxData*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__GetJxData(struct soap*, const char *URL, _ns1__GetJxData*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__GetJxData(struct soap*, const char *URL, _ns1__GetJxData*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__GetJxData(struct soap*, const char *URL, _ns1__GetJxData*);
    soap_POST_recv__ns1__GetJxData(struct soap*, _ns1__GetJxData*);
    @endcode

  - <ns1:GetJxDataResponse> @ref _ns1__GetJxDataResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetJxDataResponse(struct soap*, _ns1__GetJxDataResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetJxDataResponse(struct soap*, _ns1__GetJxDataResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__GetJxDataResponse(struct soap*, const char *URL, _ns1__GetJxDataResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__GetJxDataResponse(struct soap*, const char *URL, _ns1__GetJxDataResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__GetJxDataResponse(struct soap*, const char *URL, _ns1__GetJxDataResponse*);
    soap_POST_recv__ns1__GetJxDataResponse(struct soap*, _ns1__GetJxDataResponse*);
    @endcode

  - <ns1:GetStationJxData> @ref _ns1__GetStationJxData
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetStationJxData(struct soap*, _ns1__GetStationJxData*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetStationJxData(struct soap*, _ns1__GetStationJxData*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__GetStationJxData(struct soap*, const char *URL, _ns1__GetStationJxData*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__GetStationJxData(struct soap*, const char *URL, _ns1__GetStationJxData*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__GetStationJxData(struct soap*, const char *URL, _ns1__GetStationJxData*);
    soap_POST_recv__ns1__GetStationJxData(struct soap*, _ns1__GetStationJxData*);
    @endcode

  - <ns1:GetStationJxDataResponse> @ref _ns1__GetStationJxDataResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetStationJxDataResponse(struct soap*, _ns1__GetStationJxDataResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetStationJxDataResponse(struct soap*, _ns1__GetStationJxDataResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__GetStationJxDataResponse(struct soap*, const char *URL, _ns1__GetStationJxDataResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__GetStationJxDataResponse(struct soap*, const char *URL, _ns1__GetStationJxDataResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__GetStationJxDataResponse(struct soap*, const char *URL, _ns1__GetStationJxDataResponse*);
    soap_POST_recv__ns1__GetStationJxDataResponse(struct soap*, _ns1__GetStationJxDataResponse*);
    @endcode

  - <ns1:GetJxPic> @ref _ns1__GetJxPic
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetJxPic(struct soap*, _ns1__GetJxPic*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetJxPic(struct soap*, _ns1__GetJxPic*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__GetJxPic(struct soap*, const char *URL, _ns1__GetJxPic*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__GetJxPic(struct soap*, const char *URL, _ns1__GetJxPic*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__GetJxPic(struct soap*, const char *URL, _ns1__GetJxPic*);
    soap_POST_recv__ns1__GetJxPic(struct soap*, _ns1__GetJxPic*);
    @endcode

  - <ns1:GetJxPicResponse> @ref _ns1__GetJxPicResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetJxPicResponse(struct soap*, _ns1__GetJxPicResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetJxPicResponse(struct soap*, _ns1__GetJxPicResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__GetJxPicResponse(struct soap*, const char *URL, _ns1__GetJxPicResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__GetJxPicResponse(struct soap*, const char *URL, _ns1__GetJxPicResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__GetJxPicResponse(struct soap*, const char *URL, _ns1__GetJxPicResponse*);
    soap_POST_recv__ns1__GetJxPicResponse(struct soap*, _ns1__GetJxPicResponse*);
    @endcode

  - <ns1:GetDevPic> @ref _ns1__GetDevPic
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetDevPic(struct soap*, _ns1__GetDevPic*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetDevPic(struct soap*, _ns1__GetDevPic*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__GetDevPic(struct soap*, const char *URL, _ns1__GetDevPic*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__GetDevPic(struct soap*, const char *URL, _ns1__GetDevPic*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__GetDevPic(struct soap*, const char *URL, _ns1__GetDevPic*);
    soap_POST_recv__ns1__GetDevPic(struct soap*, _ns1__GetDevPic*);
    @endcode

  - <ns1:GetDevPicResponse> @ref _ns1__GetDevPicResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetDevPicResponse(struct soap*, _ns1__GetDevPicResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetDevPicResponse(struct soap*, _ns1__GetDevPicResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__GetDevPicResponse(struct soap*, const char *URL, _ns1__GetDevPicResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__GetDevPicResponse(struct soap*, const char *URL, _ns1__GetDevPicResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__GetDevPicResponse(struct soap*, const char *URL, _ns1__GetDevPicResponse*);
    soap_POST_recv__ns1__GetDevPicResponse(struct soap*, _ns1__GetDevPicResponse*);
    @endcode

  - <ns1:GetBgImg> @ref _ns1__GetBgImg
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetBgImg(struct soap*, _ns1__GetBgImg*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetBgImg(struct soap*, _ns1__GetBgImg*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__GetBgImg(struct soap*, const char *URL, _ns1__GetBgImg*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__GetBgImg(struct soap*, const char *URL, _ns1__GetBgImg*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__GetBgImg(struct soap*, const char *URL, _ns1__GetBgImg*);
    soap_POST_recv__ns1__GetBgImg(struct soap*, _ns1__GetBgImg*);
    @endcode

  - <ns1:GetBgImgResponse> @ref _ns1__GetBgImgResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetBgImgResponse(struct soap*, _ns1__GetBgImgResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetBgImgResponse(struct soap*, _ns1__GetBgImgResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__GetBgImgResponse(struct soap*, const char *URL, _ns1__GetBgImgResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__GetBgImgResponse(struct soap*, const char *URL, _ns1__GetBgImgResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__GetBgImgResponse(struct soap*, const char *URL, _ns1__GetBgImgResponse*);
    soap_POST_recv__ns1__GetBgImgResponse(struct soap*, _ns1__GetBgImgResponse*);
    @endcode

  - <ns1:GetDcsData> @ref _ns1__GetDcsData
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetDcsData(struct soap*, _ns1__GetDcsData*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetDcsData(struct soap*, _ns1__GetDcsData*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__GetDcsData(struct soap*, const char *URL, _ns1__GetDcsData*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__GetDcsData(struct soap*, const char *URL, _ns1__GetDcsData*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__GetDcsData(struct soap*, const char *URL, _ns1__GetDcsData*);
    soap_POST_recv__ns1__GetDcsData(struct soap*, _ns1__GetDcsData*);
    @endcode

  - <ns1:GetDcsDataResponse> @ref _ns1__GetDcsDataResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetDcsDataResponse(struct soap*, _ns1__GetDcsDataResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetDcsDataResponse(struct soap*, _ns1__GetDcsDataResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__GetDcsDataResponse(struct soap*, const char *URL, _ns1__GetDcsDataResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__GetDcsDataResponse(struct soap*, const char *URL, _ns1__GetDcsDataResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__GetDcsDataResponse(struct soap*, const char *URL, _ns1__GetDcsDataResponse*);
    soap_POST_recv__ns1__GetDcsDataResponse(struct soap*, _ns1__GetDcsDataResponse*);
    @endcode

  - <ns1:DownLoadMobGPSData> @ref _ns1__DownLoadMobGPSData
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__DownLoadMobGPSData(struct soap*, _ns1__DownLoadMobGPSData*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__DownLoadMobGPSData(struct soap*, _ns1__DownLoadMobGPSData*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__DownLoadMobGPSData(struct soap*, const char *URL, _ns1__DownLoadMobGPSData*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__DownLoadMobGPSData(struct soap*, const char *URL, _ns1__DownLoadMobGPSData*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__DownLoadMobGPSData(struct soap*, const char *URL, _ns1__DownLoadMobGPSData*);
    soap_POST_recv__ns1__DownLoadMobGPSData(struct soap*, _ns1__DownLoadMobGPSData*);
    @endcode

  - <ns1:DownLoadMobGPSDataResponse> @ref _ns1__DownLoadMobGPSDataResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__DownLoadMobGPSDataResponse(struct soap*, _ns1__DownLoadMobGPSDataResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__DownLoadMobGPSDataResponse(struct soap*, _ns1__DownLoadMobGPSDataResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__DownLoadMobGPSDataResponse(struct soap*, const char *URL, _ns1__DownLoadMobGPSDataResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__DownLoadMobGPSDataResponse(struct soap*, const char *URL, _ns1__DownLoadMobGPSDataResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__DownLoadMobGPSDataResponse(struct soap*, const char *URL, _ns1__DownLoadMobGPSDataResponse*);
    soap_POST_recv__ns1__DownLoadMobGPSDataResponse(struct soap*, _ns1__DownLoadMobGPSDataResponse*);
    @endcode

  - <ns1:MobDownLoadData> @ref _ns1__MobDownLoadData
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__MobDownLoadData(struct soap*, _ns1__MobDownLoadData*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__MobDownLoadData(struct soap*, _ns1__MobDownLoadData*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__MobDownLoadData(struct soap*, const char *URL, _ns1__MobDownLoadData*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__MobDownLoadData(struct soap*, const char *URL, _ns1__MobDownLoadData*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__MobDownLoadData(struct soap*, const char *URL, _ns1__MobDownLoadData*);
    soap_POST_recv__ns1__MobDownLoadData(struct soap*, _ns1__MobDownLoadData*);
    @endcode

  - <ns1:MobDownLoadDataResponse> @ref _ns1__MobDownLoadDataResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__MobDownLoadDataResponse(struct soap*, _ns1__MobDownLoadDataResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__MobDownLoadDataResponse(struct soap*, _ns1__MobDownLoadDataResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__MobDownLoadDataResponse(struct soap*, const char *URL, _ns1__MobDownLoadDataResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__MobDownLoadDataResponse(struct soap*, const char *URL, _ns1__MobDownLoadDataResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__MobDownLoadDataResponse(struct soap*, const char *URL, _ns1__MobDownLoadDataResponse*);
    soap_POST_recv__ns1__MobDownLoadDataResponse(struct soap*, _ns1__MobDownLoadDataResponse*);
    @endcode

  - <ns1:GetOpenFireInfo> @ref _ns1__GetOpenFireInfo
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetOpenFireInfo(struct soap*, _ns1__GetOpenFireInfo*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetOpenFireInfo(struct soap*, _ns1__GetOpenFireInfo*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__GetOpenFireInfo(struct soap*, const char *URL, _ns1__GetOpenFireInfo*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__GetOpenFireInfo(struct soap*, const char *URL, _ns1__GetOpenFireInfo*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__GetOpenFireInfo(struct soap*, const char *URL, _ns1__GetOpenFireInfo*);
    soap_POST_recv__ns1__GetOpenFireInfo(struct soap*, _ns1__GetOpenFireInfo*);
    @endcode

  - <ns1:GetOpenFireInfoResponse> @ref _ns1__GetOpenFireInfoResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetOpenFireInfoResponse(struct soap*, _ns1__GetOpenFireInfoResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetOpenFireInfoResponse(struct soap*, _ns1__GetOpenFireInfoResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__GetOpenFireInfoResponse(struct soap*, const char *URL, _ns1__GetOpenFireInfoResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__GetOpenFireInfoResponse(struct soap*, const char *URL, _ns1__GetOpenFireInfoResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__GetOpenFireInfoResponse(struct soap*, const char *URL, _ns1__GetOpenFireInfoResponse*);
    soap_POST_recv__ns1__GetOpenFireInfoResponse(struct soap*, _ns1__GetOpenFireInfoResponse*);
    @endcode

  - <ns1:GetDwList> @ref _ns1__GetDwList
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetDwList(struct soap*, _ns1__GetDwList*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetDwList(struct soap*, _ns1__GetDwList*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__GetDwList(struct soap*, const char *URL, _ns1__GetDwList*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__GetDwList(struct soap*, const char *URL, _ns1__GetDwList*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__GetDwList(struct soap*, const char *URL, _ns1__GetDwList*);
    soap_POST_recv__ns1__GetDwList(struct soap*, _ns1__GetDwList*);
    @endcode

  - <ns1:GetDwListResponse> @ref _ns1__GetDwListResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetDwListResponse(struct soap*, _ns1__GetDwListResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetDwListResponse(struct soap*, _ns1__GetDwListResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__GetDwListResponse(struct soap*, const char *URL, _ns1__GetDwListResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__GetDwListResponse(struct soap*, const char *URL, _ns1__GetDwListResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__GetDwListResponse(struct soap*, const char *URL, _ns1__GetDwListResponse*);
    soap_POST_recv__ns1__GetDwListResponse(struct soap*, _ns1__GetDwListResponse*);
    @endcode

  - <ns1:GetUnitStation> @ref _ns1__GetUnitStation
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetUnitStation(struct soap*, _ns1__GetUnitStation*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetUnitStation(struct soap*, _ns1__GetUnitStation*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__GetUnitStation(struct soap*, const char *URL, _ns1__GetUnitStation*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__GetUnitStation(struct soap*, const char *URL, _ns1__GetUnitStation*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__GetUnitStation(struct soap*, const char *URL, _ns1__GetUnitStation*);
    soap_POST_recv__ns1__GetUnitStation(struct soap*, _ns1__GetUnitStation*);
    @endcode

  - <ns1:GetUnitStationResponse> @ref _ns1__GetUnitStationResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetUnitStationResponse(struct soap*, _ns1__GetUnitStationResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetUnitStationResponse(struct soap*, _ns1__GetUnitStationResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__GetUnitStationResponse(struct soap*, const char *URL, _ns1__GetUnitStationResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__GetUnitStationResponse(struct soap*, const char *URL, _ns1__GetUnitStationResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__GetUnitStationResponse(struct soap*, const char *URL, _ns1__GetUnitStationResponse*);
    soap_POST_recv__ns1__GetUnitStationResponse(struct soap*, _ns1__GetUnitStationResponse*);
    @endcode

  - <ns1:GetUnitStruct> @ref _ns1__GetUnitStruct
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetUnitStruct(struct soap*, _ns1__GetUnitStruct*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetUnitStruct(struct soap*, _ns1__GetUnitStruct*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__GetUnitStruct(struct soap*, const char *URL, _ns1__GetUnitStruct*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__GetUnitStruct(struct soap*, const char *URL, _ns1__GetUnitStruct*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__GetUnitStruct(struct soap*, const char *URL, _ns1__GetUnitStruct*);
    soap_POST_recv__ns1__GetUnitStruct(struct soap*, _ns1__GetUnitStruct*);
    @endcode

  - <ns1:GetUnitStructResponse> @ref _ns1__GetUnitStructResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetUnitStructResponse(struct soap*, _ns1__GetUnitStructResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetUnitStructResponse(struct soap*, _ns1__GetUnitStructResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__GetUnitStructResponse(struct soap*, const char *URL, _ns1__GetUnitStructResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__GetUnitStructResponse(struct soap*, const char *URL, _ns1__GetUnitStructResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__GetUnitStructResponse(struct soap*, const char *URL, _ns1__GetUnitStructResponse*);
    soap_POST_recv__ns1__GetUnitStructResponse(struct soap*, _ns1__GetUnitStructResponse*);
    @endcode

  - <ns1:GetUnitPersonInfo> @ref _ns1__GetUnitPersonInfo
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetUnitPersonInfo(struct soap*, _ns1__GetUnitPersonInfo*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetUnitPersonInfo(struct soap*, _ns1__GetUnitPersonInfo*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__GetUnitPersonInfo(struct soap*, const char *URL, _ns1__GetUnitPersonInfo*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__GetUnitPersonInfo(struct soap*, const char *URL, _ns1__GetUnitPersonInfo*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__GetUnitPersonInfo(struct soap*, const char *URL, _ns1__GetUnitPersonInfo*);
    soap_POST_recv__ns1__GetUnitPersonInfo(struct soap*, _ns1__GetUnitPersonInfo*);
    @endcode

  - <ns1:GetUnitPersonInfoResponse> @ref _ns1__GetUnitPersonInfoResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetUnitPersonInfoResponse(struct soap*, _ns1__GetUnitPersonInfoResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetUnitPersonInfoResponse(struct soap*, _ns1__GetUnitPersonInfoResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__GetUnitPersonInfoResponse(struct soap*, const char *URL, _ns1__GetUnitPersonInfoResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__GetUnitPersonInfoResponse(struct soap*, const char *URL, _ns1__GetUnitPersonInfoResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__GetUnitPersonInfoResponse(struct soap*, const char *URL, _ns1__GetUnitPersonInfoResponse*);
    soap_POST_recv__ns1__GetUnitPersonInfoResponse(struct soap*, _ns1__GetUnitPersonInfoResponse*);
    @endcode

  - <ns1:GetFileSize> @ref _ns1__GetFileSize
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetFileSize(struct soap*, _ns1__GetFileSize*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetFileSize(struct soap*, _ns1__GetFileSize*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__GetFileSize(struct soap*, const char *URL, _ns1__GetFileSize*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__GetFileSize(struct soap*, const char *URL, _ns1__GetFileSize*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__GetFileSize(struct soap*, const char *URL, _ns1__GetFileSize*);
    soap_POST_recv__ns1__GetFileSize(struct soap*, _ns1__GetFileSize*);
    @endcode

  - <ns1:GetFileSizeResponse> @ref _ns1__GetFileSizeResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetFileSizeResponse(struct soap*, _ns1__GetFileSizeResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetFileSizeResponse(struct soap*, _ns1__GetFileSizeResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__GetFileSizeResponse(struct soap*, const char *URL, _ns1__GetFileSizeResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__GetFileSizeResponse(struct soap*, const char *URL, _ns1__GetFileSizeResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__GetFileSizeResponse(struct soap*, const char *URL, _ns1__GetFileSizeResponse*);
    soap_POST_recv__ns1__GetFileSizeResponse(struct soap*, _ns1__GetFileSizeResponse*);
    @endcode

  - <ns1:GetXbList> @ref _ns1__GetXbList
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetXbList(struct soap*, _ns1__GetXbList*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetXbList(struct soap*, _ns1__GetXbList*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__GetXbList(struct soap*, const char *URL, _ns1__GetXbList*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__GetXbList(struct soap*, const char *URL, _ns1__GetXbList*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__GetXbList(struct soap*, const char *URL, _ns1__GetXbList*);
    soap_POST_recv__ns1__GetXbList(struct soap*, _ns1__GetXbList*);
    @endcode

  - <ns1:GetXbListResponse> @ref _ns1__GetXbListResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetXbListResponse(struct soap*, _ns1__GetXbListResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetXbListResponse(struct soap*, _ns1__GetXbListResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__GetXbListResponse(struct soap*, const char *URL, _ns1__GetXbListResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__GetXbListResponse(struct soap*, const char *URL, _ns1__GetXbListResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__GetXbListResponse(struct soap*, const char *URL, _ns1__GetXbListResponse*);
    soap_POST_recv__ns1__GetXbListResponse(struct soap*, _ns1__GetXbListResponse*);
    @endcode

  - <ns1:GetXbStationList> @ref _ns1__GetXbStationList
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetXbStationList(struct soap*, _ns1__GetXbStationList*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetXbStationList(struct soap*, _ns1__GetXbStationList*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__GetXbStationList(struct soap*, const char *URL, _ns1__GetXbStationList*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__GetXbStationList(struct soap*, const char *URL, _ns1__GetXbStationList*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__GetXbStationList(struct soap*, const char *URL, _ns1__GetXbStationList*);
    soap_POST_recv__ns1__GetXbStationList(struct soap*, _ns1__GetXbStationList*);
    @endcode

  - <ns1:GetXbStationListResponse> @ref _ns1__GetXbStationListResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetXbStationListResponse(struct soap*, _ns1__GetXbStationListResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetXbStationListResponse(struct soap*, _ns1__GetXbStationListResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__GetXbStationListResponse(struct soap*, const char *URL, _ns1__GetXbStationListResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__GetXbStationListResponse(struct soap*, const char *URL, _ns1__GetXbStationListResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__GetXbStationListResponse(struct soap*, const char *URL, _ns1__GetXbStationListResponse*);
    soap_POST_recv__ns1__GetXbStationListResponse(struct soap*, _ns1__GetXbStationListResponse*);
    @endcode

  - <ns1:GetMapDeviceType> @ref _ns1__GetMapDeviceType
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetMapDeviceType(struct soap*, _ns1__GetMapDeviceType*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetMapDeviceType(struct soap*, _ns1__GetMapDeviceType*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__GetMapDeviceType(struct soap*, const char *URL, _ns1__GetMapDeviceType*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__GetMapDeviceType(struct soap*, const char *URL, _ns1__GetMapDeviceType*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__GetMapDeviceType(struct soap*, const char *URL, _ns1__GetMapDeviceType*);
    soap_POST_recv__ns1__GetMapDeviceType(struct soap*, _ns1__GetMapDeviceType*);
    @endcode

  - <ns1:GetMapDeviceTypeResponse> @ref _ns1__GetMapDeviceTypeResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetMapDeviceTypeResponse(struct soap*, _ns1__GetMapDeviceTypeResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetMapDeviceTypeResponse(struct soap*, _ns1__GetMapDeviceTypeResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__GetMapDeviceTypeResponse(struct soap*, const char *URL, _ns1__GetMapDeviceTypeResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__GetMapDeviceTypeResponse(struct soap*, const char *URL, _ns1__GetMapDeviceTypeResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__GetMapDeviceTypeResponse(struct soap*, const char *URL, _ns1__GetMapDeviceTypeResponse*);
    soap_POST_recv__ns1__GetMapDeviceTypeResponse(struct soap*, _ns1__GetMapDeviceTypeResponse*);
    @endcode

  - <ns1:GetGxDeviceData> @ref _ns1__GetGxDeviceData
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetGxDeviceData(struct soap*, _ns1__GetGxDeviceData*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetGxDeviceData(struct soap*, _ns1__GetGxDeviceData*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__GetGxDeviceData(struct soap*, const char *URL, _ns1__GetGxDeviceData*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__GetGxDeviceData(struct soap*, const char *URL, _ns1__GetGxDeviceData*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__GetGxDeviceData(struct soap*, const char *URL, _ns1__GetGxDeviceData*);
    soap_POST_recv__ns1__GetGxDeviceData(struct soap*, _ns1__GetGxDeviceData*);
    @endcode

  - <ns1:GetGxDeviceDataResponse> @ref _ns1__GetGxDeviceDataResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetGxDeviceDataResponse(struct soap*, _ns1__GetGxDeviceDataResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetGxDeviceDataResponse(struct soap*, _ns1__GetGxDeviceDataResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__GetGxDeviceDataResponse(struct soap*, const char *URL, _ns1__GetGxDeviceDataResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__GetGxDeviceDataResponse(struct soap*, const char *URL, _ns1__GetGxDeviceDataResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__GetGxDeviceDataResponse(struct soap*, const char *URL, _ns1__GetGxDeviceDataResponse*);
    soap_POST_recv__ns1__GetGxDeviceDataResponse(struct soap*, _ns1__GetGxDeviceDataResponse*);
    @endcode

  - <ns1:GetDownFileInfo> @ref _ns1__GetDownFileInfo
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetDownFileInfo(struct soap*, _ns1__GetDownFileInfo*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetDownFileInfo(struct soap*, _ns1__GetDownFileInfo*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__GetDownFileInfo(struct soap*, const char *URL, _ns1__GetDownFileInfo*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__GetDownFileInfo(struct soap*, const char *URL, _ns1__GetDownFileInfo*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__GetDownFileInfo(struct soap*, const char *URL, _ns1__GetDownFileInfo*);
    soap_POST_recv__ns1__GetDownFileInfo(struct soap*, _ns1__GetDownFileInfo*);
    @endcode

  - <ns1:GetDownFileInfoResponse> @ref _ns1__GetDownFileInfoResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetDownFileInfoResponse(struct soap*, _ns1__GetDownFileInfoResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetDownFileInfoResponse(struct soap*, _ns1__GetDownFileInfoResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__GetDownFileInfoResponse(struct soap*, const char *URL, _ns1__GetDownFileInfoResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__GetDownFileInfoResponse(struct soap*, const char *URL, _ns1__GetDownFileInfoResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__GetDownFileInfoResponse(struct soap*, const char *URL, _ns1__GetDownFileInfoResponse*);
    soap_POST_recv__ns1__GetDownFileInfoResponse(struct soap*, _ns1__GetDownFileInfoResponse*);
    @endcode

  - <ns1:DownMapfile> @ref _ns1__DownMapfile
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__DownMapfile(struct soap*, _ns1__DownMapfile*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__DownMapfile(struct soap*, _ns1__DownMapfile*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__DownMapfile(struct soap*, const char *URL, _ns1__DownMapfile*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__DownMapfile(struct soap*, const char *URL, _ns1__DownMapfile*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__DownMapfile(struct soap*, const char *URL, _ns1__DownMapfile*);
    soap_POST_recv__ns1__DownMapfile(struct soap*, _ns1__DownMapfile*);
    @endcode

  - <ns1:DownMapfileResponse> @ref _ns1__DownMapfileResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__DownMapfileResponse(struct soap*, _ns1__DownMapfileResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__DownMapfileResponse(struct soap*, _ns1__DownMapfileResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__DownMapfileResponse(struct soap*, const char *URL, _ns1__DownMapfileResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__DownMapfileResponse(struct soap*, const char *URL, _ns1__DownMapfileResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__DownMapfileResponse(struct soap*, const char *URL, _ns1__DownMapfileResponse*);
    soap_POST_recv__ns1__DownMapfileResponse(struct soap*, _ns1__DownMapfileResponse*);
    @endcode

  - <ns1:GetFileNew> @ref _ns1__GetFileNew
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetFileNew(struct soap*, _ns1__GetFileNew*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetFileNew(struct soap*, _ns1__GetFileNew*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__GetFileNew(struct soap*, const char *URL, _ns1__GetFileNew*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__GetFileNew(struct soap*, const char *URL, _ns1__GetFileNew*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__GetFileNew(struct soap*, const char *URL, _ns1__GetFileNew*);
    soap_POST_recv__ns1__GetFileNew(struct soap*, _ns1__GetFileNew*);
    @endcode

  - <ns1:GetFileNewResponse> @ref _ns1__GetFileNewResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetFileNewResponse(struct soap*, _ns1__GetFileNewResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetFileNewResponse(struct soap*, _ns1__GetFileNewResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__GetFileNewResponse(struct soap*, const char *URL, _ns1__GetFileNewResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__GetFileNewResponse(struct soap*, const char *URL, _ns1__GetFileNewResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__GetFileNewResponse(struct soap*, const char *URL, _ns1__GetFileNewResponse*);
    soap_POST_recv__ns1__GetFileNewResponse(struct soap*, _ns1__GetFileNewResponse*);
    @endcode

  - <ns1:AlterTable> @ref _ns1__AlterTable
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__AlterTable(struct soap*, _ns1__AlterTable*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__AlterTable(struct soap*, _ns1__AlterTable*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__AlterTable(struct soap*, const char *URL, _ns1__AlterTable*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__AlterTable(struct soap*, const char *URL, _ns1__AlterTable*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__AlterTable(struct soap*, const char *URL, _ns1__AlterTable*);
    soap_POST_recv__ns1__AlterTable(struct soap*, _ns1__AlterTable*);
    @endcode

  - <ns1:AlterTableResponse> @ref _ns1__AlterTableResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__AlterTableResponse(struct soap*, _ns1__AlterTableResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__AlterTableResponse(struct soap*, _ns1__AlterTableResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__AlterTableResponse(struct soap*, const char *URL, _ns1__AlterTableResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__AlterTableResponse(struct soap*, const char *URL, _ns1__AlterTableResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__AlterTableResponse(struct soap*, const char *URL, _ns1__AlterTableResponse*);
    soap_POST_recv__ns1__AlterTableResponse(struct soap*, _ns1__AlterTableResponse*);
    @endcode

  - <ns1:DownCQData> @ref _ns1__DownCQData
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__DownCQData(struct soap*, _ns1__DownCQData*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__DownCQData(struct soap*, _ns1__DownCQData*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__DownCQData(struct soap*, const char *URL, _ns1__DownCQData*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__DownCQData(struct soap*, const char *URL, _ns1__DownCQData*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__DownCQData(struct soap*, const char *URL, _ns1__DownCQData*);
    soap_POST_recv__ns1__DownCQData(struct soap*, _ns1__DownCQData*);
    @endcode

  - <ns1:DownCQDataResponse> @ref _ns1__DownCQDataResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__DownCQDataResponse(struct soap*, _ns1__DownCQDataResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__DownCQDataResponse(struct soap*, _ns1__DownCQDataResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__DownCQDataResponse(struct soap*, const char *URL, _ns1__DownCQDataResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__DownCQDataResponse(struct soap*, const char *URL, _ns1__DownCQDataResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__DownCQDataResponse(struct soap*, const char *URL, _ns1__DownCQDataResponse*);
    soap_POST_recv__ns1__DownCQDataResponse(struct soap*, _ns1__DownCQDataResponse*);
    @endcode

  - <ns1:GetTabList> @ref _ns1__GetTabList
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetTabList(struct soap*, _ns1__GetTabList*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetTabList(struct soap*, _ns1__GetTabList*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__GetTabList(struct soap*, const char *URL, _ns1__GetTabList*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__GetTabList(struct soap*, const char *URL, _ns1__GetTabList*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__GetTabList(struct soap*, const char *URL, _ns1__GetTabList*);
    soap_POST_recv__ns1__GetTabList(struct soap*, _ns1__GetTabList*);
    @endcode

  - <ns1:GetTabListResponse> @ref _ns1__GetTabListResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetTabListResponse(struct soap*, _ns1__GetTabListResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetTabListResponse(struct soap*, _ns1__GetTabListResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__GetTabListResponse(struct soap*, const char *URL, _ns1__GetTabListResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__GetTabListResponse(struct soap*, const char *URL, _ns1__GetTabListResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__GetTabListResponse(struct soap*, const char *URL, _ns1__GetTabListResponse*);
    soap_POST_recv__ns1__GetTabListResponse(struct soap*, _ns1__GetTabListResponse*);
    @endcode

  - <ns1:IsOracleTable> @ref _ns1__IsOracleTable
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__IsOracleTable(struct soap*, _ns1__IsOracleTable*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__IsOracleTable(struct soap*, _ns1__IsOracleTable*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__IsOracleTable(struct soap*, const char *URL, _ns1__IsOracleTable*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__IsOracleTable(struct soap*, const char *URL, _ns1__IsOracleTable*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__IsOracleTable(struct soap*, const char *URL, _ns1__IsOracleTable*);
    soap_POST_recv__ns1__IsOracleTable(struct soap*, _ns1__IsOracleTable*);
    @endcode

  - <ns1:IsOracleTableResponse> @ref _ns1__IsOracleTableResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__IsOracleTableResponse(struct soap*, _ns1__IsOracleTableResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__IsOracleTableResponse(struct soap*, _ns1__IsOracleTableResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__IsOracleTableResponse(struct soap*, const char *URL, _ns1__IsOracleTableResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__IsOracleTableResponse(struct soap*, const char *URL, _ns1__IsOracleTableResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__IsOracleTableResponse(struct soap*, const char *URL, _ns1__IsOracleTableResponse*);
    soap_POST_recv__ns1__IsOracleTableResponse(struct soap*, _ns1__IsOracleTableResponse*);
    @endcode

  - <ns1:GetFieldInfo> @ref _ns1__GetFieldInfo
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetFieldInfo(struct soap*, _ns1__GetFieldInfo*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetFieldInfo(struct soap*, _ns1__GetFieldInfo*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__GetFieldInfo(struct soap*, const char *URL, _ns1__GetFieldInfo*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__GetFieldInfo(struct soap*, const char *URL, _ns1__GetFieldInfo*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__GetFieldInfo(struct soap*, const char *URL, _ns1__GetFieldInfo*);
    soap_POST_recv__ns1__GetFieldInfo(struct soap*, _ns1__GetFieldInfo*);
    @endcode

  - <ns1:GetFieldInfoResponse> @ref _ns1__GetFieldInfoResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetFieldInfoResponse(struct soap*, _ns1__GetFieldInfoResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetFieldInfoResponse(struct soap*, _ns1__GetFieldInfoResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__GetFieldInfoResponse(struct soap*, const char *URL, _ns1__GetFieldInfoResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__GetFieldInfoResponse(struct soap*, const char *URL, _ns1__GetFieldInfoResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__GetFieldInfoResponse(struct soap*, const char *URL, _ns1__GetFieldInfoResponse*);
    soap_POST_recv__ns1__GetFieldInfoResponse(struct soap*, _ns1__GetFieldInfoResponse*);
    @endcode

  - <ns1:ExecuteSqlForFile> @ref _ns1__ExecuteSqlForFile
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__ExecuteSqlForFile(struct soap*, _ns1__ExecuteSqlForFile*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__ExecuteSqlForFile(struct soap*, _ns1__ExecuteSqlForFile*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__ExecuteSqlForFile(struct soap*, const char *URL, _ns1__ExecuteSqlForFile*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__ExecuteSqlForFile(struct soap*, const char *URL, _ns1__ExecuteSqlForFile*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__ExecuteSqlForFile(struct soap*, const char *URL, _ns1__ExecuteSqlForFile*);
    soap_POST_recv__ns1__ExecuteSqlForFile(struct soap*, _ns1__ExecuteSqlForFile*);
    @endcode

  - <ns1:ExecuteSqlForFileResponse> @ref _ns1__ExecuteSqlForFileResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__ExecuteSqlForFileResponse(struct soap*, _ns1__ExecuteSqlForFileResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__ExecuteSqlForFileResponse(struct soap*, _ns1__ExecuteSqlForFileResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__ExecuteSqlForFileResponse(struct soap*, const char *URL, _ns1__ExecuteSqlForFileResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__ExecuteSqlForFileResponse(struct soap*, const char *URL, _ns1__ExecuteSqlForFileResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__ExecuteSqlForFileResponse(struct soap*, const char *URL, _ns1__ExecuteSqlForFileResponse*);
    soap_POST_recv__ns1__ExecuteSqlForFileResponse(struct soap*, _ns1__ExecuteSqlForFileResponse*);
    @endcode

  - <ns1:DownLoadFile> @ref _ns1__DownLoadFile
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__DownLoadFile(struct soap*, _ns1__DownLoadFile*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__DownLoadFile(struct soap*, _ns1__DownLoadFile*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__DownLoadFile(struct soap*, const char *URL, _ns1__DownLoadFile*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__DownLoadFile(struct soap*, const char *URL, _ns1__DownLoadFile*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__DownLoadFile(struct soap*, const char *URL, _ns1__DownLoadFile*);
    soap_POST_recv__ns1__DownLoadFile(struct soap*, _ns1__DownLoadFile*);
    @endcode

  - <ns1:DownLoadFileResponse> @ref _ns1__DownLoadFileResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__DownLoadFileResponse(struct soap*, _ns1__DownLoadFileResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__DownLoadFileResponse(struct soap*, _ns1__DownLoadFileResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__DownLoadFileResponse(struct soap*, const char *URL, _ns1__DownLoadFileResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__DownLoadFileResponse(struct soap*, const char *URL, _ns1__DownLoadFileResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__DownLoadFileResponse(struct soap*, const char *URL, _ns1__DownLoadFileResponse*);
    soap_POST_recv__ns1__DownLoadFileResponse(struct soap*, _ns1__DownLoadFileResponse*);
    @endcode

  - <ns1:WriteFile> @ref _ns1__WriteFile
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__WriteFile(struct soap*, _ns1__WriteFile*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__WriteFile(struct soap*, _ns1__WriteFile*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__WriteFile(struct soap*, const char *URL, _ns1__WriteFile*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__WriteFile(struct soap*, const char *URL, _ns1__WriteFile*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__WriteFile(struct soap*, const char *URL, _ns1__WriteFile*);
    soap_POST_recv__ns1__WriteFile(struct soap*, _ns1__WriteFile*);
    @endcode

  - <ns1:WriteFileResponse> @ref _ns1__WriteFileResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__WriteFileResponse(struct soap*, _ns1__WriteFileResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__WriteFileResponse(struct soap*, _ns1__WriteFileResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__WriteFileResponse(struct soap*, const char *URL, _ns1__WriteFileResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__WriteFileResponse(struct soap*, const char *URL, _ns1__WriteFileResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__WriteFileResponse(struct soap*, const char *URL, _ns1__WriteFileResponse*);
    soap_POST_recv__ns1__WriteFileResponse(struct soap*, _ns1__WriteFileResponse*);
    @endcode

  - <ns1:GetMapUpdateTime> @ref _ns1__GetMapUpdateTime
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetMapUpdateTime(struct soap*, _ns1__GetMapUpdateTime*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetMapUpdateTime(struct soap*, _ns1__GetMapUpdateTime*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__GetMapUpdateTime(struct soap*, const char *URL, _ns1__GetMapUpdateTime*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__GetMapUpdateTime(struct soap*, const char *URL, _ns1__GetMapUpdateTime*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__GetMapUpdateTime(struct soap*, const char *URL, _ns1__GetMapUpdateTime*);
    soap_POST_recv__ns1__GetMapUpdateTime(struct soap*, _ns1__GetMapUpdateTime*);
    @endcode

  - <ns1:GetMapUpdateTimeResponse> @ref _ns1__GetMapUpdateTimeResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetMapUpdateTimeResponse(struct soap*, _ns1__GetMapUpdateTimeResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetMapUpdateTimeResponse(struct soap*, _ns1__GetMapUpdateTimeResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__GetMapUpdateTimeResponse(struct soap*, const char *URL, _ns1__GetMapUpdateTimeResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__GetMapUpdateTimeResponse(struct soap*, const char *URL, _ns1__GetMapUpdateTimeResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__GetMapUpdateTimeResponse(struct soap*, const char *URL, _ns1__GetMapUpdateTimeResponse*);
    soap_POST_recv__ns1__GetMapUpdateTimeResponse(struct soap*, _ns1__GetMapUpdateTimeResponse*);
    @endcode

  - <ns1:GetMapTabName> @ref _ns1__GetMapTabName
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetMapTabName(struct soap*, _ns1__GetMapTabName*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetMapTabName(struct soap*, _ns1__GetMapTabName*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__GetMapTabName(struct soap*, const char *URL, _ns1__GetMapTabName*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__GetMapTabName(struct soap*, const char *URL, _ns1__GetMapTabName*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__GetMapTabName(struct soap*, const char *URL, _ns1__GetMapTabName*);
    soap_POST_recv__ns1__GetMapTabName(struct soap*, _ns1__GetMapTabName*);
    @endcode

  - <ns1:GetMapTabNameResponse> @ref _ns1__GetMapTabNameResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetMapTabNameResponse(struct soap*, _ns1__GetMapTabNameResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetMapTabNameResponse(struct soap*, _ns1__GetMapTabNameResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__GetMapTabNameResponse(struct soap*, const char *URL, _ns1__GetMapTabNameResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__GetMapTabNameResponse(struct soap*, const char *URL, _ns1__GetMapTabNameResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__GetMapTabNameResponse(struct soap*, const char *URL, _ns1__GetMapTabNameResponse*);
    soap_POST_recv__ns1__GetMapTabNameResponse(struct soap*, _ns1__GetMapTabNameResponse*);
    @endcode

  - <ns1:GetMapDeviceData> @ref _ns1__GetMapDeviceData
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetMapDeviceData(struct soap*, _ns1__GetMapDeviceData*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetMapDeviceData(struct soap*, _ns1__GetMapDeviceData*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__GetMapDeviceData(struct soap*, const char *URL, _ns1__GetMapDeviceData*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__GetMapDeviceData(struct soap*, const char *URL, _ns1__GetMapDeviceData*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__GetMapDeviceData(struct soap*, const char *URL, _ns1__GetMapDeviceData*);
    soap_POST_recv__ns1__GetMapDeviceData(struct soap*, _ns1__GetMapDeviceData*);
    @endcode

  - <ns1:GetMapDeviceDataResponse> @ref _ns1__GetMapDeviceDataResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetMapDeviceDataResponse(struct soap*, _ns1__GetMapDeviceDataResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetMapDeviceDataResponse(struct soap*, _ns1__GetMapDeviceDataResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__GetMapDeviceDataResponse(struct soap*, const char *URL, _ns1__GetMapDeviceDataResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__GetMapDeviceDataResponse(struct soap*, const char *URL, _ns1__GetMapDeviceDataResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__GetMapDeviceDataResponse(struct soap*, const char *URL, _ns1__GetMapDeviceDataResponse*);
    soap_POST_recv__ns1__GetMapDeviceDataResponse(struct soap*, _ns1__GetMapDeviceDataResponse*);
    @endcode

  - <ns1:GetMaList> @ref _ns1__GetMaList
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetMaList(struct soap*, _ns1__GetMaList*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetMaList(struct soap*, _ns1__GetMaList*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__GetMaList(struct soap*, const char *URL, _ns1__GetMaList*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__GetMaList(struct soap*, const char *URL, _ns1__GetMaList*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__GetMaList(struct soap*, const char *URL, _ns1__GetMaList*);
    soap_POST_recv__ns1__GetMaList(struct soap*, _ns1__GetMaList*);
    @endcode

  - <ns1:GetMaListResponse> @ref _ns1__GetMaListResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetMaListResponse(struct soap*, _ns1__GetMaListResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetMaListResponse(struct soap*, _ns1__GetMaListResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__GetMaListResponse(struct soap*, const char *URL, _ns1__GetMaListResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__GetMaListResponse(struct soap*, const char *URL, _ns1__GetMaListResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__GetMaListResponse(struct soap*, const char *URL, _ns1__GetMaListResponse*);
    soap_POST_recv__ns1__GetMaListResponse(struct soap*, _ns1__GetMaListResponse*);
    @endcode

  - <ns1:GetMangeUnit> @ref _ns1__GetMangeUnit
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetMangeUnit(struct soap*, _ns1__GetMangeUnit*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetMangeUnit(struct soap*, _ns1__GetMangeUnit*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__GetMangeUnit(struct soap*, const char *URL, _ns1__GetMangeUnit*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__GetMangeUnit(struct soap*, const char *URL, _ns1__GetMangeUnit*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__GetMangeUnit(struct soap*, const char *URL, _ns1__GetMangeUnit*);
    soap_POST_recv__ns1__GetMangeUnit(struct soap*, _ns1__GetMangeUnit*);
    @endcode

  - <ns1:GetMangeUnitResponse> @ref _ns1__GetMangeUnitResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetMangeUnitResponse(struct soap*, _ns1__GetMangeUnitResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetMangeUnitResponse(struct soap*, _ns1__GetMangeUnitResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__GetMangeUnitResponse(struct soap*, const char *URL, _ns1__GetMangeUnitResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__GetMangeUnitResponse(struct soap*, const char *URL, _ns1__GetMangeUnitResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__GetMangeUnitResponse(struct soap*, const char *URL, _ns1__GetMangeUnitResponse*);
    soap_POST_recv__ns1__GetMangeUnitResponse(struct soap*, _ns1__GetMangeUnitResponse*);
    @endcode

  - <ns1:GetMangeXb> @ref _ns1__GetMangeXb
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetMangeXb(struct soap*, _ns1__GetMangeXb*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetMangeXb(struct soap*, _ns1__GetMangeXb*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__GetMangeXb(struct soap*, const char *URL, _ns1__GetMangeXb*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__GetMangeXb(struct soap*, const char *URL, _ns1__GetMangeXb*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__GetMangeXb(struct soap*, const char *URL, _ns1__GetMangeXb*);
    soap_POST_recv__ns1__GetMangeXb(struct soap*, _ns1__GetMangeXb*);
    @endcode

  - <ns1:GetMangeXbResponse> @ref _ns1__GetMangeXbResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetMangeXbResponse(struct soap*, _ns1__GetMangeXbResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetMangeXbResponse(struct soap*, _ns1__GetMangeXbResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__GetMangeXbResponse(struct soap*, const char *URL, _ns1__GetMangeXbResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__GetMangeXbResponse(struct soap*, const char *URL, _ns1__GetMangeXbResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__GetMangeXbResponse(struct soap*, const char *URL, _ns1__GetMangeXbResponse*);
    soap_POST_recv__ns1__GetMangeXbResponse(struct soap*, _ns1__GetMangeXbResponse*);
    @endcode

  - <ns1:CheckMapVer> @ref _ns1__CheckMapVer
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__CheckMapVer(struct soap*, _ns1__CheckMapVer*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__CheckMapVer(struct soap*, _ns1__CheckMapVer*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__CheckMapVer(struct soap*, const char *URL, _ns1__CheckMapVer*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__CheckMapVer(struct soap*, const char *URL, _ns1__CheckMapVer*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__CheckMapVer(struct soap*, const char *URL, _ns1__CheckMapVer*);
    soap_POST_recv__ns1__CheckMapVer(struct soap*, _ns1__CheckMapVer*);
    @endcode

  - <ns1:CheckMapVerResponse> @ref _ns1__CheckMapVerResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__CheckMapVerResponse(struct soap*, _ns1__CheckMapVerResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__CheckMapVerResponse(struct soap*, _ns1__CheckMapVerResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__CheckMapVerResponse(struct soap*, const char *URL, _ns1__CheckMapVerResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__CheckMapVerResponse(struct soap*, const char *URL, _ns1__CheckMapVerResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__CheckMapVerResponse(struct soap*, const char *URL, _ns1__CheckMapVerResponse*);
    soap_POST_recv__ns1__CheckMapVerResponse(struct soap*, _ns1__CheckMapVerResponse*);
    @endcode

  - <ns1:GetMap> @ref _ns1__GetMap
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetMap(struct soap*, _ns1__GetMap*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetMap(struct soap*, _ns1__GetMap*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__GetMap(struct soap*, const char *URL, _ns1__GetMap*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__GetMap(struct soap*, const char *URL, _ns1__GetMap*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__GetMap(struct soap*, const char *URL, _ns1__GetMap*);
    soap_POST_recv__ns1__GetMap(struct soap*, _ns1__GetMap*);
    @endcode

  - <ns1:GetMapResponse> @ref _ns1__GetMapResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetMapResponse(struct soap*, _ns1__GetMapResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetMapResponse(struct soap*, _ns1__GetMapResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__GetMapResponse(struct soap*, const char *URL, _ns1__GetMapResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__GetMapResponse(struct soap*, const char *URL, _ns1__GetMapResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__GetMapResponse(struct soap*, const char *URL, _ns1__GetMapResponse*);
    soap_POST_recv__ns1__GetMapResponse(struct soap*, _ns1__GetMapResponse*);
    @endcode

  - <ns1:GetTableData> @ref _ns1__GetTableData
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetTableData(struct soap*, _ns1__GetTableData*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetTableData(struct soap*, _ns1__GetTableData*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__GetTableData(struct soap*, const char *URL, _ns1__GetTableData*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__GetTableData(struct soap*, const char *URL, _ns1__GetTableData*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__GetTableData(struct soap*, const char *URL, _ns1__GetTableData*);
    soap_POST_recv__ns1__GetTableData(struct soap*, _ns1__GetTableData*);
    @endcode

  - <ns1:GetTableDataResponse> @ref _ns1__GetTableDataResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetTableDataResponse(struct soap*, _ns1__GetTableDataResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetTableDataResponse(struct soap*, _ns1__GetTableDataResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__GetTableDataResponse(struct soap*, const char *URL, _ns1__GetTableDataResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__GetTableDataResponse(struct soap*, const char *URL, _ns1__GetTableDataResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__GetTableDataResponse(struct soap*, const char *URL, _ns1__GetTableDataResponse*);
    soap_POST_recv__ns1__GetTableDataResponse(struct soap*, _ns1__GetTableDataResponse*);
    @endcode

  - <ns1:ServerLevel> @ref _ns1__ServerLevel
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__ServerLevel(struct soap*, _ns1__ServerLevel*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__ServerLevel(struct soap*, _ns1__ServerLevel*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__ServerLevel(struct soap*, const char *URL, _ns1__ServerLevel*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__ServerLevel(struct soap*, const char *URL, _ns1__ServerLevel*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__ServerLevel(struct soap*, const char *URL, _ns1__ServerLevel*);
    soap_POST_recv__ns1__ServerLevel(struct soap*, _ns1__ServerLevel*);
    @endcode

  - <ns1:ServerLevelResponse> @ref _ns1__ServerLevelResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__ServerLevelResponse(struct soap*, _ns1__ServerLevelResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__ServerLevelResponse(struct soap*, _ns1__ServerLevelResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__ServerLevelResponse(struct soap*, const char *URL, _ns1__ServerLevelResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__ServerLevelResponse(struct soap*, const char *URL, _ns1__ServerLevelResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__ServerLevelResponse(struct soap*, const char *URL, _ns1__ServerLevelResponse*);
    soap_POST_recv__ns1__ServerLevelResponse(struct soap*, _ns1__ServerLevelResponse*);
    @endcode

  - <ns1:GetMapListTime> @ref _ns1__GetMapListTime
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetMapListTime(struct soap*, _ns1__GetMapListTime*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetMapListTime(struct soap*, _ns1__GetMapListTime*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__GetMapListTime(struct soap*, const char *URL, _ns1__GetMapListTime*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__GetMapListTime(struct soap*, const char *URL, _ns1__GetMapListTime*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__GetMapListTime(struct soap*, const char *URL, _ns1__GetMapListTime*);
    soap_POST_recv__ns1__GetMapListTime(struct soap*, _ns1__GetMapListTime*);
    @endcode

  - <ns1:GetMapListTimeResponse> @ref _ns1__GetMapListTimeResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetMapListTimeResponse(struct soap*, _ns1__GetMapListTimeResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetMapListTimeResponse(struct soap*, _ns1__GetMapListTimeResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__GetMapListTimeResponse(struct soap*, const char *URL, _ns1__GetMapListTimeResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__GetMapListTimeResponse(struct soap*, const char *URL, _ns1__GetMapListTimeResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__GetMapListTimeResponse(struct soap*, const char *URL, _ns1__GetMapListTimeResponse*);
    soap_POST_recv__ns1__GetMapListTimeResponse(struct soap*, _ns1__GetMapListTimeResponse*);
    @endcode

  - <ns1:UpdateGzclMap> @ref _ns1__UpdateGzclMap
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__UpdateGzclMap(struct soap*, _ns1__UpdateGzclMap*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__UpdateGzclMap(struct soap*, _ns1__UpdateGzclMap*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__UpdateGzclMap(struct soap*, const char *URL, _ns1__UpdateGzclMap*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__UpdateGzclMap(struct soap*, const char *URL, _ns1__UpdateGzclMap*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__UpdateGzclMap(struct soap*, const char *URL, _ns1__UpdateGzclMap*);
    soap_POST_recv__ns1__UpdateGzclMap(struct soap*, _ns1__UpdateGzclMap*);
    @endcode

  - <ns1:UpdateGzclMapResponse> @ref _ns1__UpdateGzclMapResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__UpdateGzclMapResponse(struct soap*, _ns1__UpdateGzclMapResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__UpdateGzclMapResponse(struct soap*, _ns1__UpdateGzclMapResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__UpdateGzclMapResponse(struct soap*, const char *URL, _ns1__UpdateGzclMapResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__UpdateGzclMapResponse(struct soap*, const char *URL, _ns1__UpdateGzclMapResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__UpdateGzclMapResponse(struct soap*, const char *URL, _ns1__UpdateGzclMapResponse*);
    soap_POST_recv__ns1__UpdateGzclMapResponse(struct soap*, _ns1__UpdateGzclMapResponse*);
    @endcode

  - <ns1:GetUnitMapVer> @ref _ns1__GetUnitMapVer
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetUnitMapVer(struct soap*, _ns1__GetUnitMapVer*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetUnitMapVer(struct soap*, _ns1__GetUnitMapVer*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__GetUnitMapVer(struct soap*, const char *URL, _ns1__GetUnitMapVer*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__GetUnitMapVer(struct soap*, const char *URL, _ns1__GetUnitMapVer*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__GetUnitMapVer(struct soap*, const char *URL, _ns1__GetUnitMapVer*);
    soap_POST_recv__ns1__GetUnitMapVer(struct soap*, _ns1__GetUnitMapVer*);
    @endcode

  - <ns1:GetUnitMapVerResponse> @ref _ns1__GetUnitMapVerResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetUnitMapVerResponse(struct soap*, _ns1__GetUnitMapVerResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetUnitMapVerResponse(struct soap*, _ns1__GetUnitMapVerResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__GetUnitMapVerResponse(struct soap*, const char *URL, _ns1__GetUnitMapVerResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__GetUnitMapVerResponse(struct soap*, const char *URL, _ns1__GetUnitMapVerResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__GetUnitMapVerResponse(struct soap*, const char *URL, _ns1__GetUnitMapVerResponse*);
    soap_POST_recv__ns1__GetUnitMapVerResponse(struct soap*, _ns1__GetUnitMapVerResponse*);
    @endcode

  - <ns1:GetMangeMapUpdate> @ref _ns1__GetMangeMapUpdate
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetMangeMapUpdate(struct soap*, _ns1__GetMangeMapUpdate*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetMangeMapUpdate(struct soap*, _ns1__GetMangeMapUpdate*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__GetMangeMapUpdate(struct soap*, const char *URL, _ns1__GetMangeMapUpdate*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__GetMangeMapUpdate(struct soap*, const char *URL, _ns1__GetMangeMapUpdate*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__GetMangeMapUpdate(struct soap*, const char *URL, _ns1__GetMangeMapUpdate*);
    soap_POST_recv__ns1__GetMangeMapUpdate(struct soap*, _ns1__GetMangeMapUpdate*);
    @endcode

  - <ns1:GetMangeMapUpdateResponse> @ref _ns1__GetMangeMapUpdateResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetMangeMapUpdateResponse(struct soap*, _ns1__GetMangeMapUpdateResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetMangeMapUpdateResponse(struct soap*, _ns1__GetMangeMapUpdateResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__GetMangeMapUpdateResponse(struct soap*, const char *URL, _ns1__GetMangeMapUpdateResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__GetMangeMapUpdateResponse(struct soap*, const char *URL, _ns1__GetMangeMapUpdateResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__GetMangeMapUpdateResponse(struct soap*, const char *URL, _ns1__GetMangeMapUpdateResponse*);
    soap_POST_recv__ns1__GetMangeMapUpdateResponse(struct soap*, _ns1__GetMangeMapUpdateResponse*);
    @endcode

  - <ns1:OpenProcess> @ref _ns1__OpenProcess
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__OpenProcess(struct soap*, _ns1__OpenProcess*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__OpenProcess(struct soap*, _ns1__OpenProcess*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__OpenProcess(struct soap*, const char *URL, _ns1__OpenProcess*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__OpenProcess(struct soap*, const char *URL, _ns1__OpenProcess*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__OpenProcess(struct soap*, const char *URL, _ns1__OpenProcess*);
    soap_POST_recv__ns1__OpenProcess(struct soap*, _ns1__OpenProcess*);
    @endcode

  - <ns1:OpenProcessResponse> @ref _ns1__OpenProcessResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__OpenProcessResponse(struct soap*, _ns1__OpenProcessResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__OpenProcessResponse(struct soap*, _ns1__OpenProcessResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__OpenProcessResponse(struct soap*, const char *URL, _ns1__OpenProcessResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__OpenProcessResponse(struct soap*, const char *URL, _ns1__OpenProcessResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__OpenProcessResponse(struct soap*, const char *URL, _ns1__OpenProcessResponse*);
    soap_POST_recv__ns1__OpenProcessResponse(struct soap*, _ns1__OpenProcessResponse*);
    @endcode

  - <ns1:GetEmfPngVer> @ref _ns1__GetEmfPngVer
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetEmfPngVer(struct soap*, _ns1__GetEmfPngVer*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetEmfPngVer(struct soap*, _ns1__GetEmfPngVer*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__GetEmfPngVer(struct soap*, const char *URL, _ns1__GetEmfPngVer*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__GetEmfPngVer(struct soap*, const char *URL, _ns1__GetEmfPngVer*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__GetEmfPngVer(struct soap*, const char *URL, _ns1__GetEmfPngVer*);
    soap_POST_recv__ns1__GetEmfPngVer(struct soap*, _ns1__GetEmfPngVer*);
    @endcode

  - <ns1:GetEmfPngVerResponse> @ref _ns1__GetEmfPngVerResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetEmfPngVerResponse(struct soap*, _ns1__GetEmfPngVerResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetEmfPngVerResponse(struct soap*, _ns1__GetEmfPngVerResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__GetEmfPngVerResponse(struct soap*, const char *URL, _ns1__GetEmfPngVerResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__GetEmfPngVerResponse(struct soap*, const char *URL, _ns1__GetEmfPngVerResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__GetEmfPngVerResponse(struct soap*, const char *URL, _ns1__GetEmfPngVerResponse*);
    soap_POST_recv__ns1__GetEmfPngVerResponse(struct soap*, _ns1__GetEmfPngVerResponse*);
    @endcode

  - <ns1:GetEmfPngFile> @ref _ns1__GetEmfPngFile
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetEmfPngFile(struct soap*, _ns1__GetEmfPngFile*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetEmfPngFile(struct soap*, _ns1__GetEmfPngFile*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__GetEmfPngFile(struct soap*, const char *URL, _ns1__GetEmfPngFile*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__GetEmfPngFile(struct soap*, const char *URL, _ns1__GetEmfPngFile*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__GetEmfPngFile(struct soap*, const char *URL, _ns1__GetEmfPngFile*);
    soap_POST_recv__ns1__GetEmfPngFile(struct soap*, _ns1__GetEmfPngFile*);
    @endcode

  - <ns1:GetEmfPngFileResponse> @ref _ns1__GetEmfPngFileResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetEmfPngFileResponse(struct soap*, _ns1__GetEmfPngFileResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetEmfPngFileResponse(struct soap*, _ns1__GetEmfPngFileResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__GetEmfPngFileResponse(struct soap*, const char *URL, _ns1__GetEmfPngFileResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__GetEmfPngFileResponse(struct soap*, const char *URL, _ns1__GetEmfPngFileResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__GetEmfPngFileResponse(struct soap*, const char *URL, _ns1__GetEmfPngFileResponse*);
    soap_POST_recv__ns1__GetEmfPngFileResponse(struct soap*, _ns1__GetEmfPngFileResponse*);
    @endcode

  - <ns1:OpenMapExe> @ref _ns1__OpenMapExe
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__OpenMapExe(struct soap*, _ns1__OpenMapExe*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__OpenMapExe(struct soap*, _ns1__OpenMapExe*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__OpenMapExe(struct soap*, const char *URL, _ns1__OpenMapExe*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__OpenMapExe(struct soap*, const char *URL, _ns1__OpenMapExe*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__OpenMapExe(struct soap*, const char *URL, _ns1__OpenMapExe*);
    soap_POST_recv__ns1__OpenMapExe(struct soap*, _ns1__OpenMapExe*);
    @endcode

  - <ns1:OpenMapExeResponse> @ref _ns1__OpenMapExeResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__OpenMapExeResponse(struct soap*, _ns1__OpenMapExeResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__OpenMapExeResponse(struct soap*, _ns1__OpenMapExeResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__OpenMapExeResponse(struct soap*, const char *URL, _ns1__OpenMapExeResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__OpenMapExeResponse(struct soap*, const char *URL, _ns1__OpenMapExeResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__OpenMapExeResponse(struct soap*, const char *URL, _ns1__OpenMapExeResponse*);
    soap_POST_recv__ns1__OpenMapExeResponse(struct soap*, _ns1__OpenMapExeResponse*);
    @endcode

  - <ns1:ChaoQi> @ref _ns1__ChaoQi
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__ChaoQi(struct soap*, _ns1__ChaoQi*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__ChaoQi(struct soap*, _ns1__ChaoQi*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__ChaoQi(struct soap*, const char *URL, _ns1__ChaoQi*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__ChaoQi(struct soap*, const char *URL, _ns1__ChaoQi*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__ChaoQi(struct soap*, const char *URL, _ns1__ChaoQi*);
    soap_POST_recv__ns1__ChaoQi(struct soap*, _ns1__ChaoQi*);
    @endcode

  - <ns1:ChaoQiResponse> @ref _ns1__ChaoQiResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__ChaoQiResponse(struct soap*, _ns1__ChaoQiResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__ChaoQiResponse(struct soap*, _ns1__ChaoQiResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__ChaoQiResponse(struct soap*, const char *URL, _ns1__ChaoQiResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__ChaoQiResponse(struct soap*, const char *URL, _ns1__ChaoQiResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__ChaoQiResponse(struct soap*, const char *URL, _ns1__ChaoQiResponse*);
    soap_POST_recv__ns1__ChaoQiResponse(struct soap*, _ns1__ChaoQiResponse*);
    @endcode

  - <ns1:JiChaoQi> @ref _ns1__JiChaoQi
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__JiChaoQi(struct soap*, _ns1__JiChaoQi*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__JiChaoQi(struct soap*, _ns1__JiChaoQi*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__JiChaoQi(struct soap*, const char *URL, _ns1__JiChaoQi*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__JiChaoQi(struct soap*, const char *URL, _ns1__JiChaoQi*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__JiChaoQi(struct soap*, const char *URL, _ns1__JiChaoQi*);
    soap_POST_recv__ns1__JiChaoQi(struct soap*, _ns1__JiChaoQi*);
    @endcode

  - <ns1:JiChaoQiResponse> @ref _ns1__JiChaoQiResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__JiChaoQiResponse(struct soap*, _ns1__JiChaoQiResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__JiChaoQiResponse(struct soap*, _ns1__JiChaoQiResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__JiChaoQiResponse(struct soap*, const char *URL, _ns1__JiChaoQiResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__JiChaoQiResponse(struct soap*, const char *URL, _ns1__JiChaoQiResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__JiChaoQiResponse(struct soap*, const char *URL, _ns1__JiChaoQiResponse*);
    soap_POST_recv__ns1__JiChaoQiResponse(struct soap*, _ns1__JiChaoQiResponse*);
    @endcode

  - <ns1:GetZhouQi> @ref _ns1__GetZhouQi
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetZhouQi(struct soap*, _ns1__GetZhouQi*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetZhouQi(struct soap*, _ns1__GetZhouQi*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__GetZhouQi(struct soap*, const char *URL, _ns1__GetZhouQi*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__GetZhouQi(struct soap*, const char *URL, _ns1__GetZhouQi*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__GetZhouQi(struct soap*, const char *URL, _ns1__GetZhouQi*);
    soap_POST_recv__ns1__GetZhouQi(struct soap*, _ns1__GetZhouQi*);
    @endcode

  - <ns1:GetZhouQiResponse> @ref _ns1__GetZhouQiResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetZhouQiResponse(struct soap*, _ns1__GetZhouQiResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetZhouQiResponse(struct soap*, _ns1__GetZhouQiResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__GetZhouQiResponse(struct soap*, const char *URL, _ns1__GetZhouQiResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__GetZhouQiResponse(struct soap*, const char *URL, _ns1__GetZhouQiResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__GetZhouQiResponse(struct soap*, const char *URL, _ns1__GetZhouQiResponse*);
    soap_POST_recv__ns1__GetZhouQiResponse(struct soap*, _ns1__GetZhouQiResponse*);
    @endcode

  - <ns1:FlowChartEmf> @ref _ns1__FlowChartEmf
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__FlowChartEmf(struct soap*, _ns1__FlowChartEmf*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__FlowChartEmf(struct soap*, _ns1__FlowChartEmf*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__FlowChartEmf(struct soap*, const char *URL, _ns1__FlowChartEmf*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__FlowChartEmf(struct soap*, const char *URL, _ns1__FlowChartEmf*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__FlowChartEmf(struct soap*, const char *URL, _ns1__FlowChartEmf*);
    soap_POST_recv__ns1__FlowChartEmf(struct soap*, _ns1__FlowChartEmf*);
    @endcode

  - <ns1:FlowChartEmfResponse> @ref _ns1__FlowChartEmfResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__FlowChartEmfResponse(struct soap*, _ns1__FlowChartEmfResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__FlowChartEmfResponse(struct soap*, _ns1__FlowChartEmfResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__FlowChartEmfResponse(struct soap*, const char *URL, _ns1__FlowChartEmfResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__FlowChartEmfResponse(struct soap*, const char *URL, _ns1__FlowChartEmfResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__FlowChartEmfResponse(struct soap*, const char *URL, _ns1__FlowChartEmfResponse*);
    soap_POST_recv__ns1__FlowChartEmfResponse(struct soap*, _ns1__FlowChartEmfResponse*);
    @endcode

  - <ns1:SGCDrawEmf> @ref _ns1__SGCDrawEmf
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__SGCDrawEmf(struct soap*, _ns1__SGCDrawEmf*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__SGCDrawEmf(struct soap*, _ns1__SGCDrawEmf*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__SGCDrawEmf(struct soap*, const char *URL, _ns1__SGCDrawEmf*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__SGCDrawEmf(struct soap*, const char *URL, _ns1__SGCDrawEmf*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__SGCDrawEmf(struct soap*, const char *URL, _ns1__SGCDrawEmf*);
    soap_POST_recv__ns1__SGCDrawEmf(struct soap*, _ns1__SGCDrawEmf*);
    @endcode

  - <ns1:SGCDrawEmfResponse> @ref _ns1__SGCDrawEmfResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__SGCDrawEmfResponse(struct soap*, _ns1__SGCDrawEmfResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__SGCDrawEmfResponse(struct soap*, _ns1__SGCDrawEmfResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__SGCDrawEmfResponse(struct soap*, const char *URL, _ns1__SGCDrawEmfResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__SGCDrawEmfResponse(struct soap*, const char *URL, _ns1__SGCDrawEmfResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__SGCDrawEmfResponse(struct soap*, const char *URL, _ns1__SGCDrawEmfResponse*);
    soap_POST_recv__ns1__SGCDrawEmfResponse(struct soap*, _ns1__SGCDrawEmfResponse*);
    @endcode

  - <ns1:GzGetTypeList> @ref _ns1__GzGetTypeList
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GzGetTypeList(struct soap*, _ns1__GzGetTypeList*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GzGetTypeList(struct soap*, _ns1__GzGetTypeList*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__GzGetTypeList(struct soap*, const char *URL, _ns1__GzGetTypeList*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__GzGetTypeList(struct soap*, const char *URL, _ns1__GzGetTypeList*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__GzGetTypeList(struct soap*, const char *URL, _ns1__GzGetTypeList*);
    soap_POST_recv__ns1__GzGetTypeList(struct soap*, _ns1__GzGetTypeList*);
    @endcode

  - <ns1:GzGetTypeListResponse> @ref _ns1__GzGetTypeListResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GzGetTypeListResponse(struct soap*, _ns1__GzGetTypeListResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GzGetTypeListResponse(struct soap*, _ns1__GzGetTypeListResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__GzGetTypeListResponse(struct soap*, const char *URL, _ns1__GzGetTypeListResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__GzGetTypeListResponse(struct soap*, const char *URL, _ns1__GzGetTypeListResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__GzGetTypeListResponse(struct soap*, const char *URL, _ns1__GzGetTypeListResponse*);
    soap_POST_recv__ns1__GzGetTypeListResponse(struct soap*, _ns1__GzGetTypeListResponse*);
    @endcode

  - <ns1:GzGetDeviceStruct> @ref _ns1__GzGetDeviceStruct
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GzGetDeviceStruct(struct soap*, _ns1__GzGetDeviceStruct*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GzGetDeviceStruct(struct soap*, _ns1__GzGetDeviceStruct*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__GzGetDeviceStruct(struct soap*, const char *URL, _ns1__GzGetDeviceStruct*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__GzGetDeviceStruct(struct soap*, const char *URL, _ns1__GzGetDeviceStruct*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__GzGetDeviceStruct(struct soap*, const char *URL, _ns1__GzGetDeviceStruct*);
    soap_POST_recv__ns1__GzGetDeviceStruct(struct soap*, _ns1__GzGetDeviceStruct*);
    @endcode

  - <ns1:GzGetDeviceStructResponse> @ref _ns1__GzGetDeviceStructResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GzGetDeviceStructResponse(struct soap*, _ns1__GzGetDeviceStructResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GzGetDeviceStructResponse(struct soap*, _ns1__GzGetDeviceStructResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__GzGetDeviceStructResponse(struct soap*, const char *URL, _ns1__GzGetDeviceStructResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__GzGetDeviceStructResponse(struct soap*, const char *URL, _ns1__GzGetDeviceStructResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__GzGetDeviceStructResponse(struct soap*, const char *URL, _ns1__GzGetDeviceStructResponse*);
    soap_POST_recv__ns1__GzGetDeviceStructResponse(struct soap*, _ns1__GzGetDeviceStructResponse*);
    @endcode

  - <ns1:SaveMapFile> @ref _ns1__SaveMapFile
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__SaveMapFile(struct soap*, _ns1__SaveMapFile*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__SaveMapFile(struct soap*, _ns1__SaveMapFile*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__SaveMapFile(struct soap*, const char *URL, _ns1__SaveMapFile*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__SaveMapFile(struct soap*, const char *URL, _ns1__SaveMapFile*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__SaveMapFile(struct soap*, const char *URL, _ns1__SaveMapFile*);
    soap_POST_recv__ns1__SaveMapFile(struct soap*, _ns1__SaveMapFile*);
    @endcode

  - <ns1:SaveMapFileResponse> @ref _ns1__SaveMapFileResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__SaveMapFileResponse(struct soap*, _ns1__SaveMapFileResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__SaveMapFileResponse(struct soap*, _ns1__SaveMapFileResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__SaveMapFileResponse(struct soap*, const char *URL, _ns1__SaveMapFileResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__SaveMapFileResponse(struct soap*, const char *URL, _ns1__SaveMapFileResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__SaveMapFileResponse(struct soap*, const char *URL, _ns1__SaveMapFileResponse*);
    soap_POST_recv__ns1__SaveMapFileResponse(struct soap*, _ns1__SaveMapFileResponse*);
    @endcode

  - <ns1:SelectYjzhStation> @ref _ns1__SelectYjzhStation
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__SelectYjzhStation(struct soap*, _ns1__SelectYjzhStation*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__SelectYjzhStation(struct soap*, _ns1__SelectYjzhStation*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__SelectYjzhStation(struct soap*, const char *URL, _ns1__SelectYjzhStation*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__SelectYjzhStation(struct soap*, const char *URL, _ns1__SelectYjzhStation*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__SelectYjzhStation(struct soap*, const char *URL, _ns1__SelectYjzhStation*);
    soap_POST_recv__ns1__SelectYjzhStation(struct soap*, _ns1__SelectYjzhStation*);
    @endcode

  - <ns1:SelectYjzhStationResponse> @ref _ns1__SelectYjzhStationResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__SelectYjzhStationResponse(struct soap*, _ns1__SelectYjzhStationResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__SelectYjzhStationResponse(struct soap*, _ns1__SelectYjzhStationResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__SelectYjzhStationResponse(struct soap*, const char *URL, _ns1__SelectYjzhStationResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__SelectYjzhStationResponse(struct soap*, const char *URL, _ns1__SelectYjzhStationResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__SelectYjzhStationResponse(struct soap*, const char *URL, _ns1__SelectYjzhStationResponse*);
    soap_POST_recv__ns1__SelectYjzhStationResponse(struct soap*, _ns1__SelectYjzhStationResponse*);
    @endcode

  - <ns1:SelectYjzhDevice> @ref _ns1__SelectYjzhDevice
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__SelectYjzhDevice(struct soap*, _ns1__SelectYjzhDevice*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__SelectYjzhDevice(struct soap*, _ns1__SelectYjzhDevice*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__SelectYjzhDevice(struct soap*, const char *URL, _ns1__SelectYjzhDevice*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__SelectYjzhDevice(struct soap*, const char *URL, _ns1__SelectYjzhDevice*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__SelectYjzhDevice(struct soap*, const char *URL, _ns1__SelectYjzhDevice*);
    soap_POST_recv__ns1__SelectYjzhDevice(struct soap*, _ns1__SelectYjzhDevice*);
    @endcode

  - <ns1:SelectYjzhDeviceResponse> @ref _ns1__SelectYjzhDeviceResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__SelectYjzhDeviceResponse(struct soap*, _ns1__SelectYjzhDeviceResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__SelectYjzhDeviceResponse(struct soap*, _ns1__SelectYjzhDeviceResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__SelectYjzhDeviceResponse(struct soap*, const char *URL, _ns1__SelectYjzhDeviceResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__SelectYjzhDeviceResponse(struct soap*, const char *URL, _ns1__SelectYjzhDeviceResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__SelectYjzhDeviceResponse(struct soap*, const char *URL, _ns1__SelectYjzhDeviceResponse*);
    soap_POST_recv__ns1__SelectYjzhDeviceResponse(struct soap*, _ns1__SelectYjzhDeviceResponse*);
    @endcode

  - <ns1:GetYjzhZskAlarmTypes> @ref _ns1__GetYjzhZskAlarmTypes
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetYjzhZskAlarmTypes(struct soap*, _ns1__GetYjzhZskAlarmTypes*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetYjzhZskAlarmTypes(struct soap*, _ns1__GetYjzhZskAlarmTypes*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__GetYjzhZskAlarmTypes(struct soap*, const char *URL, _ns1__GetYjzhZskAlarmTypes*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__GetYjzhZskAlarmTypes(struct soap*, const char *URL, _ns1__GetYjzhZskAlarmTypes*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__GetYjzhZskAlarmTypes(struct soap*, const char *URL, _ns1__GetYjzhZskAlarmTypes*);
    soap_POST_recv__ns1__GetYjzhZskAlarmTypes(struct soap*, _ns1__GetYjzhZskAlarmTypes*);
    @endcode

  - <ns1:GetYjzhZskAlarmTypesResponse> @ref _ns1__GetYjzhZskAlarmTypesResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetYjzhZskAlarmTypesResponse(struct soap*, _ns1__GetYjzhZskAlarmTypesResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetYjzhZskAlarmTypesResponse(struct soap*, _ns1__GetYjzhZskAlarmTypesResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__GetYjzhZskAlarmTypesResponse(struct soap*, const char *URL, _ns1__GetYjzhZskAlarmTypesResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__GetYjzhZskAlarmTypesResponse(struct soap*, const char *URL, _ns1__GetYjzhZskAlarmTypesResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__GetYjzhZskAlarmTypesResponse(struct soap*, const char *URL, _ns1__GetYjzhZskAlarmTypesResponse*);
    soap_POST_recv__ns1__GetYjzhZskAlarmTypesResponse(struct soap*, _ns1__GetYjzhZskAlarmTypesResponse*);
    @endcode

  - <ns1:string> (use wsdl2h option -g to auto-generate type _ns1__string)

  - <ns1:int> (use wsdl2h option -g to auto-generate type _ns1__int)

  - <ns1:long> (use wsdl2h option -g to auto-generate type _ns1__long)

*/

/* End of zbxhwbservice.h */
