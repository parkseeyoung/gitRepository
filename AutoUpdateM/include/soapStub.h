/* soapStub.h
   Generated by gSOAP 2.8.63 for zbxhwbservice.h

gSOAP XML Web services tools
Copyright (C) 2000-2018, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#define SOAP_NAMESPACE_OF_ns1	"http://zbxhupdata.com/webservices/"

#ifndef soapStub_H
#define soapStub_H
#include "stdsoap2.h"
#if GSOAP_VERSION != 20863
# error "GSOAP VERSION 20863 MISMATCH IN GENERATED CODE VERSUS LIBRARY CODE: PLEASE REINSTALL PACKAGE"
#endif


/******************************************************************************\
 *                                                                            *
 * Types with Custom Serializers                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Classes, Structs and Unions                                                *
 *                                                                            *
\******************************************************************************/

class xsd__base64Binary;	/* zbxhwbservice.h:130 */
class ns1__ArrayOfBase64Binary;	/* zbxhwbservice.h:145 */
class _ns1__GetYjzhZskGzFlow;	/* zbxhwbservice.h:148 */
class _ns1__GetYjzhZskGzFlowResponse;	/* zbxhwbservice.h:151 */
class _ns1__GetYjzhZskOtherFlowChartList;	/* zbxhwbservice.h:154 */
class _ns1__GetYjzhZskOtherFlowChartListResponse;	/* zbxhwbservice.h:157 */
class _ns1__GetYjzhZskDevFlowChartList;	/* zbxhwbservice.h:160 */
class _ns1__GetYjzhZskDevFlowChartListResponse;	/* zbxhwbservice.h:163 */
class _ns1__GetPropList;	/* zbxhwbservice.h:166 */
class _ns1__GetPropListResponse;	/* zbxhwbservice.h:169 */
class _ns1__GetPropName;	/* zbxhwbservice.h:172 */
class _ns1__GetPropNameResponse;	/* zbxhwbservice.h:175 */
class _ns1__CheckLoginUser;	/* zbxhwbservice.h:178 */
class _ns1__CheckLoginUserResponse;	/* zbxhwbservice.h:181 */
class _ns1__GetRyUnit;	/* zbxhwbservice.h:184 */
class _ns1__GetRyUnitResponse;	/* zbxhwbservice.h:187 */
class _ns1__GetDevCode;	/* zbxhwbservice.h:190 */
class _ns1__GetDevCodeResponse;	/* zbxhwbservice.h:193 */
class _ns1__CheckDevCode;	/* zbxhwbservice.h:196 */
class _ns1__CheckDevCodeResponse;	/* zbxhwbservice.h:199 */
class _ns1__HelloWorld;	/* zbxhwbservice.h:202 */
class _ns1__HelloWorldResponse;	/* zbxhwbservice.h:205 */
class _ns1__GetDBString;	/* zbxhwbservice.h:208 */
class _ns1__GetDBStringResponse;	/* zbxhwbservice.h:211 */
class _ns1__QueryData;	/* zbxhwbservice.h:214 */
class _ns1__QueryDataResponse;	/* zbxhwbservice.h:217 */
class _ns1__QueryDataCount;	/* zbxhwbservice.h:220 */
class _ns1__QueryDataCountResponse;	/* zbxhwbservice.h:223 */
class _ns1__ExecuteSql;	/* zbxhwbservice.h:226 */
class _ns1__ExecuteSqlResponse;	/* zbxhwbservice.h:229 */
class _ns1__SaveData;	/* zbxhwbservice.h:232 */
class _ns1__SaveDataResponse;	/* zbxhwbservice.h:235 */
class _ns1__SaveFileData;	/* zbxhwbservice.h:238 */
class _ns1__SaveFileDataResponse;	/* zbxhwbservice.h:241 */
class _ns1__DownPic;	/* zbxhwbservice.h:244 */
class _ns1__DownPicResponse;	/* zbxhwbservice.h:247 */
class _ns1__DownAllPic;	/* zbxhwbservice.h:250 */
class _ns1__DownAllPicResponse;	/* zbxhwbservice.h:253 */
class _ns1__GetGxdataUpTime;	/* zbxhwbservice.h:256 */
class _ns1__GetGxdataUpTimeResponse;	/* zbxhwbservice.h:259 */
class _ns1__signedUserInfo;	/* zbxhwbservice.h:262 */
class _ns1__signedUserInfoResponse;	/* zbxhwbservice.h:265 */
class _ns1__GetOsDateTime;	/* zbxhwbservice.h:268 */
class _ns1__GetOsDateTimeResponse;	/* zbxhwbservice.h:271 */
class _ns1__QueryPhotobw;	/* zbxhwbservice.h:274 */
class _ns1__QueryPhotobwResponse;	/* zbxhwbservice.h:277 */
class _ns1__TcdQuery;	/* zbxhwbservice.h:280 */
class _ns1__TcdQueryResponse;	/* zbxhwbservice.h:283 */
class _ns1__TcdSendup;	/* zbxhwbservice.h:286 */
class _ns1__TcdSendupResponse;	/* zbxhwbservice.h:289 */
class _ns1__UpLoadData;	/* zbxhwbservice.h:292 */
class _ns1__UpLoadDataResponse;	/* zbxhwbservice.h:295 */
class _ns1__ExecuteSqlForColb;	/* zbxhwbservice.h:298 */
class _ns1__ExecuteSqlForColbResponse;	/* zbxhwbservice.h:301 */
class _ns1__GetXHYDGLXTupdater;	/* zbxhwbservice.h:304 */
class _ns1__GetXHYDGLXTupdaterResponse;	/* zbxhwbservice.h:307 */
class _ns1__GetAPVupdater;	/* zbxhwbservice.h:310 */
class _ns1__GetAPVupdaterResponse;	/* zbxhwbservice.h:313 */
class _ns1__UpLoadFile;	/* zbxhwbservice.h:316 */
class _ns1__UpLoadFileResponse;	/* zbxhwbservice.h:319 */
class _ns1__upPic;	/* zbxhwbservice.h:322 */
class _ns1__upPicResponse;	/* zbxhwbservice.h:325 */
class _ns1__DownloadPic;	/* zbxhwbservice.h:328 */
class _ns1__DownloadPicResponse;	/* zbxhwbservice.h:331 */
class _ns1__GetPicNames;	/* zbxhwbservice.h:334 */
class _ns1__GetPicNamesResponse;	/* zbxhwbservice.h:337 */
class _ns1__GetDwInfo;	/* zbxhwbservice.h:340 */
class _ns1__GetDwInfoResponse;	/* zbxhwbservice.h:343 */
class _ns1__GetDwPic;	/* zbxhwbservice.h:346 */
class _ns1__GetDwPicResponse;	/* zbxhwbservice.h:349 */
class _ns1__GetDeviceXj;	/* zbxhwbservice.h:352 */
class _ns1__GetDeviceXjResponse;	/* zbxhwbservice.h:355 */
class _ns1__GetJxData;	/* zbxhwbservice.h:358 */
class _ns1__GetJxDataResponse;	/* zbxhwbservice.h:361 */
class _ns1__GetStationJxData;	/* zbxhwbservice.h:364 */
class _ns1__GetStationJxDataResponse;	/* zbxhwbservice.h:367 */
class _ns1__GetJxPic;	/* zbxhwbservice.h:370 */
class _ns1__GetJxPicResponse;	/* zbxhwbservice.h:373 */
class _ns1__GetDevPic;	/* zbxhwbservice.h:376 */
class _ns1__GetDevPicResponse;	/* zbxhwbservice.h:379 */
class _ns1__GetBgImg;	/* zbxhwbservice.h:382 */
class _ns1__GetBgImgResponse;	/* zbxhwbservice.h:385 */
class _ns1__GetDcsData;	/* zbxhwbservice.h:388 */
class _ns1__GetDcsDataResponse;	/* zbxhwbservice.h:391 */
class _ns1__DownLoadMobGPSData;	/* zbxhwbservice.h:394 */
class _ns1__DownLoadMobGPSDataResponse;	/* zbxhwbservice.h:397 */
class _ns1__MobDownLoadData;	/* zbxhwbservice.h:400 */
class _ns1__MobDownLoadDataResponse;	/* zbxhwbservice.h:403 */
class _ns1__GetOpenFireInfo;	/* zbxhwbservice.h:406 */
class _ns1__GetOpenFireInfoResponse;	/* zbxhwbservice.h:409 */
class _ns1__GetDwList;	/* zbxhwbservice.h:412 */
class _ns1__GetDwListResponse;	/* zbxhwbservice.h:415 */
class _ns1__GetUnitStation;	/* zbxhwbservice.h:418 */
class _ns1__GetUnitStationResponse;	/* zbxhwbservice.h:421 */
class _ns1__GetUnitStruct;	/* zbxhwbservice.h:424 */
class _ns1__GetUnitStructResponse;	/* zbxhwbservice.h:427 */
class _ns1__GetUnitPersonInfo;	/* zbxhwbservice.h:430 */
class _ns1__GetUnitPersonInfoResponse;	/* zbxhwbservice.h:433 */
class _ns1__GetFileSize;	/* zbxhwbservice.h:436 */
class _ns1__GetFileSizeResponse;	/* zbxhwbservice.h:439 */
class _ns1__GetXbList;	/* zbxhwbservice.h:442 */
class _ns1__GetXbListResponse;	/* zbxhwbservice.h:445 */
class _ns1__GetXbStationList;	/* zbxhwbservice.h:448 */
class _ns1__GetXbStationListResponse;	/* zbxhwbservice.h:451 */
class _ns1__GetMapDeviceType;	/* zbxhwbservice.h:454 */
class _ns1__GetMapDeviceTypeResponse;	/* zbxhwbservice.h:457 */
class _ns1__GetGxDeviceData;	/* zbxhwbservice.h:460 */
class _ns1__GetGxDeviceDataResponse;	/* zbxhwbservice.h:463 */
class _ns1__GetDownFileInfo;	/* zbxhwbservice.h:466 */
class _ns1__GetDownFileInfoResponse;	/* zbxhwbservice.h:469 */
class _ns1__DownMapfile;	/* zbxhwbservice.h:472 */
class _ns1__DownMapfileResponse;	/* zbxhwbservice.h:475 */
class _ns1__GetFileNew;	/* zbxhwbservice.h:478 */
class _ns1__GetFileNewResponse;	/* zbxhwbservice.h:481 */
class _ns1__AlterTable;	/* zbxhwbservice.h:484 */
class _ns1__AlterTableResponse;	/* zbxhwbservice.h:487 */
class _ns1__DownCQData;	/* zbxhwbservice.h:490 */
class _ns1__DownCQDataResponse;	/* zbxhwbservice.h:493 */
class _ns1__GetTabList;	/* zbxhwbservice.h:496 */
class _ns1__GetTabListResponse;	/* zbxhwbservice.h:499 */
class _ns1__IsOracleTable;	/* zbxhwbservice.h:502 */
class _ns1__IsOracleTableResponse;	/* zbxhwbservice.h:505 */
class _ns1__GetFieldInfo;	/* zbxhwbservice.h:508 */
class _ns1__GetFieldInfoResponse;	/* zbxhwbservice.h:511 */
class _ns1__ExecuteSqlForFile;	/* zbxhwbservice.h:514 */
class _ns1__ExecuteSqlForFileResponse;	/* zbxhwbservice.h:517 */
class _ns1__DownLoadFile;	/* zbxhwbservice.h:520 */
class _ns1__DownLoadFileResponse;	/* zbxhwbservice.h:523 */
class _ns1__WriteFile;	/* zbxhwbservice.h:526 */
class _ns1__WriteFileResponse;	/* zbxhwbservice.h:529 */
class _ns1__GetMapUpdateTime;	/* zbxhwbservice.h:532 */
class _ns1__GetMapUpdateTimeResponse;	/* zbxhwbservice.h:535 */
class _ns1__GetMapTabName;	/* zbxhwbservice.h:538 */
class _ns1__GetMapTabNameResponse;	/* zbxhwbservice.h:541 */
class _ns1__GetMapDeviceData;	/* zbxhwbservice.h:544 */
class _ns1__GetMapDeviceDataResponse;	/* zbxhwbservice.h:547 */
class _ns1__GetMaList;	/* zbxhwbservice.h:550 */
class _ns1__GetMaListResponse;	/* zbxhwbservice.h:553 */
class _ns1__GetMangeUnit;	/* zbxhwbservice.h:556 */
class _ns1__GetMangeUnitResponse;	/* zbxhwbservice.h:559 */
class _ns1__GetMangeXb;	/* zbxhwbservice.h:562 */
class _ns1__GetMangeXbResponse;	/* zbxhwbservice.h:565 */
class _ns1__CheckMapVer;	/* zbxhwbservice.h:568 */
class _ns1__CheckMapVerResponse;	/* zbxhwbservice.h:571 */
class _ns1__GetMap;	/* zbxhwbservice.h:574 */
class _ns1__GetMapResponse;	/* zbxhwbservice.h:577 */
class _ns1__GetTableData;	/* zbxhwbservice.h:580 */
class _ns1__GetTableDataResponse;	/* zbxhwbservice.h:583 */
class _ns1__ServerLevel;	/* zbxhwbservice.h:586 */
class _ns1__ServerLevelResponse;	/* zbxhwbservice.h:589 */
class _ns1__GetMapListTime;	/* zbxhwbservice.h:592 */
class _ns1__GetMapListTimeResponse;	/* zbxhwbservice.h:595 */
class _ns1__UpdateGzclMap;	/* zbxhwbservice.h:598 */
class _ns1__UpdateGzclMapResponse;	/* zbxhwbservice.h:601 */
class _ns1__GetUnitMapVer;	/* zbxhwbservice.h:604 */
class _ns1__GetUnitMapVerResponse;	/* zbxhwbservice.h:607 */
class _ns1__GetMangeMapUpdate;	/* zbxhwbservice.h:610 */
class _ns1__GetMangeMapUpdateResponse;	/* zbxhwbservice.h:613 */
class _ns1__OpenProcess;	/* zbxhwbservice.h:616 */
class _ns1__OpenProcessResponse;	/* zbxhwbservice.h:619 */
class _ns1__GetEmfPngVer;	/* zbxhwbservice.h:622 */
class _ns1__GetEmfPngVerResponse;	/* zbxhwbservice.h:625 */
class _ns1__GetEmfPngFile;	/* zbxhwbservice.h:628 */
class _ns1__GetEmfPngFileResponse;	/* zbxhwbservice.h:631 */
class _ns1__OpenMapExe;	/* zbxhwbservice.h:634 */
class _ns1__OpenMapExeResponse;	/* zbxhwbservice.h:637 */
class _ns1__ChaoQi;	/* zbxhwbservice.h:640 */
class _ns1__ChaoQiResponse;	/* zbxhwbservice.h:643 */
class _ns1__JiChaoQi;	/* zbxhwbservice.h:646 */
class _ns1__JiChaoQiResponse;	/* zbxhwbservice.h:649 */
class _ns1__GetZhouQi;	/* zbxhwbservice.h:652 */
class _ns1__GetZhouQiResponse;	/* zbxhwbservice.h:655 */
class _ns1__FlowChartEmf;	/* zbxhwbservice.h:658 */
class _ns1__FlowChartEmfResponse;	/* zbxhwbservice.h:661 */
class _ns1__SGCDrawEmf;	/* zbxhwbservice.h:664 */
class _ns1__SGCDrawEmfResponse;	/* zbxhwbservice.h:667 */
class _ns1__GzGetTypeList;	/* zbxhwbservice.h:670 */
class _ns1__GzGetTypeListResponse;	/* zbxhwbservice.h:673 */
class _ns1__GzGetDeviceStruct;	/* zbxhwbservice.h:676 */
class _ns1__GzGetDeviceStructResponse;	/* zbxhwbservice.h:679 */
class _ns1__SaveMapFile;	/* zbxhwbservice.h:682 */
class _ns1__SaveMapFileResponse;	/* zbxhwbservice.h:685 */
class _ns1__SelectYjzhStation;	/* zbxhwbservice.h:688 */
class _ns1__SelectYjzhStationResponse;	/* zbxhwbservice.h:691 */
class _ns1__SelectYjzhDevice;	/* zbxhwbservice.h:694 */
class _ns1__SelectYjzhDeviceResponse;	/* zbxhwbservice.h:697 */
class _ns1__GetYjzhZskAlarmTypes;	/* zbxhwbservice.h:700 */
class _ns1__GetYjzhZskAlarmTypesResponse;	/* zbxhwbservice.h:703 */
struct __ns1__GetYjzhZskGzFlow;	/* zbxhwbservice.h:5224 */
struct __ns1__GetYjzhZskOtherFlowChartList;	/* zbxhwbservice.h:5295 */
struct __ns1__GetYjzhZskDevFlowChartList;	/* zbxhwbservice.h:5366 */
struct __ns1__GetPropList;	/* zbxhwbservice.h:5437 */
struct __ns1__GetPropName;	/* zbxhwbservice.h:5508 */
struct __ns1__CheckLoginUser;	/* zbxhwbservice.h:5579 */
struct __ns1__GetRyUnit;	/* zbxhwbservice.h:5650 */
struct __ns1__GetDevCode;	/* zbxhwbservice.h:5721 */
struct __ns1__CheckDevCode;	/* zbxhwbservice.h:5792 */
struct __ns1__HelloWorld;	/* zbxhwbservice.h:5863 */
struct __ns1__GetDBString;	/* zbxhwbservice.h:5934 */
struct __ns1__QueryData;	/* zbxhwbservice.h:6005 */
struct __ns1__QueryDataCount;	/* zbxhwbservice.h:6076 */
struct __ns1__ExecuteSql;	/* zbxhwbservice.h:6147 */
struct __ns1__SaveData;	/* zbxhwbservice.h:6218 */
struct __ns1__SaveFileData;	/* zbxhwbservice.h:6289 */
struct __ns1__DownPic;	/* zbxhwbservice.h:6360 */
struct __ns1__DownAllPic;	/* zbxhwbservice.h:6431 */
struct __ns1__GetGxdataUpTime;	/* zbxhwbservice.h:6502 */
struct __ns1__signedUserInfo;	/* zbxhwbservice.h:6573 */
struct __ns1__GetOsDateTime;	/* zbxhwbservice.h:6644 */
struct __ns1__QueryPhotobw;	/* zbxhwbservice.h:6715 */
struct __ns1__TcdQuery;	/* zbxhwbservice.h:6786 */
struct __ns1__TcdSendup;	/* zbxhwbservice.h:6857 */
struct __ns1__UpLoadData;	/* zbxhwbservice.h:6928 */
struct __ns1__ExecuteSqlForColb;	/* zbxhwbservice.h:6999 */
struct __ns1__GetXHYDGLXTupdater;	/* zbxhwbservice.h:7070 */
struct __ns1__GetAPVupdater;	/* zbxhwbservice.h:7141 */
struct __ns1__UpLoadFile;	/* zbxhwbservice.h:7212 */
struct __ns1__upPic;	/* zbxhwbservice.h:7283 */
struct __ns1__DownloadPic;	/* zbxhwbservice.h:7354 */
struct __ns1__GetPicNames;	/* zbxhwbservice.h:7425 */
struct __ns1__GetDwInfo;	/* zbxhwbservice.h:7496 */
struct __ns1__GetDwPic;	/* zbxhwbservice.h:7567 */
struct __ns1__GetDeviceXj;	/* zbxhwbservice.h:7638 */
struct __ns1__GetJxData;	/* zbxhwbservice.h:7709 */
struct __ns1__GetStationJxData;	/* zbxhwbservice.h:7780 */
struct __ns1__GetJxPic;	/* zbxhwbservice.h:7851 */
struct __ns1__GetDevPic;	/* zbxhwbservice.h:7923 */
struct __ns1__GetBgImg;	/* zbxhwbservice.h:7994 */
struct __ns1__GetDcsData;	/* zbxhwbservice.h:8065 */
struct __ns1__DownLoadMobGPSData;	/* zbxhwbservice.h:8136 */
struct __ns1__MobDownLoadData;	/* zbxhwbservice.h:8207 */
struct __ns1__GetOpenFireInfo;	/* zbxhwbservice.h:8278 */
struct __ns1__GetDwList;	/* zbxhwbservice.h:8349 */
struct __ns1__GetUnitStation;	/* zbxhwbservice.h:8420 */
struct __ns1__GetUnitStruct;	/* zbxhwbservice.h:8491 */
struct __ns1__GetUnitPersonInfo;	/* zbxhwbservice.h:8562 */
struct __ns1__GetFileSize;	/* zbxhwbservice.h:8633 */
struct __ns1__GetXbList;	/* zbxhwbservice.h:8704 */
struct __ns1__GetXbStationList;	/* zbxhwbservice.h:8775 */
struct __ns1__GetMapDeviceType;	/* zbxhwbservice.h:8846 */
struct __ns1__GetGxDeviceData;	/* zbxhwbservice.h:8917 */
struct __ns1__GetDownFileInfo;	/* zbxhwbservice.h:8988 */
struct __ns1__DownMapfile;	/* zbxhwbservice.h:9059 */
struct __ns1__GetFileNew;	/* zbxhwbservice.h:9130 */
struct __ns1__AlterTable;	/* zbxhwbservice.h:9201 */
struct __ns1__DownCQData;	/* zbxhwbservice.h:9272 */
struct __ns1__GetTabList;	/* zbxhwbservice.h:9343 */
struct __ns1__IsOracleTable;	/* zbxhwbservice.h:9414 */
struct __ns1__GetFieldInfo;	/* zbxhwbservice.h:9485 */
struct __ns1__ExecuteSqlForFile;	/* zbxhwbservice.h:9556 */
struct __ns1__DownLoadFile;	/* zbxhwbservice.h:9627 */
struct __ns1__WriteFile;	/* zbxhwbservice.h:9698 */
struct __ns1__GetMapUpdateTime;	/* zbxhwbservice.h:9769 */
struct __ns1__GetMapTabName;	/* zbxhwbservice.h:9840 */
struct __ns1__GetMapDeviceData;	/* zbxhwbservice.h:9911 */
struct __ns1__GetMaList;	/* zbxhwbservice.h:9982 */
struct __ns1__GetMangeUnit;	/* zbxhwbservice.h:10053 */
struct __ns1__GetMangeXb;	/* zbxhwbservice.h:10124 */
struct __ns1__CheckMapVer;	/* zbxhwbservice.h:10195 */
struct __ns1__GetMap;	/* zbxhwbservice.h:10266 */
struct __ns1__GetTableData;	/* zbxhwbservice.h:10337 */
struct __ns1__ServerLevel;	/* zbxhwbservice.h:10408 */
struct __ns1__GetMapListTime;	/* zbxhwbservice.h:10479 */
struct __ns1__UpdateGzclMap;	/* zbxhwbservice.h:10550 */
struct __ns1__GetUnitMapVer;	/* zbxhwbservice.h:10621 */
struct __ns1__GetMangeMapUpdate;	/* zbxhwbservice.h:10692 */
struct __ns1__OpenProcess;	/* zbxhwbservice.h:10763 */
struct __ns1__GetEmfPngVer;	/* zbxhwbservice.h:10834 */
struct __ns1__GetEmfPngFile;	/* zbxhwbservice.h:10905 */
struct __ns1__OpenMapExe;	/* zbxhwbservice.h:10976 */
struct __ns1__ChaoQi;	/* zbxhwbservice.h:11047 */
struct __ns1__JiChaoQi;	/* zbxhwbservice.h:11118 */
struct __ns1__GetZhouQi;	/* zbxhwbservice.h:11189 */
struct __ns1__FlowChartEmf;	/* zbxhwbservice.h:11260 */
struct __ns1__SGCDrawEmf;	/* zbxhwbservice.h:11331 */
struct __ns1__GzGetTypeList;	/* zbxhwbservice.h:11402 */
struct __ns1__GzGetDeviceStruct;	/* zbxhwbservice.h:11473 */
struct __ns1__SaveMapFile;	/* zbxhwbservice.h:11544 */
struct __ns1__SelectYjzhStation;	/* zbxhwbservice.h:11615 */
struct __ns1__SelectYjzhDevice;	/* zbxhwbservice.h:11686 */
struct __ns1__GetYjzhZskAlarmTypes;	/* zbxhwbservice.h:11757 */
struct __ns1__GetYjzhZskGzFlow_;	/* zbxhwbservice.h:11828 */
struct __ns1__GetYjzhZskOtherFlowChartList_;	/* zbxhwbservice.h:11899 */
struct __ns1__GetYjzhZskDevFlowChartList_;	/* zbxhwbservice.h:11970 */
struct __ns1__GetPropList_;	/* zbxhwbservice.h:12041 */
struct __ns1__GetPropName_;	/* zbxhwbservice.h:12112 */
struct __ns1__CheckLoginUser_;	/* zbxhwbservice.h:12183 */
struct __ns1__GetRyUnit_;	/* zbxhwbservice.h:12254 */
struct __ns1__GetDevCode_;	/* zbxhwbservice.h:12325 */
struct __ns1__CheckDevCode_;	/* zbxhwbservice.h:12396 */
struct __ns1__HelloWorld_;	/* zbxhwbservice.h:12467 */
struct __ns1__GetDBString_;	/* zbxhwbservice.h:12538 */
struct __ns1__QueryData_;	/* zbxhwbservice.h:12609 */
struct __ns1__QueryDataCount_;	/* zbxhwbservice.h:12680 */
struct __ns1__ExecuteSql_;	/* zbxhwbservice.h:12751 */
struct __ns1__SaveData_;	/* zbxhwbservice.h:12822 */
struct __ns1__SaveFileData_;	/* zbxhwbservice.h:12893 */
struct __ns1__DownPic_;	/* zbxhwbservice.h:12964 */
struct __ns1__DownAllPic_;	/* zbxhwbservice.h:13035 */
struct __ns1__GetGxdataUpTime_;	/* zbxhwbservice.h:13106 */
struct __ns1__signedUserInfo_;	/* zbxhwbservice.h:13177 */
struct __ns1__GetOsDateTime_;	/* zbxhwbservice.h:13248 */
struct __ns1__QueryPhotobw_;	/* zbxhwbservice.h:13319 */
struct __ns1__TcdQuery_;	/* zbxhwbservice.h:13390 */
struct __ns1__TcdSendup_;	/* zbxhwbservice.h:13461 */
struct __ns1__UpLoadData_;	/* zbxhwbservice.h:13532 */
struct __ns1__ExecuteSqlForColb_;	/* zbxhwbservice.h:13603 */
struct __ns1__GetXHYDGLXTupdater_;	/* zbxhwbservice.h:13674 */
struct __ns1__GetAPVupdater_;	/* zbxhwbservice.h:13745 */
struct __ns1__UpLoadFile_;	/* zbxhwbservice.h:13816 */
struct __ns1__upPic_;	/* zbxhwbservice.h:13887 */
struct __ns1__DownloadPic_;	/* zbxhwbservice.h:13958 */
struct __ns1__GetPicNames_;	/* zbxhwbservice.h:14029 */
struct __ns1__GetDwInfo_;	/* zbxhwbservice.h:14100 */
struct __ns1__GetDwPic_;	/* zbxhwbservice.h:14171 */
struct __ns1__GetDeviceXj_;	/* zbxhwbservice.h:14242 */
struct __ns1__GetJxData_;	/* zbxhwbservice.h:14313 */
struct __ns1__GetStationJxData_;	/* zbxhwbservice.h:14384 */
struct __ns1__GetJxPic_;	/* zbxhwbservice.h:14455 */
struct __ns1__GetDevPic_;	/* zbxhwbservice.h:14527 */
struct __ns1__GetBgImg_;	/* zbxhwbservice.h:14598 */
struct __ns1__GetDcsData_;	/* zbxhwbservice.h:14669 */
struct __ns1__DownLoadMobGPSData_;	/* zbxhwbservice.h:14740 */
struct __ns1__MobDownLoadData_;	/* zbxhwbservice.h:14811 */
struct __ns1__GetOpenFireInfo_;	/* zbxhwbservice.h:14882 */
struct __ns1__GetDwList_;	/* zbxhwbservice.h:14953 */
struct __ns1__GetUnitStation_;	/* zbxhwbservice.h:15024 */
struct __ns1__GetUnitStruct_;	/* zbxhwbservice.h:15095 */
struct __ns1__GetUnitPersonInfo_;	/* zbxhwbservice.h:15166 */
struct __ns1__GetFileSize_;	/* zbxhwbservice.h:15237 */
struct __ns1__GetXbList_;	/* zbxhwbservice.h:15308 */
struct __ns1__GetXbStationList_;	/* zbxhwbservice.h:15379 */
struct __ns1__GetMapDeviceType_;	/* zbxhwbservice.h:15450 */
struct __ns1__GetGxDeviceData_;	/* zbxhwbservice.h:15521 */
struct __ns1__GetDownFileInfo_;	/* zbxhwbservice.h:15592 */
struct __ns1__DownMapfile_;	/* zbxhwbservice.h:15663 */
struct __ns1__GetFileNew_;	/* zbxhwbservice.h:15734 */
struct __ns1__AlterTable_;	/* zbxhwbservice.h:15805 */
struct __ns1__DownCQData_;	/* zbxhwbservice.h:15876 */
struct __ns1__GetTabList_;	/* zbxhwbservice.h:15947 */
struct __ns1__IsOracleTable_;	/* zbxhwbservice.h:16018 */
struct __ns1__GetFieldInfo_;	/* zbxhwbservice.h:16089 */
struct __ns1__ExecuteSqlForFile_;	/* zbxhwbservice.h:16160 */
struct __ns1__DownLoadFile_;	/* zbxhwbservice.h:16231 */
struct __ns1__WriteFile_;	/* zbxhwbservice.h:16302 */
struct __ns1__GetMapUpdateTime_;	/* zbxhwbservice.h:16373 */
struct __ns1__GetMapTabName_;	/* zbxhwbservice.h:16444 */
struct __ns1__GetMapDeviceData_;	/* zbxhwbservice.h:16515 */
struct __ns1__GetMaList_;	/* zbxhwbservice.h:16586 */
struct __ns1__GetMangeUnit_;	/* zbxhwbservice.h:16657 */
struct __ns1__GetMangeXb_;	/* zbxhwbservice.h:16728 */
struct __ns1__CheckMapVer_;	/* zbxhwbservice.h:16799 */
struct __ns1__GetMap_;	/* zbxhwbservice.h:16870 */
struct __ns1__GetTableData_;	/* zbxhwbservice.h:16941 */
struct __ns1__ServerLevel_;	/* zbxhwbservice.h:17012 */
struct __ns1__GetMapListTime_;	/* zbxhwbservice.h:17083 */
struct __ns1__UpdateGzclMap_;	/* zbxhwbservice.h:17154 */
struct __ns1__GetUnitMapVer_;	/* zbxhwbservice.h:17225 */
struct __ns1__GetMangeMapUpdate_;	/* zbxhwbservice.h:17296 */
struct __ns1__OpenProcess_;	/* zbxhwbservice.h:17367 */
struct __ns1__GetEmfPngVer_;	/* zbxhwbservice.h:17438 */
struct __ns1__GetEmfPngFile_;	/* zbxhwbservice.h:17509 */
struct __ns1__OpenMapExe_;	/* zbxhwbservice.h:17580 */
struct __ns1__ChaoQi_;	/* zbxhwbservice.h:17651 */
struct __ns1__JiChaoQi_;	/* zbxhwbservice.h:17722 */
struct __ns1__GetZhouQi_;	/* zbxhwbservice.h:17793 */
struct __ns1__FlowChartEmf_;	/* zbxhwbservice.h:17864 */
struct __ns1__SGCDrawEmf_;	/* zbxhwbservice.h:17935 */
struct __ns1__GzGetTypeList_;	/* zbxhwbservice.h:18006 */
struct __ns1__GzGetDeviceStruct_;	/* zbxhwbservice.h:18077 */
struct __ns1__SaveMapFile_;	/* zbxhwbservice.h:18148 */
struct __ns1__SelectYjzhStation_;	/* zbxhwbservice.h:18219 */
struct __ns1__SelectYjzhDevice_;	/* zbxhwbservice.h:18290 */
struct __ns1__GetYjzhZskAlarmTypes_;	/* zbxhwbservice.h:18361 */

/* zbxhwbservice.h:130 */
#ifndef SOAP_TYPE_xsd__base64Binary
#define SOAP_TYPE_xsd__base64Binary (7)
/* binary data attached as MTOM/MIME/DIME attachment or included as *`xsd:base64Binary`* base64: */
class SOAP_CMAC xsd__base64Binary {
      public:
        unsigned char *__ptr;
        int __size;
        /// Optional element 'id' of XSD type 'xsd:string'
        char *id;
        /// Optional element 'type' of XSD type 'xsd:string'
        char *type;
        /// Optional element 'options' of XSD type 'xsd:string'
        char *options;
      public:
        /// Return unique type id SOAP_TYPE_xsd__base64Binary
        virtual long soap_type(void) const { return SOAP_TYPE_xsd__base64Binary; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type xsd__base64Binary, default initialized and not managed by a soap context
        virtual xsd__base64Binary *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(xsd__base64Binary); }
      public:
        /// Constructor with initializations
        xsd__base64Binary() : __ptr(), __size(), id(), type(), options() { }
        virtual ~xsd__base64Binary() { }
        /// Friend allocator used by soap_new_xsd__base64Binary(struct soap*, int)
        friend SOAP_FMAC1 xsd__base64Binary * SOAP_FMAC2 soap_instantiate_xsd__base64Binary(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:145 */
#ifndef SOAP_TYPE_ns1__ArrayOfBase64Binary
#define SOAP_TYPE_ns1__ArrayOfBase64Binary (11)
/* complex XSD type 'ns1:ArrayOfBase64Binary': */
class SOAP_CMAC ns1__ArrayOfBase64Binary {
      public:
        /// Sequence of elements 'ns1:base64Binary' of XSD type 'xsd:base64Binary' stored in dynamic array base64Binary of length __sizebase64Binary
        int __sizebase64Binary;
        xsd__base64Binary *base64Binary;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_ns1__ArrayOfBase64Binary
        virtual long soap_type(void) const { return SOAP_TYPE_ns1__ArrayOfBase64Binary; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns1__ArrayOfBase64Binary, default initialized and not managed by a soap context
        virtual ns1__ArrayOfBase64Binary *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(ns1__ArrayOfBase64Binary); }
      public:
        /// Constructor with initializations
        ns1__ArrayOfBase64Binary() : __sizebase64Binary(), base64Binary(), soap() { }
        virtual ~ns1__ArrayOfBase64Binary() { }
        /// Friend allocator used by soap_new_ns1__ArrayOfBase64Binary(struct soap*, int)
        friend SOAP_FMAC1 ns1__ArrayOfBase64Binary * SOAP_FMAC2 soap_instantiate_ns1__ArrayOfBase64Binary(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:148 */
#ifndef SOAP_TYPE__ns1__GetYjzhZskGzFlow
#define SOAP_TYPE__ns1__GetYjzhZskGzFlow (12)
/* complex XSD type 'ns1:GetYjzhZskGzFlow': */
class SOAP_CMAC _ns1__GetYjzhZskGzFlow {
      public:
        /// Optional element 'ns1:id' of XSD type 'xsd:string'
        char *id;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__GetYjzhZskGzFlow
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__GetYjzhZskGzFlow; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__GetYjzhZskGzFlow, default initialized and not managed by a soap context
        virtual _ns1__GetYjzhZskGzFlow *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__GetYjzhZskGzFlow); }
      public:
        /// Constructor with initializations
        _ns1__GetYjzhZskGzFlow() : id(), soap() { }
        virtual ~_ns1__GetYjzhZskGzFlow() { }
        /// Friend allocator used by soap_new__ns1__GetYjzhZskGzFlow(struct soap*, int)
        friend SOAP_FMAC1 _ns1__GetYjzhZskGzFlow * SOAP_FMAC2 soap_instantiate__ns1__GetYjzhZskGzFlow(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:151 */
#ifndef SOAP_TYPE__ns1__GetYjzhZskGzFlowResponse
#define SOAP_TYPE__ns1__GetYjzhZskGzFlowResponse (13)
/* complex XSD type 'ns1:GetYjzhZskGzFlowResponse': */
class SOAP_CMAC _ns1__GetYjzhZskGzFlowResponse {
      public:
        /// Optional element 'ns1:GetYjzhZskGzFlowResult' of XSD type 'xsd:string'
        char *GetYjzhZskGzFlowResult;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__GetYjzhZskGzFlowResponse
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__GetYjzhZskGzFlowResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__GetYjzhZskGzFlowResponse, default initialized and not managed by a soap context
        virtual _ns1__GetYjzhZskGzFlowResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__GetYjzhZskGzFlowResponse); }
      public:
        /// Constructor with initializations
        _ns1__GetYjzhZskGzFlowResponse() : GetYjzhZskGzFlowResult(), soap() { }
        virtual ~_ns1__GetYjzhZskGzFlowResponse() { }
        /// Friend allocator used by soap_new__ns1__GetYjzhZskGzFlowResponse(struct soap*, int)
        friend SOAP_FMAC1 _ns1__GetYjzhZskGzFlowResponse * SOAP_FMAC2 soap_instantiate__ns1__GetYjzhZskGzFlowResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:154 */
#ifndef SOAP_TYPE__ns1__GetYjzhZskOtherFlowChartList
#define SOAP_TYPE__ns1__GetYjzhZskOtherFlowChartList (14)
/* complex XSD type 'ns1:GetYjzhZskOtherFlowChartList': */
class SOAP_CMAC _ns1__GetYjzhZskOtherFlowChartList {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__GetYjzhZskOtherFlowChartList
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__GetYjzhZskOtherFlowChartList; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__GetYjzhZskOtherFlowChartList, default initialized and not managed by a soap context
        virtual _ns1__GetYjzhZskOtherFlowChartList *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__GetYjzhZskOtherFlowChartList); }
      public:
        /// Constructor with initializations
        _ns1__GetYjzhZskOtherFlowChartList() : soap() { }
        virtual ~_ns1__GetYjzhZskOtherFlowChartList() { }
        /// Friend allocator used by soap_new__ns1__GetYjzhZskOtherFlowChartList(struct soap*, int)
        friend SOAP_FMAC1 _ns1__GetYjzhZskOtherFlowChartList * SOAP_FMAC2 soap_instantiate__ns1__GetYjzhZskOtherFlowChartList(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:157 */
#ifndef SOAP_TYPE__ns1__GetYjzhZskOtherFlowChartListResponse
#define SOAP_TYPE__ns1__GetYjzhZskOtherFlowChartListResponse (15)
/* complex XSD type 'ns1:GetYjzhZskOtherFlowChartListResponse': */
class SOAP_CMAC _ns1__GetYjzhZskOtherFlowChartListResponse {
      public:
        /// Optional element 'ns1:GetYjzhZskOtherFlowChartListResult' of XSD type 'xsd:string'
        char *GetYjzhZskOtherFlowChartListResult;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__GetYjzhZskOtherFlowChartListResponse
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__GetYjzhZskOtherFlowChartListResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__GetYjzhZskOtherFlowChartListResponse, default initialized and not managed by a soap context
        virtual _ns1__GetYjzhZskOtherFlowChartListResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__GetYjzhZskOtherFlowChartListResponse); }
      public:
        /// Constructor with initializations
        _ns1__GetYjzhZskOtherFlowChartListResponse() : GetYjzhZskOtherFlowChartListResult(), soap() { }
        virtual ~_ns1__GetYjzhZskOtherFlowChartListResponse() { }
        /// Friend allocator used by soap_new__ns1__GetYjzhZskOtherFlowChartListResponse(struct soap*, int)
        friend SOAP_FMAC1 _ns1__GetYjzhZskOtherFlowChartListResponse * SOAP_FMAC2 soap_instantiate__ns1__GetYjzhZskOtherFlowChartListResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:160 */
#ifndef SOAP_TYPE__ns1__GetYjzhZskDevFlowChartList
#define SOAP_TYPE__ns1__GetYjzhZskDevFlowChartList (16)
/* complex XSD type 'ns1:GetYjzhZskDevFlowChartList': */
class SOAP_CMAC _ns1__GetYjzhZskDevFlowChartList {
      public:
        /// Optional element 'ns1:xb' of XSD type 'xsd:string'
        char *xb;
        /// Optional element 'ns1:cz' of XSD type 'xsd:string'
        char *cz;
        /// Optional element 'ns1:devtypeid' of XSD type 'xsd:string'
        char *devtypeid;
        /// Optional element 'ns1:devname' of XSD type 'xsd:string'
        char *devname;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__GetYjzhZskDevFlowChartList
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__GetYjzhZskDevFlowChartList; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__GetYjzhZskDevFlowChartList, default initialized and not managed by a soap context
        virtual _ns1__GetYjzhZskDevFlowChartList *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__GetYjzhZskDevFlowChartList); }
      public:
        /// Constructor with initializations
        _ns1__GetYjzhZskDevFlowChartList() : xb(), cz(), devtypeid(), devname(), soap() { }
        virtual ~_ns1__GetYjzhZskDevFlowChartList() { }
        /// Friend allocator used by soap_new__ns1__GetYjzhZskDevFlowChartList(struct soap*, int)
        friend SOAP_FMAC1 _ns1__GetYjzhZskDevFlowChartList * SOAP_FMAC2 soap_instantiate__ns1__GetYjzhZskDevFlowChartList(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:163 */
#ifndef SOAP_TYPE__ns1__GetYjzhZskDevFlowChartListResponse
#define SOAP_TYPE__ns1__GetYjzhZskDevFlowChartListResponse (17)
/* complex XSD type 'ns1:GetYjzhZskDevFlowChartListResponse': */
class SOAP_CMAC _ns1__GetYjzhZskDevFlowChartListResponse {
      public:
        /// Optional element 'ns1:GetYjzhZskDevFlowChartListResult' of XSD type 'xsd:string'
        char *GetYjzhZskDevFlowChartListResult;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__GetYjzhZskDevFlowChartListResponse
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__GetYjzhZskDevFlowChartListResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__GetYjzhZskDevFlowChartListResponse, default initialized and not managed by a soap context
        virtual _ns1__GetYjzhZskDevFlowChartListResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__GetYjzhZskDevFlowChartListResponse); }
      public:
        /// Constructor with initializations
        _ns1__GetYjzhZskDevFlowChartListResponse() : GetYjzhZskDevFlowChartListResult(), soap() { }
        virtual ~_ns1__GetYjzhZskDevFlowChartListResponse() { }
        /// Friend allocator used by soap_new__ns1__GetYjzhZskDevFlowChartListResponse(struct soap*, int)
        friend SOAP_FMAC1 _ns1__GetYjzhZskDevFlowChartListResponse * SOAP_FMAC2 soap_instantiate__ns1__GetYjzhZskDevFlowChartListResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:166 */
#ifndef SOAP_TYPE__ns1__GetPropList
#define SOAP_TYPE__ns1__GetPropList (18)
/* complex XSD type 'ns1:GetPropList': */
class SOAP_CMAC _ns1__GetPropList {
      public:
        /// Optional element 'ns1:dwname' of XSD type 'xsd:string'
        char *dwname;
        /// Optional element 'ns1:xbname' of XSD type 'xsd:string'
        char *xbname;
        /// Optional element 'ns1:station' of XSD type 'xsd:string'
        char *station;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__GetPropList
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__GetPropList; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__GetPropList, default initialized and not managed by a soap context
        virtual _ns1__GetPropList *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__GetPropList); }
      public:
        /// Constructor with initializations
        _ns1__GetPropList() : dwname(), xbname(), station(), soap() { }
        virtual ~_ns1__GetPropList() { }
        /// Friend allocator used by soap_new__ns1__GetPropList(struct soap*, int)
        friend SOAP_FMAC1 _ns1__GetPropList * SOAP_FMAC2 soap_instantiate__ns1__GetPropList(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:169 */
#ifndef SOAP_TYPE__ns1__GetPropListResponse
#define SOAP_TYPE__ns1__GetPropListResponse (19)
/* complex XSD type 'ns1:GetPropListResponse': */
class SOAP_CMAC _ns1__GetPropListResponse {
      public:
        /// Optional element 'ns1:GetPropListResult' of XSD type 'xsd:string'
        char *GetPropListResult;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__GetPropListResponse
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__GetPropListResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__GetPropListResponse, default initialized and not managed by a soap context
        virtual _ns1__GetPropListResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__GetPropListResponse); }
      public:
        /// Constructor with initializations
        _ns1__GetPropListResponse() : GetPropListResult(), soap() { }
        virtual ~_ns1__GetPropListResponse() { }
        /// Friend allocator used by soap_new__ns1__GetPropListResponse(struct soap*, int)
        friend SOAP_FMAC1 _ns1__GetPropListResponse * SOAP_FMAC2 soap_instantiate__ns1__GetPropListResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:172 */
#ifndef SOAP_TYPE__ns1__GetPropName
#define SOAP_TYPE__ns1__GetPropName (20)
/* complex XSD type 'ns1:GetPropName': */
class SOAP_CMAC _ns1__GetPropName {
      public:
        /// Required element 'ns1:stationtypeid' of XSD type 'xsd:int'
        int stationtypeid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__GetPropName
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__GetPropName; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__GetPropName, default initialized and not managed by a soap context
        virtual _ns1__GetPropName *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__GetPropName); }
      public:
        /// Constructor with initializations
        _ns1__GetPropName() : stationtypeid(), soap() { }
        virtual ~_ns1__GetPropName() { }
        /// Friend allocator used by soap_new__ns1__GetPropName(struct soap*, int)
        friend SOAP_FMAC1 _ns1__GetPropName * SOAP_FMAC2 soap_instantiate__ns1__GetPropName(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:175 */
#ifndef SOAP_TYPE__ns1__GetPropNameResponse
#define SOAP_TYPE__ns1__GetPropNameResponse (21)
/* complex XSD type 'ns1:GetPropNameResponse': */
class SOAP_CMAC _ns1__GetPropNameResponse {
      public:
        /// Optional element 'ns1:GetPropNameResult' of XSD type 'xsd:string'
        char *GetPropNameResult;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__GetPropNameResponse
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__GetPropNameResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__GetPropNameResponse, default initialized and not managed by a soap context
        virtual _ns1__GetPropNameResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__GetPropNameResponse); }
      public:
        /// Constructor with initializations
        _ns1__GetPropNameResponse() : GetPropNameResult(), soap() { }
        virtual ~_ns1__GetPropNameResponse() { }
        /// Friend allocator used by soap_new__ns1__GetPropNameResponse(struct soap*, int)
        friend SOAP_FMAC1 _ns1__GetPropNameResponse * SOAP_FMAC2 soap_instantiate__ns1__GetPropNameResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:178 */
#ifndef SOAP_TYPE__ns1__CheckLoginUser
#define SOAP_TYPE__ns1__CheckLoginUser (22)
/* complex XSD type 'ns1:CheckLoginUser': */
class SOAP_CMAC _ns1__CheckLoginUser {
      public:
        /// Optional element 'ns1:username' of XSD type 'xsd:string'
        char *username;
        /// Optional element 'ns1:pass' of XSD type 'xsd:string'
        char *pass;
        /// Optional element 'ns1:dwname' of XSD type 'xsd:string'
        char *dwname;
        /// Optional element 'ns1:peid' of XSD type 'xsd:string'
        char *peid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__CheckLoginUser
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__CheckLoginUser; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__CheckLoginUser, default initialized and not managed by a soap context
        virtual _ns1__CheckLoginUser *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__CheckLoginUser); }
      public:
        /// Constructor with initializations
        _ns1__CheckLoginUser() : username(), pass(), dwname(), peid(), soap() { }
        virtual ~_ns1__CheckLoginUser() { }
        /// Friend allocator used by soap_new__ns1__CheckLoginUser(struct soap*, int)
        friend SOAP_FMAC1 _ns1__CheckLoginUser * SOAP_FMAC2 soap_instantiate__ns1__CheckLoginUser(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:181 */
#ifndef SOAP_TYPE__ns1__CheckLoginUserResponse
#define SOAP_TYPE__ns1__CheckLoginUserResponse (23)
/* complex XSD type 'ns1:CheckLoginUserResponse': */
class SOAP_CMAC _ns1__CheckLoginUserResponse {
      public:
        /// Required element 'ns1:CheckLoginUserResult' of XSD type 'xsd:int'
        int CheckLoginUserResult;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__CheckLoginUserResponse
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__CheckLoginUserResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__CheckLoginUserResponse, default initialized and not managed by a soap context
        virtual _ns1__CheckLoginUserResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__CheckLoginUserResponse); }
      public:
        /// Constructor with initializations
        _ns1__CheckLoginUserResponse() : CheckLoginUserResult(), soap() { }
        virtual ~_ns1__CheckLoginUserResponse() { }
        /// Friend allocator used by soap_new__ns1__CheckLoginUserResponse(struct soap*, int)
        friend SOAP_FMAC1 _ns1__CheckLoginUserResponse * SOAP_FMAC2 soap_instantiate__ns1__CheckLoginUserResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:184 */
#ifndef SOAP_TYPE__ns1__GetRyUnit
#define SOAP_TYPE__ns1__GetRyUnit (24)
/* complex XSD type 'ns1:GetRyUnit': */
class SOAP_CMAC _ns1__GetRyUnit {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__GetRyUnit
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__GetRyUnit; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__GetRyUnit, default initialized and not managed by a soap context
        virtual _ns1__GetRyUnit *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__GetRyUnit); }
      public:
        /// Constructor with initializations
        _ns1__GetRyUnit() : soap() { }
        virtual ~_ns1__GetRyUnit() { }
        /// Friend allocator used by soap_new__ns1__GetRyUnit(struct soap*, int)
        friend SOAP_FMAC1 _ns1__GetRyUnit * SOAP_FMAC2 soap_instantiate__ns1__GetRyUnit(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:187 */
#ifndef SOAP_TYPE__ns1__GetRyUnitResponse
#define SOAP_TYPE__ns1__GetRyUnitResponse (25)
/* complex XSD type 'ns1:GetRyUnitResponse': */
class SOAP_CMAC _ns1__GetRyUnitResponse {
      public:
        /// Optional element 'ns1:GetRyUnitResult' of XSD type 'xsd:string'
        char *GetRyUnitResult;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__GetRyUnitResponse
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__GetRyUnitResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__GetRyUnitResponse, default initialized and not managed by a soap context
        virtual _ns1__GetRyUnitResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__GetRyUnitResponse); }
      public:
        /// Constructor with initializations
        _ns1__GetRyUnitResponse() : GetRyUnitResult(), soap() { }
        virtual ~_ns1__GetRyUnitResponse() { }
        /// Friend allocator used by soap_new__ns1__GetRyUnitResponse(struct soap*, int)
        friend SOAP_FMAC1 _ns1__GetRyUnitResponse * SOAP_FMAC2 soap_instantiate__ns1__GetRyUnitResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:190 */
#ifndef SOAP_TYPE__ns1__GetDevCode
#define SOAP_TYPE__ns1__GetDevCode (26)
/* complex XSD type 'ns1:GetDevCode': */
class SOAP_CMAC _ns1__GetDevCode {
      public:
        /// Optional element 'ns1:xb' of XSD type 'xsd:string'
        char *xb;
        /// Optional element 'ns1:station' of XSD type 'xsd:string'
        char *station;
        /// Required element 'ns1:iscode' of XSD type 'xsd:int'
        int iscode;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__GetDevCode
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__GetDevCode; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__GetDevCode, default initialized and not managed by a soap context
        virtual _ns1__GetDevCode *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__GetDevCode); }
      public:
        /// Constructor with initializations
        _ns1__GetDevCode() : xb(), station(), iscode(), soap() { }
        virtual ~_ns1__GetDevCode() { }
        /// Friend allocator used by soap_new__ns1__GetDevCode(struct soap*, int)
        friend SOAP_FMAC1 _ns1__GetDevCode * SOAP_FMAC2 soap_instantiate__ns1__GetDevCode(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:193 */
#ifndef SOAP_TYPE__ns1__GetDevCodeResponse
#define SOAP_TYPE__ns1__GetDevCodeResponse (27)
/* complex XSD type 'ns1:GetDevCodeResponse': */
class SOAP_CMAC _ns1__GetDevCodeResponse {
      public:
        /// Optional element 'ns1:GetDevCodeResult' of XSD type 'xsd:string'
        char *GetDevCodeResult;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__GetDevCodeResponse
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__GetDevCodeResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__GetDevCodeResponse, default initialized and not managed by a soap context
        virtual _ns1__GetDevCodeResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__GetDevCodeResponse); }
      public:
        /// Constructor with initializations
        _ns1__GetDevCodeResponse() : GetDevCodeResult(), soap() { }
        virtual ~_ns1__GetDevCodeResponse() { }
        /// Friend allocator used by soap_new__ns1__GetDevCodeResponse(struct soap*, int)
        friend SOAP_FMAC1 _ns1__GetDevCodeResponse * SOAP_FMAC2 soap_instantiate__ns1__GetDevCodeResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:196 */
#ifndef SOAP_TYPE__ns1__CheckDevCode
#define SOAP_TYPE__ns1__CheckDevCode (28)
/* complex XSD type 'ns1:CheckDevCode': */
class SOAP_CMAC _ns1__CheckDevCode {
      public:
        /// Optional element 'ns1:xb' of XSD type 'xsd:string'
        char *xb;
        /// Optional element 'ns1:station' of XSD type 'xsd:string'
        char *station;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__CheckDevCode
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__CheckDevCode; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__CheckDevCode, default initialized and not managed by a soap context
        virtual _ns1__CheckDevCode *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__CheckDevCode); }
      public:
        /// Constructor with initializations
        _ns1__CheckDevCode() : xb(), station(), soap() { }
        virtual ~_ns1__CheckDevCode() { }
        /// Friend allocator used by soap_new__ns1__CheckDevCode(struct soap*, int)
        friend SOAP_FMAC1 _ns1__CheckDevCode * SOAP_FMAC2 soap_instantiate__ns1__CheckDevCode(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:199 */
#ifndef SOAP_TYPE__ns1__CheckDevCodeResponse
#define SOAP_TYPE__ns1__CheckDevCodeResponse (29)
/* complex XSD type 'ns1:CheckDevCodeResponse': */
class SOAP_CMAC _ns1__CheckDevCodeResponse {
      public:
        /// Required element 'ns1:CheckDevCodeResult' of XSD type 'xsd:int'
        int CheckDevCodeResult;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__CheckDevCodeResponse
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__CheckDevCodeResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__CheckDevCodeResponse, default initialized and not managed by a soap context
        virtual _ns1__CheckDevCodeResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__CheckDevCodeResponse); }
      public:
        /// Constructor with initializations
        _ns1__CheckDevCodeResponse() : CheckDevCodeResult(), soap() { }
        virtual ~_ns1__CheckDevCodeResponse() { }
        /// Friend allocator used by soap_new__ns1__CheckDevCodeResponse(struct soap*, int)
        friend SOAP_FMAC1 _ns1__CheckDevCodeResponse * SOAP_FMAC2 soap_instantiate__ns1__CheckDevCodeResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:202 */
#ifndef SOAP_TYPE__ns1__HelloWorld
#define SOAP_TYPE__ns1__HelloWorld (30)
/* complex XSD type 'ns1:HelloWorld': */
class SOAP_CMAC _ns1__HelloWorld {
      public:
        /// Optional element 'ns1:helloworld' of XSD type 'xsd:string'
        char *helloworld;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__HelloWorld
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__HelloWorld; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__HelloWorld, default initialized and not managed by a soap context
        virtual _ns1__HelloWorld *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__HelloWorld); }
      public:
        /// Constructor with initializations
        _ns1__HelloWorld() : helloworld(), soap() { }
        virtual ~_ns1__HelloWorld() { }
        /// Friend allocator used by soap_new__ns1__HelloWorld(struct soap*, int)
        friend SOAP_FMAC1 _ns1__HelloWorld * SOAP_FMAC2 soap_instantiate__ns1__HelloWorld(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:205 */
#ifndef SOAP_TYPE__ns1__HelloWorldResponse
#define SOAP_TYPE__ns1__HelloWorldResponse (31)
/* complex XSD type 'ns1:HelloWorldResponse': */
class SOAP_CMAC _ns1__HelloWorldResponse {
      public:
        /// Optional element 'ns1:HelloWorldResult' of XSD type 'xsd:string'
        char *HelloWorldResult;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__HelloWorldResponse
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__HelloWorldResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__HelloWorldResponse, default initialized and not managed by a soap context
        virtual _ns1__HelloWorldResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__HelloWorldResponse); }
      public:
        /// Constructor with initializations
        _ns1__HelloWorldResponse() : HelloWorldResult(), soap() { }
        virtual ~_ns1__HelloWorldResponse() { }
        /// Friend allocator used by soap_new__ns1__HelloWorldResponse(struct soap*, int)
        friend SOAP_FMAC1 _ns1__HelloWorldResponse * SOAP_FMAC2 soap_instantiate__ns1__HelloWorldResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:208 */
#ifndef SOAP_TYPE__ns1__GetDBString
#define SOAP_TYPE__ns1__GetDBString (32)
/* complex XSD type 'ns1:GetDBString': */
class SOAP_CMAC _ns1__GetDBString {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__GetDBString
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__GetDBString; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__GetDBString, default initialized and not managed by a soap context
        virtual _ns1__GetDBString *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__GetDBString); }
      public:
        /// Constructor with initializations
        _ns1__GetDBString() : soap() { }
        virtual ~_ns1__GetDBString() { }
        /// Friend allocator used by soap_new__ns1__GetDBString(struct soap*, int)
        friend SOAP_FMAC1 _ns1__GetDBString * SOAP_FMAC2 soap_instantiate__ns1__GetDBString(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:211 */
#ifndef SOAP_TYPE__ns1__GetDBStringResponse
#define SOAP_TYPE__ns1__GetDBStringResponse (33)
/* complex XSD type 'ns1:GetDBStringResponse': */
class SOAP_CMAC _ns1__GetDBStringResponse {
      public:
        /// Optional element 'ns1:GetDBStringResult' of XSD type 'xsd:string'
        char *GetDBStringResult;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__GetDBStringResponse
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__GetDBStringResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__GetDBStringResponse, default initialized and not managed by a soap context
        virtual _ns1__GetDBStringResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__GetDBStringResponse); }
      public:
        /// Constructor with initializations
        _ns1__GetDBStringResponse() : GetDBStringResult(), soap() { }
        virtual ~_ns1__GetDBStringResponse() { }
        /// Friend allocator used by soap_new__ns1__GetDBStringResponse(struct soap*, int)
        friend SOAP_FMAC1 _ns1__GetDBStringResponse * SOAP_FMAC2 soap_instantiate__ns1__GetDBStringResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:214 */
#ifndef SOAP_TYPE__ns1__QueryData
#define SOAP_TYPE__ns1__QueryData (34)
/* complex XSD type 'ns1:QueryData': */
class SOAP_CMAC _ns1__QueryData {
      public:
        /// Optional element 'ns1:sql' of XSD type 'xsd:string'
        char *sql;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__QueryData
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__QueryData; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__QueryData, default initialized and not managed by a soap context
        virtual _ns1__QueryData *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__QueryData); }
      public:
        /// Constructor with initializations
        _ns1__QueryData() : sql(), soap() { }
        virtual ~_ns1__QueryData() { }
        /// Friend allocator used by soap_new__ns1__QueryData(struct soap*, int)
        friend SOAP_FMAC1 _ns1__QueryData * SOAP_FMAC2 soap_instantiate__ns1__QueryData(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:217 */
#ifndef SOAP_TYPE__ns1__QueryDataResponse
#define SOAP_TYPE__ns1__QueryDataResponse (35)
/* complex XSD type 'ns1:QueryDataResponse': */
class SOAP_CMAC _ns1__QueryDataResponse {
      public:
        /// Optional element 'ns1:QueryDataResult' of XSD type 'xsd:string'
        char *QueryDataResult;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__QueryDataResponse
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__QueryDataResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__QueryDataResponse, default initialized and not managed by a soap context
        virtual _ns1__QueryDataResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__QueryDataResponse); }
      public:
        /// Constructor with initializations
        _ns1__QueryDataResponse() : QueryDataResult(), soap() { }
        virtual ~_ns1__QueryDataResponse() { }
        /// Friend allocator used by soap_new__ns1__QueryDataResponse(struct soap*, int)
        friend SOAP_FMAC1 _ns1__QueryDataResponse * SOAP_FMAC2 soap_instantiate__ns1__QueryDataResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:220 */
#ifndef SOAP_TYPE__ns1__QueryDataCount
#define SOAP_TYPE__ns1__QueryDataCount (36)
/* complex XSD type 'ns1:QueryDataCount': */
class SOAP_CMAC _ns1__QueryDataCount {
      public:
        /// Optional element 'ns1:sql' of XSD type 'xsd:string'
        char *sql;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__QueryDataCount
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__QueryDataCount; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__QueryDataCount, default initialized and not managed by a soap context
        virtual _ns1__QueryDataCount *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__QueryDataCount); }
      public:
        /// Constructor with initializations
        _ns1__QueryDataCount() : sql(), soap() { }
        virtual ~_ns1__QueryDataCount() { }
        /// Friend allocator used by soap_new__ns1__QueryDataCount(struct soap*, int)
        friend SOAP_FMAC1 _ns1__QueryDataCount * SOAP_FMAC2 soap_instantiate__ns1__QueryDataCount(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:223 */
#ifndef SOAP_TYPE__ns1__QueryDataCountResponse
#define SOAP_TYPE__ns1__QueryDataCountResponse (37)
/* complex XSD type 'ns1:QueryDataCountResponse': */
class SOAP_CMAC _ns1__QueryDataCountResponse {
      public:
        /// Required element 'ns1:QueryDataCountResult' of XSD type 'xsd:int'
        int QueryDataCountResult;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__QueryDataCountResponse
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__QueryDataCountResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__QueryDataCountResponse, default initialized and not managed by a soap context
        virtual _ns1__QueryDataCountResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__QueryDataCountResponse); }
      public:
        /// Constructor with initializations
        _ns1__QueryDataCountResponse() : QueryDataCountResult(), soap() { }
        virtual ~_ns1__QueryDataCountResponse() { }
        /// Friend allocator used by soap_new__ns1__QueryDataCountResponse(struct soap*, int)
        friend SOAP_FMAC1 _ns1__QueryDataCountResponse * SOAP_FMAC2 soap_instantiate__ns1__QueryDataCountResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:226 */
#ifndef SOAP_TYPE__ns1__ExecuteSql
#define SOAP_TYPE__ns1__ExecuteSql (38)
/* complex XSD type 'ns1:ExecuteSql': */
class SOAP_CMAC _ns1__ExecuteSql {
      public:
        /// Optional element 'ns1:sql' of XSD type 'xsd:string'
        char *sql;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__ExecuteSql
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__ExecuteSql; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__ExecuteSql, default initialized and not managed by a soap context
        virtual _ns1__ExecuteSql *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__ExecuteSql); }
      public:
        /// Constructor with initializations
        _ns1__ExecuteSql() : sql(), soap() { }
        virtual ~_ns1__ExecuteSql() { }
        /// Friend allocator used by soap_new__ns1__ExecuteSql(struct soap*, int)
        friend SOAP_FMAC1 _ns1__ExecuteSql * SOAP_FMAC2 soap_instantiate__ns1__ExecuteSql(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:229 */
#ifndef SOAP_TYPE__ns1__ExecuteSqlResponse
#define SOAP_TYPE__ns1__ExecuteSqlResponse (39)
/* complex XSD type 'ns1:ExecuteSqlResponse': */
class SOAP_CMAC _ns1__ExecuteSqlResponse {
      public:
        /// Required element 'ns1:ExecuteSqlResult' of XSD type 'xsd:int'
        int ExecuteSqlResult;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__ExecuteSqlResponse
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__ExecuteSqlResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__ExecuteSqlResponse, default initialized and not managed by a soap context
        virtual _ns1__ExecuteSqlResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__ExecuteSqlResponse); }
      public:
        /// Constructor with initializations
        _ns1__ExecuteSqlResponse() : ExecuteSqlResult(), soap() { }
        virtual ~_ns1__ExecuteSqlResponse() { }
        /// Friend allocator used by soap_new__ns1__ExecuteSqlResponse(struct soap*, int)
        friend SOAP_FMAC1 _ns1__ExecuteSqlResponse * SOAP_FMAC2 soap_instantiate__ns1__ExecuteSqlResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:232 */
#ifndef SOAP_TYPE__ns1__SaveData
#define SOAP_TYPE__ns1__SaveData (40)
/* complex XSD type 'ns1:SaveData': */
class SOAP_CMAC _ns1__SaveData {
      public:
        /// Optional element 'ns1:xml' of XSD type 'xsd:string'
        char *xml;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__SaveData
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__SaveData; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__SaveData, default initialized and not managed by a soap context
        virtual _ns1__SaveData *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__SaveData); }
      public:
        /// Constructor with initializations
        _ns1__SaveData() : xml(), soap() { }
        virtual ~_ns1__SaveData() { }
        /// Friend allocator used by soap_new__ns1__SaveData(struct soap*, int)
        friend SOAP_FMAC1 _ns1__SaveData * SOAP_FMAC2 soap_instantiate__ns1__SaveData(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:235 */
#ifndef SOAP_TYPE__ns1__SaveDataResponse
#define SOAP_TYPE__ns1__SaveDataResponse (41)
/* complex XSD type 'ns1:SaveDataResponse': */
class SOAP_CMAC _ns1__SaveDataResponse {
      public:
        /// Optional element 'ns1:SaveDataResult' of XSD type 'xsd:string'
        char *SaveDataResult;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__SaveDataResponse
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__SaveDataResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__SaveDataResponse, default initialized and not managed by a soap context
        virtual _ns1__SaveDataResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__SaveDataResponse); }
      public:
        /// Constructor with initializations
        _ns1__SaveDataResponse() : SaveDataResult(), soap() { }
        virtual ~_ns1__SaveDataResponse() { }
        /// Friend allocator used by soap_new__ns1__SaveDataResponse(struct soap*, int)
        friend SOAP_FMAC1 _ns1__SaveDataResponse * SOAP_FMAC2 soap_instantiate__ns1__SaveDataResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:238 */
#ifndef SOAP_TYPE__ns1__SaveFileData
#define SOAP_TYPE__ns1__SaveFileData (42)
/* complex XSD type 'ns1:SaveFileData': */
class SOAP_CMAC _ns1__SaveFileData {
      public:
        /// Optional element 'ns1:xml' of XSD type 'xsd:string'
        char *xml;
        /// Optional element 'ns1:filename' of XSD type 'xsd:string'
        char *filename;
        /// Optional element 'ns1:pics' of XSD type 'xsd:string'
        char *pics;
        /// Optional element 'ns1:dwname' of XSD type 'xsd:string'
        char *dwname;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__SaveFileData
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__SaveFileData; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__SaveFileData, default initialized and not managed by a soap context
        virtual _ns1__SaveFileData *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__SaveFileData); }
      public:
        /// Constructor with initializations
        _ns1__SaveFileData() : xml(), filename(), pics(), dwname(), soap() { }
        virtual ~_ns1__SaveFileData() { }
        /// Friend allocator used by soap_new__ns1__SaveFileData(struct soap*, int)
        friend SOAP_FMAC1 _ns1__SaveFileData * SOAP_FMAC2 soap_instantiate__ns1__SaveFileData(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:241 */
#ifndef SOAP_TYPE__ns1__SaveFileDataResponse
#define SOAP_TYPE__ns1__SaveFileDataResponse (43)
/* complex XSD type 'ns1:SaveFileDataResponse': */
class SOAP_CMAC _ns1__SaveFileDataResponse {
      public:
        /// Optional element 'ns1:SaveFileDataResult' of XSD type 'xsd:string'
        char *SaveFileDataResult;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__SaveFileDataResponse
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__SaveFileDataResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__SaveFileDataResponse, default initialized and not managed by a soap context
        virtual _ns1__SaveFileDataResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__SaveFileDataResponse); }
      public:
        /// Constructor with initializations
        _ns1__SaveFileDataResponse() : SaveFileDataResult(), soap() { }
        virtual ~_ns1__SaveFileDataResponse() { }
        /// Friend allocator used by soap_new__ns1__SaveFileDataResponse(struct soap*, int)
        friend SOAP_FMAC1 _ns1__SaveFileDataResponse * SOAP_FMAC2 soap_instantiate__ns1__SaveFileDataResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:244 */
#ifndef SOAP_TYPE__ns1__DownPic
#define SOAP_TYPE__ns1__DownPic (44)
/* complex XSD type 'ns1:DownPic': */
class SOAP_CMAC _ns1__DownPic {
      public:
        /// Optional element 'ns1:guid' of XSD type 'xsd:string'
        char *guid;
        /// Optional element 'ns1:dwname' of XSD type 'xsd:string'
        char *dwname;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__DownPic
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__DownPic; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__DownPic, default initialized and not managed by a soap context
        virtual _ns1__DownPic *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__DownPic); }
      public:
        /// Constructor with initializations
        _ns1__DownPic() : guid(), dwname(), soap() { }
        virtual ~_ns1__DownPic() { }
        /// Friend allocator used by soap_new__ns1__DownPic(struct soap*, int)
        friend SOAP_FMAC1 _ns1__DownPic * SOAP_FMAC2 soap_instantiate__ns1__DownPic(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:247 */
#ifndef SOAP_TYPE__ns1__DownPicResponse
#define SOAP_TYPE__ns1__DownPicResponse (45)
/* complex XSD type 'ns1:DownPicResponse': */
class SOAP_CMAC _ns1__DownPicResponse {
      public:
        /// Optional element 'ns1:DownPicResult' of XSD type 'xsd:string'
        char *DownPicResult;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__DownPicResponse
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__DownPicResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__DownPicResponse, default initialized and not managed by a soap context
        virtual _ns1__DownPicResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__DownPicResponse); }
      public:
        /// Constructor with initializations
        _ns1__DownPicResponse() : DownPicResult(), soap() { }
        virtual ~_ns1__DownPicResponse() { }
        /// Friend allocator used by soap_new__ns1__DownPicResponse(struct soap*, int)
        friend SOAP_FMAC1 _ns1__DownPicResponse * SOAP_FMAC2 soap_instantiate__ns1__DownPicResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:250 */
#ifndef SOAP_TYPE__ns1__DownAllPic
#define SOAP_TYPE__ns1__DownAllPic (46)
/* complex XSD type 'ns1:DownAllPic': */
class SOAP_CMAC _ns1__DownAllPic {
      public:
        /// Optional element 'ns1:dwname' of XSD type 'xsd:string'
        char *dwname;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__DownAllPic
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__DownAllPic; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__DownAllPic, default initialized and not managed by a soap context
        virtual _ns1__DownAllPic *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__DownAllPic); }
      public:
        /// Constructor with initializations
        _ns1__DownAllPic() : dwname(), soap() { }
        virtual ~_ns1__DownAllPic() { }
        /// Friend allocator used by soap_new__ns1__DownAllPic(struct soap*, int)
        friend SOAP_FMAC1 _ns1__DownAllPic * SOAP_FMAC2 soap_instantiate__ns1__DownAllPic(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:253 */
#ifndef SOAP_TYPE__ns1__DownAllPicResponse
#define SOAP_TYPE__ns1__DownAllPicResponse (47)
/* complex XSD type 'ns1:DownAllPicResponse': */
class SOAP_CMAC _ns1__DownAllPicResponse {
      public:
        /// Required element 'ns1:DownAllPicResult' of XSD type 'xsd:int'
        int DownAllPicResult;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__DownAllPicResponse
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__DownAllPicResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__DownAllPicResponse, default initialized and not managed by a soap context
        virtual _ns1__DownAllPicResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__DownAllPicResponse); }
      public:
        /// Constructor with initializations
        _ns1__DownAllPicResponse() : DownAllPicResult(), soap() { }
        virtual ~_ns1__DownAllPicResponse() { }
        /// Friend allocator used by soap_new__ns1__DownAllPicResponse(struct soap*, int)
        friend SOAP_FMAC1 _ns1__DownAllPicResponse * SOAP_FMAC2 soap_instantiate__ns1__DownAllPicResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:256 */
#ifndef SOAP_TYPE__ns1__GetGxdataUpTime
#define SOAP_TYPE__ns1__GetGxdataUpTime (48)
/* complex XSD type 'ns1:GetGxdataUpTime': */
class SOAP_CMAC _ns1__GetGxdataUpTime {
      public:
        /// Optional element 'ns1:unitname' of XSD type 'xsd:string'
        char *unitname;
        /// Optional element 'ns1:unitlevel' of XSD type 'xsd:string'
        char *unitlevel;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__GetGxdataUpTime
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__GetGxdataUpTime; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__GetGxdataUpTime, default initialized and not managed by a soap context
        virtual _ns1__GetGxdataUpTime *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__GetGxdataUpTime); }
      public:
        /// Constructor with initializations
        _ns1__GetGxdataUpTime() : unitname(), unitlevel(), soap() { }
        virtual ~_ns1__GetGxdataUpTime() { }
        /// Friend allocator used by soap_new__ns1__GetGxdataUpTime(struct soap*, int)
        friend SOAP_FMAC1 _ns1__GetGxdataUpTime * SOAP_FMAC2 soap_instantiate__ns1__GetGxdataUpTime(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:259 */
#ifndef SOAP_TYPE__ns1__GetGxdataUpTimeResponse
#define SOAP_TYPE__ns1__GetGxdataUpTimeResponse (49)
/* complex XSD type 'ns1:GetGxdataUpTimeResponse': */
class SOAP_CMAC _ns1__GetGxdataUpTimeResponse {
      public:
        /// Optional element 'ns1:GetGxdataUpTimeResult' of XSD type 'xsd:string'
        char *GetGxdataUpTimeResult;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__GetGxdataUpTimeResponse
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__GetGxdataUpTimeResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__GetGxdataUpTimeResponse, default initialized and not managed by a soap context
        virtual _ns1__GetGxdataUpTimeResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__GetGxdataUpTimeResponse); }
      public:
        /// Constructor with initializations
        _ns1__GetGxdataUpTimeResponse() : GetGxdataUpTimeResult(), soap() { }
        virtual ~_ns1__GetGxdataUpTimeResponse() { }
        /// Friend allocator used by soap_new__ns1__GetGxdataUpTimeResponse(struct soap*, int)
        friend SOAP_FMAC1 _ns1__GetGxdataUpTimeResponse * SOAP_FMAC2 soap_instantiate__ns1__GetGxdataUpTimeResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:262 */
#ifndef SOAP_TYPE__ns1__signedUserInfo
#define SOAP_TYPE__ns1__signedUserInfo (50)
/* complex XSD type 'ns1:signedUserInfo': */
class SOAP_CMAC _ns1__signedUserInfo {
      public:
        /// Optional element 'ns1:personid' of XSD type 'xsd:string'
        char *personid;
        /// Optional element 'ns1:personname' of XSD type 'xsd:string'
        char *personname;
        /// Optional element 'ns1:password' of XSD type 'xsd:string'
        char *password;
        /// Optional element 'ns1:phonenum' of XSD type 'xsd:string'
        char *phonenum;
        /// Optional element 'ns1:publishtime' of XSD type 'xsd:string'
        char *publishtime;
        /// Optional element 'ns1:publishver' of XSD type 'xsd:string'
        char *publishver;
        /// Optional element 'ns1:dwname' of XSD type 'xsd:string'
        char *dwname;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__signedUserInfo
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__signedUserInfo; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__signedUserInfo, default initialized and not managed by a soap context
        virtual _ns1__signedUserInfo *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__signedUserInfo); }
      public:
        /// Constructor with initializations
        _ns1__signedUserInfo() : personid(), personname(), password(), phonenum(), publishtime(), publishver(), dwname(), soap() { }
        virtual ~_ns1__signedUserInfo() { }
        /// Friend allocator used by soap_new__ns1__signedUserInfo(struct soap*, int)
        friend SOAP_FMAC1 _ns1__signedUserInfo * SOAP_FMAC2 soap_instantiate__ns1__signedUserInfo(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:265 */
#ifndef SOAP_TYPE__ns1__signedUserInfoResponse
#define SOAP_TYPE__ns1__signedUserInfoResponse (51)
/* complex XSD type 'ns1:signedUserInfoResponse': */
class SOAP_CMAC _ns1__signedUserInfoResponse {
      public:
        /// Required element 'ns1:signedUserInfoResult' of XSD type 'xsd:int'
        int signedUserInfoResult;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__signedUserInfoResponse
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__signedUserInfoResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__signedUserInfoResponse, default initialized and not managed by a soap context
        virtual _ns1__signedUserInfoResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__signedUserInfoResponse); }
      public:
        /// Constructor with initializations
        _ns1__signedUserInfoResponse() : signedUserInfoResult(), soap() { }
        virtual ~_ns1__signedUserInfoResponse() { }
        /// Friend allocator used by soap_new__ns1__signedUserInfoResponse(struct soap*, int)
        friend SOAP_FMAC1 _ns1__signedUserInfoResponse * SOAP_FMAC2 soap_instantiate__ns1__signedUserInfoResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:268 */
#ifndef SOAP_TYPE__ns1__GetOsDateTime
#define SOAP_TYPE__ns1__GetOsDateTime (52)
/* complex XSD type 'ns1:GetOsDateTime': */
class SOAP_CMAC _ns1__GetOsDateTime {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__GetOsDateTime
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__GetOsDateTime; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__GetOsDateTime, default initialized and not managed by a soap context
        virtual _ns1__GetOsDateTime *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__GetOsDateTime); }
      public:
        /// Constructor with initializations
        _ns1__GetOsDateTime() : soap() { }
        virtual ~_ns1__GetOsDateTime() { }
        /// Friend allocator used by soap_new__ns1__GetOsDateTime(struct soap*, int)
        friend SOAP_FMAC1 _ns1__GetOsDateTime * SOAP_FMAC2 soap_instantiate__ns1__GetOsDateTime(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:271 */
#ifndef SOAP_TYPE__ns1__GetOsDateTimeResponse
#define SOAP_TYPE__ns1__GetOsDateTimeResponse (53)
/* complex XSD type 'ns1:GetOsDateTimeResponse': */
class SOAP_CMAC _ns1__GetOsDateTimeResponse {
      public:
        /// Optional element 'ns1:GetOsDateTimeResult' of XSD type 'xsd:string'
        char *GetOsDateTimeResult;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__GetOsDateTimeResponse
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__GetOsDateTimeResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__GetOsDateTimeResponse, default initialized and not managed by a soap context
        virtual _ns1__GetOsDateTimeResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__GetOsDateTimeResponse); }
      public:
        /// Constructor with initializations
        _ns1__GetOsDateTimeResponse() : GetOsDateTimeResult(), soap() { }
        virtual ~_ns1__GetOsDateTimeResponse() { }
        /// Friend allocator used by soap_new__ns1__GetOsDateTimeResponse(struct soap*, int)
        friend SOAP_FMAC1 _ns1__GetOsDateTimeResponse * SOAP_FMAC2 soap_instantiate__ns1__GetOsDateTimeResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:274 */
#ifndef SOAP_TYPE__ns1__QueryPhotobw
#define SOAP_TYPE__ns1__QueryPhotobw (54)
/* complex XSD type 'ns1:QueryPhotobw': */
class SOAP_CMAC _ns1__QueryPhotobw {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__QueryPhotobw
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__QueryPhotobw; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__QueryPhotobw, default initialized and not managed by a soap context
        virtual _ns1__QueryPhotobw *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__QueryPhotobw); }
      public:
        /// Constructor with initializations
        _ns1__QueryPhotobw() : soap() { }
        virtual ~_ns1__QueryPhotobw() { }
        /// Friend allocator used by soap_new__ns1__QueryPhotobw(struct soap*, int)
        friend SOAP_FMAC1 _ns1__QueryPhotobw * SOAP_FMAC2 soap_instantiate__ns1__QueryPhotobw(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:277 */
#ifndef SOAP_TYPE__ns1__QueryPhotobwResponse
#define SOAP_TYPE__ns1__QueryPhotobwResponse (55)
/* complex XSD type 'ns1:QueryPhotobwResponse': */
class SOAP_CMAC _ns1__QueryPhotobwResponse {
      public:
        /// Optional element 'ns1:QueryPhotobwResult' of XSD type 'xsd:string'
        char *QueryPhotobwResult;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__QueryPhotobwResponse
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__QueryPhotobwResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__QueryPhotobwResponse, default initialized and not managed by a soap context
        virtual _ns1__QueryPhotobwResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__QueryPhotobwResponse); }
      public:
        /// Constructor with initializations
        _ns1__QueryPhotobwResponse() : QueryPhotobwResult(), soap() { }
        virtual ~_ns1__QueryPhotobwResponse() { }
        /// Friend allocator used by soap_new__ns1__QueryPhotobwResponse(struct soap*, int)
        friend SOAP_FMAC1 _ns1__QueryPhotobwResponse * SOAP_FMAC2 soap_instantiate__ns1__QueryPhotobwResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:280 */
#ifndef SOAP_TYPE__ns1__TcdQuery
#define SOAP_TYPE__ns1__TcdQuery (56)
/* complex XSD type 'ns1:TcdQuery': */
class SOAP_CMAC _ns1__TcdQuery {
      public:
        /// Optional element 'ns1:xb' of XSD type 'xsd:string'
        char *xb;
        /// Optional element 'ns1:station' of XSD type 'xsd:string'
        char *station;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__TcdQuery
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__TcdQuery; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__TcdQuery, default initialized and not managed by a soap context
        virtual _ns1__TcdQuery *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__TcdQuery); }
      public:
        /// Constructor with initializations
        _ns1__TcdQuery() : xb(), station(), soap() { }
        virtual ~_ns1__TcdQuery() { }
        /// Friend allocator used by soap_new__ns1__TcdQuery(struct soap*, int)
        friend SOAP_FMAC1 _ns1__TcdQuery * SOAP_FMAC2 soap_instantiate__ns1__TcdQuery(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:283 */
#ifndef SOAP_TYPE__ns1__TcdQueryResponse
#define SOAP_TYPE__ns1__TcdQueryResponse (57)
/* complex XSD type 'ns1:TcdQueryResponse': */
class SOAP_CMAC _ns1__TcdQueryResponse {
      public:
        /// Optional element 'ns1:TcdQueryResult' of XSD type 'xsd:string'
        char *TcdQueryResult;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__TcdQueryResponse
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__TcdQueryResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__TcdQueryResponse, default initialized and not managed by a soap context
        virtual _ns1__TcdQueryResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__TcdQueryResponse); }
      public:
        /// Constructor with initializations
        _ns1__TcdQueryResponse() : TcdQueryResult(), soap() { }
        virtual ~_ns1__TcdQueryResponse() { }
        /// Friend allocator used by soap_new__ns1__TcdQueryResponse(struct soap*, int)
        friend SOAP_FMAC1 _ns1__TcdQueryResponse * SOAP_FMAC2 soap_instantiate__ns1__TcdQueryResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:286 */
#ifndef SOAP_TYPE__ns1__TcdSendup
#define SOAP_TYPE__ns1__TcdSendup (58)
/* complex XSD type 'ns1:TcdSendup': */
class SOAP_CMAC _ns1__TcdSendup {
      public:
        /// Optional element 'ns1:guid' of XSD type 'xsd:string'
        char *guid;
        /// Optional element 'ns1:tctype' of XSD type 'xsd:string'
        char *tctype;
        /// Optional element 'ns1:date' of XSD type 'xsd:string'
        char *date;
        /// Optional element 'ns1:personnum' of XSD type 'xsd:string'
        char *personnum;
        /// Optional element 'ns1:time1' of XSD type 'xsd:string'
        char *time1;
        /// Optional element 'ns1:time2' of XSD type 'xsd:string'
        char *time2;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__TcdSendup
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__TcdSendup; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__TcdSendup, default initialized and not managed by a soap context
        virtual _ns1__TcdSendup *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__TcdSendup); }
      public:
        /// Constructor with initializations
        _ns1__TcdSendup() : guid(), tctype(), date(), personnum(), time1(), time2(), soap() { }
        virtual ~_ns1__TcdSendup() { }
        /// Friend allocator used by soap_new__ns1__TcdSendup(struct soap*, int)
        friend SOAP_FMAC1 _ns1__TcdSendup * SOAP_FMAC2 soap_instantiate__ns1__TcdSendup(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:289 */
#ifndef SOAP_TYPE__ns1__TcdSendupResponse
#define SOAP_TYPE__ns1__TcdSendupResponse (59)
/* complex XSD type 'ns1:TcdSendupResponse': */
class SOAP_CMAC _ns1__TcdSendupResponse {
      public:
        /// Required element 'ns1:TcdSendupResult' of XSD type 'xsd:int'
        int TcdSendupResult;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__TcdSendupResponse
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__TcdSendupResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__TcdSendupResponse, default initialized and not managed by a soap context
        virtual _ns1__TcdSendupResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__TcdSendupResponse); }
      public:
        /// Constructor with initializations
        _ns1__TcdSendupResponse() : TcdSendupResult(), soap() { }
        virtual ~_ns1__TcdSendupResponse() { }
        /// Friend allocator used by soap_new__ns1__TcdSendupResponse(struct soap*, int)
        friend SOAP_FMAC1 _ns1__TcdSendupResponse * SOAP_FMAC2 soap_instantiate__ns1__TcdSendupResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:292 */
#ifndef SOAP_TYPE__ns1__UpLoadData
#define SOAP_TYPE__ns1__UpLoadData (60)
/* complex XSD type 'ns1:UpLoadData': */
class SOAP_CMAC _ns1__UpLoadData {
      public:
        /// Optional element 'ns1:sql' of XSD type 'xsd:string'
        char *sql;
        /// Optional element 'ns1:file' of XSD type 'xsd:string'
        char *file;
        /// Optional element 'ns1:filename' of XSD type 'xsd:string'
        char *filename;
        /// Optional element 'ns1:dwname' of XSD type 'xsd:string'
        char *dwname;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__UpLoadData
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__UpLoadData; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__UpLoadData, default initialized and not managed by a soap context
        virtual _ns1__UpLoadData *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__UpLoadData); }
      public:
        /// Constructor with initializations
        _ns1__UpLoadData() : sql(), file(), filename(), dwname(), soap() { }
        virtual ~_ns1__UpLoadData() { }
        /// Friend allocator used by soap_new__ns1__UpLoadData(struct soap*, int)
        friend SOAP_FMAC1 _ns1__UpLoadData * SOAP_FMAC2 soap_instantiate__ns1__UpLoadData(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:295 */
#ifndef SOAP_TYPE__ns1__UpLoadDataResponse
#define SOAP_TYPE__ns1__UpLoadDataResponse (61)
/* complex XSD type 'ns1:UpLoadDataResponse': */
class SOAP_CMAC _ns1__UpLoadDataResponse {
      public:
        /// Optional element 'ns1:UpLoadDataResult' of XSD type 'xsd:string'
        char *UpLoadDataResult;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__UpLoadDataResponse
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__UpLoadDataResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__UpLoadDataResponse, default initialized and not managed by a soap context
        virtual _ns1__UpLoadDataResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__UpLoadDataResponse); }
      public:
        /// Constructor with initializations
        _ns1__UpLoadDataResponse() : UpLoadDataResult(), soap() { }
        virtual ~_ns1__UpLoadDataResponse() { }
        /// Friend allocator used by soap_new__ns1__UpLoadDataResponse(struct soap*, int)
        friend SOAP_FMAC1 _ns1__UpLoadDataResponse * SOAP_FMAC2 soap_instantiate__ns1__UpLoadDataResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:298 */
#ifndef SOAP_TYPE__ns1__ExecuteSqlForColb
#define SOAP_TYPE__ns1__ExecuteSqlForColb (62)
/* complex XSD type 'ns1:ExecuteSqlForColb': */
class SOAP_CMAC _ns1__ExecuteSqlForColb {
      public:
        /// Optional element 'ns1:sql' of XSD type 'xsd:string'
        char *sql;
        /// Optional element 'ns1:sqlParName' of XSD type 'xsd:string'
        char *sqlParName;
        /// Optional element 'ns1:fieldValue' of XSD type 'xsd:string'
        char *fieldValue;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__ExecuteSqlForColb
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__ExecuteSqlForColb; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__ExecuteSqlForColb, default initialized and not managed by a soap context
        virtual _ns1__ExecuteSqlForColb *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__ExecuteSqlForColb); }
      public:
        /// Constructor with initializations
        _ns1__ExecuteSqlForColb() : sql(), sqlParName(), fieldValue(), soap() { }
        virtual ~_ns1__ExecuteSqlForColb() { }
        /// Friend allocator used by soap_new__ns1__ExecuteSqlForColb(struct soap*, int)
        friend SOAP_FMAC1 _ns1__ExecuteSqlForColb * SOAP_FMAC2 soap_instantiate__ns1__ExecuteSqlForColb(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:301 */
#ifndef SOAP_TYPE__ns1__ExecuteSqlForColbResponse
#define SOAP_TYPE__ns1__ExecuteSqlForColbResponse (63)
/* complex XSD type 'ns1:ExecuteSqlForColbResponse': */
class SOAP_CMAC _ns1__ExecuteSqlForColbResponse {
      public:
        /// Required element 'ns1:ExecuteSqlForColbResult' of XSD type 'xsd:int'
        int ExecuteSqlForColbResult;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__ExecuteSqlForColbResponse
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__ExecuteSqlForColbResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__ExecuteSqlForColbResponse, default initialized and not managed by a soap context
        virtual _ns1__ExecuteSqlForColbResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__ExecuteSqlForColbResponse); }
      public:
        /// Constructor with initializations
        _ns1__ExecuteSqlForColbResponse() : ExecuteSqlForColbResult(), soap() { }
        virtual ~_ns1__ExecuteSqlForColbResponse() { }
        /// Friend allocator used by soap_new__ns1__ExecuteSqlForColbResponse(struct soap*, int)
        friend SOAP_FMAC1 _ns1__ExecuteSqlForColbResponse * SOAP_FMAC2 soap_instantiate__ns1__ExecuteSqlForColbResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:304 */
#ifndef SOAP_TYPE__ns1__GetXHYDGLXTupdater
#define SOAP_TYPE__ns1__GetXHYDGLXTupdater (64)
/* complex XSD type 'ns1:GetXHYDGLXTupdater': */
class SOAP_CMAC _ns1__GetXHYDGLXTupdater {
      public:
        /// Optional element 'ns1:localver' of XSD type 'xsd:string'
        char *localver;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__GetXHYDGLXTupdater
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__GetXHYDGLXTupdater; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__GetXHYDGLXTupdater, default initialized and not managed by a soap context
        virtual _ns1__GetXHYDGLXTupdater *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__GetXHYDGLXTupdater); }
      public:
        /// Constructor with initializations
        _ns1__GetXHYDGLXTupdater() : localver(), soap() { }
        virtual ~_ns1__GetXHYDGLXTupdater() { }
        /// Friend allocator used by soap_new__ns1__GetXHYDGLXTupdater(struct soap*, int)
        friend SOAP_FMAC1 _ns1__GetXHYDGLXTupdater * SOAP_FMAC2 soap_instantiate__ns1__GetXHYDGLXTupdater(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:307 */
#ifndef SOAP_TYPE__ns1__GetXHYDGLXTupdaterResponse
#define SOAP_TYPE__ns1__GetXHYDGLXTupdaterResponse (65)
/* complex XSD type 'ns1:GetXHYDGLXTupdaterResponse': */
class SOAP_CMAC _ns1__GetXHYDGLXTupdaterResponse {
      public:
        /// Optional element 'ns1:GetXHYDGLXTupdaterResult' of XSD type 'xsd:string'
        char *GetXHYDGLXTupdaterResult;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__GetXHYDGLXTupdaterResponse
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__GetXHYDGLXTupdaterResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__GetXHYDGLXTupdaterResponse, default initialized and not managed by a soap context
        virtual _ns1__GetXHYDGLXTupdaterResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__GetXHYDGLXTupdaterResponse); }
      public:
        /// Constructor with initializations
        _ns1__GetXHYDGLXTupdaterResponse() : GetXHYDGLXTupdaterResult(), soap() { }
        virtual ~_ns1__GetXHYDGLXTupdaterResponse() { }
        /// Friend allocator used by soap_new__ns1__GetXHYDGLXTupdaterResponse(struct soap*, int)
        friend SOAP_FMAC1 _ns1__GetXHYDGLXTupdaterResponse * SOAP_FMAC2 soap_instantiate__ns1__GetXHYDGLXTupdaterResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:310 */
#ifndef SOAP_TYPE__ns1__GetAPVupdater
#define SOAP_TYPE__ns1__GetAPVupdater (66)
/* complex XSD type 'ns1:GetAPVupdater': */
class SOAP_CMAC _ns1__GetAPVupdater {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__GetAPVupdater
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__GetAPVupdater; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__GetAPVupdater, default initialized and not managed by a soap context
        virtual _ns1__GetAPVupdater *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__GetAPVupdater); }
      public:
        /// Constructor with initializations
        _ns1__GetAPVupdater() : soap() { }
        virtual ~_ns1__GetAPVupdater() { }
        /// Friend allocator used by soap_new__ns1__GetAPVupdater(struct soap*, int)
        friend SOAP_FMAC1 _ns1__GetAPVupdater * SOAP_FMAC2 soap_instantiate__ns1__GetAPVupdater(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:313 */
#ifndef SOAP_TYPE__ns1__GetAPVupdaterResponse
#define SOAP_TYPE__ns1__GetAPVupdaterResponse (67)
/* complex XSD type 'ns1:GetAPVupdaterResponse': */
class SOAP_CMAC _ns1__GetAPVupdaterResponse {
      public:
        /// Optional element 'ns1:GetAPVupdaterResult' of XSD type 'xsd:string'
        char *GetAPVupdaterResult;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__GetAPVupdaterResponse
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__GetAPVupdaterResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__GetAPVupdaterResponse, default initialized and not managed by a soap context
        virtual _ns1__GetAPVupdaterResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__GetAPVupdaterResponse); }
      public:
        /// Constructor with initializations
        _ns1__GetAPVupdaterResponse() : GetAPVupdaterResult(), soap() { }
        virtual ~_ns1__GetAPVupdaterResponse() { }
        /// Friend allocator used by soap_new__ns1__GetAPVupdaterResponse(struct soap*, int)
        friend SOAP_FMAC1 _ns1__GetAPVupdaterResponse * SOAP_FMAC2 soap_instantiate__ns1__GetAPVupdaterResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:316 */
#ifndef SOAP_TYPE__ns1__UpLoadFile
#define SOAP_TYPE__ns1__UpLoadFile (68)
/* complex XSD type 'ns1:UpLoadFile': */
class SOAP_CMAC _ns1__UpLoadFile {
      public:
        /// Optional element 'ns1:filename' of XSD type 'xsd:string'
        char *filename;
        /// Required element 'ns1:index' of XSD type 'xsd:int'
        int index;
        /// Optional element 'ns1:fstr' of XSD type 'xsd:string'
        char *fstr;
        /// Optional element 'ns1:dwname' of XSD type 'xsd:string'
        char *dwname;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__UpLoadFile
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__UpLoadFile; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__UpLoadFile, default initialized and not managed by a soap context
        virtual _ns1__UpLoadFile *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__UpLoadFile); }
      public:
        /// Constructor with initializations
        _ns1__UpLoadFile() : filename(), index(), fstr(), dwname(), soap() { }
        virtual ~_ns1__UpLoadFile() { }
        /// Friend allocator used by soap_new__ns1__UpLoadFile(struct soap*, int)
        friend SOAP_FMAC1 _ns1__UpLoadFile * SOAP_FMAC2 soap_instantiate__ns1__UpLoadFile(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:319 */
#ifndef SOAP_TYPE__ns1__UpLoadFileResponse
#define SOAP_TYPE__ns1__UpLoadFileResponse (69)
/* complex XSD type 'ns1:UpLoadFileResponse': */
class SOAP_CMAC _ns1__UpLoadFileResponse {
      public:
        /// Required element 'ns1:UpLoadFileResult' of XSD type 'xsd:int'
        int UpLoadFileResult;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__UpLoadFileResponse
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__UpLoadFileResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__UpLoadFileResponse, default initialized and not managed by a soap context
        virtual _ns1__UpLoadFileResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__UpLoadFileResponse); }
      public:
        /// Constructor with initializations
        _ns1__UpLoadFileResponse() : UpLoadFileResult(), soap() { }
        virtual ~_ns1__UpLoadFileResponse() { }
        /// Friend allocator used by soap_new__ns1__UpLoadFileResponse(struct soap*, int)
        friend SOAP_FMAC1 _ns1__UpLoadFileResponse * SOAP_FMAC2 soap_instantiate__ns1__UpLoadFileResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:322 */
#ifndef SOAP_TYPE__ns1__upPic
#define SOAP_TYPE__ns1__upPic (70)
/* complex XSD type 'ns1:upPic': */
class SOAP_CMAC _ns1__upPic {
      public:
        /// Optional element 'ns1:personid' of XSD type 'xsd:string'
        char *personid;
        /// Optional element 'ns1:personname' of XSD type 'xsd:string'
        char *personname;
        /// Optional element 'ns1:xb' of XSD type 'xsd:string'
        char *xb;
        /// Optional element 'ns1:station' of XSD type 'xsd:string'
        char *station;
        /// Optional element 'ns1:picname' of XSD type 'xsd:string'
        char *picname;
        /// Optional element 'ns1:picstr' of XSD type 'xsd:string'
        char *picstr;
        /// Optional element 'ns1:dwname' of XSD type 'xsd:string'
        char *dwname;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__upPic
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__upPic; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__upPic, default initialized and not managed by a soap context
        virtual _ns1__upPic *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__upPic); }
      public:
        /// Constructor with initializations
        _ns1__upPic() : personid(), personname(), xb(), station(), picname(), picstr(), dwname(), soap() { }
        virtual ~_ns1__upPic() { }
        /// Friend allocator used by soap_new__ns1__upPic(struct soap*, int)
        friend SOAP_FMAC1 _ns1__upPic * SOAP_FMAC2 soap_instantiate__ns1__upPic(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:325 */
#ifndef SOAP_TYPE__ns1__upPicResponse
#define SOAP_TYPE__ns1__upPicResponse (71)
/* complex XSD type 'ns1:upPicResponse': */
class SOAP_CMAC _ns1__upPicResponse {
      public:
        /// Required element 'ns1:upPicResult' of XSD type 'xsd:int'
        int upPicResult;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__upPicResponse
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__upPicResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__upPicResponse, default initialized and not managed by a soap context
        virtual _ns1__upPicResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__upPicResponse); }
      public:
        /// Constructor with initializations
        _ns1__upPicResponse() : upPicResult(), soap() { }
        virtual ~_ns1__upPicResponse() { }
        /// Friend allocator used by soap_new__ns1__upPicResponse(struct soap*, int)
        friend SOAP_FMAC1 _ns1__upPicResponse * SOAP_FMAC2 soap_instantiate__ns1__upPicResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:328 */
#ifndef SOAP_TYPE__ns1__DownloadPic
#define SOAP_TYPE__ns1__DownloadPic (72)
/* complex XSD type 'ns1:DownloadPic': */
class SOAP_CMAC _ns1__DownloadPic {
      public:
        /// Optional element 'ns1:picname' of XSD type 'xsd:string'
        char *picname;
        /// Optional element 'ns1:dwname' of XSD type 'xsd:string'
        char *dwname;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__DownloadPic
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__DownloadPic; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__DownloadPic, default initialized and not managed by a soap context
        virtual _ns1__DownloadPic *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__DownloadPic); }
      public:
        /// Constructor with initializations
        _ns1__DownloadPic() : picname(), dwname(), soap() { }
        virtual ~_ns1__DownloadPic() { }
        /// Friend allocator used by soap_new__ns1__DownloadPic(struct soap*, int)
        friend SOAP_FMAC1 _ns1__DownloadPic * SOAP_FMAC2 soap_instantiate__ns1__DownloadPic(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:331 */
#ifndef SOAP_TYPE__ns1__DownloadPicResponse
#define SOAP_TYPE__ns1__DownloadPicResponse (73)
/* complex XSD type 'ns1:DownloadPicResponse': */
class SOAP_CMAC _ns1__DownloadPicResponse {
      public:
        /// Optional element 'ns1:DownloadPicResult' of XSD type 'xsd:string'
        char *DownloadPicResult;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__DownloadPicResponse
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__DownloadPicResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__DownloadPicResponse, default initialized and not managed by a soap context
        virtual _ns1__DownloadPicResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__DownloadPicResponse); }
      public:
        /// Constructor with initializations
        _ns1__DownloadPicResponse() : DownloadPicResult(), soap() { }
        virtual ~_ns1__DownloadPicResponse() { }
        /// Friend allocator used by soap_new__ns1__DownloadPicResponse(struct soap*, int)
        friend SOAP_FMAC1 _ns1__DownloadPicResponse * SOAP_FMAC2 soap_instantiate__ns1__DownloadPicResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:334 */
#ifndef SOAP_TYPE__ns1__GetPicNames
#define SOAP_TYPE__ns1__GetPicNames (74)
/* complex XSD type 'ns1:GetPicNames': */
class SOAP_CMAC _ns1__GetPicNames {
      public:
        /// Optional element 'ns1:xb' of XSD type 'xsd:string'
        char *xb;
        /// Optional element 'ns1:station' of XSD type 'xsd:string'
        char *station;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__GetPicNames
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__GetPicNames; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__GetPicNames, default initialized and not managed by a soap context
        virtual _ns1__GetPicNames *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__GetPicNames); }
      public:
        /// Constructor with initializations
        _ns1__GetPicNames() : xb(), station(), soap() { }
        virtual ~_ns1__GetPicNames() { }
        /// Friend allocator used by soap_new__ns1__GetPicNames(struct soap*, int)
        friend SOAP_FMAC1 _ns1__GetPicNames * SOAP_FMAC2 soap_instantiate__ns1__GetPicNames(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:337 */
#ifndef SOAP_TYPE__ns1__GetPicNamesResponse
#define SOAP_TYPE__ns1__GetPicNamesResponse (75)
/* complex XSD type 'ns1:GetPicNamesResponse': */
class SOAP_CMAC _ns1__GetPicNamesResponse {
      public:
        /// Optional element 'ns1:GetPicNamesResult' of XSD type 'xsd:string'
        char *GetPicNamesResult;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__GetPicNamesResponse
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__GetPicNamesResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__GetPicNamesResponse, default initialized and not managed by a soap context
        virtual _ns1__GetPicNamesResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__GetPicNamesResponse); }
      public:
        /// Constructor with initializations
        _ns1__GetPicNamesResponse() : GetPicNamesResult(), soap() { }
        virtual ~_ns1__GetPicNamesResponse() { }
        /// Friend allocator used by soap_new__ns1__GetPicNamesResponse(struct soap*, int)
        friend SOAP_FMAC1 _ns1__GetPicNamesResponse * SOAP_FMAC2 soap_instantiate__ns1__GetPicNamesResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:340 */
#ifndef SOAP_TYPE__ns1__GetDwInfo
#define SOAP_TYPE__ns1__GetDwInfo (76)
/* complex XSD type 'ns1:GetDwInfo': */
class SOAP_CMAC _ns1__GetDwInfo {
      public:
        /// Optional element 'ns1:dwname' of XSD type 'xsd:string'
        char *dwname;
        /// Optional element 'ns1:unitname' of XSD type 'xsd:string'
        char *unitname;
        /// Required element 'ns1:unitid' of XSD type 'xsd:int'
        int unitid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__GetDwInfo
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__GetDwInfo; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__GetDwInfo, default initialized and not managed by a soap context
        virtual _ns1__GetDwInfo *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__GetDwInfo); }
      public:
        /// Constructor with initializations
        _ns1__GetDwInfo() : dwname(), unitname(), unitid(), soap() { }
        virtual ~_ns1__GetDwInfo() { }
        /// Friend allocator used by soap_new__ns1__GetDwInfo(struct soap*, int)
        friend SOAP_FMAC1 _ns1__GetDwInfo * SOAP_FMAC2 soap_instantiate__ns1__GetDwInfo(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:343 */
#ifndef SOAP_TYPE__ns1__GetDwInfoResponse
#define SOAP_TYPE__ns1__GetDwInfoResponse (77)
/* complex XSD type 'ns1:GetDwInfoResponse': */
class SOAP_CMAC _ns1__GetDwInfoResponse {
      public:
        /// Optional element 'ns1:GetDwInfoResult' of XSD type 'xsd:string'
        char *GetDwInfoResult;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__GetDwInfoResponse
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__GetDwInfoResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__GetDwInfoResponse, default initialized and not managed by a soap context
        virtual _ns1__GetDwInfoResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__GetDwInfoResponse); }
      public:
        /// Constructor with initializations
        _ns1__GetDwInfoResponse() : GetDwInfoResult(), soap() { }
        virtual ~_ns1__GetDwInfoResponse() { }
        /// Friend allocator used by soap_new__ns1__GetDwInfoResponse(struct soap*, int)
        friend SOAP_FMAC1 _ns1__GetDwInfoResponse * SOAP_FMAC2 soap_instantiate__ns1__GetDwInfoResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:346 */
#ifndef SOAP_TYPE__ns1__GetDwPic
#define SOAP_TYPE__ns1__GetDwPic (78)
/* complex XSD type 'ns1:GetDwPic': */
class SOAP_CMAC _ns1__GetDwPic {
      public:
        /// Optional element 'ns1:dwname' of XSD type 'xsd:string'
        char *dwname;
        /// Optional element 'ns1:unitname' of XSD type 'xsd:string'
        char *unitname;
        /// Required element 'ns1:unitid' of XSD type 'xsd:int'
        int unitid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__GetDwPic
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__GetDwPic; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__GetDwPic, default initialized and not managed by a soap context
        virtual _ns1__GetDwPic *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__GetDwPic); }
      public:
        /// Constructor with initializations
        _ns1__GetDwPic() : dwname(), unitname(), unitid(), soap() { }
        virtual ~_ns1__GetDwPic() { }
        /// Friend allocator used by soap_new__ns1__GetDwPic(struct soap*, int)
        friend SOAP_FMAC1 _ns1__GetDwPic * SOAP_FMAC2 soap_instantiate__ns1__GetDwPic(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:349 */
#ifndef SOAP_TYPE__ns1__GetDwPicResponse
#define SOAP_TYPE__ns1__GetDwPicResponse (79)
/* complex XSD type 'ns1:GetDwPicResponse': */
class SOAP_CMAC _ns1__GetDwPicResponse {
      public:
        /// Optional element 'ns1:GetDwPicResult' of XSD type 'xsd:string'
        char *GetDwPicResult;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__GetDwPicResponse
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__GetDwPicResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__GetDwPicResponse, default initialized and not managed by a soap context
        virtual _ns1__GetDwPicResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__GetDwPicResponse); }
      public:
        /// Constructor with initializations
        _ns1__GetDwPicResponse() : GetDwPicResult(), soap() { }
        virtual ~_ns1__GetDwPicResponse() { }
        /// Friend allocator used by soap_new__ns1__GetDwPicResponse(struct soap*, int)
        friend SOAP_FMAC1 _ns1__GetDwPicResponse * SOAP_FMAC2 soap_instantiate__ns1__GetDwPicResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:352 */
#ifndef SOAP_TYPE__ns1__GetDeviceXj
#define SOAP_TYPE__ns1__GetDeviceXj (80)
/* complex XSD type 'ns1:GetDeviceXj': */
class SOAP_CMAC _ns1__GetDeviceXj {
      public:
        /// Optional element 'ns1:station' of XSD type 'xsd:string'
        char *station;
        /// Optional element 'ns1:xb' of XSD type 'xsd:string'
        char *xb;
        /// Optional element 'ns1:dwname' of XSD type 'xsd:string'
        char *dwname;
        /// Optional element 'ns1:device' of XSD type 'xsd:string'
        char *device;
        /// Optional element 'ns1:filename' of XSD type 'xsd:string'
        char *filename;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__GetDeviceXj
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__GetDeviceXj; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__GetDeviceXj, default initialized and not managed by a soap context
        virtual _ns1__GetDeviceXj *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__GetDeviceXj); }
      public:
        /// Constructor with initializations
        _ns1__GetDeviceXj() : station(), xb(), dwname(), device(), filename(), soap() { }
        virtual ~_ns1__GetDeviceXj() { }
        /// Friend allocator used by soap_new__ns1__GetDeviceXj(struct soap*, int)
        friend SOAP_FMAC1 _ns1__GetDeviceXj * SOAP_FMAC2 soap_instantiate__ns1__GetDeviceXj(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:355 */
#ifndef SOAP_TYPE__ns1__GetDeviceXjResponse
#define SOAP_TYPE__ns1__GetDeviceXjResponse (81)
/* complex XSD type 'ns1:GetDeviceXjResponse': */
class SOAP_CMAC _ns1__GetDeviceXjResponse {
      public:
        /// Optional element 'ns1:GetDeviceXjResult' of XSD type 'xsd:string'
        char *GetDeviceXjResult;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__GetDeviceXjResponse
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__GetDeviceXjResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__GetDeviceXjResponse, default initialized and not managed by a soap context
        virtual _ns1__GetDeviceXjResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__GetDeviceXjResponse); }
      public:
        /// Constructor with initializations
        _ns1__GetDeviceXjResponse() : GetDeviceXjResult(), soap() { }
        virtual ~_ns1__GetDeviceXjResponse() { }
        /// Friend allocator used by soap_new__ns1__GetDeviceXjResponse(struct soap*, int)
        friend SOAP_FMAC1 _ns1__GetDeviceXjResponse * SOAP_FMAC2 soap_instantiate__ns1__GetDeviceXjResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:358 */
#ifndef SOAP_TYPE__ns1__GetJxData
#define SOAP_TYPE__ns1__GetJxData (82)
/* complex XSD type 'ns1:GetJxData': */
class SOAP_CMAC _ns1__GetJxData {
      public:
        /// Optional element 'ns1:dwname' of XSD type 'xsd:string'
        char *dwname;
        /// Optional element 'ns1:xb' of XSD type 'xsd:string'
        char *xb;
        /// Optional element 'ns1:station' of XSD type 'xsd:string'
        char *station;
        /// Optional element 'ns1:iconname' of XSD type 'xsd:string'
        char *iconname;
        /// Optional element 'ns1:type' of XSD type 'xsd:string'
        char *type;
        /// Optional element 'ns1:filename' of XSD type 'xsd:string'
        char *filename;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__GetJxData
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__GetJxData; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__GetJxData, default initialized and not managed by a soap context
        virtual _ns1__GetJxData *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__GetJxData); }
      public:
        /// Constructor with initializations
        _ns1__GetJxData() : dwname(), xb(), station(), iconname(), type(), filename(), soap() { }
        virtual ~_ns1__GetJxData() { }
        /// Friend allocator used by soap_new__ns1__GetJxData(struct soap*, int)
        friend SOAP_FMAC1 _ns1__GetJxData * SOAP_FMAC2 soap_instantiate__ns1__GetJxData(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:361 */
#ifndef SOAP_TYPE__ns1__GetJxDataResponse
#define SOAP_TYPE__ns1__GetJxDataResponse (83)
/* complex XSD type 'ns1:GetJxDataResponse': */
class SOAP_CMAC _ns1__GetJxDataResponse {
      public:
        /// Optional element 'ns1:GetJxDataResult' of XSD type 'xsd:string'
        char *GetJxDataResult;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__GetJxDataResponse
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__GetJxDataResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__GetJxDataResponse, default initialized and not managed by a soap context
        virtual _ns1__GetJxDataResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__GetJxDataResponse); }
      public:
        /// Constructor with initializations
        _ns1__GetJxDataResponse() : GetJxDataResult(), soap() { }
        virtual ~_ns1__GetJxDataResponse() { }
        /// Friend allocator used by soap_new__ns1__GetJxDataResponse(struct soap*, int)
        friend SOAP_FMAC1 _ns1__GetJxDataResponse * SOAP_FMAC2 soap_instantiate__ns1__GetJxDataResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:364 */
#ifndef SOAP_TYPE__ns1__GetStationJxData
#define SOAP_TYPE__ns1__GetStationJxData (84)
/* complex XSD type 'ns1:GetStationJxData': */
class SOAP_CMAC _ns1__GetStationJxData {
      public:
        /// Optional element 'ns1:dwname' of XSD type 'xsd:string'
        char *dwname;
        /// Optional element 'ns1:xb' of XSD type 'xsd:string'
        char *xb;
        /// Optional element 'ns1:station' of XSD type 'xsd:string'
        char *station;
        /// Required element 'ns1:sflag' of XSD type 'xsd:boolean'
        bool sflag;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__GetStationJxData
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__GetStationJxData; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__GetStationJxData, default initialized and not managed by a soap context
        virtual _ns1__GetStationJxData *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__GetStationJxData); }
      public:
        /// Constructor with initializations
        _ns1__GetStationJxData() : dwname(), xb(), station(), sflag(), soap() { }
        virtual ~_ns1__GetStationJxData() { }
        /// Friend allocator used by soap_new__ns1__GetStationJxData(struct soap*, int)
        friend SOAP_FMAC1 _ns1__GetStationJxData * SOAP_FMAC2 soap_instantiate__ns1__GetStationJxData(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:367 */
#ifndef SOAP_TYPE__ns1__GetStationJxDataResponse
#define SOAP_TYPE__ns1__GetStationJxDataResponse (85)
/* complex XSD type 'ns1:GetStationJxDataResponse': */
class SOAP_CMAC _ns1__GetStationJxDataResponse {
      public:
        /// Optional element 'ns1:GetStationJxDataResult' of XSD type 'xsd:string'
        char *GetStationJxDataResult;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__GetStationJxDataResponse
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__GetStationJxDataResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__GetStationJxDataResponse, default initialized and not managed by a soap context
        virtual _ns1__GetStationJxDataResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__GetStationJxDataResponse); }
      public:
        /// Constructor with initializations
        _ns1__GetStationJxDataResponse() : GetStationJxDataResult(), soap() { }
        virtual ~_ns1__GetStationJxDataResponse() { }
        /// Friend allocator used by soap_new__ns1__GetStationJxDataResponse(struct soap*, int)
        friend SOAP_FMAC1 _ns1__GetStationJxDataResponse * SOAP_FMAC2 soap_instantiate__ns1__GetStationJxDataResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:370 */
#ifndef SOAP_TYPE__ns1__GetJxPic
#define SOAP_TYPE__ns1__GetJxPic (86)
/* complex XSD type 'ns1:GetJxPic': */
class SOAP_CMAC _ns1__GetJxPic {
      public:
        /// Optional element 'ns1:dwname' of XSD type 'xsd:string'
        char *dwname;
        /// Optional element 'ns1:upguid' of XSD type 'xsd:string'
        char *upguid;
        /// Optional element 'ns1:type' of XSD type 'xsd:string'
        char *type;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__GetJxPic
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__GetJxPic; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__GetJxPic, default initialized and not managed by a soap context
        virtual _ns1__GetJxPic *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__GetJxPic); }
      public:
        /// Constructor with initializations
        _ns1__GetJxPic() : dwname(), upguid(), type(), soap() { }
        virtual ~_ns1__GetJxPic() { }
        /// Friend allocator used by soap_new__ns1__GetJxPic(struct soap*, int)
        friend SOAP_FMAC1 _ns1__GetJxPic * SOAP_FMAC2 soap_instantiate__ns1__GetJxPic(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:373 */
#ifndef SOAP_TYPE__ns1__GetJxPicResponse
#define SOAP_TYPE__ns1__GetJxPicResponse (87)
/* complex XSD type 'ns1:GetJxPicResponse': */
class SOAP_CMAC _ns1__GetJxPicResponse {
      public:
        /// Optional element 'ns1:GetJxPicResult' of XSD type 'xsd:string'
        char *GetJxPicResult;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__GetJxPicResponse
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__GetJxPicResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__GetJxPicResponse, default initialized and not managed by a soap context
        virtual _ns1__GetJxPicResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__GetJxPicResponse); }
      public:
        /// Constructor with initializations
        _ns1__GetJxPicResponse() : GetJxPicResult(), soap() { }
        virtual ~_ns1__GetJxPicResponse() { }
        /// Friend allocator used by soap_new__ns1__GetJxPicResponse(struct soap*, int)
        friend SOAP_FMAC1 _ns1__GetJxPicResponse * SOAP_FMAC2 soap_instantiate__ns1__GetJxPicResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:376 */
#ifndef SOAP_TYPE__ns1__GetDevPic
#define SOAP_TYPE__ns1__GetDevPic (88)
/* complex XSD type 'ns1:GetDevPic': */
class SOAP_CMAC _ns1__GetDevPic {
      public:
        /// Optional element 'ns1:dwname' of XSD type 'xsd:string'
        char *dwname;
        /// Optional element 'ns1:xb' of XSD type 'xsd:string'
        char *xb;
        /// Optional element 'ns1:station' of XSD type 'xsd:string'
        char *station;
        /// Optional element 'ns1:iconname' of XSD type 'xsd:string'
        char *iconname;
        /// Optional element 'ns1:type' of XSD type 'xsd:string'
        char *type;
        /// Required element 'ns1:sflag' of XSD type 'xsd:boolean'
        bool sflag;
        /// Optional element 'ns1:s1' of XSD type 'xsd:string'
        char *s1;
        /// Optional element 'ns1:s2' of XSD type 'xsd:string'
        char *s2;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__GetDevPic
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__GetDevPic; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__GetDevPic, default initialized and not managed by a soap context
        virtual _ns1__GetDevPic *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__GetDevPic); }
      public:
        /// Constructor with initializations
        _ns1__GetDevPic() : dwname(), xb(), station(), iconname(), type(), sflag(), s1(), s2(), soap() { }
        virtual ~_ns1__GetDevPic() { }
        /// Friend allocator used by soap_new__ns1__GetDevPic(struct soap*, int)
        friend SOAP_FMAC1 _ns1__GetDevPic * SOAP_FMAC2 soap_instantiate__ns1__GetDevPic(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:379 */
#ifndef SOAP_TYPE__ns1__GetDevPicResponse
#define SOAP_TYPE__ns1__GetDevPicResponse (89)
/* complex XSD type 'ns1:GetDevPicResponse': */
class SOAP_CMAC _ns1__GetDevPicResponse {
      public:
        /// Optional element 'ns1:GetDevPicResult' of XSD type 'xsd:string'
        char *GetDevPicResult;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__GetDevPicResponse
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__GetDevPicResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__GetDevPicResponse, default initialized and not managed by a soap context
        virtual _ns1__GetDevPicResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__GetDevPicResponse); }
      public:
        /// Constructor with initializations
        _ns1__GetDevPicResponse() : GetDevPicResult(), soap() { }
        virtual ~_ns1__GetDevPicResponse() { }
        /// Friend allocator used by soap_new__ns1__GetDevPicResponse(struct soap*, int)
        friend SOAP_FMAC1 _ns1__GetDevPicResponse * SOAP_FMAC2 soap_instantiate__ns1__GetDevPicResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:382 */
#ifndef SOAP_TYPE__ns1__GetBgImg
#define SOAP_TYPE__ns1__GetBgImg (90)
/* complex XSD type 'ns1:GetBgImg': */
class SOAP_CMAC _ns1__GetBgImg {
      public:
        /// Optional element 'ns1:pguid' of XSD type 'xsd:string'
        char *pguid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__GetBgImg
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__GetBgImg; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__GetBgImg, default initialized and not managed by a soap context
        virtual _ns1__GetBgImg *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__GetBgImg); }
      public:
        /// Constructor with initializations
        _ns1__GetBgImg() : pguid(), soap() { }
        virtual ~_ns1__GetBgImg() { }
        /// Friend allocator used by soap_new__ns1__GetBgImg(struct soap*, int)
        friend SOAP_FMAC1 _ns1__GetBgImg * SOAP_FMAC2 soap_instantiate__ns1__GetBgImg(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:385 */
#ifndef SOAP_TYPE__ns1__GetBgImgResponse
#define SOAP_TYPE__ns1__GetBgImgResponse (91)
/* complex XSD type 'ns1:GetBgImgResponse': */
class SOAP_CMAC _ns1__GetBgImgResponse {
      public:
        /// Optional element 'ns1:GetBgImgResult' of XSD type 'xsd:string'
        char *GetBgImgResult;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__GetBgImgResponse
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__GetBgImgResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__GetBgImgResponse, default initialized and not managed by a soap context
        virtual _ns1__GetBgImgResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__GetBgImgResponse); }
      public:
        /// Constructor with initializations
        _ns1__GetBgImgResponse() : GetBgImgResult(), soap() { }
        virtual ~_ns1__GetBgImgResponse() { }
        /// Friend allocator used by soap_new__ns1__GetBgImgResponse(struct soap*, int)
        friend SOAP_FMAC1 _ns1__GetBgImgResponse * SOAP_FMAC2 soap_instantiate__ns1__GetBgImgResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:388 */
#ifndef SOAP_TYPE__ns1__GetDcsData
#define SOAP_TYPE__ns1__GetDcsData (92)
/* complex XSD type 'ns1:GetDcsData': */
class SOAP_CMAC _ns1__GetDcsData {
      public:
        /// Optional element 'ns1:xb' of XSD type 'xsd:string'
        char *xb;
        /// Optional element 'ns1:station' of XSD type 'xsd:string'
        char *station;
        /// Optional element 'ns1:iconname' of XSD type 'xsd:string'
        char *iconname;
        /// Optional element 'ns1:filename' of XSD type 'xsd:string'
        char *filename;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__GetDcsData
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__GetDcsData; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__GetDcsData, default initialized and not managed by a soap context
        virtual _ns1__GetDcsData *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__GetDcsData); }
      public:
        /// Constructor with initializations
        _ns1__GetDcsData() : xb(), station(), iconname(), filename(), soap() { }
        virtual ~_ns1__GetDcsData() { }
        /// Friend allocator used by soap_new__ns1__GetDcsData(struct soap*, int)
        friend SOAP_FMAC1 _ns1__GetDcsData * SOAP_FMAC2 soap_instantiate__ns1__GetDcsData(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:391 */
#ifndef SOAP_TYPE__ns1__GetDcsDataResponse
#define SOAP_TYPE__ns1__GetDcsDataResponse (93)
/* complex XSD type 'ns1:GetDcsDataResponse': */
class SOAP_CMAC _ns1__GetDcsDataResponse {
      public:
        /// Optional element 'ns1:GetDcsDataResult' of XSD type 'xsd:string'
        char *GetDcsDataResult;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__GetDcsDataResponse
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__GetDcsDataResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__GetDcsDataResponse, default initialized and not managed by a soap context
        virtual _ns1__GetDcsDataResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__GetDcsDataResponse); }
      public:
        /// Constructor with initializations
        _ns1__GetDcsDataResponse() : GetDcsDataResult(), soap() { }
        virtual ~_ns1__GetDcsDataResponse() { }
        /// Friend allocator used by soap_new__ns1__GetDcsDataResponse(struct soap*, int)
        friend SOAP_FMAC1 _ns1__GetDcsDataResponse * SOAP_FMAC2 soap_instantiate__ns1__GetDcsDataResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:394 */
#ifndef SOAP_TYPE__ns1__DownLoadMobGPSData
#define SOAP_TYPE__ns1__DownLoadMobGPSData (94)
/* complex XSD type 'ns1:DownLoadMobGPSData': */
class SOAP_CMAC _ns1__DownLoadMobGPSData {
      public:
        /// Optional element 'ns1:dwname' of XSD type 'xsd:string'
        char *dwname;
        /// Optional element 'ns1:tabname' of XSD type 'xsd:string'
        char *tabname;
        /// Optional element 'ns1:sytime' of XSD type 'xsd:string'
        char *sytime;
        /// Required element 'ns1:level' of XSD type 'xsd:int'
        int level;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__DownLoadMobGPSData
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__DownLoadMobGPSData; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__DownLoadMobGPSData, default initialized and not managed by a soap context
        virtual _ns1__DownLoadMobGPSData *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__DownLoadMobGPSData); }
      public:
        /// Constructor with initializations
        _ns1__DownLoadMobGPSData() : dwname(), tabname(), sytime(), level(), soap() { }
        virtual ~_ns1__DownLoadMobGPSData() { }
        /// Friend allocator used by soap_new__ns1__DownLoadMobGPSData(struct soap*, int)
        friend SOAP_FMAC1 _ns1__DownLoadMobGPSData * SOAP_FMAC2 soap_instantiate__ns1__DownLoadMobGPSData(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:397 */
#ifndef SOAP_TYPE__ns1__DownLoadMobGPSDataResponse
#define SOAP_TYPE__ns1__DownLoadMobGPSDataResponse (95)
/* complex XSD type 'ns1:DownLoadMobGPSDataResponse': */
class SOAP_CMAC _ns1__DownLoadMobGPSDataResponse {
      public:
        /// Optional element 'ns1:DownLoadMobGPSDataResult' of XSD type 'xsd:string'
        char *DownLoadMobGPSDataResult;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__DownLoadMobGPSDataResponse
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__DownLoadMobGPSDataResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__DownLoadMobGPSDataResponse, default initialized and not managed by a soap context
        virtual _ns1__DownLoadMobGPSDataResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__DownLoadMobGPSDataResponse); }
      public:
        /// Constructor with initializations
        _ns1__DownLoadMobGPSDataResponse() : DownLoadMobGPSDataResult(), soap() { }
        virtual ~_ns1__DownLoadMobGPSDataResponse() { }
        /// Friend allocator used by soap_new__ns1__DownLoadMobGPSDataResponse(struct soap*, int)
        friend SOAP_FMAC1 _ns1__DownLoadMobGPSDataResponse * SOAP_FMAC2 soap_instantiate__ns1__DownLoadMobGPSDataResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:400 */
#ifndef SOAP_TYPE__ns1__MobDownLoadData
#define SOAP_TYPE__ns1__MobDownLoadData (96)
/* complex XSD type 'ns1:MobDownLoadData': */
class SOAP_CMAC _ns1__MobDownLoadData {
      public:
        /// Optional element 'ns1:dwname' of XSD type 'xsd:string'
        char *dwname;
        /// Optional element 'ns1:unitname' of XSD type 'xsd:string'
        char *unitname;
        /// Optional element 'ns1:tabname' of XSD type 'xsd:string'
        char *tabname;
        /// Optional element 'ns1:sytime' of XSD type 'xsd:string'
        char *sytime;
        /// Required element 'ns1:level' of XSD type 'xsd:int'
        int level;
        /// Optional element 'ns1:stfield' of XSD type 'xsd:string'
        char *stfield;
        /// Optional element 'ns1:filename' of XSD type 'xsd:string'
        char *filename;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__MobDownLoadData
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__MobDownLoadData; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__MobDownLoadData, default initialized and not managed by a soap context
        virtual _ns1__MobDownLoadData *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__MobDownLoadData); }
      public:
        /// Constructor with initializations
        _ns1__MobDownLoadData() : dwname(), unitname(), tabname(), sytime(), level(), stfield(), filename(), soap() { }
        virtual ~_ns1__MobDownLoadData() { }
        /// Friend allocator used by soap_new__ns1__MobDownLoadData(struct soap*, int)
        friend SOAP_FMAC1 _ns1__MobDownLoadData * SOAP_FMAC2 soap_instantiate__ns1__MobDownLoadData(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:403 */
#ifndef SOAP_TYPE__ns1__MobDownLoadDataResponse
#define SOAP_TYPE__ns1__MobDownLoadDataResponse (97)
/* complex XSD type 'ns1:MobDownLoadDataResponse': */
class SOAP_CMAC _ns1__MobDownLoadDataResponse {
      public:
        /// Optional element 'ns1:MobDownLoadDataResult' of XSD type 'xsd:string'
        char *MobDownLoadDataResult;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__MobDownLoadDataResponse
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__MobDownLoadDataResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__MobDownLoadDataResponse, default initialized and not managed by a soap context
        virtual _ns1__MobDownLoadDataResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__MobDownLoadDataResponse); }
      public:
        /// Constructor with initializations
        _ns1__MobDownLoadDataResponse() : MobDownLoadDataResult(), soap() { }
        virtual ~_ns1__MobDownLoadDataResponse() { }
        /// Friend allocator used by soap_new__ns1__MobDownLoadDataResponse(struct soap*, int)
        friend SOAP_FMAC1 _ns1__MobDownLoadDataResponse * SOAP_FMAC2 soap_instantiate__ns1__MobDownLoadDataResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:406 */
#ifndef SOAP_TYPE__ns1__GetOpenFireInfo
#define SOAP_TYPE__ns1__GetOpenFireInfo (98)
/* complex XSD type 'ns1:GetOpenFireInfo': */
class SOAP_CMAC _ns1__GetOpenFireInfo {
      public:
        /// Optional element 'ns1:dwnam' of XSD type 'xsd:string'
        char *dwnam;
        /// Optional element 'ns1:unit' of XSD type 'xsd:string'
        char *unit;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__GetOpenFireInfo
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__GetOpenFireInfo; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__GetOpenFireInfo, default initialized and not managed by a soap context
        virtual _ns1__GetOpenFireInfo *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__GetOpenFireInfo); }
      public:
        /// Constructor with initializations
        _ns1__GetOpenFireInfo() : dwnam(), unit(), soap() { }
        virtual ~_ns1__GetOpenFireInfo() { }
        /// Friend allocator used by soap_new__ns1__GetOpenFireInfo(struct soap*, int)
        friend SOAP_FMAC1 _ns1__GetOpenFireInfo * SOAP_FMAC2 soap_instantiate__ns1__GetOpenFireInfo(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:409 */
#ifndef SOAP_TYPE__ns1__GetOpenFireInfoResponse
#define SOAP_TYPE__ns1__GetOpenFireInfoResponse (99)
/* complex XSD type 'ns1:GetOpenFireInfoResponse': */
class SOAP_CMAC _ns1__GetOpenFireInfoResponse {
      public:
        /// Optional element 'ns1:GetOpenFireInfoResult' of XSD type 'xsd:string'
        char *GetOpenFireInfoResult;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__GetOpenFireInfoResponse
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__GetOpenFireInfoResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__GetOpenFireInfoResponse, default initialized and not managed by a soap context
        virtual _ns1__GetOpenFireInfoResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__GetOpenFireInfoResponse); }
      public:
        /// Constructor with initializations
        _ns1__GetOpenFireInfoResponse() : GetOpenFireInfoResult(), soap() { }
        virtual ~_ns1__GetOpenFireInfoResponse() { }
        /// Friend allocator used by soap_new__ns1__GetOpenFireInfoResponse(struct soap*, int)
        friend SOAP_FMAC1 _ns1__GetOpenFireInfoResponse * SOAP_FMAC2 soap_instantiate__ns1__GetOpenFireInfoResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:412 */
#ifndef SOAP_TYPE__ns1__GetDwList
#define SOAP_TYPE__ns1__GetDwList (100)
/* complex XSD type 'ns1:GetDwList': */
class SOAP_CMAC _ns1__GetDwList {
      public:
        /// Optional element 'ns1:dwname' of XSD type 'xsd:string'
        char *dwname;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__GetDwList
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__GetDwList; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__GetDwList, default initialized and not managed by a soap context
        virtual _ns1__GetDwList *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__GetDwList); }
      public:
        /// Constructor with initializations
        _ns1__GetDwList() : dwname(), soap() { }
        virtual ~_ns1__GetDwList() { }
        /// Friend allocator used by soap_new__ns1__GetDwList(struct soap*, int)
        friend SOAP_FMAC1 _ns1__GetDwList * SOAP_FMAC2 soap_instantiate__ns1__GetDwList(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:415 */
#ifndef SOAP_TYPE__ns1__GetDwListResponse
#define SOAP_TYPE__ns1__GetDwListResponse (101)
/* complex XSD type 'ns1:GetDwListResponse': */
class SOAP_CMAC _ns1__GetDwListResponse {
      public:
        /// Optional element 'ns1:GetDwListResult' of XSD type 'xsd:string'
        char *GetDwListResult;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__GetDwListResponse
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__GetDwListResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__GetDwListResponse, default initialized and not managed by a soap context
        virtual _ns1__GetDwListResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__GetDwListResponse); }
      public:
        /// Constructor with initializations
        _ns1__GetDwListResponse() : GetDwListResult(), soap() { }
        virtual ~_ns1__GetDwListResponse() { }
        /// Friend allocator used by soap_new__ns1__GetDwListResponse(struct soap*, int)
        friend SOAP_FMAC1 _ns1__GetDwListResponse * SOAP_FMAC2 soap_instantiate__ns1__GetDwListResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:418 */
#ifndef SOAP_TYPE__ns1__GetUnitStation
#define SOAP_TYPE__ns1__GetUnitStation (102)
/* complex XSD type 'ns1:GetUnitStation': */
class SOAP_CMAC _ns1__GetUnitStation {
      public:
        /// Optional element 'ns1:dwname' of XSD type 'xsd:string'
        char *dwname;
        /// Required element 'ns1:level' of XSD type 'xsd:int'
        int level;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__GetUnitStation
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__GetUnitStation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__GetUnitStation, default initialized and not managed by a soap context
        virtual _ns1__GetUnitStation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__GetUnitStation); }
      public:
        /// Constructor with initializations
        _ns1__GetUnitStation() : dwname(), level(), soap() { }
        virtual ~_ns1__GetUnitStation() { }
        /// Friend allocator used by soap_new__ns1__GetUnitStation(struct soap*, int)
        friend SOAP_FMAC1 _ns1__GetUnitStation * SOAP_FMAC2 soap_instantiate__ns1__GetUnitStation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:421 */
#ifndef SOAP_TYPE__ns1__GetUnitStationResponse
#define SOAP_TYPE__ns1__GetUnitStationResponse (103)
/* complex XSD type 'ns1:GetUnitStationResponse': */
class SOAP_CMAC _ns1__GetUnitStationResponse {
      public:
        /// Optional element 'ns1:GetUnitStationResult' of XSD type 'xsd:string'
        char *GetUnitStationResult;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__GetUnitStationResponse
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__GetUnitStationResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__GetUnitStationResponse, default initialized and not managed by a soap context
        virtual _ns1__GetUnitStationResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__GetUnitStationResponse); }
      public:
        /// Constructor with initializations
        _ns1__GetUnitStationResponse() : GetUnitStationResult(), soap() { }
        virtual ~_ns1__GetUnitStationResponse() { }
        /// Friend allocator used by soap_new__ns1__GetUnitStationResponse(struct soap*, int)
        friend SOAP_FMAC1 _ns1__GetUnitStationResponse * SOAP_FMAC2 soap_instantiate__ns1__GetUnitStationResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:424 */
#ifndef SOAP_TYPE__ns1__GetUnitStruct
#define SOAP_TYPE__ns1__GetUnitStruct (104)
/* complex XSD type 'ns1:GetUnitStruct': */
class SOAP_CMAC _ns1__GetUnitStruct {
      public:
        /// Optional element 'ns1:dwname' of XSD type 'xsd:string'
        char *dwname;
        /// Required element 'ns1:level' of XSD type 'xsd:int'
        int level;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__GetUnitStruct
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__GetUnitStruct; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__GetUnitStruct, default initialized and not managed by a soap context
        virtual _ns1__GetUnitStruct *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__GetUnitStruct); }
      public:
        /// Constructor with initializations
        _ns1__GetUnitStruct() : dwname(), level(), soap() { }
        virtual ~_ns1__GetUnitStruct() { }
        /// Friend allocator used by soap_new__ns1__GetUnitStruct(struct soap*, int)
        friend SOAP_FMAC1 _ns1__GetUnitStruct * SOAP_FMAC2 soap_instantiate__ns1__GetUnitStruct(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:427 */
#ifndef SOAP_TYPE__ns1__GetUnitStructResponse
#define SOAP_TYPE__ns1__GetUnitStructResponse (105)
/* complex XSD type 'ns1:GetUnitStructResponse': */
class SOAP_CMAC _ns1__GetUnitStructResponse {
      public:
        /// Optional element 'ns1:GetUnitStructResult' of XSD type 'xsd:string'
        char *GetUnitStructResult;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__GetUnitStructResponse
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__GetUnitStructResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__GetUnitStructResponse, default initialized and not managed by a soap context
        virtual _ns1__GetUnitStructResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__GetUnitStructResponse); }
      public:
        /// Constructor with initializations
        _ns1__GetUnitStructResponse() : GetUnitStructResult(), soap() { }
        virtual ~_ns1__GetUnitStructResponse() { }
        /// Friend allocator used by soap_new__ns1__GetUnitStructResponse(struct soap*, int)
        friend SOAP_FMAC1 _ns1__GetUnitStructResponse * SOAP_FMAC2 soap_instantiate__ns1__GetUnitStructResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:430 */
#ifndef SOAP_TYPE__ns1__GetUnitPersonInfo
#define SOAP_TYPE__ns1__GetUnitPersonInfo (106)
/* complex XSD type 'ns1:GetUnitPersonInfo': */
class SOAP_CMAC _ns1__GetUnitPersonInfo {
      public:
        /// Optional element 'ns1:dwname' of XSD type 'xsd:string'
        char *dwname;
        /// Required element 'ns1:unitid' of XSD type 'xsd:int'
        int unitid;
        /// Required element 'ns1:personid' of XSD type 'xsd:int'
        int personid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__GetUnitPersonInfo
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__GetUnitPersonInfo; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__GetUnitPersonInfo, default initialized and not managed by a soap context
        virtual _ns1__GetUnitPersonInfo *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__GetUnitPersonInfo); }
      public:
        /// Constructor with initializations
        _ns1__GetUnitPersonInfo() : dwname(), unitid(), personid(), soap() { }
        virtual ~_ns1__GetUnitPersonInfo() { }
        /// Friend allocator used by soap_new__ns1__GetUnitPersonInfo(struct soap*, int)
        friend SOAP_FMAC1 _ns1__GetUnitPersonInfo * SOAP_FMAC2 soap_instantiate__ns1__GetUnitPersonInfo(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:433 */
#ifndef SOAP_TYPE__ns1__GetUnitPersonInfoResponse
#define SOAP_TYPE__ns1__GetUnitPersonInfoResponse (107)
/* complex XSD type 'ns1:GetUnitPersonInfoResponse': */
class SOAP_CMAC _ns1__GetUnitPersonInfoResponse {
      public:
        /// Optional element 'ns1:GetUnitPersonInfoResult' of XSD type 'xsd:string'
        char *GetUnitPersonInfoResult;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__GetUnitPersonInfoResponse
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__GetUnitPersonInfoResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__GetUnitPersonInfoResponse, default initialized and not managed by a soap context
        virtual _ns1__GetUnitPersonInfoResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__GetUnitPersonInfoResponse); }
      public:
        /// Constructor with initializations
        _ns1__GetUnitPersonInfoResponse() : GetUnitPersonInfoResult(), soap() { }
        virtual ~_ns1__GetUnitPersonInfoResponse() { }
        /// Friend allocator used by soap_new__ns1__GetUnitPersonInfoResponse(struct soap*, int)
        friend SOAP_FMAC1 _ns1__GetUnitPersonInfoResponse * SOAP_FMAC2 soap_instantiate__ns1__GetUnitPersonInfoResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:436 */
#ifndef SOAP_TYPE__ns1__GetFileSize
#define SOAP_TYPE__ns1__GetFileSize (108)
/* complex XSD type 'ns1:GetFileSize': */
class SOAP_CMAC _ns1__GetFileSize {
      public:
        /// Optional element 'ns1:filename' of XSD type 'xsd:string'
        char *filename;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__GetFileSize
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__GetFileSize; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__GetFileSize, default initialized and not managed by a soap context
        virtual _ns1__GetFileSize *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__GetFileSize); }
      public:
        /// Constructor with initializations
        _ns1__GetFileSize() : filename(), soap() { }
        virtual ~_ns1__GetFileSize() { }
        /// Friend allocator used by soap_new__ns1__GetFileSize(struct soap*, int)
        friend SOAP_FMAC1 _ns1__GetFileSize * SOAP_FMAC2 soap_instantiate__ns1__GetFileSize(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:439 */
#ifndef SOAP_TYPE__ns1__GetFileSizeResponse
#define SOAP_TYPE__ns1__GetFileSizeResponse (109)
/* complex XSD type 'ns1:GetFileSizeResponse': */
class SOAP_CMAC _ns1__GetFileSizeResponse {
      public:
        /// Required element 'ns1:GetFileSizeResult' of XSD type 'xsd:long'
        LONG64 GetFileSizeResult;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__GetFileSizeResponse
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__GetFileSizeResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__GetFileSizeResponse, default initialized and not managed by a soap context
        virtual _ns1__GetFileSizeResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__GetFileSizeResponse); }
      public:
        /// Constructor with initializations
        _ns1__GetFileSizeResponse() : GetFileSizeResult(), soap() { }
        virtual ~_ns1__GetFileSizeResponse() { }
        /// Friend allocator used by soap_new__ns1__GetFileSizeResponse(struct soap*, int)
        friend SOAP_FMAC1 _ns1__GetFileSizeResponse * SOAP_FMAC2 soap_instantiate__ns1__GetFileSizeResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:442 */
#ifndef SOAP_TYPE__ns1__GetXbList
#define SOAP_TYPE__ns1__GetXbList (110)
/* complex XSD type 'ns1:GetXbList': */
class SOAP_CMAC _ns1__GetXbList {
      public:
        /// Optional element 'ns1:unit' of XSD type 'xsd:string'
        char *unit;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__GetXbList
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__GetXbList; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__GetXbList, default initialized and not managed by a soap context
        virtual _ns1__GetXbList *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__GetXbList); }
      public:
        /// Constructor with initializations
        _ns1__GetXbList() : unit(), soap() { }
        virtual ~_ns1__GetXbList() { }
        /// Friend allocator used by soap_new__ns1__GetXbList(struct soap*, int)
        friend SOAP_FMAC1 _ns1__GetXbList * SOAP_FMAC2 soap_instantiate__ns1__GetXbList(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:445 */
#ifndef SOAP_TYPE__ns1__GetXbListResponse
#define SOAP_TYPE__ns1__GetXbListResponse (111)
/* complex XSD type 'ns1:GetXbListResponse': */
class SOAP_CMAC _ns1__GetXbListResponse {
      public:
        /// Optional element 'ns1:GetXbListResult' of XSD type 'xsd:string'
        char *GetXbListResult;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__GetXbListResponse
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__GetXbListResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__GetXbListResponse, default initialized and not managed by a soap context
        virtual _ns1__GetXbListResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__GetXbListResponse); }
      public:
        /// Constructor with initializations
        _ns1__GetXbListResponse() : GetXbListResult(), soap() { }
        virtual ~_ns1__GetXbListResponse() { }
        /// Friend allocator used by soap_new__ns1__GetXbListResponse(struct soap*, int)
        friend SOAP_FMAC1 _ns1__GetXbListResponse * SOAP_FMAC2 soap_instantiate__ns1__GetXbListResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:448 */
#ifndef SOAP_TYPE__ns1__GetXbStationList
#define SOAP_TYPE__ns1__GetXbStationList (112)
/* complex XSD type 'ns1:GetXbStationList': */
class SOAP_CMAC _ns1__GetXbStationList {
      public:
        /// Optional element 'ns1:xb' of XSD type 'xsd:string'
        char *xb;
        /// Optional element 'ns1:unit' of XSD type 'xsd:string'
        char *unit;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__GetXbStationList
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__GetXbStationList; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__GetXbStationList, default initialized and not managed by a soap context
        virtual _ns1__GetXbStationList *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__GetXbStationList); }
      public:
        /// Constructor with initializations
        _ns1__GetXbStationList() : xb(), unit(), soap() { }
        virtual ~_ns1__GetXbStationList() { }
        /// Friend allocator used by soap_new__ns1__GetXbStationList(struct soap*, int)
        friend SOAP_FMAC1 _ns1__GetXbStationList * SOAP_FMAC2 soap_instantiate__ns1__GetXbStationList(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:451 */
#ifndef SOAP_TYPE__ns1__GetXbStationListResponse
#define SOAP_TYPE__ns1__GetXbStationListResponse (113)
/* complex XSD type 'ns1:GetXbStationListResponse': */
class SOAP_CMAC _ns1__GetXbStationListResponse {
      public:
        /// Optional element 'ns1:GetXbStationListResult' of XSD type 'xsd:string'
        char *GetXbStationListResult;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__GetXbStationListResponse
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__GetXbStationListResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__GetXbStationListResponse, default initialized and not managed by a soap context
        virtual _ns1__GetXbStationListResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__GetXbStationListResponse); }
      public:
        /// Constructor with initializations
        _ns1__GetXbStationListResponse() : GetXbStationListResult(), soap() { }
        virtual ~_ns1__GetXbStationListResponse() { }
        /// Friend allocator used by soap_new__ns1__GetXbStationListResponse(struct soap*, int)
        friend SOAP_FMAC1 _ns1__GetXbStationListResponse * SOAP_FMAC2 soap_instantiate__ns1__GetXbStationListResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:454 */
#ifndef SOAP_TYPE__ns1__GetMapDeviceType
#define SOAP_TYPE__ns1__GetMapDeviceType (114)
/* complex XSD type 'ns1:GetMapDeviceType': */
class SOAP_CMAC _ns1__GetMapDeviceType {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__GetMapDeviceType
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__GetMapDeviceType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__GetMapDeviceType, default initialized and not managed by a soap context
        virtual _ns1__GetMapDeviceType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__GetMapDeviceType); }
      public:
        /// Constructor with initializations
        _ns1__GetMapDeviceType() : soap() { }
        virtual ~_ns1__GetMapDeviceType() { }
        /// Friend allocator used by soap_new__ns1__GetMapDeviceType(struct soap*, int)
        friend SOAP_FMAC1 _ns1__GetMapDeviceType * SOAP_FMAC2 soap_instantiate__ns1__GetMapDeviceType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:457 */
#ifndef SOAP_TYPE__ns1__GetMapDeviceTypeResponse
#define SOAP_TYPE__ns1__GetMapDeviceTypeResponse (115)
/* complex XSD type 'ns1:GetMapDeviceTypeResponse': */
class SOAP_CMAC _ns1__GetMapDeviceTypeResponse {
      public:
        /// Optional element 'ns1:GetMapDeviceTypeResult' of XSD type 'xsd:string'
        char *GetMapDeviceTypeResult;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__GetMapDeviceTypeResponse
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__GetMapDeviceTypeResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__GetMapDeviceTypeResponse, default initialized and not managed by a soap context
        virtual _ns1__GetMapDeviceTypeResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__GetMapDeviceTypeResponse); }
      public:
        /// Constructor with initializations
        _ns1__GetMapDeviceTypeResponse() : GetMapDeviceTypeResult(), soap() { }
        virtual ~_ns1__GetMapDeviceTypeResponse() { }
        /// Friend allocator used by soap_new__ns1__GetMapDeviceTypeResponse(struct soap*, int)
        friend SOAP_FMAC1 _ns1__GetMapDeviceTypeResponse * SOAP_FMAC2 soap_instantiate__ns1__GetMapDeviceTypeResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:460 */
#ifndef SOAP_TYPE__ns1__GetGxDeviceData
#define SOAP_TYPE__ns1__GetGxDeviceData (116)
/* complex XSD type 'ns1:GetGxDeviceData': */
class SOAP_CMAC _ns1__GetGxDeviceData {
      public:
        /// Optional element 'ns1:typeid' of XSD type 'xsd:string'
        char *typeid_;
        /// Optional element 'ns1:xb' of XSD type 'xsd:string'
        char *xb;
        /// Optional element 'ns1:station' of XSD type 'xsd:string'
        char *station;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__GetGxDeviceData
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__GetGxDeviceData; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__GetGxDeviceData, default initialized and not managed by a soap context
        virtual _ns1__GetGxDeviceData *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__GetGxDeviceData); }
      public:
        /// Constructor with initializations
        _ns1__GetGxDeviceData() : typeid_(), xb(), station(), soap() { }
        virtual ~_ns1__GetGxDeviceData() { }
        /// Friend allocator used by soap_new__ns1__GetGxDeviceData(struct soap*, int)
        friend SOAP_FMAC1 _ns1__GetGxDeviceData * SOAP_FMAC2 soap_instantiate__ns1__GetGxDeviceData(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:463 */
#ifndef SOAP_TYPE__ns1__GetGxDeviceDataResponse
#define SOAP_TYPE__ns1__GetGxDeviceDataResponse (117)
/* complex XSD type 'ns1:GetGxDeviceDataResponse': */
class SOAP_CMAC _ns1__GetGxDeviceDataResponse {
      public:
        /// Optional element 'ns1:GetGxDeviceDataResult' of XSD type 'xsd:string'
        char *GetGxDeviceDataResult;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__GetGxDeviceDataResponse
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__GetGxDeviceDataResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__GetGxDeviceDataResponse, default initialized and not managed by a soap context
        virtual _ns1__GetGxDeviceDataResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__GetGxDeviceDataResponse); }
      public:
        /// Constructor with initializations
        _ns1__GetGxDeviceDataResponse() : GetGxDeviceDataResult(), soap() { }
        virtual ~_ns1__GetGxDeviceDataResponse() { }
        /// Friend allocator used by soap_new__ns1__GetGxDeviceDataResponse(struct soap*, int)
        friend SOAP_FMAC1 _ns1__GetGxDeviceDataResponse * SOAP_FMAC2 soap_instantiate__ns1__GetGxDeviceDataResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:466 */
#ifndef SOAP_TYPE__ns1__GetDownFileInfo
#define SOAP_TYPE__ns1__GetDownFileInfo (118)
/* complex XSD type 'ns1:GetDownFileInfo': */
class SOAP_CMAC _ns1__GetDownFileInfo {
      public:
        /// Optional element 'ns1:fname' of XSD type 'xsd:string'
        char *fname;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__GetDownFileInfo
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__GetDownFileInfo; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__GetDownFileInfo, default initialized and not managed by a soap context
        virtual _ns1__GetDownFileInfo *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__GetDownFileInfo); }
      public:
        /// Constructor with initializations
        _ns1__GetDownFileInfo() : fname(), soap() { }
        virtual ~_ns1__GetDownFileInfo() { }
        /// Friend allocator used by soap_new__ns1__GetDownFileInfo(struct soap*, int)
        friend SOAP_FMAC1 _ns1__GetDownFileInfo * SOAP_FMAC2 soap_instantiate__ns1__GetDownFileInfo(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:469 */
#ifndef SOAP_TYPE__ns1__GetDownFileInfoResponse
#define SOAP_TYPE__ns1__GetDownFileInfoResponse (119)
/* complex XSD type 'ns1:GetDownFileInfoResponse': */
class SOAP_CMAC _ns1__GetDownFileInfoResponse {
      public:
        /// Optional element 'ns1:GetDownFileInfoResult' of XSD type 'xsd:string'
        char *GetDownFileInfoResult;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__GetDownFileInfoResponse
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__GetDownFileInfoResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__GetDownFileInfoResponse, default initialized and not managed by a soap context
        virtual _ns1__GetDownFileInfoResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__GetDownFileInfoResponse); }
      public:
        /// Constructor with initializations
        _ns1__GetDownFileInfoResponse() : GetDownFileInfoResult(), soap() { }
        virtual ~_ns1__GetDownFileInfoResponse() { }
        /// Friend allocator used by soap_new__ns1__GetDownFileInfoResponse(struct soap*, int)
        friend SOAP_FMAC1 _ns1__GetDownFileInfoResponse * SOAP_FMAC2 soap_instantiate__ns1__GetDownFileInfoResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:472 */
#ifndef SOAP_TYPE__ns1__DownMapfile
#define SOAP_TYPE__ns1__DownMapfile (120)
/* complex XSD type 'ns1:DownMapfile': */
class SOAP_CMAC _ns1__DownMapfile {
      public:
        /// Optional element 'ns1:filename' of XSD type 'xsd:string'
        char *filename;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__DownMapfile
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__DownMapfile; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__DownMapfile, default initialized and not managed by a soap context
        virtual _ns1__DownMapfile *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__DownMapfile); }
      public:
        /// Constructor with initializations
        _ns1__DownMapfile() : filename(), soap() { }
        virtual ~_ns1__DownMapfile() { }
        /// Friend allocator used by soap_new__ns1__DownMapfile(struct soap*, int)
        friend SOAP_FMAC1 _ns1__DownMapfile * SOAP_FMAC2 soap_instantiate__ns1__DownMapfile(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:475 */
#ifndef SOAP_TYPE__ns1__DownMapfileResponse
#define SOAP_TYPE__ns1__DownMapfileResponse (121)
/* complex XSD type 'ns1:DownMapfileResponse': */
class SOAP_CMAC _ns1__DownMapfileResponse {
      public:
        /// Optional element 'ns1:DownMapfileResult' of XSD type 'xsd:string'
        char *DownMapfileResult;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__DownMapfileResponse
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__DownMapfileResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__DownMapfileResponse, default initialized and not managed by a soap context
        virtual _ns1__DownMapfileResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__DownMapfileResponse); }
      public:
        /// Constructor with initializations
        _ns1__DownMapfileResponse() : DownMapfileResult(), soap() { }
        virtual ~_ns1__DownMapfileResponse() { }
        /// Friend allocator used by soap_new__ns1__DownMapfileResponse(struct soap*, int)
        friend SOAP_FMAC1 _ns1__DownMapfileResponse * SOAP_FMAC2 soap_instantiate__ns1__DownMapfileResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:478 */
#ifndef SOAP_TYPE__ns1__GetFileNew
#define SOAP_TYPE__ns1__GetFileNew (122)
/* complex XSD type 'ns1:GetFileNew': */
class SOAP_CMAC _ns1__GetFileNew {
      public:
        /// Optional element 'ns1:lstB' of XSD type 'ns1:ArrayOfBase64Binary'
        ns1__ArrayOfBase64Binary *lstB;
        /// Optional element 'ns1:filename' of XSD type 'xsd:string'
        char *filename;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__GetFileNew
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__GetFileNew; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__GetFileNew, default initialized and not managed by a soap context
        virtual _ns1__GetFileNew *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__GetFileNew); }
      public:
        /// Constructor with initializations
        _ns1__GetFileNew() : lstB(), filename(), soap() { }
        virtual ~_ns1__GetFileNew() { }
        /// Friend allocator used by soap_new__ns1__GetFileNew(struct soap*, int)
        friend SOAP_FMAC1 _ns1__GetFileNew * SOAP_FMAC2 soap_instantiate__ns1__GetFileNew(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:481 */
#ifndef SOAP_TYPE__ns1__GetFileNewResponse
#define SOAP_TYPE__ns1__GetFileNewResponse (123)
/* complex XSD type 'ns1:GetFileNewResponse': */
class SOAP_CMAC _ns1__GetFileNewResponse {
      public:
        /// Optional element 'ns1:GetFileNewResult' of XSD type 'xsd:string'
        char *GetFileNewResult;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__GetFileNewResponse
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__GetFileNewResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__GetFileNewResponse, default initialized and not managed by a soap context
        virtual _ns1__GetFileNewResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__GetFileNewResponse); }
      public:
        /// Constructor with initializations
        _ns1__GetFileNewResponse() : GetFileNewResult(), soap() { }
        virtual ~_ns1__GetFileNewResponse() { }
        /// Friend allocator used by soap_new__ns1__GetFileNewResponse(struct soap*, int)
        friend SOAP_FMAC1 _ns1__GetFileNewResponse * SOAP_FMAC2 soap_instantiate__ns1__GetFileNewResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:484 */
#ifndef SOAP_TYPE__ns1__AlterTable
#define SOAP_TYPE__ns1__AlterTable (124)
/* complex XSD type 'ns1:AlterTable': */
class SOAP_CMAC _ns1__AlterTable {
      public:
        /// Optional element 'ns1:fieldname' of XSD type 'xsd:string'
        char *fieldname;
        /// Optional element 'ns1:tabname' of XSD type 'xsd:string'
        char *tabname;
        /// Optional element 'ns1:ftype' of XSD type 'xsd:string'
        char *ftype;
        /// Optional element 'ns1:option' of XSD type 'xsd:string'
        char *option;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__AlterTable
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__AlterTable; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__AlterTable, default initialized and not managed by a soap context
        virtual _ns1__AlterTable *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__AlterTable); }
      public:
        /// Constructor with initializations
        _ns1__AlterTable() : fieldname(), tabname(), ftype(), option(), soap() { }
        virtual ~_ns1__AlterTable() { }
        /// Friend allocator used by soap_new__ns1__AlterTable(struct soap*, int)
        friend SOAP_FMAC1 _ns1__AlterTable * SOAP_FMAC2 soap_instantiate__ns1__AlterTable(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:487 */
#ifndef SOAP_TYPE__ns1__AlterTableResponse
#define SOAP_TYPE__ns1__AlterTableResponse (125)
/* complex XSD type 'ns1:AlterTableResponse': */
class SOAP_CMAC _ns1__AlterTableResponse {
      public:
        /// Optional element 'ns1:AlterTableResult' of XSD type 'xsd:string'
        char *AlterTableResult;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__AlterTableResponse
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__AlterTableResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__AlterTableResponse, default initialized and not managed by a soap context
        virtual _ns1__AlterTableResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__AlterTableResponse); }
      public:
        /// Constructor with initializations
        _ns1__AlterTableResponse() : AlterTableResult(), soap() { }
        virtual ~_ns1__AlterTableResponse() { }
        /// Friend allocator used by soap_new__ns1__AlterTableResponse(struct soap*, int)
        friend SOAP_FMAC1 _ns1__AlterTableResponse * SOAP_FMAC2 soap_instantiate__ns1__AlterTableResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:490 */
#ifndef SOAP_TYPE__ns1__DownCQData
#define SOAP_TYPE__ns1__DownCQData (126)
/* complex XSD type 'ns1:DownCQData': */
class SOAP_CMAC _ns1__DownCQData {
      public:
        /// Optional element 'ns1:dwname' of XSD type 'xsd:string'
        char *dwname;
        /// Required element 'ns1:orglevel' of XSD type 'xsd:int'
        int orglevel;
        /// Optional element 'ns1:tabname' of XSD type 'xsd:string'
        char *tabname;
        /// Optional element 'ns1:time' of XSD type 'xsd:string'
        char *time;
        /// Optional element 'ns1:filename' of XSD type 'xsd:string'
        char *filename;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__DownCQData
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__DownCQData; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__DownCQData, default initialized and not managed by a soap context
        virtual _ns1__DownCQData *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__DownCQData); }
      public:
        /// Constructor with initializations
        _ns1__DownCQData() : dwname(), orglevel(), tabname(), time(), filename(), soap() { }
        virtual ~_ns1__DownCQData() { }
        /// Friend allocator used by soap_new__ns1__DownCQData(struct soap*, int)
        friend SOAP_FMAC1 _ns1__DownCQData * SOAP_FMAC2 soap_instantiate__ns1__DownCQData(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:493 */
#ifndef SOAP_TYPE__ns1__DownCQDataResponse
#define SOAP_TYPE__ns1__DownCQDataResponse (127)
/* complex XSD type 'ns1:DownCQDataResponse': */
class SOAP_CMAC _ns1__DownCQDataResponse {
      public:
        /// Optional element 'ns1:DownCQDataResult' of XSD type 'xsd:string'
        char *DownCQDataResult;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__DownCQDataResponse
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__DownCQDataResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__DownCQDataResponse, default initialized and not managed by a soap context
        virtual _ns1__DownCQDataResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__DownCQDataResponse); }
      public:
        /// Constructor with initializations
        _ns1__DownCQDataResponse() : DownCQDataResult(), soap() { }
        virtual ~_ns1__DownCQDataResponse() { }
        /// Friend allocator used by soap_new__ns1__DownCQDataResponse(struct soap*, int)
        friend SOAP_FMAC1 _ns1__DownCQDataResponse * SOAP_FMAC2 soap_instantiate__ns1__DownCQDataResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:496 */
#ifndef SOAP_TYPE__ns1__GetTabList
#define SOAP_TYPE__ns1__GetTabList (128)
/* complex XSD type 'ns1:GetTabList': */
class SOAP_CMAC _ns1__GetTabList {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__GetTabList
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__GetTabList; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__GetTabList, default initialized and not managed by a soap context
        virtual _ns1__GetTabList *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__GetTabList); }
      public:
        /// Constructor with initializations
        _ns1__GetTabList() : soap() { }
        virtual ~_ns1__GetTabList() { }
        /// Friend allocator used by soap_new__ns1__GetTabList(struct soap*, int)
        friend SOAP_FMAC1 _ns1__GetTabList * SOAP_FMAC2 soap_instantiate__ns1__GetTabList(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:499 */
#ifndef SOAP_TYPE__ns1__GetTabListResponse
#define SOAP_TYPE__ns1__GetTabListResponse (129)
/* complex XSD type 'ns1:GetTabListResponse': */
class SOAP_CMAC _ns1__GetTabListResponse {
      public:
        /// Optional element 'ns1:GetTabListResult' of XSD type 'xsd:string'
        char *GetTabListResult;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__GetTabListResponse
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__GetTabListResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__GetTabListResponse, default initialized and not managed by a soap context
        virtual _ns1__GetTabListResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__GetTabListResponse); }
      public:
        /// Constructor with initializations
        _ns1__GetTabListResponse() : GetTabListResult(), soap() { }
        virtual ~_ns1__GetTabListResponse() { }
        /// Friend allocator used by soap_new__ns1__GetTabListResponse(struct soap*, int)
        friend SOAP_FMAC1 _ns1__GetTabListResponse * SOAP_FMAC2 soap_instantiate__ns1__GetTabListResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:502 */
#ifndef SOAP_TYPE__ns1__IsOracleTable
#define SOAP_TYPE__ns1__IsOracleTable (130)
/* complex XSD type 'ns1:IsOracleTable': */
class SOAP_CMAC _ns1__IsOracleTable {
      public:
        /// Optional element 'ns1:tabname' of XSD type 'xsd:string'
        char *tabname;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__IsOracleTable
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__IsOracleTable; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__IsOracleTable, default initialized and not managed by a soap context
        virtual _ns1__IsOracleTable *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__IsOracleTable); }
      public:
        /// Constructor with initializations
        _ns1__IsOracleTable() : tabname(), soap() { }
        virtual ~_ns1__IsOracleTable() { }
        /// Friend allocator used by soap_new__ns1__IsOracleTable(struct soap*, int)
        friend SOAP_FMAC1 _ns1__IsOracleTable * SOAP_FMAC2 soap_instantiate__ns1__IsOracleTable(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:505 */
#ifndef SOAP_TYPE__ns1__IsOracleTableResponse
#define SOAP_TYPE__ns1__IsOracleTableResponse (131)
/* complex XSD type 'ns1:IsOracleTableResponse': */
class SOAP_CMAC _ns1__IsOracleTableResponse {
      public:
        /// Required element 'ns1:IsOracleTableResult' of XSD type 'xsd:int'
        int IsOracleTableResult;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__IsOracleTableResponse
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__IsOracleTableResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__IsOracleTableResponse, default initialized and not managed by a soap context
        virtual _ns1__IsOracleTableResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__IsOracleTableResponse); }
      public:
        /// Constructor with initializations
        _ns1__IsOracleTableResponse() : IsOracleTableResult(), soap() { }
        virtual ~_ns1__IsOracleTableResponse() { }
        /// Friend allocator used by soap_new__ns1__IsOracleTableResponse(struct soap*, int)
        friend SOAP_FMAC1 _ns1__IsOracleTableResponse * SOAP_FMAC2 soap_instantiate__ns1__IsOracleTableResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:508 */
#ifndef SOAP_TYPE__ns1__GetFieldInfo
#define SOAP_TYPE__ns1__GetFieldInfo (132)
/* complex XSD type 'ns1:GetFieldInfo': */
class SOAP_CMAC _ns1__GetFieldInfo {
      public:
        /// Optional element 'ns1:tabname' of XSD type 'xsd:string'
        char *tabname;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__GetFieldInfo
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__GetFieldInfo; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__GetFieldInfo, default initialized and not managed by a soap context
        virtual _ns1__GetFieldInfo *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__GetFieldInfo); }
      public:
        /// Constructor with initializations
        _ns1__GetFieldInfo() : tabname(), soap() { }
        virtual ~_ns1__GetFieldInfo() { }
        /// Friend allocator used by soap_new__ns1__GetFieldInfo(struct soap*, int)
        friend SOAP_FMAC1 _ns1__GetFieldInfo * SOAP_FMAC2 soap_instantiate__ns1__GetFieldInfo(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:511 */
#ifndef SOAP_TYPE__ns1__GetFieldInfoResponse
#define SOAP_TYPE__ns1__GetFieldInfoResponse (133)
/* complex XSD type 'ns1:GetFieldInfoResponse': */
class SOAP_CMAC _ns1__GetFieldInfoResponse {
      public:
        /// Optional element 'ns1:GetFieldInfoResult' of XSD type 'xsd:string'
        char *GetFieldInfoResult;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__GetFieldInfoResponse
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__GetFieldInfoResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__GetFieldInfoResponse, default initialized and not managed by a soap context
        virtual _ns1__GetFieldInfoResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__GetFieldInfoResponse); }
      public:
        /// Constructor with initializations
        _ns1__GetFieldInfoResponse() : GetFieldInfoResult(), soap() { }
        virtual ~_ns1__GetFieldInfoResponse() { }
        /// Friend allocator used by soap_new__ns1__GetFieldInfoResponse(struct soap*, int)
        friend SOAP_FMAC1 _ns1__GetFieldInfoResponse * SOAP_FMAC2 soap_instantiate__ns1__GetFieldInfoResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:514 */
#ifndef SOAP_TYPE__ns1__ExecuteSqlForFile
#define SOAP_TYPE__ns1__ExecuteSqlForFile (134)
/* complex XSD type 'ns1:ExecuteSqlForFile': */
class SOAP_CMAC _ns1__ExecuteSqlForFile {
      public:
        /// Optional element 'ns1:xml' of XSD type 'xsd:string'
        char *xml;
        /// Optional element 'ns1:filename' of XSD type 'xsd:string'
        char *filename;
        /// Optional element 'ns1:fieldValue' of XSD type 'xsd:string'
        char *fieldValue;
        /// Optional element 'ns1:dwname' of XSD type 'xsd:string'
        char *dwname;
        /// Optional element 'ns1:dirname' of XSD type 'xsd:string'
        char *dirname;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__ExecuteSqlForFile
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__ExecuteSqlForFile; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__ExecuteSqlForFile, default initialized and not managed by a soap context
        virtual _ns1__ExecuteSqlForFile *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__ExecuteSqlForFile); }
      public:
        /// Constructor with initializations
        _ns1__ExecuteSqlForFile() : xml(), filename(), fieldValue(), dwname(), dirname(), soap() { }
        virtual ~_ns1__ExecuteSqlForFile() { }
        /// Friend allocator used by soap_new__ns1__ExecuteSqlForFile(struct soap*, int)
        friend SOAP_FMAC1 _ns1__ExecuteSqlForFile * SOAP_FMAC2 soap_instantiate__ns1__ExecuteSqlForFile(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:517 */
#ifndef SOAP_TYPE__ns1__ExecuteSqlForFileResponse
#define SOAP_TYPE__ns1__ExecuteSqlForFileResponse (135)
/* complex XSD type 'ns1:ExecuteSqlForFileResponse': */
class SOAP_CMAC _ns1__ExecuteSqlForFileResponse {
      public:
        /// Required element 'ns1:ExecuteSqlForFileResult' of XSD type 'xsd:int'
        int ExecuteSqlForFileResult;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__ExecuteSqlForFileResponse
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__ExecuteSqlForFileResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__ExecuteSqlForFileResponse, default initialized and not managed by a soap context
        virtual _ns1__ExecuteSqlForFileResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__ExecuteSqlForFileResponse); }
      public:
        /// Constructor with initializations
        _ns1__ExecuteSqlForFileResponse() : ExecuteSqlForFileResult(), soap() { }
        virtual ~_ns1__ExecuteSqlForFileResponse() { }
        /// Friend allocator used by soap_new__ns1__ExecuteSqlForFileResponse(struct soap*, int)
        friend SOAP_FMAC1 _ns1__ExecuteSqlForFileResponse * SOAP_FMAC2 soap_instantiate__ns1__ExecuteSqlForFileResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:520 */
#ifndef SOAP_TYPE__ns1__DownLoadFile
#define SOAP_TYPE__ns1__DownLoadFile (136)
/* complex XSD type 'ns1:DownLoadFile': */
class SOAP_CMAC _ns1__DownLoadFile {
      public:
        /// Optional element 'ns1:dwname' of XSD type 'xsd:string'
        char *dwname;
        /// Optional element 'ns1:filename' of XSD type 'xsd:string'
        char *filename;
        /// Optional element 'ns1:dir' of XSD type 'xsd:string'
        char *dir;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__DownLoadFile
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__DownLoadFile; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__DownLoadFile, default initialized and not managed by a soap context
        virtual _ns1__DownLoadFile *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__DownLoadFile); }
      public:
        /// Constructor with initializations
        _ns1__DownLoadFile() : dwname(), filename(), dir(), soap() { }
        virtual ~_ns1__DownLoadFile() { }
        /// Friend allocator used by soap_new__ns1__DownLoadFile(struct soap*, int)
        friend SOAP_FMAC1 _ns1__DownLoadFile * SOAP_FMAC2 soap_instantiate__ns1__DownLoadFile(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:523 */
#ifndef SOAP_TYPE__ns1__DownLoadFileResponse
#define SOAP_TYPE__ns1__DownLoadFileResponse (137)
/* complex XSD type 'ns1:DownLoadFileResponse': */
class SOAP_CMAC _ns1__DownLoadFileResponse {
      public:
        /// Optional element 'ns1:DownLoadFileResult' of XSD type 'xsd:string'
        char *DownLoadFileResult;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__DownLoadFileResponse
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__DownLoadFileResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__DownLoadFileResponse, default initialized and not managed by a soap context
        virtual _ns1__DownLoadFileResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__DownLoadFileResponse); }
      public:
        /// Constructor with initializations
        _ns1__DownLoadFileResponse() : DownLoadFileResult(), soap() { }
        virtual ~_ns1__DownLoadFileResponse() { }
        /// Friend allocator used by soap_new__ns1__DownLoadFileResponse(struct soap*, int)
        friend SOAP_FMAC1 _ns1__DownLoadFileResponse * SOAP_FMAC2 soap_instantiate__ns1__DownLoadFileResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:526 */
#ifndef SOAP_TYPE__ns1__WriteFile
#define SOAP_TYPE__ns1__WriteFile (138)
/* complex XSD type 'ns1:WriteFile': */
class SOAP_CMAC _ns1__WriteFile {
      public:
        /// Optional element 'ns1:msg' of XSD type 'xsd:string'
        char *msg;
        /// Optional element 'ns1:filename' of XSD type 'xsd:string'
        char *filename;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__WriteFile
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__WriteFile; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__WriteFile, default initialized and not managed by a soap context
        virtual _ns1__WriteFile *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__WriteFile); }
      public:
        /// Constructor with initializations
        _ns1__WriteFile() : msg(), filename(), soap() { }
        virtual ~_ns1__WriteFile() { }
        /// Friend allocator used by soap_new__ns1__WriteFile(struct soap*, int)
        friend SOAP_FMAC1 _ns1__WriteFile * SOAP_FMAC2 soap_instantiate__ns1__WriteFile(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:529 */
#ifndef SOAP_TYPE__ns1__WriteFileResponse
#define SOAP_TYPE__ns1__WriteFileResponse (139)
/* complex XSD type 'ns1:WriteFileResponse': */
class SOAP_CMAC _ns1__WriteFileResponse {
      public:
        /// Optional element 'ns1:WriteFileResult' of XSD type 'xsd:string'
        char *WriteFileResult;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__WriteFileResponse
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__WriteFileResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__WriteFileResponse, default initialized and not managed by a soap context
        virtual _ns1__WriteFileResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__WriteFileResponse); }
      public:
        /// Constructor with initializations
        _ns1__WriteFileResponse() : WriteFileResult(), soap() { }
        virtual ~_ns1__WriteFileResponse() { }
        /// Friend allocator used by soap_new__ns1__WriteFileResponse(struct soap*, int)
        friend SOAP_FMAC1 _ns1__WriteFileResponse * SOAP_FMAC2 soap_instantiate__ns1__WriteFileResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:532 */
#ifndef SOAP_TYPE__ns1__GetMapUpdateTime
#define SOAP_TYPE__ns1__GetMapUpdateTime (140)
/* complex XSD type 'ns1:GetMapUpdateTime': */
class SOAP_CMAC _ns1__GetMapUpdateTime {
      public:
        /// Optional element 'ns1:uptime' of XSD type 'xsd:string'
        char *uptime;
        /// Optional element 'ns1:dwname' of XSD type 'xsd:string'
        char *dwname;
        /// Optional element 'ns1:filename' of XSD type 'xsd:string'
        char *filename;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__GetMapUpdateTime
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__GetMapUpdateTime; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__GetMapUpdateTime, default initialized and not managed by a soap context
        virtual _ns1__GetMapUpdateTime *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__GetMapUpdateTime); }
      public:
        /// Constructor with initializations
        _ns1__GetMapUpdateTime() : uptime(), dwname(), filename(), soap() { }
        virtual ~_ns1__GetMapUpdateTime() { }
        /// Friend allocator used by soap_new__ns1__GetMapUpdateTime(struct soap*, int)
        friend SOAP_FMAC1 _ns1__GetMapUpdateTime * SOAP_FMAC2 soap_instantiate__ns1__GetMapUpdateTime(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:535 */
#ifndef SOAP_TYPE__ns1__GetMapUpdateTimeResponse
#define SOAP_TYPE__ns1__GetMapUpdateTimeResponse (141)
/* complex XSD type 'ns1:GetMapUpdateTimeResponse': */
class SOAP_CMAC _ns1__GetMapUpdateTimeResponse {
      public:
        /// Optional element 'ns1:GetMapUpdateTimeResult' of XSD type 'xsd:string'
        char *GetMapUpdateTimeResult;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__GetMapUpdateTimeResponse
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__GetMapUpdateTimeResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__GetMapUpdateTimeResponse, default initialized and not managed by a soap context
        virtual _ns1__GetMapUpdateTimeResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__GetMapUpdateTimeResponse); }
      public:
        /// Constructor with initializations
        _ns1__GetMapUpdateTimeResponse() : GetMapUpdateTimeResult(), soap() { }
        virtual ~_ns1__GetMapUpdateTimeResponse() { }
        /// Friend allocator used by soap_new__ns1__GetMapUpdateTimeResponse(struct soap*, int)
        friend SOAP_FMAC1 _ns1__GetMapUpdateTimeResponse * SOAP_FMAC2 soap_instantiate__ns1__GetMapUpdateTimeResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:538 */
#ifndef SOAP_TYPE__ns1__GetMapTabName
#define SOAP_TYPE__ns1__GetMapTabName (142)
/* complex XSD type 'ns1:GetMapTabName': */
class SOAP_CMAC _ns1__GetMapTabName {
      public:
        /// Optional element 'ns1:maptype' of XSD type 'xsd:string'
        char *maptype;
        /// Optional element 'ns1:filename' of XSD type 'xsd:string'
        char *filename;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__GetMapTabName
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__GetMapTabName; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__GetMapTabName, default initialized and not managed by a soap context
        virtual _ns1__GetMapTabName *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__GetMapTabName); }
      public:
        /// Constructor with initializations
        _ns1__GetMapTabName() : maptype(), filename(), soap() { }
        virtual ~_ns1__GetMapTabName() { }
        /// Friend allocator used by soap_new__ns1__GetMapTabName(struct soap*, int)
        friend SOAP_FMAC1 _ns1__GetMapTabName * SOAP_FMAC2 soap_instantiate__ns1__GetMapTabName(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:541 */
#ifndef SOAP_TYPE__ns1__GetMapTabNameResponse
#define SOAP_TYPE__ns1__GetMapTabNameResponse (143)
/* complex XSD type 'ns1:GetMapTabNameResponse': */
class SOAP_CMAC _ns1__GetMapTabNameResponse {
      public:
        /// Optional element 'ns1:GetMapTabNameResult' of XSD type 'xsd:string'
        char *GetMapTabNameResult;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__GetMapTabNameResponse
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__GetMapTabNameResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__GetMapTabNameResponse, default initialized and not managed by a soap context
        virtual _ns1__GetMapTabNameResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__GetMapTabNameResponse); }
      public:
        /// Constructor with initializations
        _ns1__GetMapTabNameResponse() : GetMapTabNameResult(), soap() { }
        virtual ~_ns1__GetMapTabNameResponse() { }
        /// Friend allocator used by soap_new__ns1__GetMapTabNameResponse(struct soap*, int)
        friend SOAP_FMAC1 _ns1__GetMapTabNameResponse * SOAP_FMAC2 soap_instantiate__ns1__GetMapTabNameResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:544 */
#ifndef SOAP_TYPE__ns1__GetMapDeviceData
#define SOAP_TYPE__ns1__GetMapDeviceData (144)
/* complex XSD type 'ns1:GetMapDeviceData': */
class SOAP_CMAC _ns1__GetMapDeviceData {
      public:
        /// Optional element 'ns1:tabname' of XSD type 'xsd:string'
        char *tabname;
        /// Optional element 'ns1:Lh' of XSD type 'xsd:string'
        char *Lh;
        /// Optional element 'ns1:mapid' of XSD type 'xsd:string'
        char *mapid;
        /// Optional element 'ns1:filename' of XSD type 'xsd:string'
        char *filename;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__GetMapDeviceData
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__GetMapDeviceData; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__GetMapDeviceData, default initialized and not managed by a soap context
        virtual _ns1__GetMapDeviceData *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__GetMapDeviceData); }
      public:
        /// Constructor with initializations
        _ns1__GetMapDeviceData() : tabname(), Lh(), mapid(), filename(), soap() { }
        virtual ~_ns1__GetMapDeviceData() { }
        /// Friend allocator used by soap_new__ns1__GetMapDeviceData(struct soap*, int)
        friend SOAP_FMAC1 _ns1__GetMapDeviceData * SOAP_FMAC2 soap_instantiate__ns1__GetMapDeviceData(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:547 */
#ifndef SOAP_TYPE__ns1__GetMapDeviceDataResponse
#define SOAP_TYPE__ns1__GetMapDeviceDataResponse (145)
/* complex XSD type 'ns1:GetMapDeviceDataResponse': */
class SOAP_CMAC _ns1__GetMapDeviceDataResponse {
      public:
        /// Optional element 'ns1:GetMapDeviceDataResult' of XSD type 'xsd:string'
        char *GetMapDeviceDataResult;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__GetMapDeviceDataResponse
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__GetMapDeviceDataResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__GetMapDeviceDataResponse, default initialized and not managed by a soap context
        virtual _ns1__GetMapDeviceDataResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__GetMapDeviceDataResponse); }
      public:
        /// Constructor with initializations
        _ns1__GetMapDeviceDataResponse() : GetMapDeviceDataResult(), soap() { }
        virtual ~_ns1__GetMapDeviceDataResponse() { }
        /// Friend allocator used by soap_new__ns1__GetMapDeviceDataResponse(struct soap*, int)
        friend SOAP_FMAC1 _ns1__GetMapDeviceDataResponse * SOAP_FMAC2 soap_instantiate__ns1__GetMapDeviceDataResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:550 */
#ifndef SOAP_TYPE__ns1__GetMaList
#define SOAP_TYPE__ns1__GetMaList (146)
/* complex XSD type 'ns1:GetMaList': */
class SOAP_CMAC _ns1__GetMaList {
      public:
        /// Optional element 'ns1:Lh' of XSD type 'xsd:string'
        char *Lh;
        /// Optional element 'ns1:mapid' of XSD type 'xsd:string'
        char *mapid;
        /// Optional element 'ns1:mflag' of XSD type 'xsd:string'
        char *mflag;
        /// Optional element 'ns1:filename' of XSD type 'xsd:string'
        char *filename;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__GetMaList
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__GetMaList; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__GetMaList, default initialized and not managed by a soap context
        virtual _ns1__GetMaList *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__GetMaList); }
      public:
        /// Constructor with initializations
        _ns1__GetMaList() : Lh(), mapid(), mflag(), filename(), soap() { }
        virtual ~_ns1__GetMaList() { }
        /// Friend allocator used by soap_new__ns1__GetMaList(struct soap*, int)
        friend SOAP_FMAC1 _ns1__GetMaList * SOAP_FMAC2 soap_instantiate__ns1__GetMaList(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:553 */
#ifndef SOAP_TYPE__ns1__GetMaListResponse
#define SOAP_TYPE__ns1__GetMaListResponse (147)
/* complex XSD type 'ns1:GetMaListResponse': */
class SOAP_CMAC _ns1__GetMaListResponse {
      public:
        /// Optional element 'ns1:GetMaListResult' of XSD type 'xsd:string'
        char *GetMaListResult;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__GetMaListResponse
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__GetMaListResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__GetMaListResponse, default initialized and not managed by a soap context
        virtual _ns1__GetMaListResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__GetMaListResponse); }
      public:
        /// Constructor with initializations
        _ns1__GetMaListResponse() : GetMaListResult(), soap() { }
        virtual ~_ns1__GetMaListResponse() { }
        /// Friend allocator used by soap_new__ns1__GetMaListResponse(struct soap*, int)
        friend SOAP_FMAC1 _ns1__GetMaListResponse * SOAP_FMAC2 soap_instantiate__ns1__GetMaListResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:556 */
#ifndef SOAP_TYPE__ns1__GetMangeUnit
#define SOAP_TYPE__ns1__GetMangeUnit (148)
/* complex XSD type 'ns1:GetMangeUnit': */
class SOAP_CMAC _ns1__GetMangeUnit {
      public:
        /// Optional element 'ns1:dwname' of XSD type 'xsd:string'
        char *dwname;
        /// Optional element 'ns1:filename' of XSD type 'xsd:string'
        char *filename;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__GetMangeUnit
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__GetMangeUnit; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__GetMangeUnit, default initialized and not managed by a soap context
        virtual _ns1__GetMangeUnit *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__GetMangeUnit); }
      public:
        /// Constructor with initializations
        _ns1__GetMangeUnit() : dwname(), filename(), soap() { }
        virtual ~_ns1__GetMangeUnit() { }
        /// Friend allocator used by soap_new__ns1__GetMangeUnit(struct soap*, int)
        friend SOAP_FMAC1 _ns1__GetMangeUnit * SOAP_FMAC2 soap_instantiate__ns1__GetMangeUnit(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:559 */
#ifndef SOAP_TYPE__ns1__GetMangeUnitResponse
#define SOAP_TYPE__ns1__GetMangeUnitResponse (149)
/* complex XSD type 'ns1:GetMangeUnitResponse': */
class SOAP_CMAC _ns1__GetMangeUnitResponse {
      public:
        /// Optional element 'ns1:GetMangeUnitResult' of XSD type 'xsd:string'
        char *GetMangeUnitResult;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__GetMangeUnitResponse
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__GetMangeUnitResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__GetMangeUnitResponse, default initialized and not managed by a soap context
        virtual _ns1__GetMangeUnitResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__GetMangeUnitResponse); }
      public:
        /// Constructor with initializations
        _ns1__GetMangeUnitResponse() : GetMangeUnitResult(), soap() { }
        virtual ~_ns1__GetMangeUnitResponse() { }
        /// Friend allocator used by soap_new__ns1__GetMangeUnitResponse(struct soap*, int)
        friend SOAP_FMAC1 _ns1__GetMangeUnitResponse * SOAP_FMAC2 soap_instantiate__ns1__GetMangeUnitResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:562 */
#ifndef SOAP_TYPE__ns1__GetMangeXb
#define SOAP_TYPE__ns1__GetMangeXb (150)
/* complex XSD type 'ns1:GetMangeXb': */
class SOAP_CMAC _ns1__GetMangeXb {
      public:
        /// Optional element 'ns1:dwname' of XSD type 'xsd:string'
        char *dwname;
        /// Optional element 'ns1:filename' of XSD type 'xsd:string'
        char *filename;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__GetMangeXb
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__GetMangeXb; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__GetMangeXb, default initialized and not managed by a soap context
        virtual _ns1__GetMangeXb *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__GetMangeXb); }
      public:
        /// Constructor with initializations
        _ns1__GetMangeXb() : dwname(), filename(), soap() { }
        virtual ~_ns1__GetMangeXb() { }
        /// Friend allocator used by soap_new__ns1__GetMangeXb(struct soap*, int)
        friend SOAP_FMAC1 _ns1__GetMangeXb * SOAP_FMAC2 soap_instantiate__ns1__GetMangeXb(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:565 */
#ifndef SOAP_TYPE__ns1__GetMangeXbResponse
#define SOAP_TYPE__ns1__GetMangeXbResponse (151)
/* complex XSD type 'ns1:GetMangeXbResponse': */
class SOAP_CMAC _ns1__GetMangeXbResponse {
      public:
        /// Optional element 'ns1:GetMangeXbResult' of XSD type 'xsd:string'
        char *GetMangeXbResult;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__GetMangeXbResponse
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__GetMangeXbResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__GetMangeXbResponse, default initialized and not managed by a soap context
        virtual _ns1__GetMangeXbResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__GetMangeXbResponse); }
      public:
        /// Constructor with initializations
        _ns1__GetMangeXbResponse() : GetMangeXbResult(), soap() { }
        virtual ~_ns1__GetMangeXbResponse() { }
        /// Friend allocator used by soap_new__ns1__GetMangeXbResponse(struct soap*, int)
        friend SOAP_FMAC1 _ns1__GetMangeXbResponse * SOAP_FMAC2 soap_instantiate__ns1__GetMangeXbResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:568 */
#ifndef SOAP_TYPE__ns1__CheckMapVer
#define SOAP_TYPE__ns1__CheckMapVer (152)
/* complex XSD type 'ns1:CheckMapVer': */
class SOAP_CMAC _ns1__CheckMapVer {
      public:
        /// Optional element 'ns1:ver' of XSD type 'xsd:string'
        char *ver;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__CheckMapVer
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__CheckMapVer; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__CheckMapVer, default initialized and not managed by a soap context
        virtual _ns1__CheckMapVer *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__CheckMapVer); }
      public:
        /// Constructor with initializations
        _ns1__CheckMapVer() : ver(), soap() { }
        virtual ~_ns1__CheckMapVer() { }
        /// Friend allocator used by soap_new__ns1__CheckMapVer(struct soap*, int)
        friend SOAP_FMAC1 _ns1__CheckMapVer * SOAP_FMAC2 soap_instantiate__ns1__CheckMapVer(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:571 */
#ifndef SOAP_TYPE__ns1__CheckMapVerResponse
#define SOAP_TYPE__ns1__CheckMapVerResponse (153)
/* complex XSD type 'ns1:CheckMapVerResponse': */
class SOAP_CMAC _ns1__CheckMapVerResponse {
      public:
        /// Optional element 'ns1:CheckMapVerResult' of XSD type 'xsd:string'
        char *CheckMapVerResult;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__CheckMapVerResponse
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__CheckMapVerResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__CheckMapVerResponse, default initialized and not managed by a soap context
        virtual _ns1__CheckMapVerResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__CheckMapVerResponse); }
      public:
        /// Constructor with initializations
        _ns1__CheckMapVerResponse() : CheckMapVerResult(), soap() { }
        virtual ~_ns1__CheckMapVerResponse() { }
        /// Friend allocator used by soap_new__ns1__CheckMapVerResponse(struct soap*, int)
        friend SOAP_FMAC1 _ns1__CheckMapVerResponse * SOAP_FMAC2 soap_instantiate__ns1__CheckMapVerResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:574 */
#ifndef SOAP_TYPE__ns1__GetMap
#define SOAP_TYPE__ns1__GetMap (154)
/* complex XSD type 'ns1:GetMap': */
class SOAP_CMAC _ns1__GetMap {
      public:
        /// Optional element 'ns1:filename' of XSD type 'xsd:string'
        char *filename;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__GetMap
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__GetMap; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__GetMap, default initialized and not managed by a soap context
        virtual _ns1__GetMap *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__GetMap); }
      public:
        /// Constructor with initializations
        _ns1__GetMap() : filename(), soap() { }
        virtual ~_ns1__GetMap() { }
        /// Friend allocator used by soap_new__ns1__GetMap(struct soap*, int)
        friend SOAP_FMAC1 _ns1__GetMap * SOAP_FMAC2 soap_instantiate__ns1__GetMap(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:577 */
#ifndef SOAP_TYPE__ns1__GetMapResponse
#define SOAP_TYPE__ns1__GetMapResponse (155)
/* complex XSD type 'ns1:GetMapResponse': */
class SOAP_CMAC _ns1__GetMapResponse {
      public:
        /// Optional element 'ns1:GetMapResult' of XSD type 'xsd:string'
        char *GetMapResult;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__GetMapResponse
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__GetMapResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__GetMapResponse, default initialized and not managed by a soap context
        virtual _ns1__GetMapResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__GetMapResponse); }
      public:
        /// Constructor with initializations
        _ns1__GetMapResponse() : GetMapResult(), soap() { }
        virtual ~_ns1__GetMapResponse() { }
        /// Friend allocator used by soap_new__ns1__GetMapResponse(struct soap*, int)
        friend SOAP_FMAC1 _ns1__GetMapResponse * SOAP_FMAC2 soap_instantiate__ns1__GetMapResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:580 */
#ifndef SOAP_TYPE__ns1__GetTableData
#define SOAP_TYPE__ns1__GetTableData (156)
/* complex XSD type 'ns1:GetTableData': */
class SOAP_CMAC _ns1__GetTableData {
      public:
        /// Optional element 'ns1:tabname' of XSD type 'xsd:string'
        char *tabname;
        /// Optional element 'ns1:filename' of XSD type 'xsd:string'
        char *filename;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__GetTableData
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__GetTableData; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__GetTableData, default initialized and not managed by a soap context
        virtual _ns1__GetTableData *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__GetTableData); }
      public:
        /// Constructor with initializations
        _ns1__GetTableData() : tabname(), filename(), soap() { }
        virtual ~_ns1__GetTableData() { }
        /// Friend allocator used by soap_new__ns1__GetTableData(struct soap*, int)
        friend SOAP_FMAC1 _ns1__GetTableData * SOAP_FMAC2 soap_instantiate__ns1__GetTableData(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:583 */
#ifndef SOAP_TYPE__ns1__GetTableDataResponse
#define SOAP_TYPE__ns1__GetTableDataResponse (157)
/* complex XSD type 'ns1:GetTableDataResponse': */
class SOAP_CMAC _ns1__GetTableDataResponse {
      public:
        /// Optional element 'ns1:GetTableDataResult' of XSD type 'xsd:string'
        char *GetTableDataResult;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__GetTableDataResponse
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__GetTableDataResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__GetTableDataResponse, default initialized and not managed by a soap context
        virtual _ns1__GetTableDataResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__GetTableDataResponse); }
      public:
        /// Constructor with initializations
        _ns1__GetTableDataResponse() : GetTableDataResult(), soap() { }
        virtual ~_ns1__GetTableDataResponse() { }
        /// Friend allocator used by soap_new__ns1__GetTableDataResponse(struct soap*, int)
        friend SOAP_FMAC1 _ns1__GetTableDataResponse * SOAP_FMAC2 soap_instantiate__ns1__GetTableDataResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:586 */
#ifndef SOAP_TYPE__ns1__ServerLevel
#define SOAP_TYPE__ns1__ServerLevel (158)
/* complex XSD type 'ns1:ServerLevel': */
class SOAP_CMAC _ns1__ServerLevel {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__ServerLevel
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__ServerLevel; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__ServerLevel, default initialized and not managed by a soap context
        virtual _ns1__ServerLevel *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__ServerLevel); }
      public:
        /// Constructor with initializations
        _ns1__ServerLevel() : soap() { }
        virtual ~_ns1__ServerLevel() { }
        /// Friend allocator used by soap_new__ns1__ServerLevel(struct soap*, int)
        friend SOAP_FMAC1 _ns1__ServerLevel * SOAP_FMAC2 soap_instantiate__ns1__ServerLevel(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:589 */
#ifndef SOAP_TYPE__ns1__ServerLevelResponse
#define SOAP_TYPE__ns1__ServerLevelResponse (159)
/* complex XSD type 'ns1:ServerLevelResponse': */
class SOAP_CMAC _ns1__ServerLevelResponse {
      public:
        /// Optional element 'ns1:ServerLevelResult' of XSD type 'xsd:string'
        char *ServerLevelResult;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__ServerLevelResponse
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__ServerLevelResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__ServerLevelResponse, default initialized and not managed by a soap context
        virtual _ns1__ServerLevelResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__ServerLevelResponse); }
      public:
        /// Constructor with initializations
        _ns1__ServerLevelResponse() : ServerLevelResult(), soap() { }
        virtual ~_ns1__ServerLevelResponse() { }
        /// Friend allocator used by soap_new__ns1__ServerLevelResponse(struct soap*, int)
        friend SOAP_FMAC1 _ns1__ServerLevelResponse * SOAP_FMAC2 soap_instantiate__ns1__ServerLevelResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:592 */
#ifndef SOAP_TYPE__ns1__GetMapListTime
#define SOAP_TYPE__ns1__GetMapListTime (160)
/* complex XSD type 'ns1:GetMapListTime': */
class SOAP_CMAC _ns1__GetMapListTime {
      public:
        /// Optional element 'ns1:uptime' of XSD type 'xsd:string'
        char *uptime;
        /// Optional element 'ns1:dwname' of XSD type 'xsd:string'
        char *dwname;
        /// Optional element 'ns1:filename' of XSD type 'xsd:string'
        char *filename;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__GetMapListTime
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__GetMapListTime; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__GetMapListTime, default initialized and not managed by a soap context
        virtual _ns1__GetMapListTime *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__GetMapListTime); }
      public:
        /// Constructor with initializations
        _ns1__GetMapListTime() : uptime(), dwname(), filename(), soap() { }
        virtual ~_ns1__GetMapListTime() { }
        /// Friend allocator used by soap_new__ns1__GetMapListTime(struct soap*, int)
        friend SOAP_FMAC1 _ns1__GetMapListTime * SOAP_FMAC2 soap_instantiate__ns1__GetMapListTime(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:595 */
#ifndef SOAP_TYPE__ns1__GetMapListTimeResponse
#define SOAP_TYPE__ns1__GetMapListTimeResponse (161)
/* complex XSD type 'ns1:GetMapListTimeResponse': */
class SOAP_CMAC _ns1__GetMapListTimeResponse {
      public:
        /// Optional element 'ns1:GetMapListTimeResult' of XSD type 'xsd:string'
        char *GetMapListTimeResult;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__GetMapListTimeResponse
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__GetMapListTimeResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__GetMapListTimeResponse, default initialized and not managed by a soap context
        virtual _ns1__GetMapListTimeResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__GetMapListTimeResponse); }
      public:
        /// Constructor with initializations
        _ns1__GetMapListTimeResponse() : GetMapListTimeResult(), soap() { }
        virtual ~_ns1__GetMapListTimeResponse() { }
        /// Friend allocator used by soap_new__ns1__GetMapListTimeResponse(struct soap*, int)
        friend SOAP_FMAC1 _ns1__GetMapListTimeResponse * SOAP_FMAC2 soap_instantiate__ns1__GetMapListTimeResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:598 */
#ifndef SOAP_TYPE__ns1__UpdateGzclMap
#define SOAP_TYPE__ns1__UpdateGzclMap (162)
/* complex XSD type 'ns1:UpdateGzclMap': */
class SOAP_CMAC _ns1__UpdateGzclMap {
      public:
        /// Optional element 'ns1:xml' of XSD type 'xsd:string'
        char *xml;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__UpdateGzclMap
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__UpdateGzclMap; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__UpdateGzclMap, default initialized and not managed by a soap context
        virtual _ns1__UpdateGzclMap *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__UpdateGzclMap); }
      public:
        /// Constructor with initializations
        _ns1__UpdateGzclMap() : xml(), soap() { }
        virtual ~_ns1__UpdateGzclMap() { }
        /// Friend allocator used by soap_new__ns1__UpdateGzclMap(struct soap*, int)
        friend SOAP_FMAC1 _ns1__UpdateGzclMap * SOAP_FMAC2 soap_instantiate__ns1__UpdateGzclMap(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:601 */
#ifndef SOAP_TYPE__ns1__UpdateGzclMapResponse
#define SOAP_TYPE__ns1__UpdateGzclMapResponse (163)
/* complex XSD type 'ns1:UpdateGzclMapResponse': */
class SOAP_CMAC _ns1__UpdateGzclMapResponse {
      public:
        /// Optional element 'ns1:UpdateGzclMapResult' of XSD type 'xsd:string'
        char *UpdateGzclMapResult;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__UpdateGzclMapResponse
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__UpdateGzclMapResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__UpdateGzclMapResponse, default initialized and not managed by a soap context
        virtual _ns1__UpdateGzclMapResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__UpdateGzclMapResponse); }
      public:
        /// Constructor with initializations
        _ns1__UpdateGzclMapResponse() : UpdateGzclMapResult(), soap() { }
        virtual ~_ns1__UpdateGzclMapResponse() { }
        /// Friend allocator used by soap_new__ns1__UpdateGzclMapResponse(struct soap*, int)
        friend SOAP_FMAC1 _ns1__UpdateGzclMapResponse * SOAP_FMAC2 soap_instantiate__ns1__UpdateGzclMapResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:604 */
#ifndef SOAP_TYPE__ns1__GetUnitMapVer
#define SOAP_TYPE__ns1__GetUnitMapVer (164)
/* complex XSD type 'ns1:GetUnitMapVer': */
class SOAP_CMAC _ns1__GetUnitMapVer {
      public:
        /// Optional element 'ns1:dwname' of XSD type 'xsd:string'
        char *dwname;
        /// Optional element 'ns1:unitname' of XSD type 'xsd:string'
        char *unitname;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__GetUnitMapVer
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__GetUnitMapVer; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__GetUnitMapVer, default initialized and not managed by a soap context
        virtual _ns1__GetUnitMapVer *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__GetUnitMapVer); }
      public:
        /// Constructor with initializations
        _ns1__GetUnitMapVer() : dwname(), unitname(), soap() { }
        virtual ~_ns1__GetUnitMapVer() { }
        /// Friend allocator used by soap_new__ns1__GetUnitMapVer(struct soap*, int)
        friend SOAP_FMAC1 _ns1__GetUnitMapVer * SOAP_FMAC2 soap_instantiate__ns1__GetUnitMapVer(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:607 */
#ifndef SOAP_TYPE__ns1__GetUnitMapVerResponse
#define SOAP_TYPE__ns1__GetUnitMapVerResponse (165)
/* complex XSD type 'ns1:GetUnitMapVerResponse': */
class SOAP_CMAC _ns1__GetUnitMapVerResponse {
      public:
        /// Optional element 'ns1:GetUnitMapVerResult' of XSD type 'xsd:string'
        char *GetUnitMapVerResult;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__GetUnitMapVerResponse
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__GetUnitMapVerResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__GetUnitMapVerResponse, default initialized and not managed by a soap context
        virtual _ns1__GetUnitMapVerResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__GetUnitMapVerResponse); }
      public:
        /// Constructor with initializations
        _ns1__GetUnitMapVerResponse() : GetUnitMapVerResult(), soap() { }
        virtual ~_ns1__GetUnitMapVerResponse() { }
        /// Friend allocator used by soap_new__ns1__GetUnitMapVerResponse(struct soap*, int)
        friend SOAP_FMAC1 _ns1__GetUnitMapVerResponse * SOAP_FMAC2 soap_instantiate__ns1__GetUnitMapVerResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:610 */
#ifndef SOAP_TYPE__ns1__GetMangeMapUpdate
#define SOAP_TYPE__ns1__GetMangeMapUpdate (166)
/* complex XSD type 'ns1:GetMangeMapUpdate': */
class SOAP_CMAC _ns1__GetMangeMapUpdate {
      public:
        /// Optional element 'ns1:dname' of XSD type 'xsd:string'
        char *dname;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__GetMangeMapUpdate
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__GetMangeMapUpdate; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__GetMangeMapUpdate, default initialized and not managed by a soap context
        virtual _ns1__GetMangeMapUpdate *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__GetMangeMapUpdate); }
      public:
        /// Constructor with initializations
        _ns1__GetMangeMapUpdate() : dname(), soap() { }
        virtual ~_ns1__GetMangeMapUpdate() { }
        /// Friend allocator used by soap_new__ns1__GetMangeMapUpdate(struct soap*, int)
        friend SOAP_FMAC1 _ns1__GetMangeMapUpdate * SOAP_FMAC2 soap_instantiate__ns1__GetMangeMapUpdate(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:613 */
#ifndef SOAP_TYPE__ns1__GetMangeMapUpdateResponse
#define SOAP_TYPE__ns1__GetMangeMapUpdateResponse (167)
/* complex XSD type 'ns1:GetMangeMapUpdateResponse': */
class SOAP_CMAC _ns1__GetMangeMapUpdateResponse {
      public:
        /// Optional element 'ns1:GetMangeMapUpdateResult' of XSD type 'xsd:string'
        char *GetMangeMapUpdateResult;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__GetMangeMapUpdateResponse
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__GetMangeMapUpdateResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__GetMangeMapUpdateResponse, default initialized and not managed by a soap context
        virtual _ns1__GetMangeMapUpdateResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__GetMangeMapUpdateResponse); }
      public:
        /// Constructor with initializations
        _ns1__GetMangeMapUpdateResponse() : GetMangeMapUpdateResult(), soap() { }
        virtual ~_ns1__GetMangeMapUpdateResponse() { }
        /// Friend allocator used by soap_new__ns1__GetMangeMapUpdateResponse(struct soap*, int)
        friend SOAP_FMAC1 _ns1__GetMangeMapUpdateResponse * SOAP_FMAC2 soap_instantiate__ns1__GetMangeMapUpdateResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:616 */
#ifndef SOAP_TYPE__ns1__OpenProcess
#define SOAP_TYPE__ns1__OpenProcess (168)
/* complex XSD type 'ns1:OpenProcess': */
class SOAP_CMAC _ns1__OpenProcess {
      public:
        /// Optional element 'ns1:name' of XSD type 'xsd:string'
        char *name;
        /// Optional element 'ns1:param' of XSD type 'xsd:string'
        char *param;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__OpenProcess
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__OpenProcess; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__OpenProcess, default initialized and not managed by a soap context
        virtual _ns1__OpenProcess *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__OpenProcess); }
      public:
        /// Constructor with initializations
        _ns1__OpenProcess() : name(), param(), soap() { }
        virtual ~_ns1__OpenProcess() { }
        /// Friend allocator used by soap_new__ns1__OpenProcess(struct soap*, int)
        friend SOAP_FMAC1 _ns1__OpenProcess * SOAP_FMAC2 soap_instantiate__ns1__OpenProcess(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:619 */
#ifndef SOAP_TYPE__ns1__OpenProcessResponse
#define SOAP_TYPE__ns1__OpenProcessResponse (169)
/* complex XSD type 'ns1:OpenProcessResponse': */
class SOAP_CMAC _ns1__OpenProcessResponse {
      public:
        /// Optional element 'ns1:OpenProcessResult' of XSD type 'xsd:string'
        char *OpenProcessResult;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__OpenProcessResponse
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__OpenProcessResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__OpenProcessResponse, default initialized and not managed by a soap context
        virtual _ns1__OpenProcessResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__OpenProcessResponse); }
      public:
        /// Constructor with initializations
        _ns1__OpenProcessResponse() : OpenProcessResult(), soap() { }
        virtual ~_ns1__OpenProcessResponse() { }
        /// Friend allocator used by soap_new__ns1__OpenProcessResponse(struct soap*, int)
        friend SOAP_FMAC1 _ns1__OpenProcessResponse * SOAP_FMAC2 soap_instantiate__ns1__OpenProcessResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:622 */
#ifndef SOAP_TYPE__ns1__GetEmfPngVer
#define SOAP_TYPE__ns1__GetEmfPngVer (170)
/* complex XSD type 'ns1:GetEmfPngVer': */
class SOAP_CMAC _ns1__GetEmfPngVer {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__GetEmfPngVer
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__GetEmfPngVer; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__GetEmfPngVer, default initialized and not managed by a soap context
        virtual _ns1__GetEmfPngVer *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__GetEmfPngVer); }
      public:
        /// Constructor with initializations
        _ns1__GetEmfPngVer() : soap() { }
        virtual ~_ns1__GetEmfPngVer() { }
        /// Friend allocator used by soap_new__ns1__GetEmfPngVer(struct soap*, int)
        friend SOAP_FMAC1 _ns1__GetEmfPngVer * SOAP_FMAC2 soap_instantiate__ns1__GetEmfPngVer(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:625 */
#ifndef SOAP_TYPE__ns1__GetEmfPngVerResponse
#define SOAP_TYPE__ns1__GetEmfPngVerResponse (171)
/* complex XSD type 'ns1:GetEmfPngVerResponse': */
class SOAP_CMAC _ns1__GetEmfPngVerResponse {
      public:
        /// Optional element 'ns1:GetEmfPngVerResult' of XSD type 'xsd:string'
        char *GetEmfPngVerResult;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__GetEmfPngVerResponse
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__GetEmfPngVerResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__GetEmfPngVerResponse, default initialized and not managed by a soap context
        virtual _ns1__GetEmfPngVerResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__GetEmfPngVerResponse); }
      public:
        /// Constructor with initializations
        _ns1__GetEmfPngVerResponse() : GetEmfPngVerResult(), soap() { }
        virtual ~_ns1__GetEmfPngVerResponse() { }
        /// Friend allocator used by soap_new__ns1__GetEmfPngVerResponse(struct soap*, int)
        friend SOAP_FMAC1 _ns1__GetEmfPngVerResponse * SOAP_FMAC2 soap_instantiate__ns1__GetEmfPngVerResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:628 */
#ifndef SOAP_TYPE__ns1__GetEmfPngFile
#define SOAP_TYPE__ns1__GetEmfPngFile (172)
/* complex XSD type 'ns1:GetEmfPngFile': */
class SOAP_CMAC _ns1__GetEmfPngFile {
      public:
        /// Optional element 'ns1:mapid' of XSD type 'xsd:string'
        char *mapid;
        /// Optional element 'ns1:pagename' of XSD type 'xsd:string'
        char *pagename;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__GetEmfPngFile
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__GetEmfPngFile; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__GetEmfPngFile, default initialized and not managed by a soap context
        virtual _ns1__GetEmfPngFile *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__GetEmfPngFile); }
      public:
        /// Constructor with initializations
        _ns1__GetEmfPngFile() : mapid(), pagename(), soap() { }
        virtual ~_ns1__GetEmfPngFile() { }
        /// Friend allocator used by soap_new__ns1__GetEmfPngFile(struct soap*, int)
        friend SOAP_FMAC1 _ns1__GetEmfPngFile * SOAP_FMAC2 soap_instantiate__ns1__GetEmfPngFile(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:631 */
#ifndef SOAP_TYPE__ns1__GetEmfPngFileResponse
#define SOAP_TYPE__ns1__GetEmfPngFileResponse (173)
/* complex XSD type 'ns1:GetEmfPngFileResponse': */
class SOAP_CMAC _ns1__GetEmfPngFileResponse {
      public:
        /// Optional element 'ns1:GetEmfPngFileResult' of XSD type 'xsd:string'
        char *GetEmfPngFileResult;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__GetEmfPngFileResponse
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__GetEmfPngFileResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__GetEmfPngFileResponse, default initialized and not managed by a soap context
        virtual _ns1__GetEmfPngFileResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__GetEmfPngFileResponse); }
      public:
        /// Constructor with initializations
        _ns1__GetEmfPngFileResponse() : GetEmfPngFileResult(), soap() { }
        virtual ~_ns1__GetEmfPngFileResponse() { }
        /// Friend allocator used by soap_new__ns1__GetEmfPngFileResponse(struct soap*, int)
        friend SOAP_FMAC1 _ns1__GetEmfPngFileResponse * SOAP_FMAC2 soap_instantiate__ns1__GetEmfPngFileResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:634 */
#ifndef SOAP_TYPE__ns1__OpenMapExe
#define SOAP_TYPE__ns1__OpenMapExe (174)
/* complex XSD type 'ns1:OpenMapExe': */
class SOAP_CMAC _ns1__OpenMapExe {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__OpenMapExe
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__OpenMapExe; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__OpenMapExe, default initialized and not managed by a soap context
        virtual _ns1__OpenMapExe *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__OpenMapExe); }
      public:
        /// Constructor with initializations
        _ns1__OpenMapExe() : soap() { }
        virtual ~_ns1__OpenMapExe() { }
        /// Friend allocator used by soap_new__ns1__OpenMapExe(struct soap*, int)
        friend SOAP_FMAC1 _ns1__OpenMapExe * SOAP_FMAC2 soap_instantiate__ns1__OpenMapExe(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:637 */
#ifndef SOAP_TYPE__ns1__OpenMapExeResponse
#define SOAP_TYPE__ns1__OpenMapExeResponse (175)
/* complex XSD type 'ns1:OpenMapExeResponse': */
class SOAP_CMAC _ns1__OpenMapExeResponse {
      public:
        /// Optional element 'ns1:OpenMapExeResult' of XSD type 'xsd:string'
        char *OpenMapExeResult;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__OpenMapExeResponse
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__OpenMapExeResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__OpenMapExeResponse, default initialized and not managed by a soap context
        virtual _ns1__OpenMapExeResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__OpenMapExeResponse); }
      public:
        /// Constructor with initializations
        _ns1__OpenMapExeResponse() : OpenMapExeResult(), soap() { }
        virtual ~_ns1__OpenMapExeResponse() { }
        /// Friend allocator used by soap_new__ns1__OpenMapExeResponse(struct soap*, int)
        friend SOAP_FMAC1 _ns1__OpenMapExeResponse * SOAP_FMAC2 soap_instantiate__ns1__OpenMapExeResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:640 */
#ifndef SOAP_TYPE__ns1__ChaoQi
#define SOAP_TYPE__ns1__ChaoQi (176)
/* complex XSD type 'ns1:ChaoQi': */
class SOAP_CMAC _ns1__ChaoQi {
      public:
        /// Optional element 'ns1:type' of XSD type 'xsd:string'
        char *type;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__ChaoQi
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__ChaoQi; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__ChaoQi, default initialized and not managed by a soap context
        virtual _ns1__ChaoQi *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__ChaoQi); }
      public:
        /// Constructor with initializations
        _ns1__ChaoQi() : type(), soap() { }
        virtual ~_ns1__ChaoQi() { }
        /// Friend allocator used by soap_new__ns1__ChaoQi(struct soap*, int)
        friend SOAP_FMAC1 _ns1__ChaoQi * SOAP_FMAC2 soap_instantiate__ns1__ChaoQi(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:643 */
#ifndef SOAP_TYPE__ns1__ChaoQiResponse
#define SOAP_TYPE__ns1__ChaoQiResponse (177)
/* complex XSD type 'ns1:ChaoQiResponse': */
class SOAP_CMAC _ns1__ChaoQiResponse {
      public:
        /// Optional element 'ns1:ChaoQiResult' of XSD type 'xsd:string'
        char *ChaoQiResult;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__ChaoQiResponse
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__ChaoQiResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__ChaoQiResponse, default initialized and not managed by a soap context
        virtual _ns1__ChaoQiResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__ChaoQiResponse); }
      public:
        /// Constructor with initializations
        _ns1__ChaoQiResponse() : ChaoQiResult(), soap() { }
        virtual ~_ns1__ChaoQiResponse() { }
        /// Friend allocator used by soap_new__ns1__ChaoQiResponse(struct soap*, int)
        friend SOAP_FMAC1 _ns1__ChaoQiResponse * SOAP_FMAC2 soap_instantiate__ns1__ChaoQiResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:646 */
#ifndef SOAP_TYPE__ns1__JiChaoQi
#define SOAP_TYPE__ns1__JiChaoQi (178)
/* complex XSD type 'ns1:JiChaoQi': */
class SOAP_CMAC _ns1__JiChaoQi {
      public:
        /// Optional element 'ns1:type' of XSD type 'xsd:string'
        char *type;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__JiChaoQi
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__JiChaoQi; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__JiChaoQi, default initialized and not managed by a soap context
        virtual _ns1__JiChaoQi *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__JiChaoQi); }
      public:
        /// Constructor with initializations
        _ns1__JiChaoQi() : type(), soap() { }
        virtual ~_ns1__JiChaoQi() { }
        /// Friend allocator used by soap_new__ns1__JiChaoQi(struct soap*, int)
        friend SOAP_FMAC1 _ns1__JiChaoQi * SOAP_FMAC2 soap_instantiate__ns1__JiChaoQi(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:649 */
#ifndef SOAP_TYPE__ns1__JiChaoQiResponse
#define SOAP_TYPE__ns1__JiChaoQiResponse (179)
/* complex XSD type 'ns1:JiChaoQiResponse': */
class SOAP_CMAC _ns1__JiChaoQiResponse {
      public:
        /// Optional element 'ns1:JiChaoQiResult' of XSD type 'xsd:string'
        char *JiChaoQiResult;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__JiChaoQiResponse
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__JiChaoQiResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__JiChaoQiResponse, default initialized and not managed by a soap context
        virtual _ns1__JiChaoQiResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__JiChaoQiResponse); }
      public:
        /// Constructor with initializations
        _ns1__JiChaoQiResponse() : JiChaoQiResult(), soap() { }
        virtual ~_ns1__JiChaoQiResponse() { }
        /// Friend allocator used by soap_new__ns1__JiChaoQiResponse(struct soap*, int)
        friend SOAP_FMAC1 _ns1__JiChaoQiResponse * SOAP_FMAC2 soap_instantiate__ns1__JiChaoQiResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:652 */
#ifndef SOAP_TYPE__ns1__GetZhouQi
#define SOAP_TYPE__ns1__GetZhouQi (180)
/* complex XSD type 'ns1:GetZhouQi': */
class SOAP_CMAC _ns1__GetZhouQi {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__GetZhouQi
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__GetZhouQi; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__GetZhouQi, default initialized and not managed by a soap context
        virtual _ns1__GetZhouQi *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__GetZhouQi); }
      public:
        /// Constructor with initializations
        _ns1__GetZhouQi() : soap() { }
        virtual ~_ns1__GetZhouQi() { }
        /// Friend allocator used by soap_new__ns1__GetZhouQi(struct soap*, int)
        friend SOAP_FMAC1 _ns1__GetZhouQi * SOAP_FMAC2 soap_instantiate__ns1__GetZhouQi(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:655 */
#ifndef SOAP_TYPE__ns1__GetZhouQiResponse
#define SOAP_TYPE__ns1__GetZhouQiResponse (181)
/* complex XSD type 'ns1:GetZhouQiResponse': */
class SOAP_CMAC _ns1__GetZhouQiResponse {
      public:
        /// Optional element 'ns1:GetZhouQiResult' of XSD type 'xsd:string'
        char *GetZhouQiResult;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__GetZhouQiResponse
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__GetZhouQiResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__GetZhouQiResponse, default initialized and not managed by a soap context
        virtual _ns1__GetZhouQiResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__GetZhouQiResponse); }
      public:
        /// Constructor with initializations
        _ns1__GetZhouQiResponse() : GetZhouQiResult(), soap() { }
        virtual ~_ns1__GetZhouQiResponse() { }
        /// Friend allocator used by soap_new__ns1__GetZhouQiResponse(struct soap*, int)
        friend SOAP_FMAC1 _ns1__GetZhouQiResponse * SOAP_FMAC2 soap_instantiate__ns1__GetZhouQiResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:658 */
#ifndef SOAP_TYPE__ns1__FlowChartEmf
#define SOAP_TYPE__ns1__FlowChartEmf (182)
/* complex XSD type 'ns1:FlowChartEmf': */
class SOAP_CMAC _ns1__FlowChartEmf {
      public:
        /// Optional element 'ns1:guid' of XSD type 'xsd:string'
        char *guid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__FlowChartEmf
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__FlowChartEmf; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__FlowChartEmf, default initialized and not managed by a soap context
        virtual _ns1__FlowChartEmf *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__FlowChartEmf); }
      public:
        /// Constructor with initializations
        _ns1__FlowChartEmf() : guid(), soap() { }
        virtual ~_ns1__FlowChartEmf() { }
        /// Friend allocator used by soap_new__ns1__FlowChartEmf(struct soap*, int)
        friend SOAP_FMAC1 _ns1__FlowChartEmf * SOAP_FMAC2 soap_instantiate__ns1__FlowChartEmf(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:661 */
#ifndef SOAP_TYPE__ns1__FlowChartEmfResponse
#define SOAP_TYPE__ns1__FlowChartEmfResponse (183)
/* complex XSD type 'ns1:FlowChartEmfResponse': */
class SOAP_CMAC _ns1__FlowChartEmfResponse {
      public:
        /// Optional element 'ns1:FlowChartEmfResult' of XSD type 'xsd:string'
        char *FlowChartEmfResult;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__FlowChartEmfResponse
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__FlowChartEmfResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__FlowChartEmfResponse, default initialized and not managed by a soap context
        virtual _ns1__FlowChartEmfResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__FlowChartEmfResponse); }
      public:
        /// Constructor with initializations
        _ns1__FlowChartEmfResponse() : FlowChartEmfResult(), soap() { }
        virtual ~_ns1__FlowChartEmfResponse() { }
        /// Friend allocator used by soap_new__ns1__FlowChartEmfResponse(struct soap*, int)
        friend SOAP_FMAC1 _ns1__FlowChartEmfResponse * SOAP_FMAC2 soap_instantiate__ns1__FlowChartEmfResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:664 */
#ifndef SOAP_TYPE__ns1__SGCDrawEmf
#define SOAP_TYPE__ns1__SGCDrawEmf (184)
/* complex XSD type 'ns1:SGCDrawEmf': */
class SOAP_CMAC _ns1__SGCDrawEmf {
      public:
        /// Optional element 'ns1:guid' of XSD type 'xsd:string'
        char *guid;
        /// Optional element 'ns1:rel' of XSD type 'xsd:string'
        char *rel;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__SGCDrawEmf
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__SGCDrawEmf; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__SGCDrawEmf, default initialized and not managed by a soap context
        virtual _ns1__SGCDrawEmf *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__SGCDrawEmf); }
      public:
        /// Constructor with initializations
        _ns1__SGCDrawEmf() : guid(), rel(), soap() { }
        virtual ~_ns1__SGCDrawEmf() { }
        /// Friend allocator used by soap_new__ns1__SGCDrawEmf(struct soap*, int)
        friend SOAP_FMAC1 _ns1__SGCDrawEmf * SOAP_FMAC2 soap_instantiate__ns1__SGCDrawEmf(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:667 */
#ifndef SOAP_TYPE__ns1__SGCDrawEmfResponse
#define SOAP_TYPE__ns1__SGCDrawEmfResponse (185)
/* complex XSD type 'ns1:SGCDrawEmfResponse': */
class SOAP_CMAC _ns1__SGCDrawEmfResponse {
      public:
        /// Optional element 'ns1:SGCDrawEmfResult' of XSD type 'xsd:string'
        char *SGCDrawEmfResult;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__SGCDrawEmfResponse
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__SGCDrawEmfResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__SGCDrawEmfResponse, default initialized and not managed by a soap context
        virtual _ns1__SGCDrawEmfResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__SGCDrawEmfResponse); }
      public:
        /// Constructor with initializations
        _ns1__SGCDrawEmfResponse() : SGCDrawEmfResult(), soap() { }
        virtual ~_ns1__SGCDrawEmfResponse() { }
        /// Friend allocator used by soap_new__ns1__SGCDrawEmfResponse(struct soap*, int)
        friend SOAP_FMAC1 _ns1__SGCDrawEmfResponse * SOAP_FMAC2 soap_instantiate__ns1__SGCDrawEmfResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:670 */
#ifndef SOAP_TYPE__ns1__GzGetTypeList
#define SOAP_TYPE__ns1__GzGetTypeList (186)
/* complex XSD type 'ns1:GzGetTypeList': */
class SOAP_CMAC _ns1__GzGetTypeList {
      public:
        /// Optional element 'ns1:tztype' of XSD type 'xsd:string'
        char *tztype;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__GzGetTypeList
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__GzGetTypeList; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__GzGetTypeList, default initialized and not managed by a soap context
        virtual _ns1__GzGetTypeList *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__GzGetTypeList); }
      public:
        /// Constructor with initializations
        _ns1__GzGetTypeList() : tztype(), soap() { }
        virtual ~_ns1__GzGetTypeList() { }
        /// Friend allocator used by soap_new__ns1__GzGetTypeList(struct soap*, int)
        friend SOAP_FMAC1 _ns1__GzGetTypeList * SOAP_FMAC2 soap_instantiate__ns1__GzGetTypeList(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:673 */
#ifndef SOAP_TYPE__ns1__GzGetTypeListResponse
#define SOAP_TYPE__ns1__GzGetTypeListResponse (187)
/* complex XSD type 'ns1:GzGetTypeListResponse': */
class SOAP_CMAC _ns1__GzGetTypeListResponse {
      public:
        /// Optional element 'ns1:GzGetTypeListResult' of XSD type 'xsd:string'
        char *GzGetTypeListResult;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__GzGetTypeListResponse
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__GzGetTypeListResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__GzGetTypeListResponse, default initialized and not managed by a soap context
        virtual _ns1__GzGetTypeListResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__GzGetTypeListResponse); }
      public:
        /// Constructor with initializations
        _ns1__GzGetTypeListResponse() : GzGetTypeListResult(), soap() { }
        virtual ~_ns1__GzGetTypeListResponse() { }
        /// Friend allocator used by soap_new__ns1__GzGetTypeListResponse(struct soap*, int)
        friend SOAP_FMAC1 _ns1__GzGetTypeListResponse * SOAP_FMAC2 soap_instantiate__ns1__GzGetTypeListResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:676 */
#ifndef SOAP_TYPE__ns1__GzGetDeviceStruct
#define SOAP_TYPE__ns1__GzGetDeviceStruct (188)
/* complex XSD type 'ns1:GzGetDeviceStruct': */
class SOAP_CMAC _ns1__GzGetDeviceStruct {
      public:
        /// Optional element 'ns1:tztype' of XSD type 'xsd:string'
        char *tztype;
        /// Optional element 'ns1:xb' of XSD type 'xsd:string'
        char *xb;
        /// Optional element 'ns1:station' of XSD type 'xsd:string'
        char *station;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__GzGetDeviceStruct
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__GzGetDeviceStruct; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__GzGetDeviceStruct, default initialized and not managed by a soap context
        virtual _ns1__GzGetDeviceStruct *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__GzGetDeviceStruct); }
      public:
        /// Constructor with initializations
        _ns1__GzGetDeviceStruct() : tztype(), xb(), station(), soap() { }
        virtual ~_ns1__GzGetDeviceStruct() { }
        /// Friend allocator used by soap_new__ns1__GzGetDeviceStruct(struct soap*, int)
        friend SOAP_FMAC1 _ns1__GzGetDeviceStruct * SOAP_FMAC2 soap_instantiate__ns1__GzGetDeviceStruct(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:679 */
#ifndef SOAP_TYPE__ns1__GzGetDeviceStructResponse
#define SOAP_TYPE__ns1__GzGetDeviceStructResponse (189)
/* complex XSD type 'ns1:GzGetDeviceStructResponse': */
class SOAP_CMAC _ns1__GzGetDeviceStructResponse {
      public:
        /// Optional element 'ns1:GzGetDeviceStructResult' of XSD type 'xsd:string'
        char *GzGetDeviceStructResult;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__GzGetDeviceStructResponse
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__GzGetDeviceStructResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__GzGetDeviceStructResponse, default initialized and not managed by a soap context
        virtual _ns1__GzGetDeviceStructResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__GzGetDeviceStructResponse); }
      public:
        /// Constructor with initializations
        _ns1__GzGetDeviceStructResponse() : GzGetDeviceStructResult(), soap() { }
        virtual ~_ns1__GzGetDeviceStructResponse() { }
        /// Friend allocator used by soap_new__ns1__GzGetDeviceStructResponse(struct soap*, int)
        friend SOAP_FMAC1 _ns1__GzGetDeviceStructResponse * SOAP_FMAC2 soap_instantiate__ns1__GzGetDeviceStructResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:682 */
#ifndef SOAP_TYPE__ns1__SaveMapFile
#define SOAP_TYPE__ns1__SaveMapFile (190)
/* complex XSD type 'ns1:SaveMapFile': */
class SOAP_CMAC _ns1__SaveMapFile {
      public:
        /// Optional element 'ns1:Lh' of XSD type 'xsd:string'
        char *Lh;
        /// Optional element 'ns1:mapid' of XSD type 'xsd:string'
        char *mapid;
        /// Optional element 'ns1:page' of XSD type 'xsd:string'
        char *page;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__SaveMapFile
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__SaveMapFile; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__SaveMapFile, default initialized and not managed by a soap context
        virtual _ns1__SaveMapFile *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__SaveMapFile); }
      public:
        /// Constructor with initializations
        _ns1__SaveMapFile() : Lh(), mapid(), page(), soap() { }
        virtual ~_ns1__SaveMapFile() { }
        /// Friend allocator used by soap_new__ns1__SaveMapFile(struct soap*, int)
        friend SOAP_FMAC1 _ns1__SaveMapFile * SOAP_FMAC2 soap_instantiate__ns1__SaveMapFile(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:685 */
#ifndef SOAP_TYPE__ns1__SaveMapFileResponse
#define SOAP_TYPE__ns1__SaveMapFileResponse (191)
/* complex XSD type 'ns1:SaveMapFileResponse': */
class SOAP_CMAC _ns1__SaveMapFileResponse {
      public:
        /// Optional element 'ns1:SaveMapFileResult' of XSD type 'xsd:string'
        char *SaveMapFileResult;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__SaveMapFileResponse
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__SaveMapFileResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__SaveMapFileResponse, default initialized and not managed by a soap context
        virtual _ns1__SaveMapFileResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__SaveMapFileResponse); }
      public:
        /// Constructor with initializations
        _ns1__SaveMapFileResponse() : SaveMapFileResult(), soap() { }
        virtual ~_ns1__SaveMapFileResponse() { }
        /// Friend allocator used by soap_new__ns1__SaveMapFileResponse(struct soap*, int)
        friend SOAP_FMAC1 _ns1__SaveMapFileResponse * SOAP_FMAC2 soap_instantiate__ns1__SaveMapFileResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:688 */
#ifndef SOAP_TYPE__ns1__SelectYjzhStation
#define SOAP_TYPE__ns1__SelectYjzhStation (192)
/* complex XSD type 'ns1:SelectYjzhStation': */
class SOAP_CMAC _ns1__SelectYjzhStation {
      public:
        /// Optional element 'ns1:xb' of XSD type 'xsd:string'
        char *xb;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__SelectYjzhStation
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__SelectYjzhStation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__SelectYjzhStation, default initialized and not managed by a soap context
        virtual _ns1__SelectYjzhStation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__SelectYjzhStation); }
      public:
        /// Constructor with initializations
        _ns1__SelectYjzhStation() : xb(), soap() { }
        virtual ~_ns1__SelectYjzhStation() { }
        /// Friend allocator used by soap_new__ns1__SelectYjzhStation(struct soap*, int)
        friend SOAP_FMAC1 _ns1__SelectYjzhStation * SOAP_FMAC2 soap_instantiate__ns1__SelectYjzhStation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:691 */
#ifndef SOAP_TYPE__ns1__SelectYjzhStationResponse
#define SOAP_TYPE__ns1__SelectYjzhStationResponse (193)
/* complex XSD type 'ns1:SelectYjzhStationResponse': */
class SOAP_CMAC _ns1__SelectYjzhStationResponse {
      public:
        /// Optional element 'ns1:SelectYjzhStationResult' of XSD type 'xsd:string'
        char *SelectYjzhStationResult;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__SelectYjzhStationResponse
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__SelectYjzhStationResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__SelectYjzhStationResponse, default initialized and not managed by a soap context
        virtual _ns1__SelectYjzhStationResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__SelectYjzhStationResponse); }
      public:
        /// Constructor with initializations
        _ns1__SelectYjzhStationResponse() : SelectYjzhStationResult(), soap() { }
        virtual ~_ns1__SelectYjzhStationResponse() { }
        /// Friend allocator used by soap_new__ns1__SelectYjzhStationResponse(struct soap*, int)
        friend SOAP_FMAC1 _ns1__SelectYjzhStationResponse * SOAP_FMAC2 soap_instantiate__ns1__SelectYjzhStationResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:694 */
#ifndef SOAP_TYPE__ns1__SelectYjzhDevice
#define SOAP_TYPE__ns1__SelectYjzhDevice (194)
/* complex XSD type 'ns1:SelectYjzhDevice': */
class SOAP_CMAC _ns1__SelectYjzhDevice {
      public:
        /// Optional element 'ns1:xb' of XSD type 'xsd:string'
        char *xb;
        /// Optional element 'ns1:station' of XSD type 'xsd:string'
        char *station;
        /// Optional element 'ns1:typeid' of XSD type 'xsd:string'
        char *typeid_;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__SelectYjzhDevice
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__SelectYjzhDevice; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__SelectYjzhDevice, default initialized and not managed by a soap context
        virtual _ns1__SelectYjzhDevice *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__SelectYjzhDevice); }
      public:
        /// Constructor with initializations
        _ns1__SelectYjzhDevice() : xb(), station(), typeid_(), soap() { }
        virtual ~_ns1__SelectYjzhDevice() { }
        /// Friend allocator used by soap_new__ns1__SelectYjzhDevice(struct soap*, int)
        friend SOAP_FMAC1 _ns1__SelectYjzhDevice * SOAP_FMAC2 soap_instantiate__ns1__SelectYjzhDevice(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:697 */
#ifndef SOAP_TYPE__ns1__SelectYjzhDeviceResponse
#define SOAP_TYPE__ns1__SelectYjzhDeviceResponse (195)
/* complex XSD type 'ns1:SelectYjzhDeviceResponse': */
class SOAP_CMAC _ns1__SelectYjzhDeviceResponse {
      public:
        /// Optional element 'ns1:SelectYjzhDeviceResult' of XSD type 'xsd:string'
        char *SelectYjzhDeviceResult;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__SelectYjzhDeviceResponse
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__SelectYjzhDeviceResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__SelectYjzhDeviceResponse, default initialized and not managed by a soap context
        virtual _ns1__SelectYjzhDeviceResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__SelectYjzhDeviceResponse); }
      public:
        /// Constructor with initializations
        _ns1__SelectYjzhDeviceResponse() : SelectYjzhDeviceResult(), soap() { }
        virtual ~_ns1__SelectYjzhDeviceResponse() { }
        /// Friend allocator used by soap_new__ns1__SelectYjzhDeviceResponse(struct soap*, int)
        friend SOAP_FMAC1 _ns1__SelectYjzhDeviceResponse * SOAP_FMAC2 soap_instantiate__ns1__SelectYjzhDeviceResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:700 */
#ifndef SOAP_TYPE__ns1__GetYjzhZskAlarmTypes
#define SOAP_TYPE__ns1__GetYjzhZskAlarmTypes (196)
/* complex XSD type 'ns1:GetYjzhZskAlarmTypes': */
class SOAP_CMAC _ns1__GetYjzhZskAlarmTypes {
      public:
        /// Optional element 'ns1:xb' of XSD type 'xsd:string'
        char *xb;
        /// Optional element 'ns1:cz' of XSD type 'xsd:string'
        char *cz;
        /// Optional element 'ns1:devtypeid' of XSD type 'xsd:string'
        char *devtypeid;
        /// Optional element 'ns1:devname' of XSD type 'xsd:string'
        char *devname;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__GetYjzhZskAlarmTypes
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__GetYjzhZskAlarmTypes; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__GetYjzhZskAlarmTypes, default initialized and not managed by a soap context
        virtual _ns1__GetYjzhZskAlarmTypes *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__GetYjzhZskAlarmTypes); }
      public:
        /// Constructor with initializations
        _ns1__GetYjzhZskAlarmTypes() : xb(), cz(), devtypeid(), devname(), soap() { }
        virtual ~_ns1__GetYjzhZskAlarmTypes() { }
        /// Friend allocator used by soap_new__ns1__GetYjzhZskAlarmTypes(struct soap*, int)
        friend SOAP_FMAC1 _ns1__GetYjzhZskAlarmTypes * SOAP_FMAC2 soap_instantiate__ns1__GetYjzhZskAlarmTypes(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:703 */
#ifndef SOAP_TYPE__ns1__GetYjzhZskAlarmTypesResponse
#define SOAP_TYPE__ns1__GetYjzhZskAlarmTypesResponse (197)
/* complex XSD type 'ns1:GetYjzhZskAlarmTypesResponse': */
class SOAP_CMAC _ns1__GetYjzhZskAlarmTypesResponse {
      public:
        /// Optional element 'ns1:GetYjzhZskAlarmTypesResult' of XSD type 'xsd:string'
        char *GetYjzhZskAlarmTypesResult;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__GetYjzhZskAlarmTypesResponse
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__GetYjzhZskAlarmTypesResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__GetYjzhZskAlarmTypesResponse, default initialized and not managed by a soap context
        virtual _ns1__GetYjzhZskAlarmTypesResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__GetYjzhZskAlarmTypesResponse); }
      public:
        /// Constructor with initializations
        _ns1__GetYjzhZskAlarmTypesResponse() : GetYjzhZskAlarmTypesResult(), soap() { }
        virtual ~_ns1__GetYjzhZskAlarmTypesResponse() { }
        /// Friend allocator used by soap_new__ns1__GetYjzhZskAlarmTypesResponse(struct soap*, int)
        friend SOAP_FMAC1 _ns1__GetYjzhZskAlarmTypesResponse * SOAP_FMAC2 soap_instantiate__ns1__GetYjzhZskAlarmTypesResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:5224 */
#ifndef SOAP_TYPE___ns1__GetYjzhZskGzFlow
#define SOAP_TYPE___ns1__GetYjzhZskGzFlow (206)
/* Wrapper: */
struct SOAP_CMAC __ns1__GetYjzhZskGzFlow {
      public:
        /** Optional element 'ns1:GetYjzhZskGzFlow' of XSD type 'ns1:GetYjzhZskGzFlow' */
        _ns1__GetYjzhZskGzFlow *ns1__GetYjzhZskGzFlow;
      public:
        /** Return unique type id SOAP_TYPE___ns1__GetYjzhZskGzFlow */
        long soap_type() const { return SOAP_TYPE___ns1__GetYjzhZskGzFlow; }
        /** Constructor with member initializations */
        __ns1__GetYjzhZskGzFlow() : ns1__GetYjzhZskGzFlow() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__GetYjzhZskGzFlow * SOAP_FMAC2 soap_instantiate___ns1__GetYjzhZskGzFlow(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:5295 */
#ifndef SOAP_TYPE___ns1__GetYjzhZskOtherFlowChartList
#define SOAP_TYPE___ns1__GetYjzhZskOtherFlowChartList (210)
/* Wrapper: */
struct SOAP_CMAC __ns1__GetYjzhZskOtherFlowChartList {
      public:
        /** Optional element 'ns1:GetYjzhZskOtherFlowChartList' of XSD type 'ns1:GetYjzhZskOtherFlowChartList' */
        _ns1__GetYjzhZskOtherFlowChartList *ns1__GetYjzhZskOtherFlowChartList;
      public:
        /** Return unique type id SOAP_TYPE___ns1__GetYjzhZskOtherFlowChartList */
        long soap_type() const { return SOAP_TYPE___ns1__GetYjzhZskOtherFlowChartList; }
        /** Constructor with member initializations */
        __ns1__GetYjzhZskOtherFlowChartList() : ns1__GetYjzhZskOtherFlowChartList() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__GetYjzhZskOtherFlowChartList * SOAP_FMAC2 soap_instantiate___ns1__GetYjzhZskOtherFlowChartList(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:5366 */
#ifndef SOAP_TYPE___ns1__GetYjzhZskDevFlowChartList
#define SOAP_TYPE___ns1__GetYjzhZskDevFlowChartList (214)
/* Wrapper: */
struct SOAP_CMAC __ns1__GetYjzhZskDevFlowChartList {
      public:
        /** Optional element 'ns1:GetYjzhZskDevFlowChartList' of XSD type 'ns1:GetYjzhZskDevFlowChartList' */
        _ns1__GetYjzhZskDevFlowChartList *ns1__GetYjzhZskDevFlowChartList;
      public:
        /** Return unique type id SOAP_TYPE___ns1__GetYjzhZskDevFlowChartList */
        long soap_type() const { return SOAP_TYPE___ns1__GetYjzhZskDevFlowChartList; }
        /** Constructor with member initializations */
        __ns1__GetYjzhZskDevFlowChartList() : ns1__GetYjzhZskDevFlowChartList() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__GetYjzhZskDevFlowChartList * SOAP_FMAC2 soap_instantiate___ns1__GetYjzhZskDevFlowChartList(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:5437 */
#ifndef SOAP_TYPE___ns1__GetPropList
#define SOAP_TYPE___ns1__GetPropList (218)
/* Wrapper: */
struct SOAP_CMAC __ns1__GetPropList {
      public:
        /** Optional element 'ns1:GetPropList' of XSD type 'ns1:GetPropList' */
        _ns1__GetPropList *ns1__GetPropList;
      public:
        /** Return unique type id SOAP_TYPE___ns1__GetPropList */
        long soap_type() const { return SOAP_TYPE___ns1__GetPropList; }
        /** Constructor with member initializations */
        __ns1__GetPropList() : ns1__GetPropList() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__GetPropList * SOAP_FMAC2 soap_instantiate___ns1__GetPropList(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:5508 */
#ifndef SOAP_TYPE___ns1__GetPropName
#define SOAP_TYPE___ns1__GetPropName (222)
/* Wrapper: */
struct SOAP_CMAC __ns1__GetPropName {
      public:
        /** Optional element 'ns1:GetPropName' of XSD type 'ns1:GetPropName' */
        _ns1__GetPropName *ns1__GetPropName;
      public:
        /** Return unique type id SOAP_TYPE___ns1__GetPropName */
        long soap_type() const { return SOAP_TYPE___ns1__GetPropName; }
        /** Constructor with member initializations */
        __ns1__GetPropName() : ns1__GetPropName() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__GetPropName * SOAP_FMAC2 soap_instantiate___ns1__GetPropName(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:5579 */
#ifndef SOAP_TYPE___ns1__CheckLoginUser
#define SOAP_TYPE___ns1__CheckLoginUser (226)
/* Wrapper: */
struct SOAP_CMAC __ns1__CheckLoginUser {
      public:
        /** Optional element 'ns1:CheckLoginUser' of XSD type 'ns1:CheckLoginUser' */
        _ns1__CheckLoginUser *ns1__CheckLoginUser;
      public:
        /** Return unique type id SOAP_TYPE___ns1__CheckLoginUser */
        long soap_type() const { return SOAP_TYPE___ns1__CheckLoginUser; }
        /** Constructor with member initializations */
        __ns1__CheckLoginUser() : ns1__CheckLoginUser() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__CheckLoginUser * SOAP_FMAC2 soap_instantiate___ns1__CheckLoginUser(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:5650 */
#ifndef SOAP_TYPE___ns1__GetRyUnit
#define SOAP_TYPE___ns1__GetRyUnit (230)
/* Wrapper: */
struct SOAP_CMAC __ns1__GetRyUnit {
      public:
        /** Optional element 'ns1:GetRyUnit' of XSD type 'ns1:GetRyUnit' */
        _ns1__GetRyUnit *ns1__GetRyUnit;
      public:
        /** Return unique type id SOAP_TYPE___ns1__GetRyUnit */
        long soap_type() const { return SOAP_TYPE___ns1__GetRyUnit; }
        /** Constructor with member initializations */
        __ns1__GetRyUnit() : ns1__GetRyUnit() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__GetRyUnit * SOAP_FMAC2 soap_instantiate___ns1__GetRyUnit(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:5721 */
#ifndef SOAP_TYPE___ns1__GetDevCode
#define SOAP_TYPE___ns1__GetDevCode (234)
/* Wrapper: */
struct SOAP_CMAC __ns1__GetDevCode {
      public:
        /** Optional element 'ns1:GetDevCode' of XSD type 'ns1:GetDevCode' */
        _ns1__GetDevCode *ns1__GetDevCode;
      public:
        /** Return unique type id SOAP_TYPE___ns1__GetDevCode */
        long soap_type() const { return SOAP_TYPE___ns1__GetDevCode; }
        /** Constructor with member initializations */
        __ns1__GetDevCode() : ns1__GetDevCode() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__GetDevCode * SOAP_FMAC2 soap_instantiate___ns1__GetDevCode(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:5792 */
#ifndef SOAP_TYPE___ns1__CheckDevCode
#define SOAP_TYPE___ns1__CheckDevCode (238)
/* Wrapper: */
struct SOAP_CMAC __ns1__CheckDevCode {
      public:
        /** Optional element 'ns1:CheckDevCode' of XSD type 'ns1:CheckDevCode' */
        _ns1__CheckDevCode *ns1__CheckDevCode;
      public:
        /** Return unique type id SOAP_TYPE___ns1__CheckDevCode */
        long soap_type() const { return SOAP_TYPE___ns1__CheckDevCode; }
        /** Constructor with member initializations */
        __ns1__CheckDevCode() : ns1__CheckDevCode() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__CheckDevCode * SOAP_FMAC2 soap_instantiate___ns1__CheckDevCode(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:5863 */
#ifndef SOAP_TYPE___ns1__HelloWorld
#define SOAP_TYPE___ns1__HelloWorld (242)
/* Wrapper: */
struct SOAP_CMAC __ns1__HelloWorld {
      public:
        /** Optional element 'ns1:HelloWorld' of XSD type 'ns1:HelloWorld' */
        _ns1__HelloWorld *ns1__HelloWorld;
      public:
        /** Return unique type id SOAP_TYPE___ns1__HelloWorld */
        long soap_type() const { return SOAP_TYPE___ns1__HelloWorld; }
        /** Constructor with member initializations */
        __ns1__HelloWorld() : ns1__HelloWorld() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__HelloWorld * SOAP_FMAC2 soap_instantiate___ns1__HelloWorld(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:5934 */
#ifndef SOAP_TYPE___ns1__GetDBString
#define SOAP_TYPE___ns1__GetDBString (246)
/* Wrapper: */
struct SOAP_CMAC __ns1__GetDBString {
      public:
        /** Optional element 'ns1:GetDBString' of XSD type 'ns1:GetDBString' */
        _ns1__GetDBString *ns1__GetDBString;
      public:
        /** Return unique type id SOAP_TYPE___ns1__GetDBString */
        long soap_type() const { return SOAP_TYPE___ns1__GetDBString; }
        /** Constructor with member initializations */
        __ns1__GetDBString() : ns1__GetDBString() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__GetDBString * SOAP_FMAC2 soap_instantiate___ns1__GetDBString(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:6005 */
#ifndef SOAP_TYPE___ns1__QueryData
#define SOAP_TYPE___ns1__QueryData (250)
/* Wrapper: */
struct SOAP_CMAC __ns1__QueryData {
      public:
        /** Optional element 'ns1:QueryData' of XSD type 'ns1:QueryData' */
        _ns1__QueryData *ns1__QueryData;
      public:
        /** Return unique type id SOAP_TYPE___ns1__QueryData */
        long soap_type() const { return SOAP_TYPE___ns1__QueryData; }
        /** Constructor with member initializations */
        __ns1__QueryData() : ns1__QueryData() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__QueryData * SOAP_FMAC2 soap_instantiate___ns1__QueryData(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:6076 */
#ifndef SOAP_TYPE___ns1__QueryDataCount
#define SOAP_TYPE___ns1__QueryDataCount (254)
/* Wrapper: */
struct SOAP_CMAC __ns1__QueryDataCount {
      public:
        /** Optional element 'ns1:QueryDataCount' of XSD type 'ns1:QueryDataCount' */
        _ns1__QueryDataCount *ns1__QueryDataCount;
      public:
        /** Return unique type id SOAP_TYPE___ns1__QueryDataCount */
        long soap_type() const { return SOAP_TYPE___ns1__QueryDataCount; }
        /** Constructor with member initializations */
        __ns1__QueryDataCount() : ns1__QueryDataCount() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__QueryDataCount * SOAP_FMAC2 soap_instantiate___ns1__QueryDataCount(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:6147 */
#ifndef SOAP_TYPE___ns1__ExecuteSql
#define SOAP_TYPE___ns1__ExecuteSql (258)
/* Wrapper: */
struct SOAP_CMAC __ns1__ExecuteSql {
      public:
        /** Optional element 'ns1:ExecuteSql' of XSD type 'ns1:ExecuteSql' */
        _ns1__ExecuteSql *ns1__ExecuteSql;
      public:
        /** Return unique type id SOAP_TYPE___ns1__ExecuteSql */
        long soap_type() const { return SOAP_TYPE___ns1__ExecuteSql; }
        /** Constructor with member initializations */
        __ns1__ExecuteSql() : ns1__ExecuteSql() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__ExecuteSql * SOAP_FMAC2 soap_instantiate___ns1__ExecuteSql(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:6218 */
#ifndef SOAP_TYPE___ns1__SaveData
#define SOAP_TYPE___ns1__SaveData (262)
/* Wrapper: */
struct SOAP_CMAC __ns1__SaveData {
      public:
        /** Optional element 'ns1:SaveData' of XSD type 'ns1:SaveData' */
        _ns1__SaveData *ns1__SaveData;
      public:
        /** Return unique type id SOAP_TYPE___ns1__SaveData */
        long soap_type() const { return SOAP_TYPE___ns1__SaveData; }
        /** Constructor with member initializations */
        __ns1__SaveData() : ns1__SaveData() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__SaveData * SOAP_FMAC2 soap_instantiate___ns1__SaveData(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:6289 */
#ifndef SOAP_TYPE___ns1__SaveFileData
#define SOAP_TYPE___ns1__SaveFileData (266)
/* Wrapper: */
struct SOAP_CMAC __ns1__SaveFileData {
      public:
        /** Optional element 'ns1:SaveFileData' of XSD type 'ns1:SaveFileData' */
        _ns1__SaveFileData *ns1__SaveFileData;
      public:
        /** Return unique type id SOAP_TYPE___ns1__SaveFileData */
        long soap_type() const { return SOAP_TYPE___ns1__SaveFileData; }
        /** Constructor with member initializations */
        __ns1__SaveFileData() : ns1__SaveFileData() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__SaveFileData * SOAP_FMAC2 soap_instantiate___ns1__SaveFileData(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:6360 */
#ifndef SOAP_TYPE___ns1__DownPic
#define SOAP_TYPE___ns1__DownPic (270)
/* Wrapper: */
struct SOAP_CMAC __ns1__DownPic {
      public:
        /** Optional element 'ns1:DownPic' of XSD type 'ns1:DownPic' */
        _ns1__DownPic *ns1__DownPic;
      public:
        /** Return unique type id SOAP_TYPE___ns1__DownPic */
        long soap_type() const { return SOAP_TYPE___ns1__DownPic; }
        /** Constructor with member initializations */
        __ns1__DownPic() : ns1__DownPic() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__DownPic * SOAP_FMAC2 soap_instantiate___ns1__DownPic(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:6431 */
#ifndef SOAP_TYPE___ns1__DownAllPic
#define SOAP_TYPE___ns1__DownAllPic (274)
/* Wrapper: */
struct SOAP_CMAC __ns1__DownAllPic {
      public:
        /** Optional element 'ns1:DownAllPic' of XSD type 'ns1:DownAllPic' */
        _ns1__DownAllPic *ns1__DownAllPic;
      public:
        /** Return unique type id SOAP_TYPE___ns1__DownAllPic */
        long soap_type() const { return SOAP_TYPE___ns1__DownAllPic; }
        /** Constructor with member initializations */
        __ns1__DownAllPic() : ns1__DownAllPic() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__DownAllPic * SOAP_FMAC2 soap_instantiate___ns1__DownAllPic(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:6502 */
#ifndef SOAP_TYPE___ns1__GetGxdataUpTime
#define SOAP_TYPE___ns1__GetGxdataUpTime (278)
/* Wrapper: */
struct SOAP_CMAC __ns1__GetGxdataUpTime {
      public:
        /** Optional element 'ns1:GetGxdataUpTime' of XSD type 'ns1:GetGxdataUpTime' */
        _ns1__GetGxdataUpTime *ns1__GetGxdataUpTime;
      public:
        /** Return unique type id SOAP_TYPE___ns1__GetGxdataUpTime */
        long soap_type() const { return SOAP_TYPE___ns1__GetGxdataUpTime; }
        /** Constructor with member initializations */
        __ns1__GetGxdataUpTime() : ns1__GetGxdataUpTime() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__GetGxdataUpTime * SOAP_FMAC2 soap_instantiate___ns1__GetGxdataUpTime(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:6573 */
#ifndef SOAP_TYPE___ns1__signedUserInfo
#define SOAP_TYPE___ns1__signedUserInfo (282)
/* Wrapper: */
struct SOAP_CMAC __ns1__signedUserInfo {
      public:
        /** Optional element 'ns1:signedUserInfo' of XSD type 'ns1:signedUserInfo' */
        _ns1__signedUserInfo *ns1__signedUserInfo;
      public:
        /** Return unique type id SOAP_TYPE___ns1__signedUserInfo */
        long soap_type() const { return SOAP_TYPE___ns1__signedUserInfo; }
        /** Constructor with member initializations */
        __ns1__signedUserInfo() : ns1__signedUserInfo() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__signedUserInfo * SOAP_FMAC2 soap_instantiate___ns1__signedUserInfo(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:6644 */
#ifndef SOAP_TYPE___ns1__GetOsDateTime
#define SOAP_TYPE___ns1__GetOsDateTime (286)
/* Wrapper: */
struct SOAP_CMAC __ns1__GetOsDateTime {
      public:
        /** Optional element 'ns1:GetOsDateTime' of XSD type 'ns1:GetOsDateTime' */
        _ns1__GetOsDateTime *ns1__GetOsDateTime;
      public:
        /** Return unique type id SOAP_TYPE___ns1__GetOsDateTime */
        long soap_type() const { return SOAP_TYPE___ns1__GetOsDateTime; }
        /** Constructor with member initializations */
        __ns1__GetOsDateTime() : ns1__GetOsDateTime() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__GetOsDateTime * SOAP_FMAC2 soap_instantiate___ns1__GetOsDateTime(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:6715 */
#ifndef SOAP_TYPE___ns1__QueryPhotobw
#define SOAP_TYPE___ns1__QueryPhotobw (290)
/* Wrapper: */
struct SOAP_CMAC __ns1__QueryPhotobw {
      public:
        /** Optional element 'ns1:QueryPhotobw' of XSD type 'ns1:QueryPhotobw' */
        _ns1__QueryPhotobw *ns1__QueryPhotobw;
      public:
        /** Return unique type id SOAP_TYPE___ns1__QueryPhotobw */
        long soap_type() const { return SOAP_TYPE___ns1__QueryPhotobw; }
        /** Constructor with member initializations */
        __ns1__QueryPhotobw() : ns1__QueryPhotobw() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__QueryPhotobw * SOAP_FMAC2 soap_instantiate___ns1__QueryPhotobw(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:6786 */
#ifndef SOAP_TYPE___ns1__TcdQuery
#define SOAP_TYPE___ns1__TcdQuery (294)
/* Wrapper: */
struct SOAP_CMAC __ns1__TcdQuery {
      public:
        /** Optional element 'ns1:TcdQuery' of XSD type 'ns1:TcdQuery' */
        _ns1__TcdQuery *ns1__TcdQuery;
      public:
        /** Return unique type id SOAP_TYPE___ns1__TcdQuery */
        long soap_type() const { return SOAP_TYPE___ns1__TcdQuery; }
        /** Constructor with member initializations */
        __ns1__TcdQuery() : ns1__TcdQuery() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__TcdQuery * SOAP_FMAC2 soap_instantiate___ns1__TcdQuery(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:6857 */
#ifndef SOAP_TYPE___ns1__TcdSendup
#define SOAP_TYPE___ns1__TcdSendup (298)
/* Wrapper: */
struct SOAP_CMAC __ns1__TcdSendup {
      public:
        /** Optional element 'ns1:TcdSendup' of XSD type 'ns1:TcdSendup' */
        _ns1__TcdSendup *ns1__TcdSendup;
      public:
        /** Return unique type id SOAP_TYPE___ns1__TcdSendup */
        long soap_type() const { return SOAP_TYPE___ns1__TcdSendup; }
        /** Constructor with member initializations */
        __ns1__TcdSendup() : ns1__TcdSendup() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__TcdSendup * SOAP_FMAC2 soap_instantiate___ns1__TcdSendup(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:6928 */
#ifndef SOAP_TYPE___ns1__UpLoadData
#define SOAP_TYPE___ns1__UpLoadData (302)
/* Wrapper: */
struct SOAP_CMAC __ns1__UpLoadData {
      public:
        /** Optional element 'ns1:UpLoadData' of XSD type 'ns1:UpLoadData' */
        _ns1__UpLoadData *ns1__UpLoadData;
      public:
        /** Return unique type id SOAP_TYPE___ns1__UpLoadData */
        long soap_type() const { return SOAP_TYPE___ns1__UpLoadData; }
        /** Constructor with member initializations */
        __ns1__UpLoadData() : ns1__UpLoadData() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__UpLoadData * SOAP_FMAC2 soap_instantiate___ns1__UpLoadData(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:6999 */
#ifndef SOAP_TYPE___ns1__ExecuteSqlForColb
#define SOAP_TYPE___ns1__ExecuteSqlForColb (306)
/* Wrapper: */
struct SOAP_CMAC __ns1__ExecuteSqlForColb {
      public:
        /** Optional element 'ns1:ExecuteSqlForColb' of XSD type 'ns1:ExecuteSqlForColb' */
        _ns1__ExecuteSqlForColb *ns1__ExecuteSqlForColb;
      public:
        /** Return unique type id SOAP_TYPE___ns1__ExecuteSqlForColb */
        long soap_type() const { return SOAP_TYPE___ns1__ExecuteSqlForColb; }
        /** Constructor with member initializations */
        __ns1__ExecuteSqlForColb() : ns1__ExecuteSqlForColb() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__ExecuteSqlForColb * SOAP_FMAC2 soap_instantiate___ns1__ExecuteSqlForColb(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:7070 */
#ifndef SOAP_TYPE___ns1__GetXHYDGLXTupdater
#define SOAP_TYPE___ns1__GetXHYDGLXTupdater (310)
/* Wrapper: */
struct SOAP_CMAC __ns1__GetXHYDGLXTupdater {
      public:
        /** Optional element 'ns1:GetXHYDGLXTupdater' of XSD type 'ns1:GetXHYDGLXTupdater' */
        _ns1__GetXHYDGLXTupdater *ns1__GetXHYDGLXTupdater;
      public:
        /** Return unique type id SOAP_TYPE___ns1__GetXHYDGLXTupdater */
        long soap_type() const { return SOAP_TYPE___ns1__GetXHYDGLXTupdater; }
        /** Constructor with member initializations */
        __ns1__GetXHYDGLXTupdater() : ns1__GetXHYDGLXTupdater() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__GetXHYDGLXTupdater * SOAP_FMAC2 soap_instantiate___ns1__GetXHYDGLXTupdater(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:7141 */
#ifndef SOAP_TYPE___ns1__GetAPVupdater
#define SOAP_TYPE___ns1__GetAPVupdater (314)
/* Wrapper: */
struct SOAP_CMAC __ns1__GetAPVupdater {
      public:
        /** Optional element 'ns1:GetAPVupdater' of XSD type 'ns1:GetAPVupdater' */
        _ns1__GetAPVupdater *ns1__GetAPVupdater;
      public:
        /** Return unique type id SOAP_TYPE___ns1__GetAPVupdater */
        long soap_type() const { return SOAP_TYPE___ns1__GetAPVupdater; }
        /** Constructor with member initializations */
        __ns1__GetAPVupdater() : ns1__GetAPVupdater() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__GetAPVupdater * SOAP_FMAC2 soap_instantiate___ns1__GetAPVupdater(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:7212 */
#ifndef SOAP_TYPE___ns1__UpLoadFile
#define SOAP_TYPE___ns1__UpLoadFile (318)
/* Wrapper: */
struct SOAP_CMAC __ns1__UpLoadFile {
      public:
        /** Optional element 'ns1:UpLoadFile' of XSD type 'ns1:UpLoadFile' */
        _ns1__UpLoadFile *ns1__UpLoadFile;
      public:
        /** Return unique type id SOAP_TYPE___ns1__UpLoadFile */
        long soap_type() const { return SOAP_TYPE___ns1__UpLoadFile; }
        /** Constructor with member initializations */
        __ns1__UpLoadFile() : ns1__UpLoadFile() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__UpLoadFile * SOAP_FMAC2 soap_instantiate___ns1__UpLoadFile(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:7283 */
#ifndef SOAP_TYPE___ns1__upPic
#define SOAP_TYPE___ns1__upPic (322)
/* Wrapper: */
struct SOAP_CMAC __ns1__upPic {
      public:
        /** Optional element 'ns1:upPic' of XSD type 'ns1:upPic' */
        _ns1__upPic *ns1__upPic;
      public:
        /** Return unique type id SOAP_TYPE___ns1__upPic */
        long soap_type() const { return SOAP_TYPE___ns1__upPic; }
        /** Constructor with member initializations */
        __ns1__upPic() : ns1__upPic() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__upPic * SOAP_FMAC2 soap_instantiate___ns1__upPic(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:7354 */
#ifndef SOAP_TYPE___ns1__DownloadPic
#define SOAP_TYPE___ns1__DownloadPic (326)
/* Wrapper: */
struct SOAP_CMAC __ns1__DownloadPic {
      public:
        /** Optional element 'ns1:DownloadPic' of XSD type 'ns1:DownloadPic' */
        _ns1__DownloadPic *ns1__DownloadPic;
      public:
        /** Return unique type id SOAP_TYPE___ns1__DownloadPic */
        long soap_type() const { return SOAP_TYPE___ns1__DownloadPic; }
        /** Constructor with member initializations */
        __ns1__DownloadPic() : ns1__DownloadPic() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__DownloadPic * SOAP_FMAC2 soap_instantiate___ns1__DownloadPic(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:7425 */
#ifndef SOAP_TYPE___ns1__GetPicNames
#define SOAP_TYPE___ns1__GetPicNames (330)
/* Wrapper: */
struct SOAP_CMAC __ns1__GetPicNames {
      public:
        /** Optional element 'ns1:GetPicNames' of XSD type 'ns1:GetPicNames' */
        _ns1__GetPicNames *ns1__GetPicNames;
      public:
        /** Return unique type id SOAP_TYPE___ns1__GetPicNames */
        long soap_type() const { return SOAP_TYPE___ns1__GetPicNames; }
        /** Constructor with member initializations */
        __ns1__GetPicNames() : ns1__GetPicNames() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__GetPicNames * SOAP_FMAC2 soap_instantiate___ns1__GetPicNames(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:7496 */
#ifndef SOAP_TYPE___ns1__GetDwInfo
#define SOAP_TYPE___ns1__GetDwInfo (334)
/* Wrapper: */
struct SOAP_CMAC __ns1__GetDwInfo {
      public:
        /** Optional element 'ns1:GetDwInfo' of XSD type 'ns1:GetDwInfo' */
        _ns1__GetDwInfo *ns1__GetDwInfo;
      public:
        /** Return unique type id SOAP_TYPE___ns1__GetDwInfo */
        long soap_type() const { return SOAP_TYPE___ns1__GetDwInfo; }
        /** Constructor with member initializations */
        __ns1__GetDwInfo() : ns1__GetDwInfo() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__GetDwInfo * SOAP_FMAC2 soap_instantiate___ns1__GetDwInfo(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:7567 */
#ifndef SOAP_TYPE___ns1__GetDwPic
#define SOAP_TYPE___ns1__GetDwPic (338)
/* Wrapper: */
struct SOAP_CMAC __ns1__GetDwPic {
      public:
        /** Optional element 'ns1:GetDwPic' of XSD type 'ns1:GetDwPic' */
        _ns1__GetDwPic *ns1__GetDwPic;
      public:
        /** Return unique type id SOAP_TYPE___ns1__GetDwPic */
        long soap_type() const { return SOAP_TYPE___ns1__GetDwPic; }
        /** Constructor with member initializations */
        __ns1__GetDwPic() : ns1__GetDwPic() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__GetDwPic * SOAP_FMAC2 soap_instantiate___ns1__GetDwPic(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:7638 */
#ifndef SOAP_TYPE___ns1__GetDeviceXj
#define SOAP_TYPE___ns1__GetDeviceXj (342)
/* Wrapper: */
struct SOAP_CMAC __ns1__GetDeviceXj {
      public:
        /** Optional element 'ns1:GetDeviceXj' of XSD type 'ns1:GetDeviceXj' */
        _ns1__GetDeviceXj *ns1__GetDeviceXj;
      public:
        /** Return unique type id SOAP_TYPE___ns1__GetDeviceXj */
        long soap_type() const { return SOAP_TYPE___ns1__GetDeviceXj; }
        /** Constructor with member initializations */
        __ns1__GetDeviceXj() : ns1__GetDeviceXj() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__GetDeviceXj * SOAP_FMAC2 soap_instantiate___ns1__GetDeviceXj(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:7709 */
#ifndef SOAP_TYPE___ns1__GetJxData
#define SOAP_TYPE___ns1__GetJxData (346)
/* Wrapper: */
struct SOAP_CMAC __ns1__GetJxData {
      public:
        /** Optional element 'ns1:GetJxData' of XSD type 'ns1:GetJxData' */
        _ns1__GetJxData *ns1__GetJxData;
      public:
        /** Return unique type id SOAP_TYPE___ns1__GetJxData */
        long soap_type() const { return SOAP_TYPE___ns1__GetJxData; }
        /** Constructor with member initializations */
        __ns1__GetJxData() : ns1__GetJxData() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__GetJxData * SOAP_FMAC2 soap_instantiate___ns1__GetJxData(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:7780 */
#ifndef SOAP_TYPE___ns1__GetStationJxData
#define SOAP_TYPE___ns1__GetStationJxData (350)
/* Wrapper: */
struct SOAP_CMAC __ns1__GetStationJxData {
      public:
        /** Optional element 'ns1:GetStationJxData' of XSD type 'ns1:GetStationJxData' */
        _ns1__GetStationJxData *ns1__GetStationJxData;
      public:
        /** Return unique type id SOAP_TYPE___ns1__GetStationJxData */
        long soap_type() const { return SOAP_TYPE___ns1__GetStationJxData; }
        /** Constructor with member initializations */
        __ns1__GetStationJxData() : ns1__GetStationJxData() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__GetStationJxData * SOAP_FMAC2 soap_instantiate___ns1__GetStationJxData(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:7851 */
#ifndef SOAP_TYPE___ns1__GetJxPic
#define SOAP_TYPE___ns1__GetJxPic (354)
/* Wrapper: */
struct SOAP_CMAC __ns1__GetJxPic {
      public:
        /** Optional element 'ns1:GetJxPic' of XSD type 'ns1:GetJxPic' */
        _ns1__GetJxPic *ns1__GetJxPic;
      public:
        /** Return unique type id SOAP_TYPE___ns1__GetJxPic */
        long soap_type() const { return SOAP_TYPE___ns1__GetJxPic; }
        /** Constructor with member initializations */
        __ns1__GetJxPic() : ns1__GetJxPic() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__GetJxPic * SOAP_FMAC2 soap_instantiate___ns1__GetJxPic(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:7923 */
#ifndef SOAP_TYPE___ns1__GetDevPic
#define SOAP_TYPE___ns1__GetDevPic (358)
/* Wrapper: */
struct SOAP_CMAC __ns1__GetDevPic {
      public:
        /** Optional element 'ns1:GetDevPic' of XSD type 'ns1:GetDevPic' */
        _ns1__GetDevPic *ns1__GetDevPic;
      public:
        /** Return unique type id SOAP_TYPE___ns1__GetDevPic */
        long soap_type() const { return SOAP_TYPE___ns1__GetDevPic; }
        /** Constructor with member initializations */
        __ns1__GetDevPic() : ns1__GetDevPic() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__GetDevPic * SOAP_FMAC2 soap_instantiate___ns1__GetDevPic(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:7994 */
#ifndef SOAP_TYPE___ns1__GetBgImg
#define SOAP_TYPE___ns1__GetBgImg (362)
/* Wrapper: */
struct SOAP_CMAC __ns1__GetBgImg {
      public:
        /** Optional element 'ns1:GetBgImg' of XSD type 'ns1:GetBgImg' */
        _ns1__GetBgImg *ns1__GetBgImg;
      public:
        /** Return unique type id SOAP_TYPE___ns1__GetBgImg */
        long soap_type() const { return SOAP_TYPE___ns1__GetBgImg; }
        /** Constructor with member initializations */
        __ns1__GetBgImg() : ns1__GetBgImg() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__GetBgImg * SOAP_FMAC2 soap_instantiate___ns1__GetBgImg(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:8065 */
#ifndef SOAP_TYPE___ns1__GetDcsData
#define SOAP_TYPE___ns1__GetDcsData (366)
/* Wrapper: */
struct SOAP_CMAC __ns1__GetDcsData {
      public:
        /** Optional element 'ns1:GetDcsData' of XSD type 'ns1:GetDcsData' */
        _ns1__GetDcsData *ns1__GetDcsData;
      public:
        /** Return unique type id SOAP_TYPE___ns1__GetDcsData */
        long soap_type() const { return SOAP_TYPE___ns1__GetDcsData; }
        /** Constructor with member initializations */
        __ns1__GetDcsData() : ns1__GetDcsData() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__GetDcsData * SOAP_FMAC2 soap_instantiate___ns1__GetDcsData(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:8136 */
#ifndef SOAP_TYPE___ns1__DownLoadMobGPSData
#define SOAP_TYPE___ns1__DownLoadMobGPSData (370)
/* Wrapper: */
struct SOAP_CMAC __ns1__DownLoadMobGPSData {
      public:
        /** Optional element 'ns1:DownLoadMobGPSData' of XSD type 'ns1:DownLoadMobGPSData' */
        _ns1__DownLoadMobGPSData *ns1__DownLoadMobGPSData;
      public:
        /** Return unique type id SOAP_TYPE___ns1__DownLoadMobGPSData */
        long soap_type() const { return SOAP_TYPE___ns1__DownLoadMobGPSData; }
        /** Constructor with member initializations */
        __ns1__DownLoadMobGPSData() : ns1__DownLoadMobGPSData() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__DownLoadMobGPSData * SOAP_FMAC2 soap_instantiate___ns1__DownLoadMobGPSData(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:8207 */
#ifndef SOAP_TYPE___ns1__MobDownLoadData
#define SOAP_TYPE___ns1__MobDownLoadData (374)
/* Wrapper: */
struct SOAP_CMAC __ns1__MobDownLoadData {
      public:
        /** Optional element 'ns1:MobDownLoadData' of XSD type 'ns1:MobDownLoadData' */
        _ns1__MobDownLoadData *ns1__MobDownLoadData;
      public:
        /** Return unique type id SOAP_TYPE___ns1__MobDownLoadData */
        long soap_type() const { return SOAP_TYPE___ns1__MobDownLoadData; }
        /** Constructor with member initializations */
        __ns1__MobDownLoadData() : ns1__MobDownLoadData() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__MobDownLoadData * SOAP_FMAC2 soap_instantiate___ns1__MobDownLoadData(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:8278 */
#ifndef SOAP_TYPE___ns1__GetOpenFireInfo
#define SOAP_TYPE___ns1__GetOpenFireInfo (378)
/* Wrapper: */
struct SOAP_CMAC __ns1__GetOpenFireInfo {
      public:
        /** Optional element 'ns1:GetOpenFireInfo' of XSD type 'ns1:GetOpenFireInfo' */
        _ns1__GetOpenFireInfo *ns1__GetOpenFireInfo;
      public:
        /** Return unique type id SOAP_TYPE___ns1__GetOpenFireInfo */
        long soap_type() const { return SOAP_TYPE___ns1__GetOpenFireInfo; }
        /** Constructor with member initializations */
        __ns1__GetOpenFireInfo() : ns1__GetOpenFireInfo() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__GetOpenFireInfo * SOAP_FMAC2 soap_instantiate___ns1__GetOpenFireInfo(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:8349 */
#ifndef SOAP_TYPE___ns1__GetDwList
#define SOAP_TYPE___ns1__GetDwList (382)
/* Wrapper: */
struct SOAP_CMAC __ns1__GetDwList {
      public:
        /** Optional element 'ns1:GetDwList' of XSD type 'ns1:GetDwList' */
        _ns1__GetDwList *ns1__GetDwList;
      public:
        /** Return unique type id SOAP_TYPE___ns1__GetDwList */
        long soap_type() const { return SOAP_TYPE___ns1__GetDwList; }
        /** Constructor with member initializations */
        __ns1__GetDwList() : ns1__GetDwList() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__GetDwList * SOAP_FMAC2 soap_instantiate___ns1__GetDwList(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:8420 */
#ifndef SOAP_TYPE___ns1__GetUnitStation
#define SOAP_TYPE___ns1__GetUnitStation (386)
/* Wrapper: */
struct SOAP_CMAC __ns1__GetUnitStation {
      public:
        /** Optional element 'ns1:GetUnitStation' of XSD type 'ns1:GetUnitStation' */
        _ns1__GetUnitStation *ns1__GetUnitStation;
      public:
        /** Return unique type id SOAP_TYPE___ns1__GetUnitStation */
        long soap_type() const { return SOAP_TYPE___ns1__GetUnitStation; }
        /** Constructor with member initializations */
        __ns1__GetUnitStation() : ns1__GetUnitStation() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__GetUnitStation * SOAP_FMAC2 soap_instantiate___ns1__GetUnitStation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:8491 */
#ifndef SOAP_TYPE___ns1__GetUnitStruct
#define SOAP_TYPE___ns1__GetUnitStruct (390)
/* Wrapper: */
struct SOAP_CMAC __ns1__GetUnitStruct {
      public:
        /** Optional element 'ns1:GetUnitStruct' of XSD type 'ns1:GetUnitStruct' */
        _ns1__GetUnitStruct *ns1__GetUnitStruct;
      public:
        /** Return unique type id SOAP_TYPE___ns1__GetUnitStruct */
        long soap_type() const { return SOAP_TYPE___ns1__GetUnitStruct; }
        /** Constructor with member initializations */
        __ns1__GetUnitStruct() : ns1__GetUnitStruct() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__GetUnitStruct * SOAP_FMAC2 soap_instantiate___ns1__GetUnitStruct(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:8562 */
#ifndef SOAP_TYPE___ns1__GetUnitPersonInfo
#define SOAP_TYPE___ns1__GetUnitPersonInfo (394)
/* Wrapper: */
struct SOAP_CMAC __ns1__GetUnitPersonInfo {
      public:
        /** Optional element 'ns1:GetUnitPersonInfo' of XSD type 'ns1:GetUnitPersonInfo' */
        _ns1__GetUnitPersonInfo *ns1__GetUnitPersonInfo;
      public:
        /** Return unique type id SOAP_TYPE___ns1__GetUnitPersonInfo */
        long soap_type() const { return SOAP_TYPE___ns1__GetUnitPersonInfo; }
        /** Constructor with member initializations */
        __ns1__GetUnitPersonInfo() : ns1__GetUnitPersonInfo() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__GetUnitPersonInfo * SOAP_FMAC2 soap_instantiate___ns1__GetUnitPersonInfo(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:8633 */
#ifndef SOAP_TYPE___ns1__GetFileSize
#define SOAP_TYPE___ns1__GetFileSize (398)
/* Wrapper: */
struct SOAP_CMAC __ns1__GetFileSize {
      public:
        /** Optional element 'ns1:GetFileSize' of XSD type 'ns1:GetFileSize' */
        _ns1__GetFileSize *ns1__GetFileSize;
      public:
        /** Return unique type id SOAP_TYPE___ns1__GetFileSize */
        long soap_type() const { return SOAP_TYPE___ns1__GetFileSize; }
        /** Constructor with member initializations */
        __ns1__GetFileSize() : ns1__GetFileSize() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__GetFileSize * SOAP_FMAC2 soap_instantiate___ns1__GetFileSize(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:8704 */
#ifndef SOAP_TYPE___ns1__GetXbList
#define SOAP_TYPE___ns1__GetXbList (402)
/* Wrapper: */
struct SOAP_CMAC __ns1__GetXbList {
      public:
        /** Optional element 'ns1:GetXbList' of XSD type 'ns1:GetXbList' */
        _ns1__GetXbList *ns1__GetXbList;
      public:
        /** Return unique type id SOAP_TYPE___ns1__GetXbList */
        long soap_type() const { return SOAP_TYPE___ns1__GetXbList; }
        /** Constructor with member initializations */
        __ns1__GetXbList() : ns1__GetXbList() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__GetXbList * SOAP_FMAC2 soap_instantiate___ns1__GetXbList(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:8775 */
#ifndef SOAP_TYPE___ns1__GetXbStationList
#define SOAP_TYPE___ns1__GetXbStationList (406)
/* Wrapper: */
struct SOAP_CMAC __ns1__GetXbStationList {
      public:
        /** Optional element 'ns1:GetXbStationList' of XSD type 'ns1:GetXbStationList' */
        _ns1__GetXbStationList *ns1__GetXbStationList;
      public:
        /** Return unique type id SOAP_TYPE___ns1__GetXbStationList */
        long soap_type() const { return SOAP_TYPE___ns1__GetXbStationList; }
        /** Constructor with member initializations */
        __ns1__GetXbStationList() : ns1__GetXbStationList() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__GetXbStationList * SOAP_FMAC2 soap_instantiate___ns1__GetXbStationList(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:8846 */
#ifndef SOAP_TYPE___ns1__GetMapDeviceType
#define SOAP_TYPE___ns1__GetMapDeviceType (410)
/* Wrapper: */
struct SOAP_CMAC __ns1__GetMapDeviceType {
      public:
        /** Optional element 'ns1:GetMapDeviceType' of XSD type 'ns1:GetMapDeviceType' */
        _ns1__GetMapDeviceType *ns1__GetMapDeviceType;
      public:
        /** Return unique type id SOAP_TYPE___ns1__GetMapDeviceType */
        long soap_type() const { return SOAP_TYPE___ns1__GetMapDeviceType; }
        /** Constructor with member initializations */
        __ns1__GetMapDeviceType() : ns1__GetMapDeviceType() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__GetMapDeviceType * SOAP_FMAC2 soap_instantiate___ns1__GetMapDeviceType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:8917 */
#ifndef SOAP_TYPE___ns1__GetGxDeviceData
#define SOAP_TYPE___ns1__GetGxDeviceData (414)
/* Wrapper: */
struct SOAP_CMAC __ns1__GetGxDeviceData {
      public:
        /** Optional element 'ns1:GetGxDeviceData' of XSD type 'ns1:GetGxDeviceData' */
        _ns1__GetGxDeviceData *ns1__GetGxDeviceData;
      public:
        /** Return unique type id SOAP_TYPE___ns1__GetGxDeviceData */
        long soap_type() const { return SOAP_TYPE___ns1__GetGxDeviceData; }
        /** Constructor with member initializations */
        __ns1__GetGxDeviceData() : ns1__GetGxDeviceData() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__GetGxDeviceData * SOAP_FMAC2 soap_instantiate___ns1__GetGxDeviceData(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:8988 */
#ifndef SOAP_TYPE___ns1__GetDownFileInfo
#define SOAP_TYPE___ns1__GetDownFileInfo (418)
/* Wrapper: */
struct SOAP_CMAC __ns1__GetDownFileInfo {
      public:
        /** Optional element 'ns1:GetDownFileInfo' of XSD type 'ns1:GetDownFileInfo' */
        _ns1__GetDownFileInfo *ns1__GetDownFileInfo;
      public:
        /** Return unique type id SOAP_TYPE___ns1__GetDownFileInfo */
        long soap_type() const { return SOAP_TYPE___ns1__GetDownFileInfo; }
        /** Constructor with member initializations */
        __ns1__GetDownFileInfo() : ns1__GetDownFileInfo() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__GetDownFileInfo * SOAP_FMAC2 soap_instantiate___ns1__GetDownFileInfo(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:9059 */
#ifndef SOAP_TYPE___ns1__DownMapfile
#define SOAP_TYPE___ns1__DownMapfile (422)
/* Wrapper: */
struct SOAP_CMAC __ns1__DownMapfile {
      public:
        /** Optional element 'ns1:DownMapfile' of XSD type 'ns1:DownMapfile' */
        _ns1__DownMapfile *ns1__DownMapfile;
      public:
        /** Return unique type id SOAP_TYPE___ns1__DownMapfile */
        long soap_type() const { return SOAP_TYPE___ns1__DownMapfile; }
        /** Constructor with member initializations */
        __ns1__DownMapfile() : ns1__DownMapfile() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__DownMapfile * SOAP_FMAC2 soap_instantiate___ns1__DownMapfile(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:9130 */
#ifndef SOAP_TYPE___ns1__GetFileNew
#define SOAP_TYPE___ns1__GetFileNew (426)
/* Wrapper: */
struct SOAP_CMAC __ns1__GetFileNew {
      public:
        /** Optional element 'ns1:GetFileNew' of XSD type 'ns1:GetFileNew' */
        _ns1__GetFileNew *ns1__GetFileNew;
      public:
        /** Return unique type id SOAP_TYPE___ns1__GetFileNew */
        long soap_type() const { return SOAP_TYPE___ns1__GetFileNew; }
        /** Constructor with member initializations */
        __ns1__GetFileNew() : ns1__GetFileNew() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__GetFileNew * SOAP_FMAC2 soap_instantiate___ns1__GetFileNew(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:9201 */
#ifndef SOAP_TYPE___ns1__AlterTable
#define SOAP_TYPE___ns1__AlterTable (430)
/* Wrapper: */
struct SOAP_CMAC __ns1__AlterTable {
      public:
        /** Optional element 'ns1:AlterTable' of XSD type 'ns1:AlterTable' */
        _ns1__AlterTable *ns1__AlterTable;
      public:
        /** Return unique type id SOAP_TYPE___ns1__AlterTable */
        long soap_type() const { return SOAP_TYPE___ns1__AlterTable; }
        /** Constructor with member initializations */
        __ns1__AlterTable() : ns1__AlterTable() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__AlterTable * SOAP_FMAC2 soap_instantiate___ns1__AlterTable(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:9272 */
#ifndef SOAP_TYPE___ns1__DownCQData
#define SOAP_TYPE___ns1__DownCQData (434)
/* Wrapper: */
struct SOAP_CMAC __ns1__DownCQData {
      public:
        /** Optional element 'ns1:DownCQData' of XSD type 'ns1:DownCQData' */
        _ns1__DownCQData *ns1__DownCQData;
      public:
        /** Return unique type id SOAP_TYPE___ns1__DownCQData */
        long soap_type() const { return SOAP_TYPE___ns1__DownCQData; }
        /** Constructor with member initializations */
        __ns1__DownCQData() : ns1__DownCQData() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__DownCQData * SOAP_FMAC2 soap_instantiate___ns1__DownCQData(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:9343 */
#ifndef SOAP_TYPE___ns1__GetTabList
#define SOAP_TYPE___ns1__GetTabList (438)
/* Wrapper: */
struct SOAP_CMAC __ns1__GetTabList {
      public:
        /** Optional element 'ns1:GetTabList' of XSD type 'ns1:GetTabList' */
        _ns1__GetTabList *ns1__GetTabList;
      public:
        /** Return unique type id SOAP_TYPE___ns1__GetTabList */
        long soap_type() const { return SOAP_TYPE___ns1__GetTabList; }
        /** Constructor with member initializations */
        __ns1__GetTabList() : ns1__GetTabList() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__GetTabList * SOAP_FMAC2 soap_instantiate___ns1__GetTabList(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:9414 */
#ifndef SOAP_TYPE___ns1__IsOracleTable
#define SOAP_TYPE___ns1__IsOracleTable (442)
/* Wrapper: */
struct SOAP_CMAC __ns1__IsOracleTable {
      public:
        /** Optional element 'ns1:IsOracleTable' of XSD type 'ns1:IsOracleTable' */
        _ns1__IsOracleTable *ns1__IsOracleTable;
      public:
        /** Return unique type id SOAP_TYPE___ns1__IsOracleTable */
        long soap_type() const { return SOAP_TYPE___ns1__IsOracleTable; }
        /** Constructor with member initializations */
        __ns1__IsOracleTable() : ns1__IsOracleTable() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__IsOracleTable * SOAP_FMAC2 soap_instantiate___ns1__IsOracleTable(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:9485 */
#ifndef SOAP_TYPE___ns1__GetFieldInfo
#define SOAP_TYPE___ns1__GetFieldInfo (446)
/* Wrapper: */
struct SOAP_CMAC __ns1__GetFieldInfo {
      public:
        /** Optional element 'ns1:GetFieldInfo' of XSD type 'ns1:GetFieldInfo' */
        _ns1__GetFieldInfo *ns1__GetFieldInfo;
      public:
        /** Return unique type id SOAP_TYPE___ns1__GetFieldInfo */
        long soap_type() const { return SOAP_TYPE___ns1__GetFieldInfo; }
        /** Constructor with member initializations */
        __ns1__GetFieldInfo() : ns1__GetFieldInfo() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__GetFieldInfo * SOAP_FMAC2 soap_instantiate___ns1__GetFieldInfo(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:9556 */
#ifndef SOAP_TYPE___ns1__ExecuteSqlForFile
#define SOAP_TYPE___ns1__ExecuteSqlForFile (450)
/* Wrapper: */
struct SOAP_CMAC __ns1__ExecuteSqlForFile {
      public:
        /** Optional element 'ns1:ExecuteSqlForFile' of XSD type 'ns1:ExecuteSqlForFile' */
        _ns1__ExecuteSqlForFile *ns1__ExecuteSqlForFile;
      public:
        /** Return unique type id SOAP_TYPE___ns1__ExecuteSqlForFile */
        long soap_type() const { return SOAP_TYPE___ns1__ExecuteSqlForFile; }
        /** Constructor with member initializations */
        __ns1__ExecuteSqlForFile() : ns1__ExecuteSqlForFile() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__ExecuteSqlForFile * SOAP_FMAC2 soap_instantiate___ns1__ExecuteSqlForFile(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:9627 */
#ifndef SOAP_TYPE___ns1__DownLoadFile
#define SOAP_TYPE___ns1__DownLoadFile (454)
/* Wrapper: */
struct SOAP_CMAC __ns1__DownLoadFile {
      public:
        /** Optional element 'ns1:DownLoadFile' of XSD type 'ns1:DownLoadFile' */
        _ns1__DownLoadFile *ns1__DownLoadFile;
      public:
        /** Return unique type id SOAP_TYPE___ns1__DownLoadFile */
        long soap_type() const { return SOAP_TYPE___ns1__DownLoadFile; }
        /** Constructor with member initializations */
        __ns1__DownLoadFile() : ns1__DownLoadFile() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__DownLoadFile * SOAP_FMAC2 soap_instantiate___ns1__DownLoadFile(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:9698 */
#ifndef SOAP_TYPE___ns1__WriteFile
#define SOAP_TYPE___ns1__WriteFile (458)
/* Wrapper: */
struct SOAP_CMAC __ns1__WriteFile {
      public:
        /** Optional element 'ns1:WriteFile' of XSD type 'ns1:WriteFile' */
        _ns1__WriteFile *ns1__WriteFile;
      public:
        /** Return unique type id SOAP_TYPE___ns1__WriteFile */
        long soap_type() const { return SOAP_TYPE___ns1__WriteFile; }
        /** Constructor with member initializations */
        __ns1__WriteFile() : ns1__WriteFile() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__WriteFile * SOAP_FMAC2 soap_instantiate___ns1__WriteFile(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:9769 */
#ifndef SOAP_TYPE___ns1__GetMapUpdateTime
#define SOAP_TYPE___ns1__GetMapUpdateTime (462)
/* Wrapper: */
struct SOAP_CMAC __ns1__GetMapUpdateTime {
      public:
        /** Optional element 'ns1:GetMapUpdateTime' of XSD type 'ns1:GetMapUpdateTime' */
        _ns1__GetMapUpdateTime *ns1__GetMapUpdateTime;
      public:
        /** Return unique type id SOAP_TYPE___ns1__GetMapUpdateTime */
        long soap_type() const { return SOAP_TYPE___ns1__GetMapUpdateTime; }
        /** Constructor with member initializations */
        __ns1__GetMapUpdateTime() : ns1__GetMapUpdateTime() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__GetMapUpdateTime * SOAP_FMAC2 soap_instantiate___ns1__GetMapUpdateTime(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:9840 */
#ifndef SOAP_TYPE___ns1__GetMapTabName
#define SOAP_TYPE___ns1__GetMapTabName (466)
/* Wrapper: */
struct SOAP_CMAC __ns1__GetMapTabName {
      public:
        /** Optional element 'ns1:GetMapTabName' of XSD type 'ns1:GetMapTabName' */
        _ns1__GetMapTabName *ns1__GetMapTabName;
      public:
        /** Return unique type id SOAP_TYPE___ns1__GetMapTabName */
        long soap_type() const { return SOAP_TYPE___ns1__GetMapTabName; }
        /** Constructor with member initializations */
        __ns1__GetMapTabName() : ns1__GetMapTabName() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__GetMapTabName * SOAP_FMAC2 soap_instantiate___ns1__GetMapTabName(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:9911 */
#ifndef SOAP_TYPE___ns1__GetMapDeviceData
#define SOAP_TYPE___ns1__GetMapDeviceData (470)
/* Wrapper: */
struct SOAP_CMAC __ns1__GetMapDeviceData {
      public:
        /** Optional element 'ns1:GetMapDeviceData' of XSD type 'ns1:GetMapDeviceData' */
        _ns1__GetMapDeviceData *ns1__GetMapDeviceData;
      public:
        /** Return unique type id SOAP_TYPE___ns1__GetMapDeviceData */
        long soap_type() const { return SOAP_TYPE___ns1__GetMapDeviceData; }
        /** Constructor with member initializations */
        __ns1__GetMapDeviceData() : ns1__GetMapDeviceData() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__GetMapDeviceData * SOAP_FMAC2 soap_instantiate___ns1__GetMapDeviceData(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:9982 */
#ifndef SOAP_TYPE___ns1__GetMaList
#define SOAP_TYPE___ns1__GetMaList (474)
/* Wrapper: */
struct SOAP_CMAC __ns1__GetMaList {
      public:
        /** Optional element 'ns1:GetMaList' of XSD type 'ns1:GetMaList' */
        _ns1__GetMaList *ns1__GetMaList;
      public:
        /** Return unique type id SOAP_TYPE___ns1__GetMaList */
        long soap_type() const { return SOAP_TYPE___ns1__GetMaList; }
        /** Constructor with member initializations */
        __ns1__GetMaList() : ns1__GetMaList() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__GetMaList * SOAP_FMAC2 soap_instantiate___ns1__GetMaList(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:10053 */
#ifndef SOAP_TYPE___ns1__GetMangeUnit
#define SOAP_TYPE___ns1__GetMangeUnit (478)
/* Wrapper: */
struct SOAP_CMAC __ns1__GetMangeUnit {
      public:
        /** Optional element 'ns1:GetMangeUnit' of XSD type 'ns1:GetMangeUnit' */
        _ns1__GetMangeUnit *ns1__GetMangeUnit;
      public:
        /** Return unique type id SOAP_TYPE___ns1__GetMangeUnit */
        long soap_type() const { return SOAP_TYPE___ns1__GetMangeUnit; }
        /** Constructor with member initializations */
        __ns1__GetMangeUnit() : ns1__GetMangeUnit() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__GetMangeUnit * SOAP_FMAC2 soap_instantiate___ns1__GetMangeUnit(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:10124 */
#ifndef SOAP_TYPE___ns1__GetMangeXb
#define SOAP_TYPE___ns1__GetMangeXb (482)
/* Wrapper: */
struct SOAP_CMAC __ns1__GetMangeXb {
      public:
        /** Optional element 'ns1:GetMangeXb' of XSD type 'ns1:GetMangeXb' */
        _ns1__GetMangeXb *ns1__GetMangeXb;
      public:
        /** Return unique type id SOAP_TYPE___ns1__GetMangeXb */
        long soap_type() const { return SOAP_TYPE___ns1__GetMangeXb; }
        /** Constructor with member initializations */
        __ns1__GetMangeXb() : ns1__GetMangeXb() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__GetMangeXb * SOAP_FMAC2 soap_instantiate___ns1__GetMangeXb(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:10195 */
#ifndef SOAP_TYPE___ns1__CheckMapVer
#define SOAP_TYPE___ns1__CheckMapVer (486)
/* Wrapper: */
struct SOAP_CMAC __ns1__CheckMapVer {
      public:
        /** Optional element 'ns1:CheckMapVer' of XSD type 'ns1:CheckMapVer' */
        _ns1__CheckMapVer *ns1__CheckMapVer;
      public:
        /** Return unique type id SOAP_TYPE___ns1__CheckMapVer */
        long soap_type() const { return SOAP_TYPE___ns1__CheckMapVer; }
        /** Constructor with member initializations */
        __ns1__CheckMapVer() : ns1__CheckMapVer() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__CheckMapVer * SOAP_FMAC2 soap_instantiate___ns1__CheckMapVer(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:10266 */
#ifndef SOAP_TYPE___ns1__GetMap
#define SOAP_TYPE___ns1__GetMap (490)
/* Wrapper: */
struct SOAP_CMAC __ns1__GetMap {
      public:
        /** Optional element 'ns1:GetMap' of XSD type 'ns1:GetMap' */
        _ns1__GetMap *ns1__GetMap;
      public:
        /** Return unique type id SOAP_TYPE___ns1__GetMap */
        long soap_type() const { return SOAP_TYPE___ns1__GetMap; }
        /** Constructor with member initializations */
        __ns1__GetMap() : ns1__GetMap() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__GetMap * SOAP_FMAC2 soap_instantiate___ns1__GetMap(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:10337 */
#ifndef SOAP_TYPE___ns1__GetTableData
#define SOAP_TYPE___ns1__GetTableData (494)
/* Wrapper: */
struct SOAP_CMAC __ns1__GetTableData {
      public:
        /** Optional element 'ns1:GetTableData' of XSD type 'ns1:GetTableData' */
        _ns1__GetTableData *ns1__GetTableData;
      public:
        /** Return unique type id SOAP_TYPE___ns1__GetTableData */
        long soap_type() const { return SOAP_TYPE___ns1__GetTableData; }
        /** Constructor with member initializations */
        __ns1__GetTableData() : ns1__GetTableData() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__GetTableData * SOAP_FMAC2 soap_instantiate___ns1__GetTableData(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:10408 */
#ifndef SOAP_TYPE___ns1__ServerLevel
#define SOAP_TYPE___ns1__ServerLevel (498)
/* Wrapper: */
struct SOAP_CMAC __ns1__ServerLevel {
      public:
        /** Optional element 'ns1:ServerLevel' of XSD type 'ns1:ServerLevel' */
        _ns1__ServerLevel *ns1__ServerLevel;
      public:
        /** Return unique type id SOAP_TYPE___ns1__ServerLevel */
        long soap_type() const { return SOAP_TYPE___ns1__ServerLevel; }
        /** Constructor with member initializations */
        __ns1__ServerLevel() : ns1__ServerLevel() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__ServerLevel * SOAP_FMAC2 soap_instantiate___ns1__ServerLevel(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:10479 */
#ifndef SOAP_TYPE___ns1__GetMapListTime
#define SOAP_TYPE___ns1__GetMapListTime (502)
/* Wrapper: */
struct SOAP_CMAC __ns1__GetMapListTime {
      public:
        /** Optional element 'ns1:GetMapListTime' of XSD type 'ns1:GetMapListTime' */
        _ns1__GetMapListTime *ns1__GetMapListTime;
      public:
        /** Return unique type id SOAP_TYPE___ns1__GetMapListTime */
        long soap_type() const { return SOAP_TYPE___ns1__GetMapListTime; }
        /** Constructor with member initializations */
        __ns1__GetMapListTime() : ns1__GetMapListTime() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__GetMapListTime * SOAP_FMAC2 soap_instantiate___ns1__GetMapListTime(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:10550 */
#ifndef SOAP_TYPE___ns1__UpdateGzclMap
#define SOAP_TYPE___ns1__UpdateGzclMap (506)
/* Wrapper: */
struct SOAP_CMAC __ns1__UpdateGzclMap {
      public:
        /** Optional element 'ns1:UpdateGzclMap' of XSD type 'ns1:UpdateGzclMap' */
        _ns1__UpdateGzclMap *ns1__UpdateGzclMap;
      public:
        /** Return unique type id SOAP_TYPE___ns1__UpdateGzclMap */
        long soap_type() const { return SOAP_TYPE___ns1__UpdateGzclMap; }
        /** Constructor with member initializations */
        __ns1__UpdateGzclMap() : ns1__UpdateGzclMap() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__UpdateGzclMap * SOAP_FMAC2 soap_instantiate___ns1__UpdateGzclMap(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:10621 */
#ifndef SOAP_TYPE___ns1__GetUnitMapVer
#define SOAP_TYPE___ns1__GetUnitMapVer (510)
/* Wrapper: */
struct SOAP_CMAC __ns1__GetUnitMapVer {
      public:
        /** Optional element 'ns1:GetUnitMapVer' of XSD type 'ns1:GetUnitMapVer' */
        _ns1__GetUnitMapVer *ns1__GetUnitMapVer;
      public:
        /** Return unique type id SOAP_TYPE___ns1__GetUnitMapVer */
        long soap_type() const { return SOAP_TYPE___ns1__GetUnitMapVer; }
        /** Constructor with member initializations */
        __ns1__GetUnitMapVer() : ns1__GetUnitMapVer() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__GetUnitMapVer * SOAP_FMAC2 soap_instantiate___ns1__GetUnitMapVer(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:10692 */
#ifndef SOAP_TYPE___ns1__GetMangeMapUpdate
#define SOAP_TYPE___ns1__GetMangeMapUpdate (514)
/* Wrapper: */
struct SOAP_CMAC __ns1__GetMangeMapUpdate {
      public:
        /** Optional element 'ns1:GetMangeMapUpdate' of XSD type 'ns1:GetMangeMapUpdate' */
        _ns1__GetMangeMapUpdate *ns1__GetMangeMapUpdate;
      public:
        /** Return unique type id SOAP_TYPE___ns1__GetMangeMapUpdate */
        long soap_type() const { return SOAP_TYPE___ns1__GetMangeMapUpdate; }
        /** Constructor with member initializations */
        __ns1__GetMangeMapUpdate() : ns1__GetMangeMapUpdate() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__GetMangeMapUpdate * SOAP_FMAC2 soap_instantiate___ns1__GetMangeMapUpdate(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:10763 */
#ifndef SOAP_TYPE___ns1__OpenProcess
#define SOAP_TYPE___ns1__OpenProcess (518)
/* Wrapper: */
struct SOAP_CMAC __ns1__OpenProcess {
      public:
        /** Optional element 'ns1:OpenProcess' of XSD type 'ns1:OpenProcess' */
        _ns1__OpenProcess *ns1__OpenProcess;
      public:
        /** Return unique type id SOAP_TYPE___ns1__OpenProcess */
        long soap_type() const { return SOAP_TYPE___ns1__OpenProcess; }
        /** Constructor with member initializations */
        __ns1__OpenProcess() : ns1__OpenProcess() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__OpenProcess * SOAP_FMAC2 soap_instantiate___ns1__OpenProcess(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:10834 */
#ifndef SOAP_TYPE___ns1__GetEmfPngVer
#define SOAP_TYPE___ns1__GetEmfPngVer (522)
/* Wrapper: */
struct SOAP_CMAC __ns1__GetEmfPngVer {
      public:
        /** Optional element 'ns1:GetEmfPngVer' of XSD type 'ns1:GetEmfPngVer' */
        _ns1__GetEmfPngVer *ns1__GetEmfPngVer;
      public:
        /** Return unique type id SOAP_TYPE___ns1__GetEmfPngVer */
        long soap_type() const { return SOAP_TYPE___ns1__GetEmfPngVer; }
        /** Constructor with member initializations */
        __ns1__GetEmfPngVer() : ns1__GetEmfPngVer() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__GetEmfPngVer * SOAP_FMAC2 soap_instantiate___ns1__GetEmfPngVer(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:10905 */
#ifndef SOAP_TYPE___ns1__GetEmfPngFile
#define SOAP_TYPE___ns1__GetEmfPngFile (526)
/* Wrapper: */
struct SOAP_CMAC __ns1__GetEmfPngFile {
      public:
        /** Optional element 'ns1:GetEmfPngFile' of XSD type 'ns1:GetEmfPngFile' */
        _ns1__GetEmfPngFile *ns1__GetEmfPngFile;
      public:
        /** Return unique type id SOAP_TYPE___ns1__GetEmfPngFile */
        long soap_type() const { return SOAP_TYPE___ns1__GetEmfPngFile; }
        /** Constructor with member initializations */
        __ns1__GetEmfPngFile() : ns1__GetEmfPngFile() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__GetEmfPngFile * SOAP_FMAC2 soap_instantiate___ns1__GetEmfPngFile(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:10976 */
#ifndef SOAP_TYPE___ns1__OpenMapExe
#define SOAP_TYPE___ns1__OpenMapExe (530)
/* Wrapper: */
struct SOAP_CMAC __ns1__OpenMapExe {
      public:
        /** Optional element 'ns1:OpenMapExe' of XSD type 'ns1:OpenMapExe' */
        _ns1__OpenMapExe *ns1__OpenMapExe;
      public:
        /** Return unique type id SOAP_TYPE___ns1__OpenMapExe */
        long soap_type() const { return SOAP_TYPE___ns1__OpenMapExe; }
        /** Constructor with member initializations */
        __ns1__OpenMapExe() : ns1__OpenMapExe() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__OpenMapExe * SOAP_FMAC2 soap_instantiate___ns1__OpenMapExe(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:11047 */
#ifndef SOAP_TYPE___ns1__ChaoQi
#define SOAP_TYPE___ns1__ChaoQi (534)
/* Wrapper: */
struct SOAP_CMAC __ns1__ChaoQi {
      public:
        /** Optional element 'ns1:ChaoQi' of XSD type 'ns1:ChaoQi' */
        _ns1__ChaoQi *ns1__ChaoQi;
      public:
        /** Return unique type id SOAP_TYPE___ns1__ChaoQi */
        long soap_type() const { return SOAP_TYPE___ns1__ChaoQi; }
        /** Constructor with member initializations */
        __ns1__ChaoQi() : ns1__ChaoQi() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__ChaoQi * SOAP_FMAC2 soap_instantiate___ns1__ChaoQi(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:11118 */
#ifndef SOAP_TYPE___ns1__JiChaoQi
#define SOAP_TYPE___ns1__JiChaoQi (538)
/* Wrapper: */
struct SOAP_CMAC __ns1__JiChaoQi {
      public:
        /** Optional element 'ns1:JiChaoQi' of XSD type 'ns1:JiChaoQi' */
        _ns1__JiChaoQi *ns1__JiChaoQi;
      public:
        /** Return unique type id SOAP_TYPE___ns1__JiChaoQi */
        long soap_type() const { return SOAP_TYPE___ns1__JiChaoQi; }
        /** Constructor with member initializations */
        __ns1__JiChaoQi() : ns1__JiChaoQi() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__JiChaoQi * SOAP_FMAC2 soap_instantiate___ns1__JiChaoQi(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:11189 */
#ifndef SOAP_TYPE___ns1__GetZhouQi
#define SOAP_TYPE___ns1__GetZhouQi (542)
/* Wrapper: */
struct SOAP_CMAC __ns1__GetZhouQi {
      public:
        /** Optional element 'ns1:GetZhouQi' of XSD type 'ns1:GetZhouQi' */
        _ns1__GetZhouQi *ns1__GetZhouQi;
      public:
        /** Return unique type id SOAP_TYPE___ns1__GetZhouQi */
        long soap_type() const { return SOAP_TYPE___ns1__GetZhouQi; }
        /** Constructor with member initializations */
        __ns1__GetZhouQi() : ns1__GetZhouQi() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__GetZhouQi * SOAP_FMAC2 soap_instantiate___ns1__GetZhouQi(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:11260 */
#ifndef SOAP_TYPE___ns1__FlowChartEmf
#define SOAP_TYPE___ns1__FlowChartEmf (546)
/* Wrapper: */
struct SOAP_CMAC __ns1__FlowChartEmf {
      public:
        /** Optional element 'ns1:FlowChartEmf' of XSD type 'ns1:FlowChartEmf' */
        _ns1__FlowChartEmf *ns1__FlowChartEmf;
      public:
        /** Return unique type id SOAP_TYPE___ns1__FlowChartEmf */
        long soap_type() const { return SOAP_TYPE___ns1__FlowChartEmf; }
        /** Constructor with member initializations */
        __ns1__FlowChartEmf() : ns1__FlowChartEmf() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__FlowChartEmf * SOAP_FMAC2 soap_instantiate___ns1__FlowChartEmf(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:11331 */
#ifndef SOAP_TYPE___ns1__SGCDrawEmf
#define SOAP_TYPE___ns1__SGCDrawEmf (550)
/* Wrapper: */
struct SOAP_CMAC __ns1__SGCDrawEmf {
      public:
        /** Optional element 'ns1:SGCDrawEmf' of XSD type 'ns1:SGCDrawEmf' */
        _ns1__SGCDrawEmf *ns1__SGCDrawEmf;
      public:
        /** Return unique type id SOAP_TYPE___ns1__SGCDrawEmf */
        long soap_type() const { return SOAP_TYPE___ns1__SGCDrawEmf; }
        /** Constructor with member initializations */
        __ns1__SGCDrawEmf() : ns1__SGCDrawEmf() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__SGCDrawEmf * SOAP_FMAC2 soap_instantiate___ns1__SGCDrawEmf(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:11402 */
#ifndef SOAP_TYPE___ns1__GzGetTypeList
#define SOAP_TYPE___ns1__GzGetTypeList (554)
/* Wrapper: */
struct SOAP_CMAC __ns1__GzGetTypeList {
      public:
        /** Optional element 'ns1:GzGetTypeList' of XSD type 'ns1:GzGetTypeList' */
        _ns1__GzGetTypeList *ns1__GzGetTypeList;
      public:
        /** Return unique type id SOAP_TYPE___ns1__GzGetTypeList */
        long soap_type() const { return SOAP_TYPE___ns1__GzGetTypeList; }
        /** Constructor with member initializations */
        __ns1__GzGetTypeList() : ns1__GzGetTypeList() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__GzGetTypeList * SOAP_FMAC2 soap_instantiate___ns1__GzGetTypeList(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:11473 */
#ifndef SOAP_TYPE___ns1__GzGetDeviceStruct
#define SOAP_TYPE___ns1__GzGetDeviceStruct (558)
/* Wrapper: */
struct SOAP_CMAC __ns1__GzGetDeviceStruct {
      public:
        /** Optional element 'ns1:GzGetDeviceStruct' of XSD type 'ns1:GzGetDeviceStruct' */
        _ns1__GzGetDeviceStruct *ns1__GzGetDeviceStruct;
      public:
        /** Return unique type id SOAP_TYPE___ns1__GzGetDeviceStruct */
        long soap_type() const { return SOAP_TYPE___ns1__GzGetDeviceStruct; }
        /** Constructor with member initializations */
        __ns1__GzGetDeviceStruct() : ns1__GzGetDeviceStruct() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__GzGetDeviceStruct * SOAP_FMAC2 soap_instantiate___ns1__GzGetDeviceStruct(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:11544 */
#ifndef SOAP_TYPE___ns1__SaveMapFile
#define SOAP_TYPE___ns1__SaveMapFile (562)
/* Wrapper: */
struct SOAP_CMAC __ns1__SaveMapFile {
      public:
        /** Optional element 'ns1:SaveMapFile' of XSD type 'ns1:SaveMapFile' */
        _ns1__SaveMapFile *ns1__SaveMapFile;
      public:
        /** Return unique type id SOAP_TYPE___ns1__SaveMapFile */
        long soap_type() const { return SOAP_TYPE___ns1__SaveMapFile; }
        /** Constructor with member initializations */
        __ns1__SaveMapFile() : ns1__SaveMapFile() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__SaveMapFile * SOAP_FMAC2 soap_instantiate___ns1__SaveMapFile(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:11615 */
#ifndef SOAP_TYPE___ns1__SelectYjzhStation
#define SOAP_TYPE___ns1__SelectYjzhStation (566)
/* Wrapper: */
struct SOAP_CMAC __ns1__SelectYjzhStation {
      public:
        /** Optional element 'ns1:SelectYjzhStation' of XSD type 'ns1:SelectYjzhStation' */
        _ns1__SelectYjzhStation *ns1__SelectYjzhStation;
      public:
        /** Return unique type id SOAP_TYPE___ns1__SelectYjzhStation */
        long soap_type() const { return SOAP_TYPE___ns1__SelectYjzhStation; }
        /** Constructor with member initializations */
        __ns1__SelectYjzhStation() : ns1__SelectYjzhStation() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__SelectYjzhStation * SOAP_FMAC2 soap_instantiate___ns1__SelectYjzhStation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:11686 */
#ifndef SOAP_TYPE___ns1__SelectYjzhDevice
#define SOAP_TYPE___ns1__SelectYjzhDevice (570)
/* Wrapper: */
struct SOAP_CMAC __ns1__SelectYjzhDevice {
      public:
        /** Optional element 'ns1:SelectYjzhDevice' of XSD type 'ns1:SelectYjzhDevice' */
        _ns1__SelectYjzhDevice *ns1__SelectYjzhDevice;
      public:
        /** Return unique type id SOAP_TYPE___ns1__SelectYjzhDevice */
        long soap_type() const { return SOAP_TYPE___ns1__SelectYjzhDevice; }
        /** Constructor with member initializations */
        __ns1__SelectYjzhDevice() : ns1__SelectYjzhDevice() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__SelectYjzhDevice * SOAP_FMAC2 soap_instantiate___ns1__SelectYjzhDevice(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:11757 */
#ifndef SOAP_TYPE___ns1__GetYjzhZskAlarmTypes
#define SOAP_TYPE___ns1__GetYjzhZskAlarmTypes (574)
/* Wrapper: */
struct SOAP_CMAC __ns1__GetYjzhZskAlarmTypes {
      public:
        /** Optional element 'ns1:GetYjzhZskAlarmTypes' of XSD type 'ns1:GetYjzhZskAlarmTypes' */
        _ns1__GetYjzhZskAlarmTypes *ns1__GetYjzhZskAlarmTypes;
      public:
        /** Return unique type id SOAP_TYPE___ns1__GetYjzhZskAlarmTypes */
        long soap_type() const { return SOAP_TYPE___ns1__GetYjzhZskAlarmTypes; }
        /** Constructor with member initializations */
        __ns1__GetYjzhZskAlarmTypes() : ns1__GetYjzhZskAlarmTypes() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__GetYjzhZskAlarmTypes * SOAP_FMAC2 soap_instantiate___ns1__GetYjzhZskAlarmTypes(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:11828 */
#ifndef SOAP_TYPE___ns1__GetYjzhZskGzFlow_
#define SOAP_TYPE___ns1__GetYjzhZskGzFlow_ (576)
/* Wrapper: */
struct SOAP_CMAC __ns1__GetYjzhZskGzFlow_ {
      public:
        /** Optional element 'ns1:GetYjzhZskGzFlow' of XSD type 'ns1:GetYjzhZskGzFlow' */
        _ns1__GetYjzhZskGzFlow *ns1__GetYjzhZskGzFlow;
      public:
        /** Return unique type id SOAP_TYPE___ns1__GetYjzhZskGzFlow_ */
        long soap_type() const { return SOAP_TYPE___ns1__GetYjzhZskGzFlow_; }
        /** Constructor with member initializations */
        __ns1__GetYjzhZskGzFlow_() : ns1__GetYjzhZskGzFlow() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__GetYjzhZskGzFlow_ * SOAP_FMAC2 soap_instantiate___ns1__GetYjzhZskGzFlow_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:11899 */
#ifndef SOAP_TYPE___ns1__GetYjzhZskOtherFlowChartList_
#define SOAP_TYPE___ns1__GetYjzhZskOtherFlowChartList_ (578)
/* Wrapper: */
struct SOAP_CMAC __ns1__GetYjzhZskOtherFlowChartList_ {
      public:
        /** Optional element 'ns1:GetYjzhZskOtherFlowChartList' of XSD type 'ns1:GetYjzhZskOtherFlowChartList' */
        _ns1__GetYjzhZskOtherFlowChartList *ns1__GetYjzhZskOtherFlowChartList;
      public:
        /** Return unique type id SOAP_TYPE___ns1__GetYjzhZskOtherFlowChartList_ */
        long soap_type() const { return SOAP_TYPE___ns1__GetYjzhZskOtherFlowChartList_; }
        /** Constructor with member initializations */
        __ns1__GetYjzhZskOtherFlowChartList_() : ns1__GetYjzhZskOtherFlowChartList() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__GetYjzhZskOtherFlowChartList_ * SOAP_FMAC2 soap_instantiate___ns1__GetYjzhZskOtherFlowChartList_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:11970 */
#ifndef SOAP_TYPE___ns1__GetYjzhZskDevFlowChartList_
#define SOAP_TYPE___ns1__GetYjzhZskDevFlowChartList_ (580)
/* Wrapper: */
struct SOAP_CMAC __ns1__GetYjzhZskDevFlowChartList_ {
      public:
        /** Optional element 'ns1:GetYjzhZskDevFlowChartList' of XSD type 'ns1:GetYjzhZskDevFlowChartList' */
        _ns1__GetYjzhZskDevFlowChartList *ns1__GetYjzhZskDevFlowChartList;
      public:
        /** Return unique type id SOAP_TYPE___ns1__GetYjzhZskDevFlowChartList_ */
        long soap_type() const { return SOAP_TYPE___ns1__GetYjzhZskDevFlowChartList_; }
        /** Constructor with member initializations */
        __ns1__GetYjzhZskDevFlowChartList_() : ns1__GetYjzhZskDevFlowChartList() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__GetYjzhZskDevFlowChartList_ * SOAP_FMAC2 soap_instantiate___ns1__GetYjzhZskDevFlowChartList_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:12041 */
#ifndef SOAP_TYPE___ns1__GetPropList_
#define SOAP_TYPE___ns1__GetPropList_ (582)
/* Wrapper: */
struct SOAP_CMAC __ns1__GetPropList_ {
      public:
        /** Optional element 'ns1:GetPropList' of XSD type 'ns1:GetPropList' */
        _ns1__GetPropList *ns1__GetPropList;
      public:
        /** Return unique type id SOAP_TYPE___ns1__GetPropList_ */
        long soap_type() const { return SOAP_TYPE___ns1__GetPropList_; }
        /** Constructor with member initializations */
        __ns1__GetPropList_() : ns1__GetPropList() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__GetPropList_ * SOAP_FMAC2 soap_instantiate___ns1__GetPropList_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:12112 */
#ifndef SOAP_TYPE___ns1__GetPropName_
#define SOAP_TYPE___ns1__GetPropName_ (584)
/* Wrapper: */
struct SOAP_CMAC __ns1__GetPropName_ {
      public:
        /** Optional element 'ns1:GetPropName' of XSD type 'ns1:GetPropName' */
        _ns1__GetPropName *ns1__GetPropName;
      public:
        /** Return unique type id SOAP_TYPE___ns1__GetPropName_ */
        long soap_type() const { return SOAP_TYPE___ns1__GetPropName_; }
        /** Constructor with member initializations */
        __ns1__GetPropName_() : ns1__GetPropName() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__GetPropName_ * SOAP_FMAC2 soap_instantiate___ns1__GetPropName_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:12183 */
#ifndef SOAP_TYPE___ns1__CheckLoginUser_
#define SOAP_TYPE___ns1__CheckLoginUser_ (586)
/* Wrapper: */
struct SOAP_CMAC __ns1__CheckLoginUser_ {
      public:
        /** Optional element 'ns1:CheckLoginUser' of XSD type 'ns1:CheckLoginUser' */
        _ns1__CheckLoginUser *ns1__CheckLoginUser;
      public:
        /** Return unique type id SOAP_TYPE___ns1__CheckLoginUser_ */
        long soap_type() const { return SOAP_TYPE___ns1__CheckLoginUser_; }
        /** Constructor with member initializations */
        __ns1__CheckLoginUser_() : ns1__CheckLoginUser() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__CheckLoginUser_ * SOAP_FMAC2 soap_instantiate___ns1__CheckLoginUser_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:12254 */
#ifndef SOAP_TYPE___ns1__GetRyUnit_
#define SOAP_TYPE___ns1__GetRyUnit_ (588)
/* Wrapper: */
struct SOAP_CMAC __ns1__GetRyUnit_ {
      public:
        /** Optional element 'ns1:GetRyUnit' of XSD type 'ns1:GetRyUnit' */
        _ns1__GetRyUnit *ns1__GetRyUnit;
      public:
        /** Return unique type id SOAP_TYPE___ns1__GetRyUnit_ */
        long soap_type() const { return SOAP_TYPE___ns1__GetRyUnit_; }
        /** Constructor with member initializations */
        __ns1__GetRyUnit_() : ns1__GetRyUnit() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__GetRyUnit_ * SOAP_FMAC2 soap_instantiate___ns1__GetRyUnit_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:12325 */
#ifndef SOAP_TYPE___ns1__GetDevCode_
#define SOAP_TYPE___ns1__GetDevCode_ (590)
/* Wrapper: */
struct SOAP_CMAC __ns1__GetDevCode_ {
      public:
        /** Optional element 'ns1:GetDevCode' of XSD type 'ns1:GetDevCode' */
        _ns1__GetDevCode *ns1__GetDevCode;
      public:
        /** Return unique type id SOAP_TYPE___ns1__GetDevCode_ */
        long soap_type() const { return SOAP_TYPE___ns1__GetDevCode_; }
        /** Constructor with member initializations */
        __ns1__GetDevCode_() : ns1__GetDevCode() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__GetDevCode_ * SOAP_FMAC2 soap_instantiate___ns1__GetDevCode_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:12396 */
#ifndef SOAP_TYPE___ns1__CheckDevCode_
#define SOAP_TYPE___ns1__CheckDevCode_ (592)
/* Wrapper: */
struct SOAP_CMAC __ns1__CheckDevCode_ {
      public:
        /** Optional element 'ns1:CheckDevCode' of XSD type 'ns1:CheckDevCode' */
        _ns1__CheckDevCode *ns1__CheckDevCode;
      public:
        /** Return unique type id SOAP_TYPE___ns1__CheckDevCode_ */
        long soap_type() const { return SOAP_TYPE___ns1__CheckDevCode_; }
        /** Constructor with member initializations */
        __ns1__CheckDevCode_() : ns1__CheckDevCode() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__CheckDevCode_ * SOAP_FMAC2 soap_instantiate___ns1__CheckDevCode_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:12467 */
#ifndef SOAP_TYPE___ns1__HelloWorld_
#define SOAP_TYPE___ns1__HelloWorld_ (594)
/* Wrapper: */
struct SOAP_CMAC __ns1__HelloWorld_ {
      public:
        /** Optional element 'ns1:HelloWorld' of XSD type 'ns1:HelloWorld' */
        _ns1__HelloWorld *ns1__HelloWorld;
      public:
        /** Return unique type id SOAP_TYPE___ns1__HelloWorld_ */
        long soap_type() const { return SOAP_TYPE___ns1__HelloWorld_; }
        /** Constructor with member initializations */
        __ns1__HelloWorld_() : ns1__HelloWorld() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__HelloWorld_ * SOAP_FMAC2 soap_instantiate___ns1__HelloWorld_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:12538 */
#ifndef SOAP_TYPE___ns1__GetDBString_
#define SOAP_TYPE___ns1__GetDBString_ (596)
/* Wrapper: */
struct SOAP_CMAC __ns1__GetDBString_ {
      public:
        /** Optional element 'ns1:GetDBString' of XSD type 'ns1:GetDBString' */
        _ns1__GetDBString *ns1__GetDBString;
      public:
        /** Return unique type id SOAP_TYPE___ns1__GetDBString_ */
        long soap_type() const { return SOAP_TYPE___ns1__GetDBString_; }
        /** Constructor with member initializations */
        __ns1__GetDBString_() : ns1__GetDBString() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__GetDBString_ * SOAP_FMAC2 soap_instantiate___ns1__GetDBString_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:12609 */
#ifndef SOAP_TYPE___ns1__QueryData_
#define SOAP_TYPE___ns1__QueryData_ (598)
/* Wrapper: */
struct SOAP_CMAC __ns1__QueryData_ {
      public:
        /** Optional element 'ns1:QueryData' of XSD type 'ns1:QueryData' */
        _ns1__QueryData *ns1__QueryData;
      public:
        /** Return unique type id SOAP_TYPE___ns1__QueryData_ */
        long soap_type() const { return SOAP_TYPE___ns1__QueryData_; }
        /** Constructor with member initializations */
        __ns1__QueryData_() : ns1__QueryData() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__QueryData_ * SOAP_FMAC2 soap_instantiate___ns1__QueryData_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:12680 */
#ifndef SOAP_TYPE___ns1__QueryDataCount_
#define SOAP_TYPE___ns1__QueryDataCount_ (600)
/* Wrapper: */
struct SOAP_CMAC __ns1__QueryDataCount_ {
      public:
        /** Optional element 'ns1:QueryDataCount' of XSD type 'ns1:QueryDataCount' */
        _ns1__QueryDataCount *ns1__QueryDataCount;
      public:
        /** Return unique type id SOAP_TYPE___ns1__QueryDataCount_ */
        long soap_type() const { return SOAP_TYPE___ns1__QueryDataCount_; }
        /** Constructor with member initializations */
        __ns1__QueryDataCount_() : ns1__QueryDataCount() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__QueryDataCount_ * SOAP_FMAC2 soap_instantiate___ns1__QueryDataCount_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:12751 */
#ifndef SOAP_TYPE___ns1__ExecuteSql_
#define SOAP_TYPE___ns1__ExecuteSql_ (602)
/* Wrapper: */
struct SOAP_CMAC __ns1__ExecuteSql_ {
      public:
        /** Optional element 'ns1:ExecuteSql' of XSD type 'ns1:ExecuteSql' */
        _ns1__ExecuteSql *ns1__ExecuteSql;
      public:
        /** Return unique type id SOAP_TYPE___ns1__ExecuteSql_ */
        long soap_type() const { return SOAP_TYPE___ns1__ExecuteSql_; }
        /** Constructor with member initializations */
        __ns1__ExecuteSql_() : ns1__ExecuteSql() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__ExecuteSql_ * SOAP_FMAC2 soap_instantiate___ns1__ExecuteSql_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:12822 */
#ifndef SOAP_TYPE___ns1__SaveData_
#define SOAP_TYPE___ns1__SaveData_ (604)
/* Wrapper: */
struct SOAP_CMAC __ns1__SaveData_ {
      public:
        /** Optional element 'ns1:SaveData' of XSD type 'ns1:SaveData' */
        _ns1__SaveData *ns1__SaveData;
      public:
        /** Return unique type id SOAP_TYPE___ns1__SaveData_ */
        long soap_type() const { return SOAP_TYPE___ns1__SaveData_; }
        /** Constructor with member initializations */
        __ns1__SaveData_() : ns1__SaveData() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__SaveData_ * SOAP_FMAC2 soap_instantiate___ns1__SaveData_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:12893 */
#ifndef SOAP_TYPE___ns1__SaveFileData_
#define SOAP_TYPE___ns1__SaveFileData_ (606)
/* Wrapper: */
struct SOAP_CMAC __ns1__SaveFileData_ {
      public:
        /** Optional element 'ns1:SaveFileData' of XSD type 'ns1:SaveFileData' */
        _ns1__SaveFileData *ns1__SaveFileData;
      public:
        /** Return unique type id SOAP_TYPE___ns1__SaveFileData_ */
        long soap_type() const { return SOAP_TYPE___ns1__SaveFileData_; }
        /** Constructor with member initializations */
        __ns1__SaveFileData_() : ns1__SaveFileData() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__SaveFileData_ * SOAP_FMAC2 soap_instantiate___ns1__SaveFileData_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:12964 */
#ifndef SOAP_TYPE___ns1__DownPic_
#define SOAP_TYPE___ns1__DownPic_ (608)
/* Wrapper: */
struct SOAP_CMAC __ns1__DownPic_ {
      public:
        /** Optional element 'ns1:DownPic' of XSD type 'ns1:DownPic' */
        _ns1__DownPic *ns1__DownPic;
      public:
        /** Return unique type id SOAP_TYPE___ns1__DownPic_ */
        long soap_type() const { return SOAP_TYPE___ns1__DownPic_; }
        /** Constructor with member initializations */
        __ns1__DownPic_() : ns1__DownPic() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__DownPic_ * SOAP_FMAC2 soap_instantiate___ns1__DownPic_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:13035 */
#ifndef SOAP_TYPE___ns1__DownAllPic_
#define SOAP_TYPE___ns1__DownAllPic_ (610)
/* Wrapper: */
struct SOAP_CMAC __ns1__DownAllPic_ {
      public:
        /** Optional element 'ns1:DownAllPic' of XSD type 'ns1:DownAllPic' */
        _ns1__DownAllPic *ns1__DownAllPic;
      public:
        /** Return unique type id SOAP_TYPE___ns1__DownAllPic_ */
        long soap_type() const { return SOAP_TYPE___ns1__DownAllPic_; }
        /** Constructor with member initializations */
        __ns1__DownAllPic_() : ns1__DownAllPic() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__DownAllPic_ * SOAP_FMAC2 soap_instantiate___ns1__DownAllPic_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:13106 */
#ifndef SOAP_TYPE___ns1__GetGxdataUpTime_
#define SOAP_TYPE___ns1__GetGxdataUpTime_ (612)
/* Wrapper: */
struct SOAP_CMAC __ns1__GetGxdataUpTime_ {
      public:
        /** Optional element 'ns1:GetGxdataUpTime' of XSD type 'ns1:GetGxdataUpTime' */
        _ns1__GetGxdataUpTime *ns1__GetGxdataUpTime;
      public:
        /** Return unique type id SOAP_TYPE___ns1__GetGxdataUpTime_ */
        long soap_type() const { return SOAP_TYPE___ns1__GetGxdataUpTime_; }
        /** Constructor with member initializations */
        __ns1__GetGxdataUpTime_() : ns1__GetGxdataUpTime() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__GetGxdataUpTime_ * SOAP_FMAC2 soap_instantiate___ns1__GetGxdataUpTime_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:13177 */
#ifndef SOAP_TYPE___ns1__signedUserInfo_
#define SOAP_TYPE___ns1__signedUserInfo_ (614)
/* Wrapper: */
struct SOAP_CMAC __ns1__signedUserInfo_ {
      public:
        /** Optional element 'ns1:signedUserInfo' of XSD type 'ns1:signedUserInfo' */
        _ns1__signedUserInfo *ns1__signedUserInfo;
      public:
        /** Return unique type id SOAP_TYPE___ns1__signedUserInfo_ */
        long soap_type() const { return SOAP_TYPE___ns1__signedUserInfo_; }
        /** Constructor with member initializations */
        __ns1__signedUserInfo_() : ns1__signedUserInfo() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__signedUserInfo_ * SOAP_FMAC2 soap_instantiate___ns1__signedUserInfo_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:13248 */
#ifndef SOAP_TYPE___ns1__GetOsDateTime_
#define SOAP_TYPE___ns1__GetOsDateTime_ (616)
/* Wrapper: */
struct SOAP_CMAC __ns1__GetOsDateTime_ {
      public:
        /** Optional element 'ns1:GetOsDateTime' of XSD type 'ns1:GetOsDateTime' */
        _ns1__GetOsDateTime *ns1__GetOsDateTime;
      public:
        /** Return unique type id SOAP_TYPE___ns1__GetOsDateTime_ */
        long soap_type() const { return SOAP_TYPE___ns1__GetOsDateTime_; }
        /** Constructor with member initializations */
        __ns1__GetOsDateTime_() : ns1__GetOsDateTime() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__GetOsDateTime_ * SOAP_FMAC2 soap_instantiate___ns1__GetOsDateTime_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:13319 */
#ifndef SOAP_TYPE___ns1__QueryPhotobw_
#define SOAP_TYPE___ns1__QueryPhotobw_ (618)
/* Wrapper: */
struct SOAP_CMAC __ns1__QueryPhotobw_ {
      public:
        /** Optional element 'ns1:QueryPhotobw' of XSD type 'ns1:QueryPhotobw' */
        _ns1__QueryPhotobw *ns1__QueryPhotobw;
      public:
        /** Return unique type id SOAP_TYPE___ns1__QueryPhotobw_ */
        long soap_type() const { return SOAP_TYPE___ns1__QueryPhotobw_; }
        /** Constructor with member initializations */
        __ns1__QueryPhotobw_() : ns1__QueryPhotobw() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__QueryPhotobw_ * SOAP_FMAC2 soap_instantiate___ns1__QueryPhotobw_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:13390 */
#ifndef SOAP_TYPE___ns1__TcdQuery_
#define SOAP_TYPE___ns1__TcdQuery_ (620)
/* Wrapper: */
struct SOAP_CMAC __ns1__TcdQuery_ {
      public:
        /** Optional element 'ns1:TcdQuery' of XSD type 'ns1:TcdQuery' */
        _ns1__TcdQuery *ns1__TcdQuery;
      public:
        /** Return unique type id SOAP_TYPE___ns1__TcdQuery_ */
        long soap_type() const { return SOAP_TYPE___ns1__TcdQuery_; }
        /** Constructor with member initializations */
        __ns1__TcdQuery_() : ns1__TcdQuery() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__TcdQuery_ * SOAP_FMAC2 soap_instantiate___ns1__TcdQuery_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:13461 */
#ifndef SOAP_TYPE___ns1__TcdSendup_
#define SOAP_TYPE___ns1__TcdSendup_ (622)
/* Wrapper: */
struct SOAP_CMAC __ns1__TcdSendup_ {
      public:
        /** Optional element 'ns1:TcdSendup' of XSD type 'ns1:TcdSendup' */
        _ns1__TcdSendup *ns1__TcdSendup;
      public:
        /** Return unique type id SOAP_TYPE___ns1__TcdSendup_ */
        long soap_type() const { return SOAP_TYPE___ns1__TcdSendup_; }
        /** Constructor with member initializations */
        __ns1__TcdSendup_() : ns1__TcdSendup() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__TcdSendup_ * SOAP_FMAC2 soap_instantiate___ns1__TcdSendup_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:13532 */
#ifndef SOAP_TYPE___ns1__UpLoadData_
#define SOAP_TYPE___ns1__UpLoadData_ (624)
/* Wrapper: */
struct SOAP_CMAC __ns1__UpLoadData_ {
      public:
        /** Optional element 'ns1:UpLoadData' of XSD type 'ns1:UpLoadData' */
        _ns1__UpLoadData *ns1__UpLoadData;
      public:
        /** Return unique type id SOAP_TYPE___ns1__UpLoadData_ */
        long soap_type() const { return SOAP_TYPE___ns1__UpLoadData_; }
        /** Constructor with member initializations */
        __ns1__UpLoadData_() : ns1__UpLoadData() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__UpLoadData_ * SOAP_FMAC2 soap_instantiate___ns1__UpLoadData_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:13603 */
#ifndef SOAP_TYPE___ns1__ExecuteSqlForColb_
#define SOAP_TYPE___ns1__ExecuteSqlForColb_ (626)
/* Wrapper: */
struct SOAP_CMAC __ns1__ExecuteSqlForColb_ {
      public:
        /** Optional element 'ns1:ExecuteSqlForColb' of XSD type 'ns1:ExecuteSqlForColb' */
        _ns1__ExecuteSqlForColb *ns1__ExecuteSqlForColb;
      public:
        /** Return unique type id SOAP_TYPE___ns1__ExecuteSqlForColb_ */
        long soap_type() const { return SOAP_TYPE___ns1__ExecuteSqlForColb_; }
        /** Constructor with member initializations */
        __ns1__ExecuteSqlForColb_() : ns1__ExecuteSqlForColb() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__ExecuteSqlForColb_ * SOAP_FMAC2 soap_instantiate___ns1__ExecuteSqlForColb_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:13674 */
#ifndef SOAP_TYPE___ns1__GetXHYDGLXTupdater_
#define SOAP_TYPE___ns1__GetXHYDGLXTupdater_ (628)
/* Wrapper: */
struct SOAP_CMAC __ns1__GetXHYDGLXTupdater_ {
      public:
        /** Optional element 'ns1:GetXHYDGLXTupdater' of XSD type 'ns1:GetXHYDGLXTupdater' */
        _ns1__GetXHYDGLXTupdater *ns1__GetXHYDGLXTupdater;
      public:
        /** Return unique type id SOAP_TYPE___ns1__GetXHYDGLXTupdater_ */
        long soap_type() const { return SOAP_TYPE___ns1__GetXHYDGLXTupdater_; }
        /** Constructor with member initializations */
        __ns1__GetXHYDGLXTupdater_() : ns1__GetXHYDGLXTupdater() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__GetXHYDGLXTupdater_ * SOAP_FMAC2 soap_instantiate___ns1__GetXHYDGLXTupdater_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:13745 */
#ifndef SOAP_TYPE___ns1__GetAPVupdater_
#define SOAP_TYPE___ns1__GetAPVupdater_ (630)
/* Wrapper: */
struct SOAP_CMAC __ns1__GetAPVupdater_ {
      public:
        /** Optional element 'ns1:GetAPVupdater' of XSD type 'ns1:GetAPVupdater' */
        _ns1__GetAPVupdater *ns1__GetAPVupdater;
      public:
        /** Return unique type id SOAP_TYPE___ns1__GetAPVupdater_ */
        long soap_type() const { return SOAP_TYPE___ns1__GetAPVupdater_; }
        /** Constructor with member initializations */
        __ns1__GetAPVupdater_() : ns1__GetAPVupdater() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__GetAPVupdater_ * SOAP_FMAC2 soap_instantiate___ns1__GetAPVupdater_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:13816 */
#ifndef SOAP_TYPE___ns1__UpLoadFile_
#define SOAP_TYPE___ns1__UpLoadFile_ (632)
/* Wrapper: */
struct SOAP_CMAC __ns1__UpLoadFile_ {
      public:
        /** Optional element 'ns1:UpLoadFile' of XSD type 'ns1:UpLoadFile' */
        _ns1__UpLoadFile *ns1__UpLoadFile;
      public:
        /** Return unique type id SOAP_TYPE___ns1__UpLoadFile_ */
        long soap_type() const { return SOAP_TYPE___ns1__UpLoadFile_; }
        /** Constructor with member initializations */
        __ns1__UpLoadFile_() : ns1__UpLoadFile() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__UpLoadFile_ * SOAP_FMAC2 soap_instantiate___ns1__UpLoadFile_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:13887 */
#ifndef SOAP_TYPE___ns1__upPic_
#define SOAP_TYPE___ns1__upPic_ (634)
/* Wrapper: */
struct SOAP_CMAC __ns1__upPic_ {
      public:
        /** Optional element 'ns1:upPic' of XSD type 'ns1:upPic' */
        _ns1__upPic *ns1__upPic;
      public:
        /** Return unique type id SOAP_TYPE___ns1__upPic_ */
        long soap_type() const { return SOAP_TYPE___ns1__upPic_; }
        /** Constructor with member initializations */
        __ns1__upPic_() : ns1__upPic() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__upPic_ * SOAP_FMAC2 soap_instantiate___ns1__upPic_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:13958 */
#ifndef SOAP_TYPE___ns1__DownloadPic_
#define SOAP_TYPE___ns1__DownloadPic_ (636)
/* Wrapper: */
struct SOAP_CMAC __ns1__DownloadPic_ {
      public:
        /** Optional element 'ns1:DownloadPic' of XSD type 'ns1:DownloadPic' */
        _ns1__DownloadPic *ns1__DownloadPic;
      public:
        /** Return unique type id SOAP_TYPE___ns1__DownloadPic_ */
        long soap_type() const { return SOAP_TYPE___ns1__DownloadPic_; }
        /** Constructor with member initializations */
        __ns1__DownloadPic_() : ns1__DownloadPic() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__DownloadPic_ * SOAP_FMAC2 soap_instantiate___ns1__DownloadPic_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:14029 */
#ifndef SOAP_TYPE___ns1__GetPicNames_
#define SOAP_TYPE___ns1__GetPicNames_ (638)
/* Wrapper: */
struct SOAP_CMAC __ns1__GetPicNames_ {
      public:
        /** Optional element 'ns1:GetPicNames' of XSD type 'ns1:GetPicNames' */
        _ns1__GetPicNames *ns1__GetPicNames;
      public:
        /** Return unique type id SOAP_TYPE___ns1__GetPicNames_ */
        long soap_type() const { return SOAP_TYPE___ns1__GetPicNames_; }
        /** Constructor with member initializations */
        __ns1__GetPicNames_() : ns1__GetPicNames() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__GetPicNames_ * SOAP_FMAC2 soap_instantiate___ns1__GetPicNames_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:14100 */
#ifndef SOAP_TYPE___ns1__GetDwInfo_
#define SOAP_TYPE___ns1__GetDwInfo_ (640)
/* Wrapper: */
struct SOAP_CMAC __ns1__GetDwInfo_ {
      public:
        /** Optional element 'ns1:GetDwInfo' of XSD type 'ns1:GetDwInfo' */
        _ns1__GetDwInfo *ns1__GetDwInfo;
      public:
        /** Return unique type id SOAP_TYPE___ns1__GetDwInfo_ */
        long soap_type() const { return SOAP_TYPE___ns1__GetDwInfo_; }
        /** Constructor with member initializations */
        __ns1__GetDwInfo_() : ns1__GetDwInfo() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__GetDwInfo_ * SOAP_FMAC2 soap_instantiate___ns1__GetDwInfo_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:14171 */
#ifndef SOAP_TYPE___ns1__GetDwPic_
#define SOAP_TYPE___ns1__GetDwPic_ (642)
/* Wrapper: */
struct SOAP_CMAC __ns1__GetDwPic_ {
      public:
        /** Optional element 'ns1:GetDwPic' of XSD type 'ns1:GetDwPic' */
        _ns1__GetDwPic *ns1__GetDwPic;
      public:
        /** Return unique type id SOAP_TYPE___ns1__GetDwPic_ */
        long soap_type() const { return SOAP_TYPE___ns1__GetDwPic_; }
        /** Constructor with member initializations */
        __ns1__GetDwPic_() : ns1__GetDwPic() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__GetDwPic_ * SOAP_FMAC2 soap_instantiate___ns1__GetDwPic_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:14242 */
#ifndef SOAP_TYPE___ns1__GetDeviceXj_
#define SOAP_TYPE___ns1__GetDeviceXj_ (644)
/* Wrapper: */
struct SOAP_CMAC __ns1__GetDeviceXj_ {
      public:
        /** Optional element 'ns1:GetDeviceXj' of XSD type 'ns1:GetDeviceXj' */
        _ns1__GetDeviceXj *ns1__GetDeviceXj;
      public:
        /** Return unique type id SOAP_TYPE___ns1__GetDeviceXj_ */
        long soap_type() const { return SOAP_TYPE___ns1__GetDeviceXj_; }
        /** Constructor with member initializations */
        __ns1__GetDeviceXj_() : ns1__GetDeviceXj() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__GetDeviceXj_ * SOAP_FMAC2 soap_instantiate___ns1__GetDeviceXj_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:14313 */
#ifndef SOAP_TYPE___ns1__GetJxData_
#define SOAP_TYPE___ns1__GetJxData_ (646)
/* Wrapper: */
struct SOAP_CMAC __ns1__GetJxData_ {
      public:
        /** Optional element 'ns1:GetJxData' of XSD type 'ns1:GetJxData' */
        _ns1__GetJxData *ns1__GetJxData;
      public:
        /** Return unique type id SOAP_TYPE___ns1__GetJxData_ */
        long soap_type() const { return SOAP_TYPE___ns1__GetJxData_; }
        /** Constructor with member initializations */
        __ns1__GetJxData_() : ns1__GetJxData() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__GetJxData_ * SOAP_FMAC2 soap_instantiate___ns1__GetJxData_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:14384 */
#ifndef SOAP_TYPE___ns1__GetStationJxData_
#define SOAP_TYPE___ns1__GetStationJxData_ (648)
/* Wrapper: */
struct SOAP_CMAC __ns1__GetStationJxData_ {
      public:
        /** Optional element 'ns1:GetStationJxData' of XSD type 'ns1:GetStationJxData' */
        _ns1__GetStationJxData *ns1__GetStationJxData;
      public:
        /** Return unique type id SOAP_TYPE___ns1__GetStationJxData_ */
        long soap_type() const { return SOAP_TYPE___ns1__GetStationJxData_; }
        /** Constructor with member initializations */
        __ns1__GetStationJxData_() : ns1__GetStationJxData() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__GetStationJxData_ * SOAP_FMAC2 soap_instantiate___ns1__GetStationJxData_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:14455 */
#ifndef SOAP_TYPE___ns1__GetJxPic_
#define SOAP_TYPE___ns1__GetJxPic_ (650)
/* Wrapper: */
struct SOAP_CMAC __ns1__GetJxPic_ {
      public:
        /** Optional element 'ns1:GetJxPic' of XSD type 'ns1:GetJxPic' */
        _ns1__GetJxPic *ns1__GetJxPic;
      public:
        /** Return unique type id SOAP_TYPE___ns1__GetJxPic_ */
        long soap_type() const { return SOAP_TYPE___ns1__GetJxPic_; }
        /** Constructor with member initializations */
        __ns1__GetJxPic_() : ns1__GetJxPic() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__GetJxPic_ * SOAP_FMAC2 soap_instantiate___ns1__GetJxPic_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:14527 */
#ifndef SOAP_TYPE___ns1__GetDevPic_
#define SOAP_TYPE___ns1__GetDevPic_ (652)
/* Wrapper: */
struct SOAP_CMAC __ns1__GetDevPic_ {
      public:
        /** Optional element 'ns1:GetDevPic' of XSD type 'ns1:GetDevPic' */
        _ns1__GetDevPic *ns1__GetDevPic;
      public:
        /** Return unique type id SOAP_TYPE___ns1__GetDevPic_ */
        long soap_type() const { return SOAP_TYPE___ns1__GetDevPic_; }
        /** Constructor with member initializations */
        __ns1__GetDevPic_() : ns1__GetDevPic() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__GetDevPic_ * SOAP_FMAC2 soap_instantiate___ns1__GetDevPic_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:14598 */
#ifndef SOAP_TYPE___ns1__GetBgImg_
#define SOAP_TYPE___ns1__GetBgImg_ (654)
/* Wrapper: */
struct SOAP_CMAC __ns1__GetBgImg_ {
      public:
        /** Optional element 'ns1:GetBgImg' of XSD type 'ns1:GetBgImg' */
        _ns1__GetBgImg *ns1__GetBgImg;
      public:
        /** Return unique type id SOAP_TYPE___ns1__GetBgImg_ */
        long soap_type() const { return SOAP_TYPE___ns1__GetBgImg_; }
        /** Constructor with member initializations */
        __ns1__GetBgImg_() : ns1__GetBgImg() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__GetBgImg_ * SOAP_FMAC2 soap_instantiate___ns1__GetBgImg_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:14669 */
#ifndef SOAP_TYPE___ns1__GetDcsData_
#define SOAP_TYPE___ns1__GetDcsData_ (656)
/* Wrapper: */
struct SOAP_CMAC __ns1__GetDcsData_ {
      public:
        /** Optional element 'ns1:GetDcsData' of XSD type 'ns1:GetDcsData' */
        _ns1__GetDcsData *ns1__GetDcsData;
      public:
        /** Return unique type id SOAP_TYPE___ns1__GetDcsData_ */
        long soap_type() const { return SOAP_TYPE___ns1__GetDcsData_; }
        /** Constructor with member initializations */
        __ns1__GetDcsData_() : ns1__GetDcsData() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__GetDcsData_ * SOAP_FMAC2 soap_instantiate___ns1__GetDcsData_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:14740 */
#ifndef SOAP_TYPE___ns1__DownLoadMobGPSData_
#define SOAP_TYPE___ns1__DownLoadMobGPSData_ (658)
/* Wrapper: */
struct SOAP_CMAC __ns1__DownLoadMobGPSData_ {
      public:
        /** Optional element 'ns1:DownLoadMobGPSData' of XSD type 'ns1:DownLoadMobGPSData' */
        _ns1__DownLoadMobGPSData *ns1__DownLoadMobGPSData;
      public:
        /** Return unique type id SOAP_TYPE___ns1__DownLoadMobGPSData_ */
        long soap_type() const { return SOAP_TYPE___ns1__DownLoadMobGPSData_; }
        /** Constructor with member initializations */
        __ns1__DownLoadMobGPSData_() : ns1__DownLoadMobGPSData() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__DownLoadMobGPSData_ * SOAP_FMAC2 soap_instantiate___ns1__DownLoadMobGPSData_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:14811 */
#ifndef SOAP_TYPE___ns1__MobDownLoadData_
#define SOAP_TYPE___ns1__MobDownLoadData_ (660)
/* Wrapper: */
struct SOAP_CMAC __ns1__MobDownLoadData_ {
      public:
        /** Optional element 'ns1:MobDownLoadData' of XSD type 'ns1:MobDownLoadData' */
        _ns1__MobDownLoadData *ns1__MobDownLoadData;
      public:
        /** Return unique type id SOAP_TYPE___ns1__MobDownLoadData_ */
        long soap_type() const { return SOAP_TYPE___ns1__MobDownLoadData_; }
        /** Constructor with member initializations */
        __ns1__MobDownLoadData_() : ns1__MobDownLoadData() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__MobDownLoadData_ * SOAP_FMAC2 soap_instantiate___ns1__MobDownLoadData_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:14882 */
#ifndef SOAP_TYPE___ns1__GetOpenFireInfo_
#define SOAP_TYPE___ns1__GetOpenFireInfo_ (662)
/* Wrapper: */
struct SOAP_CMAC __ns1__GetOpenFireInfo_ {
      public:
        /** Optional element 'ns1:GetOpenFireInfo' of XSD type 'ns1:GetOpenFireInfo' */
        _ns1__GetOpenFireInfo *ns1__GetOpenFireInfo;
      public:
        /** Return unique type id SOAP_TYPE___ns1__GetOpenFireInfo_ */
        long soap_type() const { return SOAP_TYPE___ns1__GetOpenFireInfo_; }
        /** Constructor with member initializations */
        __ns1__GetOpenFireInfo_() : ns1__GetOpenFireInfo() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__GetOpenFireInfo_ * SOAP_FMAC2 soap_instantiate___ns1__GetOpenFireInfo_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:14953 */
#ifndef SOAP_TYPE___ns1__GetDwList_
#define SOAP_TYPE___ns1__GetDwList_ (664)
/* Wrapper: */
struct SOAP_CMAC __ns1__GetDwList_ {
      public:
        /** Optional element 'ns1:GetDwList' of XSD type 'ns1:GetDwList' */
        _ns1__GetDwList *ns1__GetDwList;
      public:
        /** Return unique type id SOAP_TYPE___ns1__GetDwList_ */
        long soap_type() const { return SOAP_TYPE___ns1__GetDwList_; }
        /** Constructor with member initializations */
        __ns1__GetDwList_() : ns1__GetDwList() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__GetDwList_ * SOAP_FMAC2 soap_instantiate___ns1__GetDwList_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:15024 */
#ifndef SOAP_TYPE___ns1__GetUnitStation_
#define SOAP_TYPE___ns1__GetUnitStation_ (666)
/* Wrapper: */
struct SOAP_CMAC __ns1__GetUnitStation_ {
      public:
        /** Optional element 'ns1:GetUnitStation' of XSD type 'ns1:GetUnitStation' */
        _ns1__GetUnitStation *ns1__GetUnitStation;
      public:
        /** Return unique type id SOAP_TYPE___ns1__GetUnitStation_ */
        long soap_type() const { return SOAP_TYPE___ns1__GetUnitStation_; }
        /** Constructor with member initializations */
        __ns1__GetUnitStation_() : ns1__GetUnitStation() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__GetUnitStation_ * SOAP_FMAC2 soap_instantiate___ns1__GetUnitStation_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:15095 */
#ifndef SOAP_TYPE___ns1__GetUnitStruct_
#define SOAP_TYPE___ns1__GetUnitStruct_ (668)
/* Wrapper: */
struct SOAP_CMAC __ns1__GetUnitStruct_ {
      public:
        /** Optional element 'ns1:GetUnitStruct' of XSD type 'ns1:GetUnitStruct' */
        _ns1__GetUnitStruct *ns1__GetUnitStruct;
      public:
        /** Return unique type id SOAP_TYPE___ns1__GetUnitStruct_ */
        long soap_type() const { return SOAP_TYPE___ns1__GetUnitStruct_; }
        /** Constructor with member initializations */
        __ns1__GetUnitStruct_() : ns1__GetUnitStruct() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__GetUnitStruct_ * SOAP_FMAC2 soap_instantiate___ns1__GetUnitStruct_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:15166 */
#ifndef SOAP_TYPE___ns1__GetUnitPersonInfo_
#define SOAP_TYPE___ns1__GetUnitPersonInfo_ (670)
/* Wrapper: */
struct SOAP_CMAC __ns1__GetUnitPersonInfo_ {
      public:
        /** Optional element 'ns1:GetUnitPersonInfo' of XSD type 'ns1:GetUnitPersonInfo' */
        _ns1__GetUnitPersonInfo *ns1__GetUnitPersonInfo;
      public:
        /** Return unique type id SOAP_TYPE___ns1__GetUnitPersonInfo_ */
        long soap_type() const { return SOAP_TYPE___ns1__GetUnitPersonInfo_; }
        /** Constructor with member initializations */
        __ns1__GetUnitPersonInfo_() : ns1__GetUnitPersonInfo() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__GetUnitPersonInfo_ * SOAP_FMAC2 soap_instantiate___ns1__GetUnitPersonInfo_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:15237 */
#ifndef SOAP_TYPE___ns1__GetFileSize_
#define SOAP_TYPE___ns1__GetFileSize_ (672)
/* Wrapper: */
struct SOAP_CMAC __ns1__GetFileSize_ {
      public:
        /** Optional element 'ns1:GetFileSize' of XSD type 'ns1:GetFileSize' */
        _ns1__GetFileSize *ns1__GetFileSize;
      public:
        /** Return unique type id SOAP_TYPE___ns1__GetFileSize_ */
        long soap_type() const { return SOAP_TYPE___ns1__GetFileSize_; }
        /** Constructor with member initializations */
        __ns1__GetFileSize_() : ns1__GetFileSize() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__GetFileSize_ * SOAP_FMAC2 soap_instantiate___ns1__GetFileSize_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:15308 */
#ifndef SOAP_TYPE___ns1__GetXbList_
#define SOAP_TYPE___ns1__GetXbList_ (674)
/* Wrapper: */
struct SOAP_CMAC __ns1__GetXbList_ {
      public:
        /** Optional element 'ns1:GetXbList' of XSD type 'ns1:GetXbList' */
        _ns1__GetXbList *ns1__GetXbList;
      public:
        /** Return unique type id SOAP_TYPE___ns1__GetXbList_ */
        long soap_type() const { return SOAP_TYPE___ns1__GetXbList_; }
        /** Constructor with member initializations */
        __ns1__GetXbList_() : ns1__GetXbList() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__GetXbList_ * SOAP_FMAC2 soap_instantiate___ns1__GetXbList_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:15379 */
#ifndef SOAP_TYPE___ns1__GetXbStationList_
#define SOAP_TYPE___ns1__GetXbStationList_ (676)
/* Wrapper: */
struct SOAP_CMAC __ns1__GetXbStationList_ {
      public:
        /** Optional element 'ns1:GetXbStationList' of XSD type 'ns1:GetXbStationList' */
        _ns1__GetXbStationList *ns1__GetXbStationList;
      public:
        /** Return unique type id SOAP_TYPE___ns1__GetXbStationList_ */
        long soap_type() const { return SOAP_TYPE___ns1__GetXbStationList_; }
        /** Constructor with member initializations */
        __ns1__GetXbStationList_() : ns1__GetXbStationList() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__GetXbStationList_ * SOAP_FMAC2 soap_instantiate___ns1__GetXbStationList_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:15450 */
#ifndef SOAP_TYPE___ns1__GetMapDeviceType_
#define SOAP_TYPE___ns1__GetMapDeviceType_ (678)
/* Wrapper: */
struct SOAP_CMAC __ns1__GetMapDeviceType_ {
      public:
        /** Optional element 'ns1:GetMapDeviceType' of XSD type 'ns1:GetMapDeviceType' */
        _ns1__GetMapDeviceType *ns1__GetMapDeviceType;
      public:
        /** Return unique type id SOAP_TYPE___ns1__GetMapDeviceType_ */
        long soap_type() const { return SOAP_TYPE___ns1__GetMapDeviceType_; }
        /** Constructor with member initializations */
        __ns1__GetMapDeviceType_() : ns1__GetMapDeviceType() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__GetMapDeviceType_ * SOAP_FMAC2 soap_instantiate___ns1__GetMapDeviceType_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:15521 */
#ifndef SOAP_TYPE___ns1__GetGxDeviceData_
#define SOAP_TYPE___ns1__GetGxDeviceData_ (680)
/* Wrapper: */
struct SOAP_CMAC __ns1__GetGxDeviceData_ {
      public:
        /** Optional element 'ns1:GetGxDeviceData' of XSD type 'ns1:GetGxDeviceData' */
        _ns1__GetGxDeviceData *ns1__GetGxDeviceData;
      public:
        /** Return unique type id SOAP_TYPE___ns1__GetGxDeviceData_ */
        long soap_type() const { return SOAP_TYPE___ns1__GetGxDeviceData_; }
        /** Constructor with member initializations */
        __ns1__GetGxDeviceData_() : ns1__GetGxDeviceData() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__GetGxDeviceData_ * SOAP_FMAC2 soap_instantiate___ns1__GetGxDeviceData_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:15592 */
#ifndef SOAP_TYPE___ns1__GetDownFileInfo_
#define SOAP_TYPE___ns1__GetDownFileInfo_ (682)
/* Wrapper: */
struct SOAP_CMAC __ns1__GetDownFileInfo_ {
      public:
        /** Optional element 'ns1:GetDownFileInfo' of XSD type 'ns1:GetDownFileInfo' */
        _ns1__GetDownFileInfo *ns1__GetDownFileInfo;
      public:
        /** Return unique type id SOAP_TYPE___ns1__GetDownFileInfo_ */
        long soap_type() const { return SOAP_TYPE___ns1__GetDownFileInfo_; }
        /** Constructor with member initializations */
        __ns1__GetDownFileInfo_() : ns1__GetDownFileInfo() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__GetDownFileInfo_ * SOAP_FMAC2 soap_instantiate___ns1__GetDownFileInfo_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:15663 */
#ifndef SOAP_TYPE___ns1__DownMapfile_
#define SOAP_TYPE___ns1__DownMapfile_ (684)
/* Wrapper: */
struct SOAP_CMAC __ns1__DownMapfile_ {
      public:
        /** Optional element 'ns1:DownMapfile' of XSD type 'ns1:DownMapfile' */
        _ns1__DownMapfile *ns1__DownMapfile;
      public:
        /** Return unique type id SOAP_TYPE___ns1__DownMapfile_ */
        long soap_type() const { return SOAP_TYPE___ns1__DownMapfile_; }
        /** Constructor with member initializations */
        __ns1__DownMapfile_() : ns1__DownMapfile() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__DownMapfile_ * SOAP_FMAC2 soap_instantiate___ns1__DownMapfile_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:15734 */
#ifndef SOAP_TYPE___ns1__GetFileNew_
#define SOAP_TYPE___ns1__GetFileNew_ (686)
/* Wrapper: */
struct SOAP_CMAC __ns1__GetFileNew_ {
      public:
        /** Optional element 'ns1:GetFileNew' of XSD type 'ns1:GetFileNew' */
        _ns1__GetFileNew *ns1__GetFileNew;
      public:
        /** Return unique type id SOAP_TYPE___ns1__GetFileNew_ */
        long soap_type() const { return SOAP_TYPE___ns1__GetFileNew_; }
        /** Constructor with member initializations */
        __ns1__GetFileNew_() : ns1__GetFileNew() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__GetFileNew_ * SOAP_FMAC2 soap_instantiate___ns1__GetFileNew_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:15805 */
#ifndef SOAP_TYPE___ns1__AlterTable_
#define SOAP_TYPE___ns1__AlterTable_ (688)
/* Wrapper: */
struct SOAP_CMAC __ns1__AlterTable_ {
      public:
        /** Optional element 'ns1:AlterTable' of XSD type 'ns1:AlterTable' */
        _ns1__AlterTable *ns1__AlterTable;
      public:
        /** Return unique type id SOAP_TYPE___ns1__AlterTable_ */
        long soap_type() const { return SOAP_TYPE___ns1__AlterTable_; }
        /** Constructor with member initializations */
        __ns1__AlterTable_() : ns1__AlterTable() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__AlterTable_ * SOAP_FMAC2 soap_instantiate___ns1__AlterTable_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:15876 */
#ifndef SOAP_TYPE___ns1__DownCQData_
#define SOAP_TYPE___ns1__DownCQData_ (690)
/* Wrapper: */
struct SOAP_CMAC __ns1__DownCQData_ {
      public:
        /** Optional element 'ns1:DownCQData' of XSD type 'ns1:DownCQData' */
        _ns1__DownCQData *ns1__DownCQData;
      public:
        /** Return unique type id SOAP_TYPE___ns1__DownCQData_ */
        long soap_type() const { return SOAP_TYPE___ns1__DownCQData_; }
        /** Constructor with member initializations */
        __ns1__DownCQData_() : ns1__DownCQData() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__DownCQData_ * SOAP_FMAC2 soap_instantiate___ns1__DownCQData_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:15947 */
#ifndef SOAP_TYPE___ns1__GetTabList_
#define SOAP_TYPE___ns1__GetTabList_ (692)
/* Wrapper: */
struct SOAP_CMAC __ns1__GetTabList_ {
      public:
        /** Optional element 'ns1:GetTabList' of XSD type 'ns1:GetTabList' */
        _ns1__GetTabList *ns1__GetTabList;
      public:
        /** Return unique type id SOAP_TYPE___ns1__GetTabList_ */
        long soap_type() const { return SOAP_TYPE___ns1__GetTabList_; }
        /** Constructor with member initializations */
        __ns1__GetTabList_() : ns1__GetTabList() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__GetTabList_ * SOAP_FMAC2 soap_instantiate___ns1__GetTabList_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:16018 */
#ifndef SOAP_TYPE___ns1__IsOracleTable_
#define SOAP_TYPE___ns1__IsOracleTable_ (694)
/* Wrapper: */
struct SOAP_CMAC __ns1__IsOracleTable_ {
      public:
        /** Optional element 'ns1:IsOracleTable' of XSD type 'ns1:IsOracleTable' */
        _ns1__IsOracleTable *ns1__IsOracleTable;
      public:
        /** Return unique type id SOAP_TYPE___ns1__IsOracleTable_ */
        long soap_type() const { return SOAP_TYPE___ns1__IsOracleTable_; }
        /** Constructor with member initializations */
        __ns1__IsOracleTable_() : ns1__IsOracleTable() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__IsOracleTable_ * SOAP_FMAC2 soap_instantiate___ns1__IsOracleTable_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:16089 */
#ifndef SOAP_TYPE___ns1__GetFieldInfo_
#define SOAP_TYPE___ns1__GetFieldInfo_ (696)
/* Wrapper: */
struct SOAP_CMAC __ns1__GetFieldInfo_ {
      public:
        /** Optional element 'ns1:GetFieldInfo' of XSD type 'ns1:GetFieldInfo' */
        _ns1__GetFieldInfo *ns1__GetFieldInfo;
      public:
        /** Return unique type id SOAP_TYPE___ns1__GetFieldInfo_ */
        long soap_type() const { return SOAP_TYPE___ns1__GetFieldInfo_; }
        /** Constructor with member initializations */
        __ns1__GetFieldInfo_() : ns1__GetFieldInfo() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__GetFieldInfo_ * SOAP_FMAC2 soap_instantiate___ns1__GetFieldInfo_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:16160 */
#ifndef SOAP_TYPE___ns1__ExecuteSqlForFile_
#define SOAP_TYPE___ns1__ExecuteSqlForFile_ (698)
/* Wrapper: */
struct SOAP_CMAC __ns1__ExecuteSqlForFile_ {
      public:
        /** Optional element 'ns1:ExecuteSqlForFile' of XSD type 'ns1:ExecuteSqlForFile' */
        _ns1__ExecuteSqlForFile *ns1__ExecuteSqlForFile;
      public:
        /** Return unique type id SOAP_TYPE___ns1__ExecuteSqlForFile_ */
        long soap_type() const { return SOAP_TYPE___ns1__ExecuteSqlForFile_; }
        /** Constructor with member initializations */
        __ns1__ExecuteSqlForFile_() : ns1__ExecuteSqlForFile() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__ExecuteSqlForFile_ * SOAP_FMAC2 soap_instantiate___ns1__ExecuteSqlForFile_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:16231 */
#ifndef SOAP_TYPE___ns1__DownLoadFile_
#define SOAP_TYPE___ns1__DownLoadFile_ (700)
/* Wrapper: */
struct SOAP_CMAC __ns1__DownLoadFile_ {
      public:
        /** Optional element 'ns1:DownLoadFile' of XSD type 'ns1:DownLoadFile' */
        _ns1__DownLoadFile *ns1__DownLoadFile;
      public:
        /** Return unique type id SOAP_TYPE___ns1__DownLoadFile_ */
        long soap_type() const { return SOAP_TYPE___ns1__DownLoadFile_; }
        /** Constructor with member initializations */
        __ns1__DownLoadFile_() : ns1__DownLoadFile() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__DownLoadFile_ * SOAP_FMAC2 soap_instantiate___ns1__DownLoadFile_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:16302 */
#ifndef SOAP_TYPE___ns1__WriteFile_
#define SOAP_TYPE___ns1__WriteFile_ (702)
/* Wrapper: */
struct SOAP_CMAC __ns1__WriteFile_ {
      public:
        /** Optional element 'ns1:WriteFile' of XSD type 'ns1:WriteFile' */
        _ns1__WriteFile *ns1__WriteFile;
      public:
        /** Return unique type id SOAP_TYPE___ns1__WriteFile_ */
        long soap_type() const { return SOAP_TYPE___ns1__WriteFile_; }
        /** Constructor with member initializations */
        __ns1__WriteFile_() : ns1__WriteFile() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__WriteFile_ * SOAP_FMAC2 soap_instantiate___ns1__WriteFile_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:16373 */
#ifndef SOAP_TYPE___ns1__GetMapUpdateTime_
#define SOAP_TYPE___ns1__GetMapUpdateTime_ (704)
/* Wrapper: */
struct SOAP_CMAC __ns1__GetMapUpdateTime_ {
      public:
        /** Optional element 'ns1:GetMapUpdateTime' of XSD type 'ns1:GetMapUpdateTime' */
        _ns1__GetMapUpdateTime *ns1__GetMapUpdateTime;
      public:
        /** Return unique type id SOAP_TYPE___ns1__GetMapUpdateTime_ */
        long soap_type() const { return SOAP_TYPE___ns1__GetMapUpdateTime_; }
        /** Constructor with member initializations */
        __ns1__GetMapUpdateTime_() : ns1__GetMapUpdateTime() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__GetMapUpdateTime_ * SOAP_FMAC2 soap_instantiate___ns1__GetMapUpdateTime_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:16444 */
#ifndef SOAP_TYPE___ns1__GetMapTabName_
#define SOAP_TYPE___ns1__GetMapTabName_ (706)
/* Wrapper: */
struct SOAP_CMAC __ns1__GetMapTabName_ {
      public:
        /** Optional element 'ns1:GetMapTabName' of XSD type 'ns1:GetMapTabName' */
        _ns1__GetMapTabName *ns1__GetMapTabName;
      public:
        /** Return unique type id SOAP_TYPE___ns1__GetMapTabName_ */
        long soap_type() const { return SOAP_TYPE___ns1__GetMapTabName_; }
        /** Constructor with member initializations */
        __ns1__GetMapTabName_() : ns1__GetMapTabName() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__GetMapTabName_ * SOAP_FMAC2 soap_instantiate___ns1__GetMapTabName_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:16515 */
#ifndef SOAP_TYPE___ns1__GetMapDeviceData_
#define SOAP_TYPE___ns1__GetMapDeviceData_ (708)
/* Wrapper: */
struct SOAP_CMAC __ns1__GetMapDeviceData_ {
      public:
        /** Optional element 'ns1:GetMapDeviceData' of XSD type 'ns1:GetMapDeviceData' */
        _ns1__GetMapDeviceData *ns1__GetMapDeviceData;
      public:
        /** Return unique type id SOAP_TYPE___ns1__GetMapDeviceData_ */
        long soap_type() const { return SOAP_TYPE___ns1__GetMapDeviceData_; }
        /** Constructor with member initializations */
        __ns1__GetMapDeviceData_() : ns1__GetMapDeviceData() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__GetMapDeviceData_ * SOAP_FMAC2 soap_instantiate___ns1__GetMapDeviceData_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:16586 */
#ifndef SOAP_TYPE___ns1__GetMaList_
#define SOAP_TYPE___ns1__GetMaList_ (710)
/* Wrapper: */
struct SOAP_CMAC __ns1__GetMaList_ {
      public:
        /** Optional element 'ns1:GetMaList' of XSD type 'ns1:GetMaList' */
        _ns1__GetMaList *ns1__GetMaList;
      public:
        /** Return unique type id SOAP_TYPE___ns1__GetMaList_ */
        long soap_type() const { return SOAP_TYPE___ns1__GetMaList_; }
        /** Constructor with member initializations */
        __ns1__GetMaList_() : ns1__GetMaList() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__GetMaList_ * SOAP_FMAC2 soap_instantiate___ns1__GetMaList_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:16657 */
#ifndef SOAP_TYPE___ns1__GetMangeUnit_
#define SOAP_TYPE___ns1__GetMangeUnit_ (712)
/* Wrapper: */
struct SOAP_CMAC __ns1__GetMangeUnit_ {
      public:
        /** Optional element 'ns1:GetMangeUnit' of XSD type 'ns1:GetMangeUnit' */
        _ns1__GetMangeUnit *ns1__GetMangeUnit;
      public:
        /** Return unique type id SOAP_TYPE___ns1__GetMangeUnit_ */
        long soap_type() const { return SOAP_TYPE___ns1__GetMangeUnit_; }
        /** Constructor with member initializations */
        __ns1__GetMangeUnit_() : ns1__GetMangeUnit() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__GetMangeUnit_ * SOAP_FMAC2 soap_instantiate___ns1__GetMangeUnit_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:16728 */
#ifndef SOAP_TYPE___ns1__GetMangeXb_
#define SOAP_TYPE___ns1__GetMangeXb_ (714)
/* Wrapper: */
struct SOAP_CMAC __ns1__GetMangeXb_ {
      public:
        /** Optional element 'ns1:GetMangeXb' of XSD type 'ns1:GetMangeXb' */
        _ns1__GetMangeXb *ns1__GetMangeXb;
      public:
        /** Return unique type id SOAP_TYPE___ns1__GetMangeXb_ */
        long soap_type() const { return SOAP_TYPE___ns1__GetMangeXb_; }
        /** Constructor with member initializations */
        __ns1__GetMangeXb_() : ns1__GetMangeXb() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__GetMangeXb_ * SOAP_FMAC2 soap_instantiate___ns1__GetMangeXb_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:16799 */
#ifndef SOAP_TYPE___ns1__CheckMapVer_
#define SOAP_TYPE___ns1__CheckMapVer_ (716)
/* Wrapper: */
struct SOAP_CMAC __ns1__CheckMapVer_ {
      public:
        /** Optional element 'ns1:CheckMapVer' of XSD type 'ns1:CheckMapVer' */
        _ns1__CheckMapVer *ns1__CheckMapVer;
      public:
        /** Return unique type id SOAP_TYPE___ns1__CheckMapVer_ */
        long soap_type() const { return SOAP_TYPE___ns1__CheckMapVer_; }
        /** Constructor with member initializations */
        __ns1__CheckMapVer_() : ns1__CheckMapVer() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__CheckMapVer_ * SOAP_FMAC2 soap_instantiate___ns1__CheckMapVer_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:16870 */
#ifndef SOAP_TYPE___ns1__GetMap_
#define SOAP_TYPE___ns1__GetMap_ (718)
/* Wrapper: */
struct SOAP_CMAC __ns1__GetMap_ {
      public:
        /** Optional element 'ns1:GetMap' of XSD type 'ns1:GetMap' */
        _ns1__GetMap *ns1__GetMap;
      public:
        /** Return unique type id SOAP_TYPE___ns1__GetMap_ */
        long soap_type() const { return SOAP_TYPE___ns1__GetMap_; }
        /** Constructor with member initializations */
        __ns1__GetMap_() : ns1__GetMap() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__GetMap_ * SOAP_FMAC2 soap_instantiate___ns1__GetMap_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:16941 */
#ifndef SOAP_TYPE___ns1__GetTableData_
#define SOAP_TYPE___ns1__GetTableData_ (720)
/* Wrapper: */
struct SOAP_CMAC __ns1__GetTableData_ {
      public:
        /** Optional element 'ns1:GetTableData' of XSD type 'ns1:GetTableData' */
        _ns1__GetTableData *ns1__GetTableData;
      public:
        /** Return unique type id SOAP_TYPE___ns1__GetTableData_ */
        long soap_type() const { return SOAP_TYPE___ns1__GetTableData_; }
        /** Constructor with member initializations */
        __ns1__GetTableData_() : ns1__GetTableData() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__GetTableData_ * SOAP_FMAC2 soap_instantiate___ns1__GetTableData_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:17012 */
#ifndef SOAP_TYPE___ns1__ServerLevel_
#define SOAP_TYPE___ns1__ServerLevel_ (722)
/* Wrapper: */
struct SOAP_CMAC __ns1__ServerLevel_ {
      public:
        /** Optional element 'ns1:ServerLevel' of XSD type 'ns1:ServerLevel' */
        _ns1__ServerLevel *ns1__ServerLevel;
      public:
        /** Return unique type id SOAP_TYPE___ns1__ServerLevel_ */
        long soap_type() const { return SOAP_TYPE___ns1__ServerLevel_; }
        /** Constructor with member initializations */
        __ns1__ServerLevel_() : ns1__ServerLevel() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__ServerLevel_ * SOAP_FMAC2 soap_instantiate___ns1__ServerLevel_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:17083 */
#ifndef SOAP_TYPE___ns1__GetMapListTime_
#define SOAP_TYPE___ns1__GetMapListTime_ (724)
/* Wrapper: */
struct SOAP_CMAC __ns1__GetMapListTime_ {
      public:
        /** Optional element 'ns1:GetMapListTime' of XSD type 'ns1:GetMapListTime' */
        _ns1__GetMapListTime *ns1__GetMapListTime;
      public:
        /** Return unique type id SOAP_TYPE___ns1__GetMapListTime_ */
        long soap_type() const { return SOAP_TYPE___ns1__GetMapListTime_; }
        /** Constructor with member initializations */
        __ns1__GetMapListTime_() : ns1__GetMapListTime() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__GetMapListTime_ * SOAP_FMAC2 soap_instantiate___ns1__GetMapListTime_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:17154 */
#ifndef SOAP_TYPE___ns1__UpdateGzclMap_
#define SOAP_TYPE___ns1__UpdateGzclMap_ (726)
/* Wrapper: */
struct SOAP_CMAC __ns1__UpdateGzclMap_ {
      public:
        /** Optional element 'ns1:UpdateGzclMap' of XSD type 'ns1:UpdateGzclMap' */
        _ns1__UpdateGzclMap *ns1__UpdateGzclMap;
      public:
        /** Return unique type id SOAP_TYPE___ns1__UpdateGzclMap_ */
        long soap_type() const { return SOAP_TYPE___ns1__UpdateGzclMap_; }
        /** Constructor with member initializations */
        __ns1__UpdateGzclMap_() : ns1__UpdateGzclMap() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__UpdateGzclMap_ * SOAP_FMAC2 soap_instantiate___ns1__UpdateGzclMap_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:17225 */
#ifndef SOAP_TYPE___ns1__GetUnitMapVer_
#define SOAP_TYPE___ns1__GetUnitMapVer_ (728)
/* Wrapper: */
struct SOAP_CMAC __ns1__GetUnitMapVer_ {
      public:
        /** Optional element 'ns1:GetUnitMapVer' of XSD type 'ns1:GetUnitMapVer' */
        _ns1__GetUnitMapVer *ns1__GetUnitMapVer;
      public:
        /** Return unique type id SOAP_TYPE___ns1__GetUnitMapVer_ */
        long soap_type() const { return SOAP_TYPE___ns1__GetUnitMapVer_; }
        /** Constructor with member initializations */
        __ns1__GetUnitMapVer_() : ns1__GetUnitMapVer() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__GetUnitMapVer_ * SOAP_FMAC2 soap_instantiate___ns1__GetUnitMapVer_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:17296 */
#ifndef SOAP_TYPE___ns1__GetMangeMapUpdate_
#define SOAP_TYPE___ns1__GetMangeMapUpdate_ (730)
/* Wrapper: */
struct SOAP_CMAC __ns1__GetMangeMapUpdate_ {
      public:
        /** Optional element 'ns1:GetMangeMapUpdate' of XSD type 'ns1:GetMangeMapUpdate' */
        _ns1__GetMangeMapUpdate *ns1__GetMangeMapUpdate;
      public:
        /** Return unique type id SOAP_TYPE___ns1__GetMangeMapUpdate_ */
        long soap_type() const { return SOAP_TYPE___ns1__GetMangeMapUpdate_; }
        /** Constructor with member initializations */
        __ns1__GetMangeMapUpdate_() : ns1__GetMangeMapUpdate() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__GetMangeMapUpdate_ * SOAP_FMAC2 soap_instantiate___ns1__GetMangeMapUpdate_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:17367 */
#ifndef SOAP_TYPE___ns1__OpenProcess_
#define SOAP_TYPE___ns1__OpenProcess_ (732)
/* Wrapper: */
struct SOAP_CMAC __ns1__OpenProcess_ {
      public:
        /** Optional element 'ns1:OpenProcess' of XSD type 'ns1:OpenProcess' */
        _ns1__OpenProcess *ns1__OpenProcess;
      public:
        /** Return unique type id SOAP_TYPE___ns1__OpenProcess_ */
        long soap_type() const { return SOAP_TYPE___ns1__OpenProcess_; }
        /** Constructor with member initializations */
        __ns1__OpenProcess_() : ns1__OpenProcess() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__OpenProcess_ * SOAP_FMAC2 soap_instantiate___ns1__OpenProcess_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:17438 */
#ifndef SOAP_TYPE___ns1__GetEmfPngVer_
#define SOAP_TYPE___ns1__GetEmfPngVer_ (734)
/* Wrapper: */
struct SOAP_CMAC __ns1__GetEmfPngVer_ {
      public:
        /** Optional element 'ns1:GetEmfPngVer' of XSD type 'ns1:GetEmfPngVer' */
        _ns1__GetEmfPngVer *ns1__GetEmfPngVer;
      public:
        /** Return unique type id SOAP_TYPE___ns1__GetEmfPngVer_ */
        long soap_type() const { return SOAP_TYPE___ns1__GetEmfPngVer_; }
        /** Constructor with member initializations */
        __ns1__GetEmfPngVer_() : ns1__GetEmfPngVer() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__GetEmfPngVer_ * SOAP_FMAC2 soap_instantiate___ns1__GetEmfPngVer_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:17509 */
#ifndef SOAP_TYPE___ns1__GetEmfPngFile_
#define SOAP_TYPE___ns1__GetEmfPngFile_ (736)
/* Wrapper: */
struct SOAP_CMAC __ns1__GetEmfPngFile_ {
      public:
        /** Optional element 'ns1:GetEmfPngFile' of XSD type 'ns1:GetEmfPngFile' */
        _ns1__GetEmfPngFile *ns1__GetEmfPngFile;
      public:
        /** Return unique type id SOAP_TYPE___ns1__GetEmfPngFile_ */
        long soap_type() const { return SOAP_TYPE___ns1__GetEmfPngFile_; }
        /** Constructor with member initializations */
        __ns1__GetEmfPngFile_() : ns1__GetEmfPngFile() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__GetEmfPngFile_ * SOAP_FMAC2 soap_instantiate___ns1__GetEmfPngFile_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:17580 */
#ifndef SOAP_TYPE___ns1__OpenMapExe_
#define SOAP_TYPE___ns1__OpenMapExe_ (738)
/* Wrapper: */
struct SOAP_CMAC __ns1__OpenMapExe_ {
      public:
        /** Optional element 'ns1:OpenMapExe' of XSD type 'ns1:OpenMapExe' */
        _ns1__OpenMapExe *ns1__OpenMapExe;
      public:
        /** Return unique type id SOAP_TYPE___ns1__OpenMapExe_ */
        long soap_type() const { return SOAP_TYPE___ns1__OpenMapExe_; }
        /** Constructor with member initializations */
        __ns1__OpenMapExe_() : ns1__OpenMapExe() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__OpenMapExe_ * SOAP_FMAC2 soap_instantiate___ns1__OpenMapExe_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:17651 */
#ifndef SOAP_TYPE___ns1__ChaoQi_
#define SOAP_TYPE___ns1__ChaoQi_ (740)
/* Wrapper: */
struct SOAP_CMAC __ns1__ChaoQi_ {
      public:
        /** Optional element 'ns1:ChaoQi' of XSD type 'ns1:ChaoQi' */
        _ns1__ChaoQi *ns1__ChaoQi;
      public:
        /** Return unique type id SOAP_TYPE___ns1__ChaoQi_ */
        long soap_type() const { return SOAP_TYPE___ns1__ChaoQi_; }
        /** Constructor with member initializations */
        __ns1__ChaoQi_() : ns1__ChaoQi() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__ChaoQi_ * SOAP_FMAC2 soap_instantiate___ns1__ChaoQi_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:17722 */
#ifndef SOAP_TYPE___ns1__JiChaoQi_
#define SOAP_TYPE___ns1__JiChaoQi_ (742)
/* Wrapper: */
struct SOAP_CMAC __ns1__JiChaoQi_ {
      public:
        /** Optional element 'ns1:JiChaoQi' of XSD type 'ns1:JiChaoQi' */
        _ns1__JiChaoQi *ns1__JiChaoQi;
      public:
        /** Return unique type id SOAP_TYPE___ns1__JiChaoQi_ */
        long soap_type() const { return SOAP_TYPE___ns1__JiChaoQi_; }
        /** Constructor with member initializations */
        __ns1__JiChaoQi_() : ns1__JiChaoQi() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__JiChaoQi_ * SOAP_FMAC2 soap_instantiate___ns1__JiChaoQi_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:17793 */
#ifndef SOAP_TYPE___ns1__GetZhouQi_
#define SOAP_TYPE___ns1__GetZhouQi_ (744)
/* Wrapper: */
struct SOAP_CMAC __ns1__GetZhouQi_ {
      public:
        /** Optional element 'ns1:GetZhouQi' of XSD type 'ns1:GetZhouQi' */
        _ns1__GetZhouQi *ns1__GetZhouQi;
      public:
        /** Return unique type id SOAP_TYPE___ns1__GetZhouQi_ */
        long soap_type() const { return SOAP_TYPE___ns1__GetZhouQi_; }
        /** Constructor with member initializations */
        __ns1__GetZhouQi_() : ns1__GetZhouQi() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__GetZhouQi_ * SOAP_FMAC2 soap_instantiate___ns1__GetZhouQi_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:17864 */
#ifndef SOAP_TYPE___ns1__FlowChartEmf_
#define SOAP_TYPE___ns1__FlowChartEmf_ (746)
/* Wrapper: */
struct SOAP_CMAC __ns1__FlowChartEmf_ {
      public:
        /** Optional element 'ns1:FlowChartEmf' of XSD type 'ns1:FlowChartEmf' */
        _ns1__FlowChartEmf *ns1__FlowChartEmf;
      public:
        /** Return unique type id SOAP_TYPE___ns1__FlowChartEmf_ */
        long soap_type() const { return SOAP_TYPE___ns1__FlowChartEmf_; }
        /** Constructor with member initializations */
        __ns1__FlowChartEmf_() : ns1__FlowChartEmf() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__FlowChartEmf_ * SOAP_FMAC2 soap_instantiate___ns1__FlowChartEmf_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:17935 */
#ifndef SOAP_TYPE___ns1__SGCDrawEmf_
#define SOAP_TYPE___ns1__SGCDrawEmf_ (748)
/* Wrapper: */
struct SOAP_CMAC __ns1__SGCDrawEmf_ {
      public:
        /** Optional element 'ns1:SGCDrawEmf' of XSD type 'ns1:SGCDrawEmf' */
        _ns1__SGCDrawEmf *ns1__SGCDrawEmf;
      public:
        /** Return unique type id SOAP_TYPE___ns1__SGCDrawEmf_ */
        long soap_type() const { return SOAP_TYPE___ns1__SGCDrawEmf_; }
        /** Constructor with member initializations */
        __ns1__SGCDrawEmf_() : ns1__SGCDrawEmf() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__SGCDrawEmf_ * SOAP_FMAC2 soap_instantiate___ns1__SGCDrawEmf_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:18006 */
#ifndef SOAP_TYPE___ns1__GzGetTypeList_
#define SOAP_TYPE___ns1__GzGetTypeList_ (750)
/* Wrapper: */
struct SOAP_CMAC __ns1__GzGetTypeList_ {
      public:
        /** Optional element 'ns1:GzGetTypeList' of XSD type 'ns1:GzGetTypeList' */
        _ns1__GzGetTypeList *ns1__GzGetTypeList;
      public:
        /** Return unique type id SOAP_TYPE___ns1__GzGetTypeList_ */
        long soap_type() const { return SOAP_TYPE___ns1__GzGetTypeList_; }
        /** Constructor with member initializations */
        __ns1__GzGetTypeList_() : ns1__GzGetTypeList() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__GzGetTypeList_ * SOAP_FMAC2 soap_instantiate___ns1__GzGetTypeList_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:18077 */
#ifndef SOAP_TYPE___ns1__GzGetDeviceStruct_
#define SOAP_TYPE___ns1__GzGetDeviceStruct_ (752)
/* Wrapper: */
struct SOAP_CMAC __ns1__GzGetDeviceStruct_ {
      public:
        /** Optional element 'ns1:GzGetDeviceStruct' of XSD type 'ns1:GzGetDeviceStruct' */
        _ns1__GzGetDeviceStruct *ns1__GzGetDeviceStruct;
      public:
        /** Return unique type id SOAP_TYPE___ns1__GzGetDeviceStruct_ */
        long soap_type() const { return SOAP_TYPE___ns1__GzGetDeviceStruct_; }
        /** Constructor with member initializations */
        __ns1__GzGetDeviceStruct_() : ns1__GzGetDeviceStruct() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__GzGetDeviceStruct_ * SOAP_FMAC2 soap_instantiate___ns1__GzGetDeviceStruct_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:18148 */
#ifndef SOAP_TYPE___ns1__SaveMapFile_
#define SOAP_TYPE___ns1__SaveMapFile_ (754)
/* Wrapper: */
struct SOAP_CMAC __ns1__SaveMapFile_ {
      public:
        /** Optional element 'ns1:SaveMapFile' of XSD type 'ns1:SaveMapFile' */
        _ns1__SaveMapFile *ns1__SaveMapFile;
      public:
        /** Return unique type id SOAP_TYPE___ns1__SaveMapFile_ */
        long soap_type() const { return SOAP_TYPE___ns1__SaveMapFile_; }
        /** Constructor with member initializations */
        __ns1__SaveMapFile_() : ns1__SaveMapFile() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__SaveMapFile_ * SOAP_FMAC2 soap_instantiate___ns1__SaveMapFile_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:18219 */
#ifndef SOAP_TYPE___ns1__SelectYjzhStation_
#define SOAP_TYPE___ns1__SelectYjzhStation_ (756)
/* Wrapper: */
struct SOAP_CMAC __ns1__SelectYjzhStation_ {
      public:
        /** Optional element 'ns1:SelectYjzhStation' of XSD type 'ns1:SelectYjzhStation' */
        _ns1__SelectYjzhStation *ns1__SelectYjzhStation;
      public:
        /** Return unique type id SOAP_TYPE___ns1__SelectYjzhStation_ */
        long soap_type() const { return SOAP_TYPE___ns1__SelectYjzhStation_; }
        /** Constructor with member initializations */
        __ns1__SelectYjzhStation_() : ns1__SelectYjzhStation() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__SelectYjzhStation_ * SOAP_FMAC2 soap_instantiate___ns1__SelectYjzhStation_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:18290 */
#ifndef SOAP_TYPE___ns1__SelectYjzhDevice_
#define SOAP_TYPE___ns1__SelectYjzhDevice_ (758)
/* Wrapper: */
struct SOAP_CMAC __ns1__SelectYjzhDevice_ {
      public:
        /** Optional element 'ns1:SelectYjzhDevice' of XSD type 'ns1:SelectYjzhDevice' */
        _ns1__SelectYjzhDevice *ns1__SelectYjzhDevice;
      public:
        /** Return unique type id SOAP_TYPE___ns1__SelectYjzhDevice_ */
        long soap_type() const { return SOAP_TYPE___ns1__SelectYjzhDevice_; }
        /** Constructor with member initializations */
        __ns1__SelectYjzhDevice_() : ns1__SelectYjzhDevice() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__SelectYjzhDevice_ * SOAP_FMAC2 soap_instantiate___ns1__SelectYjzhDevice_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:18361 */
#ifndef SOAP_TYPE___ns1__GetYjzhZskAlarmTypes_
#define SOAP_TYPE___ns1__GetYjzhZskAlarmTypes_ (760)
/* Wrapper: */
struct SOAP_CMAC __ns1__GetYjzhZskAlarmTypes_ {
      public:
        /** Optional element 'ns1:GetYjzhZskAlarmTypes' of XSD type 'ns1:GetYjzhZskAlarmTypes' */
        _ns1__GetYjzhZskAlarmTypes *ns1__GetYjzhZskAlarmTypes;
      public:
        /** Return unique type id SOAP_TYPE___ns1__GetYjzhZskAlarmTypes_ */
        long soap_type() const { return SOAP_TYPE___ns1__GetYjzhZskAlarmTypes_; }
        /** Constructor with member initializations */
        __ns1__GetYjzhZskAlarmTypes_() : ns1__GetYjzhZskAlarmTypes() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__GetYjzhZskAlarmTypes_ * SOAP_FMAC2 soap_instantiate___ns1__GetYjzhZskAlarmTypes_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* zbxhwbservice.h:21218 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (761)
/* SOAP_ENV__Header: */
struct SOAP_CMAC SOAP_ENV__Header {
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Header */
        long soap_type() const { return SOAP_TYPE_SOAP_ENV__Header; }
        /** Constructor with member initializations */
        SOAP_ENV__Header() { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* zbxhwbservice.h:21218 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (762)
/* Type SOAP_ENV__Code is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* SOAP_ENV__Code: */
struct SOAP_CMAC SOAP_ENV__Code {
      public:
        /** Optional element 'SOAP-ENV:Value' of XSD type 'xsd:QName' */
        char *SOAP_ENV__Value;
        /** Optional element 'SOAP-ENV:Subcode' of XSD type 'SOAP-ENV:Code' */
        struct SOAP_ENV__Code *SOAP_ENV__Subcode;
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Code */
        long soap_type() const { return SOAP_TYPE_SOAP_ENV__Code; }
        /** Constructor with member initializations */
        SOAP_ENV__Code() : SOAP_ENV__Value(), SOAP_ENV__Subcode() { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* zbxhwbservice.h:21218 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (764)
/* SOAP_ENV__Detail: */
struct SOAP_CMAC SOAP_ENV__Detail {
      public:
        char *__any;
        /** Any type of element 'fault' assigned to fault with its SOAP_TYPE_T assigned to __type */
        /** Do not create a cyclic data structure throught this member unless SOAP encoding or SOAP_XML_GRAPH are used for id-ref serialization */
        int __type;
        void *fault;
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Detail */
        long soap_type() const { return SOAP_TYPE_SOAP_ENV__Detail; }
        /** Constructor with member initializations */
        SOAP_ENV__Detail() : __any(), __type(), fault() { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* zbxhwbservice.h:21218 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (767)
/* SOAP_ENV__Reason: */
struct SOAP_CMAC SOAP_ENV__Reason {
      public:
        /** Optional element 'SOAP-ENV:Text' of XSD type 'xsd:string' */
        char *SOAP_ENV__Text;
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Reason */
        long soap_type() const { return SOAP_TYPE_SOAP_ENV__Reason; }
        /** Constructor with member initializations */
        SOAP_ENV__Reason() : SOAP_ENV__Text() { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* zbxhwbservice.h:21218 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (768)
/* SOAP_ENV__Fault: */
struct SOAP_CMAC SOAP_ENV__Fault {
      public:
        /** Optional element 'faultcode' of XSD type 'xsd:QName' */
        char *faultcode;
        /** Optional element 'faultstring' of XSD type 'xsd:string' */
        char *faultstring;
        /** Optional element 'faultactor' of XSD type 'xsd:string' */
        char *faultactor;
        /** Optional element 'detail' of XSD type 'SOAP-ENV:Detail' */
        struct SOAP_ENV__Detail *detail;
        /** Optional element 'SOAP-ENV:Code' of XSD type 'SOAP-ENV:Code' */
        struct SOAP_ENV__Code *SOAP_ENV__Code;
        /** Optional element 'SOAP-ENV:Reason' of XSD type 'SOAP-ENV:Reason' */
        struct SOAP_ENV__Reason *SOAP_ENV__Reason;
        /** Optional element 'SOAP-ENV:Node' of XSD type 'xsd:string' */
        char *SOAP_ENV__Node;
        /** Optional element 'SOAP-ENV:Role' of XSD type 'xsd:string' */
        char *SOAP_ENV__Role;
        /** Optional element 'SOAP-ENV:Detail' of XSD type 'SOAP-ENV:Detail' */
        struct SOAP_ENV__Detail *SOAP_ENV__Detail;
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Fault */
        long soap_type() const { return SOAP_TYPE_SOAP_ENV__Fault; }
        /** Constructor with member initializations */
        SOAP_ENV__Fault() : faultcode(), faultstring(), faultactor(), detail(), SOAP_ENV__Code(), SOAP_ENV__Reason(), SOAP_ENV__Node(), SOAP_ENV__Role(), SOAP_ENV__Detail() { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/******************************************************************************\
 *                                                                            *
 * Typedefs                                                                   *
 *                                                                            *
\******************************************************************************/


/* (built-in):0 */
#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (5)
typedef char *_XML;
#endif

/* (built-in):0 */
#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (6)
typedef char *_QName;
#endif

/******************************************************************************\
 *                                                                            *
 * Serializable Types                                                         *
 *                                                                            *
\******************************************************************************/


/* char has binding name 'byte' for type 'xsd:byte' */
#ifndef SOAP_TYPE_byte
#define SOAP_TYPE_byte (3)
#endif

/* int has binding name 'int' for type 'xsd:int' */
#ifndef SOAP_TYPE_int
#define SOAP_TYPE_int (1)
#endif

/* LONG64 has binding name 'LONG64' for type 'xsd:long' */
#ifndef SOAP_TYPE_LONG64
#define SOAP_TYPE_LONG64 (201)
#endif

/* unsigned char has binding name 'unsignedByte' for type 'xsd:unsignedByte' */
#ifndef SOAP_TYPE_unsignedByte
#define SOAP_TYPE_unsignedByte (9)
#endif

/* unsigned int has binding name 'unsignedInt' for type 'xsd:unsignedInt' */
#ifndef SOAP_TYPE_unsignedInt
#define SOAP_TYPE_unsignedInt (8)
#endif

/* bool has binding name 'bool' for type 'xsd:boolean' */
#ifndef SOAP_TYPE_bool
#define SOAP_TYPE_bool (200)
#endif

/* _ns1__GetYjzhZskAlarmTypesResponse has binding name '_ns1__GetYjzhZskAlarmTypesResponse' for type '' */
#ifndef SOAP_TYPE__ns1__GetYjzhZskAlarmTypesResponse
#define SOAP_TYPE__ns1__GetYjzhZskAlarmTypesResponse (197)
#endif

/* _ns1__GetYjzhZskAlarmTypes has binding name '_ns1__GetYjzhZskAlarmTypes' for type '' */
#ifndef SOAP_TYPE__ns1__GetYjzhZskAlarmTypes
#define SOAP_TYPE__ns1__GetYjzhZskAlarmTypes (196)
#endif

/* _ns1__SelectYjzhDeviceResponse has binding name '_ns1__SelectYjzhDeviceResponse' for type '' */
#ifndef SOAP_TYPE__ns1__SelectYjzhDeviceResponse
#define SOAP_TYPE__ns1__SelectYjzhDeviceResponse (195)
#endif

/* _ns1__SelectYjzhDevice has binding name '_ns1__SelectYjzhDevice' for type '' */
#ifndef SOAP_TYPE__ns1__SelectYjzhDevice
#define SOAP_TYPE__ns1__SelectYjzhDevice (194)
#endif

/* _ns1__SelectYjzhStationResponse has binding name '_ns1__SelectYjzhStationResponse' for type '' */
#ifndef SOAP_TYPE__ns1__SelectYjzhStationResponse
#define SOAP_TYPE__ns1__SelectYjzhStationResponse (193)
#endif

/* _ns1__SelectYjzhStation has binding name '_ns1__SelectYjzhStation' for type '' */
#ifndef SOAP_TYPE__ns1__SelectYjzhStation
#define SOAP_TYPE__ns1__SelectYjzhStation (192)
#endif

/* _ns1__SaveMapFileResponse has binding name '_ns1__SaveMapFileResponse' for type '' */
#ifndef SOAP_TYPE__ns1__SaveMapFileResponse
#define SOAP_TYPE__ns1__SaveMapFileResponse (191)
#endif

/* _ns1__SaveMapFile has binding name '_ns1__SaveMapFile' for type '' */
#ifndef SOAP_TYPE__ns1__SaveMapFile
#define SOAP_TYPE__ns1__SaveMapFile (190)
#endif

/* _ns1__GzGetDeviceStructResponse has binding name '_ns1__GzGetDeviceStructResponse' for type '' */
#ifndef SOAP_TYPE__ns1__GzGetDeviceStructResponse
#define SOAP_TYPE__ns1__GzGetDeviceStructResponse (189)
#endif

/* _ns1__GzGetDeviceStruct has binding name '_ns1__GzGetDeviceStruct' for type '' */
#ifndef SOAP_TYPE__ns1__GzGetDeviceStruct
#define SOAP_TYPE__ns1__GzGetDeviceStruct (188)
#endif

/* _ns1__GzGetTypeListResponse has binding name '_ns1__GzGetTypeListResponse' for type '' */
#ifndef SOAP_TYPE__ns1__GzGetTypeListResponse
#define SOAP_TYPE__ns1__GzGetTypeListResponse (187)
#endif

/* _ns1__GzGetTypeList has binding name '_ns1__GzGetTypeList' for type '' */
#ifndef SOAP_TYPE__ns1__GzGetTypeList
#define SOAP_TYPE__ns1__GzGetTypeList (186)
#endif

/* _ns1__SGCDrawEmfResponse has binding name '_ns1__SGCDrawEmfResponse' for type '' */
#ifndef SOAP_TYPE__ns1__SGCDrawEmfResponse
#define SOAP_TYPE__ns1__SGCDrawEmfResponse (185)
#endif

/* _ns1__SGCDrawEmf has binding name '_ns1__SGCDrawEmf' for type '' */
#ifndef SOAP_TYPE__ns1__SGCDrawEmf
#define SOAP_TYPE__ns1__SGCDrawEmf (184)
#endif

/* _ns1__FlowChartEmfResponse has binding name '_ns1__FlowChartEmfResponse' for type '' */
#ifndef SOAP_TYPE__ns1__FlowChartEmfResponse
#define SOAP_TYPE__ns1__FlowChartEmfResponse (183)
#endif

/* _ns1__FlowChartEmf has binding name '_ns1__FlowChartEmf' for type '' */
#ifndef SOAP_TYPE__ns1__FlowChartEmf
#define SOAP_TYPE__ns1__FlowChartEmf (182)
#endif

/* _ns1__GetZhouQiResponse has binding name '_ns1__GetZhouQiResponse' for type '' */
#ifndef SOAP_TYPE__ns1__GetZhouQiResponse
#define SOAP_TYPE__ns1__GetZhouQiResponse (181)
#endif

/* _ns1__GetZhouQi has binding name '_ns1__GetZhouQi' for type '' */
#ifndef SOAP_TYPE__ns1__GetZhouQi
#define SOAP_TYPE__ns1__GetZhouQi (180)
#endif

/* _ns1__JiChaoQiResponse has binding name '_ns1__JiChaoQiResponse' for type '' */
#ifndef SOAP_TYPE__ns1__JiChaoQiResponse
#define SOAP_TYPE__ns1__JiChaoQiResponse (179)
#endif

/* _ns1__JiChaoQi has binding name '_ns1__JiChaoQi' for type '' */
#ifndef SOAP_TYPE__ns1__JiChaoQi
#define SOAP_TYPE__ns1__JiChaoQi (178)
#endif

/* _ns1__ChaoQiResponse has binding name '_ns1__ChaoQiResponse' for type '' */
#ifndef SOAP_TYPE__ns1__ChaoQiResponse
#define SOAP_TYPE__ns1__ChaoQiResponse (177)
#endif

/* _ns1__ChaoQi has binding name '_ns1__ChaoQi' for type '' */
#ifndef SOAP_TYPE__ns1__ChaoQi
#define SOAP_TYPE__ns1__ChaoQi (176)
#endif

/* _ns1__OpenMapExeResponse has binding name '_ns1__OpenMapExeResponse' for type '' */
#ifndef SOAP_TYPE__ns1__OpenMapExeResponse
#define SOAP_TYPE__ns1__OpenMapExeResponse (175)
#endif

/* _ns1__OpenMapExe has binding name '_ns1__OpenMapExe' for type '' */
#ifndef SOAP_TYPE__ns1__OpenMapExe
#define SOAP_TYPE__ns1__OpenMapExe (174)
#endif

/* _ns1__GetEmfPngFileResponse has binding name '_ns1__GetEmfPngFileResponse' for type '' */
#ifndef SOAP_TYPE__ns1__GetEmfPngFileResponse
#define SOAP_TYPE__ns1__GetEmfPngFileResponse (173)
#endif

/* _ns1__GetEmfPngFile has binding name '_ns1__GetEmfPngFile' for type '' */
#ifndef SOAP_TYPE__ns1__GetEmfPngFile
#define SOAP_TYPE__ns1__GetEmfPngFile (172)
#endif

/* _ns1__GetEmfPngVerResponse has binding name '_ns1__GetEmfPngVerResponse' for type '' */
#ifndef SOAP_TYPE__ns1__GetEmfPngVerResponse
#define SOAP_TYPE__ns1__GetEmfPngVerResponse (171)
#endif

/* _ns1__GetEmfPngVer has binding name '_ns1__GetEmfPngVer' for type '' */
#ifndef SOAP_TYPE__ns1__GetEmfPngVer
#define SOAP_TYPE__ns1__GetEmfPngVer (170)
#endif

/* _ns1__OpenProcessResponse has binding name '_ns1__OpenProcessResponse' for type '' */
#ifndef SOAP_TYPE__ns1__OpenProcessResponse
#define SOAP_TYPE__ns1__OpenProcessResponse (169)
#endif

/* _ns1__OpenProcess has binding name '_ns1__OpenProcess' for type '' */
#ifndef SOAP_TYPE__ns1__OpenProcess
#define SOAP_TYPE__ns1__OpenProcess (168)
#endif

/* _ns1__GetMangeMapUpdateResponse has binding name '_ns1__GetMangeMapUpdateResponse' for type '' */
#ifndef SOAP_TYPE__ns1__GetMangeMapUpdateResponse
#define SOAP_TYPE__ns1__GetMangeMapUpdateResponse (167)
#endif

/* _ns1__GetMangeMapUpdate has binding name '_ns1__GetMangeMapUpdate' for type '' */
#ifndef SOAP_TYPE__ns1__GetMangeMapUpdate
#define SOAP_TYPE__ns1__GetMangeMapUpdate (166)
#endif

/* _ns1__GetUnitMapVerResponse has binding name '_ns1__GetUnitMapVerResponse' for type '' */
#ifndef SOAP_TYPE__ns1__GetUnitMapVerResponse
#define SOAP_TYPE__ns1__GetUnitMapVerResponse (165)
#endif

/* _ns1__GetUnitMapVer has binding name '_ns1__GetUnitMapVer' for type '' */
#ifndef SOAP_TYPE__ns1__GetUnitMapVer
#define SOAP_TYPE__ns1__GetUnitMapVer (164)
#endif

/* _ns1__UpdateGzclMapResponse has binding name '_ns1__UpdateGzclMapResponse' for type '' */
#ifndef SOAP_TYPE__ns1__UpdateGzclMapResponse
#define SOAP_TYPE__ns1__UpdateGzclMapResponse (163)
#endif

/* _ns1__UpdateGzclMap has binding name '_ns1__UpdateGzclMap' for type '' */
#ifndef SOAP_TYPE__ns1__UpdateGzclMap
#define SOAP_TYPE__ns1__UpdateGzclMap (162)
#endif

/* _ns1__GetMapListTimeResponse has binding name '_ns1__GetMapListTimeResponse' for type '' */
#ifndef SOAP_TYPE__ns1__GetMapListTimeResponse
#define SOAP_TYPE__ns1__GetMapListTimeResponse (161)
#endif

/* _ns1__GetMapListTime has binding name '_ns1__GetMapListTime' for type '' */
#ifndef SOAP_TYPE__ns1__GetMapListTime
#define SOAP_TYPE__ns1__GetMapListTime (160)
#endif

/* _ns1__ServerLevelResponse has binding name '_ns1__ServerLevelResponse' for type '' */
#ifndef SOAP_TYPE__ns1__ServerLevelResponse
#define SOAP_TYPE__ns1__ServerLevelResponse (159)
#endif

/* _ns1__ServerLevel has binding name '_ns1__ServerLevel' for type '' */
#ifndef SOAP_TYPE__ns1__ServerLevel
#define SOAP_TYPE__ns1__ServerLevel (158)
#endif

/* _ns1__GetTableDataResponse has binding name '_ns1__GetTableDataResponse' for type '' */
#ifndef SOAP_TYPE__ns1__GetTableDataResponse
#define SOAP_TYPE__ns1__GetTableDataResponse (157)
#endif

/* _ns1__GetTableData has binding name '_ns1__GetTableData' for type '' */
#ifndef SOAP_TYPE__ns1__GetTableData
#define SOAP_TYPE__ns1__GetTableData (156)
#endif

/* _ns1__GetMapResponse has binding name '_ns1__GetMapResponse' for type '' */
#ifndef SOAP_TYPE__ns1__GetMapResponse
#define SOAP_TYPE__ns1__GetMapResponse (155)
#endif

/* _ns1__GetMap has binding name '_ns1__GetMap' for type '' */
#ifndef SOAP_TYPE__ns1__GetMap
#define SOAP_TYPE__ns1__GetMap (154)
#endif

/* _ns1__CheckMapVerResponse has binding name '_ns1__CheckMapVerResponse' for type '' */
#ifndef SOAP_TYPE__ns1__CheckMapVerResponse
#define SOAP_TYPE__ns1__CheckMapVerResponse (153)
#endif

/* _ns1__CheckMapVer has binding name '_ns1__CheckMapVer' for type '' */
#ifndef SOAP_TYPE__ns1__CheckMapVer
#define SOAP_TYPE__ns1__CheckMapVer (152)
#endif

/* _ns1__GetMangeXbResponse has binding name '_ns1__GetMangeXbResponse' for type '' */
#ifndef SOAP_TYPE__ns1__GetMangeXbResponse
#define SOAP_TYPE__ns1__GetMangeXbResponse (151)
#endif

/* _ns1__GetMangeXb has binding name '_ns1__GetMangeXb' for type '' */
#ifndef SOAP_TYPE__ns1__GetMangeXb
#define SOAP_TYPE__ns1__GetMangeXb (150)
#endif

/* _ns1__GetMangeUnitResponse has binding name '_ns1__GetMangeUnitResponse' for type '' */
#ifndef SOAP_TYPE__ns1__GetMangeUnitResponse
#define SOAP_TYPE__ns1__GetMangeUnitResponse (149)
#endif

/* _ns1__GetMangeUnit has binding name '_ns1__GetMangeUnit' for type '' */
#ifndef SOAP_TYPE__ns1__GetMangeUnit
#define SOAP_TYPE__ns1__GetMangeUnit (148)
#endif

/* _ns1__GetMaListResponse has binding name '_ns1__GetMaListResponse' for type '' */
#ifndef SOAP_TYPE__ns1__GetMaListResponse
#define SOAP_TYPE__ns1__GetMaListResponse (147)
#endif

/* _ns1__GetMaList has binding name '_ns1__GetMaList' for type '' */
#ifndef SOAP_TYPE__ns1__GetMaList
#define SOAP_TYPE__ns1__GetMaList (146)
#endif

/* _ns1__GetMapDeviceDataResponse has binding name '_ns1__GetMapDeviceDataResponse' for type '' */
#ifndef SOAP_TYPE__ns1__GetMapDeviceDataResponse
#define SOAP_TYPE__ns1__GetMapDeviceDataResponse (145)
#endif

/* _ns1__GetMapDeviceData has binding name '_ns1__GetMapDeviceData' for type '' */
#ifndef SOAP_TYPE__ns1__GetMapDeviceData
#define SOAP_TYPE__ns1__GetMapDeviceData (144)
#endif

/* _ns1__GetMapTabNameResponse has binding name '_ns1__GetMapTabNameResponse' for type '' */
#ifndef SOAP_TYPE__ns1__GetMapTabNameResponse
#define SOAP_TYPE__ns1__GetMapTabNameResponse (143)
#endif

/* _ns1__GetMapTabName has binding name '_ns1__GetMapTabName' for type '' */
#ifndef SOAP_TYPE__ns1__GetMapTabName
#define SOAP_TYPE__ns1__GetMapTabName (142)
#endif

/* _ns1__GetMapUpdateTimeResponse has binding name '_ns1__GetMapUpdateTimeResponse' for type '' */
#ifndef SOAP_TYPE__ns1__GetMapUpdateTimeResponse
#define SOAP_TYPE__ns1__GetMapUpdateTimeResponse (141)
#endif

/* _ns1__GetMapUpdateTime has binding name '_ns1__GetMapUpdateTime' for type '' */
#ifndef SOAP_TYPE__ns1__GetMapUpdateTime
#define SOAP_TYPE__ns1__GetMapUpdateTime (140)
#endif

/* _ns1__WriteFileResponse has binding name '_ns1__WriteFileResponse' for type '' */
#ifndef SOAP_TYPE__ns1__WriteFileResponse
#define SOAP_TYPE__ns1__WriteFileResponse (139)
#endif

/* _ns1__WriteFile has binding name '_ns1__WriteFile' for type '' */
#ifndef SOAP_TYPE__ns1__WriteFile
#define SOAP_TYPE__ns1__WriteFile (138)
#endif

/* _ns1__DownLoadFileResponse has binding name '_ns1__DownLoadFileResponse' for type '' */
#ifndef SOAP_TYPE__ns1__DownLoadFileResponse
#define SOAP_TYPE__ns1__DownLoadFileResponse (137)
#endif

/* _ns1__DownLoadFile has binding name '_ns1__DownLoadFile' for type '' */
#ifndef SOAP_TYPE__ns1__DownLoadFile
#define SOAP_TYPE__ns1__DownLoadFile (136)
#endif

/* _ns1__ExecuteSqlForFileResponse has binding name '_ns1__ExecuteSqlForFileResponse' for type '' */
#ifndef SOAP_TYPE__ns1__ExecuteSqlForFileResponse
#define SOAP_TYPE__ns1__ExecuteSqlForFileResponse (135)
#endif

/* _ns1__ExecuteSqlForFile has binding name '_ns1__ExecuteSqlForFile' for type '' */
#ifndef SOAP_TYPE__ns1__ExecuteSqlForFile
#define SOAP_TYPE__ns1__ExecuteSqlForFile (134)
#endif

/* _ns1__GetFieldInfoResponse has binding name '_ns1__GetFieldInfoResponse' for type '' */
#ifndef SOAP_TYPE__ns1__GetFieldInfoResponse
#define SOAP_TYPE__ns1__GetFieldInfoResponse (133)
#endif

/* _ns1__GetFieldInfo has binding name '_ns1__GetFieldInfo' for type '' */
#ifndef SOAP_TYPE__ns1__GetFieldInfo
#define SOAP_TYPE__ns1__GetFieldInfo (132)
#endif

/* _ns1__IsOracleTableResponse has binding name '_ns1__IsOracleTableResponse' for type '' */
#ifndef SOAP_TYPE__ns1__IsOracleTableResponse
#define SOAP_TYPE__ns1__IsOracleTableResponse (131)
#endif

/* _ns1__IsOracleTable has binding name '_ns1__IsOracleTable' for type '' */
#ifndef SOAP_TYPE__ns1__IsOracleTable
#define SOAP_TYPE__ns1__IsOracleTable (130)
#endif

/* _ns1__GetTabListResponse has binding name '_ns1__GetTabListResponse' for type '' */
#ifndef SOAP_TYPE__ns1__GetTabListResponse
#define SOAP_TYPE__ns1__GetTabListResponse (129)
#endif

/* _ns1__GetTabList has binding name '_ns1__GetTabList' for type '' */
#ifndef SOAP_TYPE__ns1__GetTabList
#define SOAP_TYPE__ns1__GetTabList (128)
#endif

/* _ns1__DownCQDataResponse has binding name '_ns1__DownCQDataResponse' for type '' */
#ifndef SOAP_TYPE__ns1__DownCQDataResponse
#define SOAP_TYPE__ns1__DownCQDataResponse (127)
#endif

/* _ns1__DownCQData has binding name '_ns1__DownCQData' for type '' */
#ifndef SOAP_TYPE__ns1__DownCQData
#define SOAP_TYPE__ns1__DownCQData (126)
#endif

/* _ns1__AlterTableResponse has binding name '_ns1__AlterTableResponse' for type '' */
#ifndef SOAP_TYPE__ns1__AlterTableResponse
#define SOAP_TYPE__ns1__AlterTableResponse (125)
#endif

/* _ns1__AlterTable has binding name '_ns1__AlterTable' for type '' */
#ifndef SOAP_TYPE__ns1__AlterTable
#define SOAP_TYPE__ns1__AlterTable (124)
#endif

/* _ns1__GetFileNewResponse has binding name '_ns1__GetFileNewResponse' for type '' */
#ifndef SOAP_TYPE__ns1__GetFileNewResponse
#define SOAP_TYPE__ns1__GetFileNewResponse (123)
#endif

/* _ns1__GetFileNew has binding name '_ns1__GetFileNew' for type '' */
#ifndef SOAP_TYPE__ns1__GetFileNew
#define SOAP_TYPE__ns1__GetFileNew (122)
#endif

/* _ns1__DownMapfileResponse has binding name '_ns1__DownMapfileResponse' for type '' */
#ifndef SOAP_TYPE__ns1__DownMapfileResponse
#define SOAP_TYPE__ns1__DownMapfileResponse (121)
#endif

/* _ns1__DownMapfile has binding name '_ns1__DownMapfile' for type '' */
#ifndef SOAP_TYPE__ns1__DownMapfile
#define SOAP_TYPE__ns1__DownMapfile (120)
#endif

/* _ns1__GetDownFileInfoResponse has binding name '_ns1__GetDownFileInfoResponse' for type '' */
#ifndef SOAP_TYPE__ns1__GetDownFileInfoResponse
#define SOAP_TYPE__ns1__GetDownFileInfoResponse (119)
#endif

/* _ns1__GetDownFileInfo has binding name '_ns1__GetDownFileInfo' for type '' */
#ifndef SOAP_TYPE__ns1__GetDownFileInfo
#define SOAP_TYPE__ns1__GetDownFileInfo (118)
#endif

/* _ns1__GetGxDeviceDataResponse has binding name '_ns1__GetGxDeviceDataResponse' for type '' */
#ifndef SOAP_TYPE__ns1__GetGxDeviceDataResponse
#define SOAP_TYPE__ns1__GetGxDeviceDataResponse (117)
#endif

/* _ns1__GetGxDeviceData has binding name '_ns1__GetGxDeviceData' for type '' */
#ifndef SOAP_TYPE__ns1__GetGxDeviceData
#define SOAP_TYPE__ns1__GetGxDeviceData (116)
#endif

/* _ns1__GetMapDeviceTypeResponse has binding name '_ns1__GetMapDeviceTypeResponse' for type '' */
#ifndef SOAP_TYPE__ns1__GetMapDeviceTypeResponse
#define SOAP_TYPE__ns1__GetMapDeviceTypeResponse (115)
#endif

/* _ns1__GetMapDeviceType has binding name '_ns1__GetMapDeviceType' for type '' */
#ifndef SOAP_TYPE__ns1__GetMapDeviceType
#define SOAP_TYPE__ns1__GetMapDeviceType (114)
#endif

/* _ns1__GetXbStationListResponse has binding name '_ns1__GetXbStationListResponse' for type '' */
#ifndef SOAP_TYPE__ns1__GetXbStationListResponse
#define SOAP_TYPE__ns1__GetXbStationListResponse (113)
#endif

/* _ns1__GetXbStationList has binding name '_ns1__GetXbStationList' for type '' */
#ifndef SOAP_TYPE__ns1__GetXbStationList
#define SOAP_TYPE__ns1__GetXbStationList (112)
#endif

/* _ns1__GetXbListResponse has binding name '_ns1__GetXbListResponse' for type '' */
#ifndef SOAP_TYPE__ns1__GetXbListResponse
#define SOAP_TYPE__ns1__GetXbListResponse (111)
#endif

/* _ns1__GetXbList has binding name '_ns1__GetXbList' for type '' */
#ifndef SOAP_TYPE__ns1__GetXbList
#define SOAP_TYPE__ns1__GetXbList (110)
#endif

/* _ns1__GetFileSizeResponse has binding name '_ns1__GetFileSizeResponse' for type '' */
#ifndef SOAP_TYPE__ns1__GetFileSizeResponse
#define SOAP_TYPE__ns1__GetFileSizeResponse (109)
#endif

/* _ns1__GetFileSize has binding name '_ns1__GetFileSize' for type '' */
#ifndef SOAP_TYPE__ns1__GetFileSize
#define SOAP_TYPE__ns1__GetFileSize (108)
#endif

/* _ns1__GetUnitPersonInfoResponse has binding name '_ns1__GetUnitPersonInfoResponse' for type '' */
#ifndef SOAP_TYPE__ns1__GetUnitPersonInfoResponse
#define SOAP_TYPE__ns1__GetUnitPersonInfoResponse (107)
#endif

/* _ns1__GetUnitPersonInfo has binding name '_ns1__GetUnitPersonInfo' for type '' */
#ifndef SOAP_TYPE__ns1__GetUnitPersonInfo
#define SOAP_TYPE__ns1__GetUnitPersonInfo (106)
#endif

/* _ns1__GetUnitStructResponse has binding name '_ns1__GetUnitStructResponse' for type '' */
#ifndef SOAP_TYPE__ns1__GetUnitStructResponse
#define SOAP_TYPE__ns1__GetUnitStructResponse (105)
#endif

/* _ns1__GetUnitStruct has binding name '_ns1__GetUnitStruct' for type '' */
#ifndef SOAP_TYPE__ns1__GetUnitStruct
#define SOAP_TYPE__ns1__GetUnitStruct (104)
#endif

/* _ns1__GetUnitStationResponse has binding name '_ns1__GetUnitStationResponse' for type '' */
#ifndef SOAP_TYPE__ns1__GetUnitStationResponse
#define SOAP_TYPE__ns1__GetUnitStationResponse (103)
#endif

/* _ns1__GetUnitStation has binding name '_ns1__GetUnitStation' for type '' */
#ifndef SOAP_TYPE__ns1__GetUnitStation
#define SOAP_TYPE__ns1__GetUnitStation (102)
#endif

/* _ns1__GetDwListResponse has binding name '_ns1__GetDwListResponse' for type '' */
#ifndef SOAP_TYPE__ns1__GetDwListResponse
#define SOAP_TYPE__ns1__GetDwListResponse (101)
#endif

/* _ns1__GetDwList has binding name '_ns1__GetDwList' for type '' */
#ifndef SOAP_TYPE__ns1__GetDwList
#define SOAP_TYPE__ns1__GetDwList (100)
#endif

/* _ns1__GetOpenFireInfoResponse has binding name '_ns1__GetOpenFireInfoResponse' for type '' */
#ifndef SOAP_TYPE__ns1__GetOpenFireInfoResponse
#define SOAP_TYPE__ns1__GetOpenFireInfoResponse (99)
#endif

/* _ns1__GetOpenFireInfo has binding name '_ns1__GetOpenFireInfo' for type '' */
#ifndef SOAP_TYPE__ns1__GetOpenFireInfo
#define SOAP_TYPE__ns1__GetOpenFireInfo (98)
#endif

/* _ns1__MobDownLoadDataResponse has binding name '_ns1__MobDownLoadDataResponse' for type '' */
#ifndef SOAP_TYPE__ns1__MobDownLoadDataResponse
#define SOAP_TYPE__ns1__MobDownLoadDataResponse (97)
#endif

/* _ns1__MobDownLoadData has binding name '_ns1__MobDownLoadData' for type '' */
#ifndef SOAP_TYPE__ns1__MobDownLoadData
#define SOAP_TYPE__ns1__MobDownLoadData (96)
#endif

/* _ns1__DownLoadMobGPSDataResponse has binding name '_ns1__DownLoadMobGPSDataResponse' for type '' */
#ifndef SOAP_TYPE__ns1__DownLoadMobGPSDataResponse
#define SOAP_TYPE__ns1__DownLoadMobGPSDataResponse (95)
#endif

/* _ns1__DownLoadMobGPSData has binding name '_ns1__DownLoadMobGPSData' for type '' */
#ifndef SOAP_TYPE__ns1__DownLoadMobGPSData
#define SOAP_TYPE__ns1__DownLoadMobGPSData (94)
#endif

/* _ns1__GetDcsDataResponse has binding name '_ns1__GetDcsDataResponse' for type '' */
#ifndef SOAP_TYPE__ns1__GetDcsDataResponse
#define SOAP_TYPE__ns1__GetDcsDataResponse (93)
#endif

/* _ns1__GetDcsData has binding name '_ns1__GetDcsData' for type '' */
#ifndef SOAP_TYPE__ns1__GetDcsData
#define SOAP_TYPE__ns1__GetDcsData (92)
#endif

/* _ns1__GetBgImgResponse has binding name '_ns1__GetBgImgResponse' for type '' */
#ifndef SOAP_TYPE__ns1__GetBgImgResponse
#define SOAP_TYPE__ns1__GetBgImgResponse (91)
#endif

/* _ns1__GetBgImg has binding name '_ns1__GetBgImg' for type '' */
#ifndef SOAP_TYPE__ns1__GetBgImg
#define SOAP_TYPE__ns1__GetBgImg (90)
#endif

/* _ns1__GetDevPicResponse has binding name '_ns1__GetDevPicResponse' for type '' */
#ifndef SOAP_TYPE__ns1__GetDevPicResponse
#define SOAP_TYPE__ns1__GetDevPicResponse (89)
#endif

/* _ns1__GetDevPic has binding name '_ns1__GetDevPic' for type '' */
#ifndef SOAP_TYPE__ns1__GetDevPic
#define SOAP_TYPE__ns1__GetDevPic (88)
#endif

/* _ns1__GetJxPicResponse has binding name '_ns1__GetJxPicResponse' for type '' */
#ifndef SOAP_TYPE__ns1__GetJxPicResponse
#define SOAP_TYPE__ns1__GetJxPicResponse (87)
#endif

/* _ns1__GetJxPic has binding name '_ns1__GetJxPic' for type '' */
#ifndef SOAP_TYPE__ns1__GetJxPic
#define SOAP_TYPE__ns1__GetJxPic (86)
#endif

/* _ns1__GetStationJxDataResponse has binding name '_ns1__GetStationJxDataResponse' for type '' */
#ifndef SOAP_TYPE__ns1__GetStationJxDataResponse
#define SOAP_TYPE__ns1__GetStationJxDataResponse (85)
#endif

/* _ns1__GetStationJxData has binding name '_ns1__GetStationJxData' for type '' */
#ifndef SOAP_TYPE__ns1__GetStationJxData
#define SOAP_TYPE__ns1__GetStationJxData (84)
#endif

/* _ns1__GetJxDataResponse has binding name '_ns1__GetJxDataResponse' for type '' */
#ifndef SOAP_TYPE__ns1__GetJxDataResponse
#define SOAP_TYPE__ns1__GetJxDataResponse (83)
#endif

/* _ns1__GetJxData has binding name '_ns1__GetJxData' for type '' */
#ifndef SOAP_TYPE__ns1__GetJxData
#define SOAP_TYPE__ns1__GetJxData (82)
#endif

/* _ns1__GetDeviceXjResponse has binding name '_ns1__GetDeviceXjResponse' for type '' */
#ifndef SOAP_TYPE__ns1__GetDeviceXjResponse
#define SOAP_TYPE__ns1__GetDeviceXjResponse (81)
#endif

/* _ns1__GetDeviceXj has binding name '_ns1__GetDeviceXj' for type '' */
#ifndef SOAP_TYPE__ns1__GetDeviceXj
#define SOAP_TYPE__ns1__GetDeviceXj (80)
#endif

/* _ns1__GetDwPicResponse has binding name '_ns1__GetDwPicResponse' for type '' */
#ifndef SOAP_TYPE__ns1__GetDwPicResponse
#define SOAP_TYPE__ns1__GetDwPicResponse (79)
#endif

/* _ns1__GetDwPic has binding name '_ns1__GetDwPic' for type '' */
#ifndef SOAP_TYPE__ns1__GetDwPic
#define SOAP_TYPE__ns1__GetDwPic (78)
#endif

/* _ns1__GetDwInfoResponse has binding name '_ns1__GetDwInfoResponse' for type '' */
#ifndef SOAP_TYPE__ns1__GetDwInfoResponse
#define SOAP_TYPE__ns1__GetDwInfoResponse (77)
#endif

/* _ns1__GetDwInfo has binding name '_ns1__GetDwInfo' for type '' */
#ifndef SOAP_TYPE__ns1__GetDwInfo
#define SOAP_TYPE__ns1__GetDwInfo (76)
#endif

/* _ns1__GetPicNamesResponse has binding name '_ns1__GetPicNamesResponse' for type '' */
#ifndef SOAP_TYPE__ns1__GetPicNamesResponse
#define SOAP_TYPE__ns1__GetPicNamesResponse (75)
#endif

/* _ns1__GetPicNames has binding name '_ns1__GetPicNames' for type '' */
#ifndef SOAP_TYPE__ns1__GetPicNames
#define SOAP_TYPE__ns1__GetPicNames (74)
#endif

/* _ns1__DownloadPicResponse has binding name '_ns1__DownloadPicResponse' for type '' */
#ifndef SOAP_TYPE__ns1__DownloadPicResponse
#define SOAP_TYPE__ns1__DownloadPicResponse (73)
#endif

/* _ns1__DownloadPic has binding name '_ns1__DownloadPic' for type '' */
#ifndef SOAP_TYPE__ns1__DownloadPic
#define SOAP_TYPE__ns1__DownloadPic (72)
#endif

/* _ns1__upPicResponse has binding name '_ns1__upPicResponse' for type '' */
#ifndef SOAP_TYPE__ns1__upPicResponse
#define SOAP_TYPE__ns1__upPicResponse (71)
#endif

/* _ns1__upPic has binding name '_ns1__upPic' for type '' */
#ifndef SOAP_TYPE__ns1__upPic
#define SOAP_TYPE__ns1__upPic (70)
#endif

/* _ns1__UpLoadFileResponse has binding name '_ns1__UpLoadFileResponse' for type '' */
#ifndef SOAP_TYPE__ns1__UpLoadFileResponse
#define SOAP_TYPE__ns1__UpLoadFileResponse (69)
#endif

/* _ns1__UpLoadFile has binding name '_ns1__UpLoadFile' for type '' */
#ifndef SOAP_TYPE__ns1__UpLoadFile
#define SOAP_TYPE__ns1__UpLoadFile (68)
#endif

/* _ns1__GetAPVupdaterResponse has binding name '_ns1__GetAPVupdaterResponse' for type '' */
#ifndef SOAP_TYPE__ns1__GetAPVupdaterResponse
#define SOAP_TYPE__ns1__GetAPVupdaterResponse (67)
#endif

/* _ns1__GetAPVupdater has binding name '_ns1__GetAPVupdater' for type '' */
#ifndef SOAP_TYPE__ns1__GetAPVupdater
#define SOAP_TYPE__ns1__GetAPVupdater (66)
#endif

/* _ns1__GetXHYDGLXTupdaterResponse has binding name '_ns1__GetXHYDGLXTupdaterResponse' for type '' */
#ifndef SOAP_TYPE__ns1__GetXHYDGLXTupdaterResponse
#define SOAP_TYPE__ns1__GetXHYDGLXTupdaterResponse (65)
#endif

/* _ns1__GetXHYDGLXTupdater has binding name '_ns1__GetXHYDGLXTupdater' for type '' */
#ifndef SOAP_TYPE__ns1__GetXHYDGLXTupdater
#define SOAP_TYPE__ns1__GetXHYDGLXTupdater (64)
#endif

/* _ns1__ExecuteSqlForColbResponse has binding name '_ns1__ExecuteSqlForColbResponse' for type '' */
#ifndef SOAP_TYPE__ns1__ExecuteSqlForColbResponse
#define SOAP_TYPE__ns1__ExecuteSqlForColbResponse (63)
#endif

/* _ns1__ExecuteSqlForColb has binding name '_ns1__ExecuteSqlForColb' for type '' */
#ifndef SOAP_TYPE__ns1__ExecuteSqlForColb
#define SOAP_TYPE__ns1__ExecuteSqlForColb (62)
#endif

/* _ns1__UpLoadDataResponse has binding name '_ns1__UpLoadDataResponse' for type '' */
#ifndef SOAP_TYPE__ns1__UpLoadDataResponse
#define SOAP_TYPE__ns1__UpLoadDataResponse (61)
#endif

/* _ns1__UpLoadData has binding name '_ns1__UpLoadData' for type '' */
#ifndef SOAP_TYPE__ns1__UpLoadData
#define SOAP_TYPE__ns1__UpLoadData (60)
#endif

/* _ns1__TcdSendupResponse has binding name '_ns1__TcdSendupResponse' for type '' */
#ifndef SOAP_TYPE__ns1__TcdSendupResponse
#define SOAP_TYPE__ns1__TcdSendupResponse (59)
#endif

/* _ns1__TcdSendup has binding name '_ns1__TcdSendup' for type '' */
#ifndef SOAP_TYPE__ns1__TcdSendup
#define SOAP_TYPE__ns1__TcdSendup (58)
#endif

/* _ns1__TcdQueryResponse has binding name '_ns1__TcdQueryResponse' for type '' */
#ifndef SOAP_TYPE__ns1__TcdQueryResponse
#define SOAP_TYPE__ns1__TcdQueryResponse (57)
#endif

/* _ns1__TcdQuery has binding name '_ns1__TcdQuery' for type '' */
#ifndef SOAP_TYPE__ns1__TcdQuery
#define SOAP_TYPE__ns1__TcdQuery (56)
#endif

/* _ns1__QueryPhotobwResponse has binding name '_ns1__QueryPhotobwResponse' for type '' */
#ifndef SOAP_TYPE__ns1__QueryPhotobwResponse
#define SOAP_TYPE__ns1__QueryPhotobwResponse (55)
#endif

/* _ns1__QueryPhotobw has binding name '_ns1__QueryPhotobw' for type '' */
#ifndef SOAP_TYPE__ns1__QueryPhotobw
#define SOAP_TYPE__ns1__QueryPhotobw (54)
#endif

/* _ns1__GetOsDateTimeResponse has binding name '_ns1__GetOsDateTimeResponse' for type '' */
#ifndef SOAP_TYPE__ns1__GetOsDateTimeResponse
#define SOAP_TYPE__ns1__GetOsDateTimeResponse (53)
#endif

/* _ns1__GetOsDateTime has binding name '_ns1__GetOsDateTime' for type '' */
#ifndef SOAP_TYPE__ns1__GetOsDateTime
#define SOAP_TYPE__ns1__GetOsDateTime (52)
#endif

/* _ns1__signedUserInfoResponse has binding name '_ns1__signedUserInfoResponse' for type '' */
#ifndef SOAP_TYPE__ns1__signedUserInfoResponse
#define SOAP_TYPE__ns1__signedUserInfoResponse (51)
#endif

/* _ns1__signedUserInfo has binding name '_ns1__signedUserInfo' for type '' */
#ifndef SOAP_TYPE__ns1__signedUserInfo
#define SOAP_TYPE__ns1__signedUserInfo (50)
#endif

/* _ns1__GetGxdataUpTimeResponse has binding name '_ns1__GetGxdataUpTimeResponse' for type '' */
#ifndef SOAP_TYPE__ns1__GetGxdataUpTimeResponse
#define SOAP_TYPE__ns1__GetGxdataUpTimeResponse (49)
#endif

/* _ns1__GetGxdataUpTime has binding name '_ns1__GetGxdataUpTime' for type '' */
#ifndef SOAP_TYPE__ns1__GetGxdataUpTime
#define SOAP_TYPE__ns1__GetGxdataUpTime (48)
#endif

/* _ns1__DownAllPicResponse has binding name '_ns1__DownAllPicResponse' for type '' */
#ifndef SOAP_TYPE__ns1__DownAllPicResponse
#define SOAP_TYPE__ns1__DownAllPicResponse (47)
#endif

/* _ns1__DownAllPic has binding name '_ns1__DownAllPic' for type '' */
#ifndef SOAP_TYPE__ns1__DownAllPic
#define SOAP_TYPE__ns1__DownAllPic (46)
#endif

/* _ns1__DownPicResponse has binding name '_ns1__DownPicResponse' for type '' */
#ifndef SOAP_TYPE__ns1__DownPicResponse
#define SOAP_TYPE__ns1__DownPicResponse (45)
#endif

/* _ns1__DownPic has binding name '_ns1__DownPic' for type '' */
#ifndef SOAP_TYPE__ns1__DownPic
#define SOAP_TYPE__ns1__DownPic (44)
#endif

/* _ns1__SaveFileDataResponse has binding name '_ns1__SaveFileDataResponse' for type '' */
#ifndef SOAP_TYPE__ns1__SaveFileDataResponse
#define SOAP_TYPE__ns1__SaveFileDataResponse (43)
#endif

/* _ns1__SaveFileData has binding name '_ns1__SaveFileData' for type '' */
#ifndef SOAP_TYPE__ns1__SaveFileData
#define SOAP_TYPE__ns1__SaveFileData (42)
#endif

/* _ns1__SaveDataResponse has binding name '_ns1__SaveDataResponse' for type '' */
#ifndef SOAP_TYPE__ns1__SaveDataResponse
#define SOAP_TYPE__ns1__SaveDataResponse (41)
#endif

/* _ns1__SaveData has binding name '_ns1__SaveData' for type '' */
#ifndef SOAP_TYPE__ns1__SaveData
#define SOAP_TYPE__ns1__SaveData (40)
#endif

/* _ns1__ExecuteSqlResponse has binding name '_ns1__ExecuteSqlResponse' for type '' */
#ifndef SOAP_TYPE__ns1__ExecuteSqlResponse
#define SOAP_TYPE__ns1__ExecuteSqlResponse (39)
#endif

/* _ns1__ExecuteSql has binding name '_ns1__ExecuteSql' for type '' */
#ifndef SOAP_TYPE__ns1__ExecuteSql
#define SOAP_TYPE__ns1__ExecuteSql (38)
#endif

/* _ns1__QueryDataCountResponse has binding name '_ns1__QueryDataCountResponse' for type '' */
#ifndef SOAP_TYPE__ns1__QueryDataCountResponse
#define SOAP_TYPE__ns1__QueryDataCountResponse (37)
#endif

/* _ns1__QueryDataCount has binding name '_ns1__QueryDataCount' for type '' */
#ifndef SOAP_TYPE__ns1__QueryDataCount
#define SOAP_TYPE__ns1__QueryDataCount (36)
#endif

/* _ns1__QueryDataResponse has binding name '_ns1__QueryDataResponse' for type '' */
#ifndef SOAP_TYPE__ns1__QueryDataResponse
#define SOAP_TYPE__ns1__QueryDataResponse (35)
#endif

/* _ns1__QueryData has binding name '_ns1__QueryData' for type '' */
#ifndef SOAP_TYPE__ns1__QueryData
#define SOAP_TYPE__ns1__QueryData (34)
#endif

/* _ns1__GetDBStringResponse has binding name '_ns1__GetDBStringResponse' for type '' */
#ifndef SOAP_TYPE__ns1__GetDBStringResponse
#define SOAP_TYPE__ns1__GetDBStringResponse (33)
#endif

/* _ns1__GetDBString has binding name '_ns1__GetDBString' for type '' */
#ifndef SOAP_TYPE__ns1__GetDBString
#define SOAP_TYPE__ns1__GetDBString (32)
#endif

/* _ns1__HelloWorldResponse has binding name '_ns1__HelloWorldResponse' for type '' */
#ifndef SOAP_TYPE__ns1__HelloWorldResponse
#define SOAP_TYPE__ns1__HelloWorldResponse (31)
#endif

/* _ns1__HelloWorld has binding name '_ns1__HelloWorld' for type '' */
#ifndef SOAP_TYPE__ns1__HelloWorld
#define SOAP_TYPE__ns1__HelloWorld (30)
#endif

/* _ns1__CheckDevCodeResponse has binding name '_ns1__CheckDevCodeResponse' for type '' */
#ifndef SOAP_TYPE__ns1__CheckDevCodeResponse
#define SOAP_TYPE__ns1__CheckDevCodeResponse (29)
#endif

/* _ns1__CheckDevCode has binding name '_ns1__CheckDevCode' for type '' */
#ifndef SOAP_TYPE__ns1__CheckDevCode
#define SOAP_TYPE__ns1__CheckDevCode (28)
#endif

/* _ns1__GetDevCodeResponse has binding name '_ns1__GetDevCodeResponse' for type '' */
#ifndef SOAP_TYPE__ns1__GetDevCodeResponse
#define SOAP_TYPE__ns1__GetDevCodeResponse (27)
#endif

/* _ns1__GetDevCode has binding name '_ns1__GetDevCode' for type '' */
#ifndef SOAP_TYPE__ns1__GetDevCode
#define SOAP_TYPE__ns1__GetDevCode (26)
#endif

/* _ns1__GetRyUnitResponse has binding name '_ns1__GetRyUnitResponse' for type '' */
#ifndef SOAP_TYPE__ns1__GetRyUnitResponse
#define SOAP_TYPE__ns1__GetRyUnitResponse (25)
#endif

/* _ns1__GetRyUnit has binding name '_ns1__GetRyUnit' for type '' */
#ifndef SOAP_TYPE__ns1__GetRyUnit
#define SOAP_TYPE__ns1__GetRyUnit (24)
#endif

/* _ns1__CheckLoginUserResponse has binding name '_ns1__CheckLoginUserResponse' for type '' */
#ifndef SOAP_TYPE__ns1__CheckLoginUserResponse
#define SOAP_TYPE__ns1__CheckLoginUserResponse (23)
#endif

/* _ns1__CheckLoginUser has binding name '_ns1__CheckLoginUser' for type '' */
#ifndef SOAP_TYPE__ns1__CheckLoginUser
#define SOAP_TYPE__ns1__CheckLoginUser (22)
#endif

/* _ns1__GetPropNameResponse has binding name '_ns1__GetPropNameResponse' for type '' */
#ifndef SOAP_TYPE__ns1__GetPropNameResponse
#define SOAP_TYPE__ns1__GetPropNameResponse (21)
#endif

/* _ns1__GetPropName has binding name '_ns1__GetPropName' for type '' */
#ifndef SOAP_TYPE__ns1__GetPropName
#define SOAP_TYPE__ns1__GetPropName (20)
#endif

/* _ns1__GetPropListResponse has binding name '_ns1__GetPropListResponse' for type '' */
#ifndef SOAP_TYPE__ns1__GetPropListResponse
#define SOAP_TYPE__ns1__GetPropListResponse (19)
#endif

/* _ns1__GetPropList has binding name '_ns1__GetPropList' for type '' */
#ifndef SOAP_TYPE__ns1__GetPropList
#define SOAP_TYPE__ns1__GetPropList (18)
#endif

/* _ns1__GetYjzhZskDevFlowChartListResponse has binding name '_ns1__GetYjzhZskDevFlowChartListResponse' for type '' */
#ifndef SOAP_TYPE__ns1__GetYjzhZskDevFlowChartListResponse
#define SOAP_TYPE__ns1__GetYjzhZskDevFlowChartListResponse (17)
#endif

/* _ns1__GetYjzhZskDevFlowChartList has binding name '_ns1__GetYjzhZskDevFlowChartList' for type '' */
#ifndef SOAP_TYPE__ns1__GetYjzhZskDevFlowChartList
#define SOAP_TYPE__ns1__GetYjzhZskDevFlowChartList (16)
#endif

/* _ns1__GetYjzhZskOtherFlowChartListResponse has binding name '_ns1__GetYjzhZskOtherFlowChartListResponse' for type '' */
#ifndef SOAP_TYPE__ns1__GetYjzhZskOtherFlowChartListResponse
#define SOAP_TYPE__ns1__GetYjzhZskOtherFlowChartListResponse (15)
#endif

/* _ns1__GetYjzhZskOtherFlowChartList has binding name '_ns1__GetYjzhZskOtherFlowChartList' for type '' */
#ifndef SOAP_TYPE__ns1__GetYjzhZskOtherFlowChartList
#define SOAP_TYPE__ns1__GetYjzhZskOtherFlowChartList (14)
#endif

/* _ns1__GetYjzhZskGzFlowResponse has binding name '_ns1__GetYjzhZskGzFlowResponse' for type '' */
#ifndef SOAP_TYPE__ns1__GetYjzhZskGzFlowResponse
#define SOAP_TYPE__ns1__GetYjzhZskGzFlowResponse (13)
#endif

/* _ns1__GetYjzhZskGzFlow has binding name '_ns1__GetYjzhZskGzFlow' for type '' */
#ifndef SOAP_TYPE__ns1__GetYjzhZskGzFlow
#define SOAP_TYPE__ns1__GetYjzhZskGzFlow (12)
#endif

/* ns1__ArrayOfBase64Binary has binding name 'ns1__ArrayOfBase64Binary' for type 'ns1:ArrayOfBase64Binary' */
#ifndef SOAP_TYPE_ns1__ArrayOfBase64Binary
#define SOAP_TYPE_ns1__ArrayOfBase64Binary (11)
#endif

/* xsd__base64Binary has binding name 'xsd__base64Binary' for type 'xsd:base64Binary' */
#ifndef SOAP_TYPE_xsd__base64Binary
#define SOAP_TYPE_xsd__base64Binary (7)
#endif

/* struct SOAP_ENV__Fault has binding name 'SOAP_ENV__Fault' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (768)
#endif

/* struct SOAP_ENV__Reason has binding name 'SOAP_ENV__Reason' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (767)
#endif

/* struct SOAP_ENV__Detail has binding name 'SOAP_ENV__Detail' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (764)
#endif

/* struct SOAP_ENV__Code has binding name 'SOAP_ENV__Code' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (762)
#endif

/* struct SOAP_ENV__Header has binding name 'SOAP_ENV__Header' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (761)
#endif

/* struct SOAP_ENV__Reason * has binding name 'PointerToSOAP_ENV__Reason' for type '' */
#ifndef SOAP_TYPE_PointerToSOAP_ENV__Reason
#define SOAP_TYPE_PointerToSOAP_ENV__Reason (770)
#endif

/* struct SOAP_ENV__Detail * has binding name 'PointerToSOAP_ENV__Detail' for type '' */
#ifndef SOAP_TYPE_PointerToSOAP_ENV__Detail
#define SOAP_TYPE_PointerToSOAP_ENV__Detail (769)
#endif

/* struct SOAP_ENV__Code * has binding name 'PointerToSOAP_ENV__Code' for type '' */
#ifndef SOAP_TYPE_PointerToSOAP_ENV__Code
#define SOAP_TYPE_PointerToSOAP_ENV__Code (763)
#endif

/* _ns1__GetYjzhZskAlarmTypes * has binding name 'PointerTo_ns1__GetYjzhZskAlarmTypes' for type '' */
#ifndef SOAP_TYPE_PointerTo_ns1__GetYjzhZskAlarmTypes
#define SOAP_TYPE_PointerTo_ns1__GetYjzhZskAlarmTypes (571)
#endif

/* _ns1__SelectYjzhDevice * has binding name 'PointerTo_ns1__SelectYjzhDevice' for type '' */
#ifndef SOAP_TYPE_PointerTo_ns1__SelectYjzhDevice
#define SOAP_TYPE_PointerTo_ns1__SelectYjzhDevice (567)
#endif

/* _ns1__SelectYjzhStation * has binding name 'PointerTo_ns1__SelectYjzhStation' for type '' */
#ifndef SOAP_TYPE_PointerTo_ns1__SelectYjzhStation
#define SOAP_TYPE_PointerTo_ns1__SelectYjzhStation (563)
#endif

/* _ns1__SaveMapFile * has binding name 'PointerTo_ns1__SaveMapFile' for type '' */
#ifndef SOAP_TYPE_PointerTo_ns1__SaveMapFile
#define SOAP_TYPE_PointerTo_ns1__SaveMapFile (559)
#endif

/* _ns1__GzGetDeviceStruct * has binding name 'PointerTo_ns1__GzGetDeviceStruct' for type '' */
#ifndef SOAP_TYPE_PointerTo_ns1__GzGetDeviceStruct
#define SOAP_TYPE_PointerTo_ns1__GzGetDeviceStruct (555)
#endif

/* _ns1__GzGetTypeList * has binding name 'PointerTo_ns1__GzGetTypeList' for type '' */
#ifndef SOAP_TYPE_PointerTo_ns1__GzGetTypeList
#define SOAP_TYPE_PointerTo_ns1__GzGetTypeList (551)
#endif

/* _ns1__SGCDrawEmf * has binding name 'PointerTo_ns1__SGCDrawEmf' for type '' */
#ifndef SOAP_TYPE_PointerTo_ns1__SGCDrawEmf
#define SOAP_TYPE_PointerTo_ns1__SGCDrawEmf (547)
#endif

/* _ns1__FlowChartEmf * has binding name 'PointerTo_ns1__FlowChartEmf' for type '' */
#ifndef SOAP_TYPE_PointerTo_ns1__FlowChartEmf
#define SOAP_TYPE_PointerTo_ns1__FlowChartEmf (543)
#endif

/* _ns1__GetZhouQi * has binding name 'PointerTo_ns1__GetZhouQi' for type '' */
#ifndef SOAP_TYPE_PointerTo_ns1__GetZhouQi
#define SOAP_TYPE_PointerTo_ns1__GetZhouQi (539)
#endif

/* _ns1__JiChaoQi * has binding name 'PointerTo_ns1__JiChaoQi' for type '' */
#ifndef SOAP_TYPE_PointerTo_ns1__JiChaoQi
#define SOAP_TYPE_PointerTo_ns1__JiChaoQi (535)
#endif

/* _ns1__ChaoQi * has binding name 'PointerTo_ns1__ChaoQi' for type '' */
#ifndef SOAP_TYPE_PointerTo_ns1__ChaoQi
#define SOAP_TYPE_PointerTo_ns1__ChaoQi (531)
#endif

/* _ns1__OpenMapExe * has binding name 'PointerTo_ns1__OpenMapExe' for type '' */
#ifndef SOAP_TYPE_PointerTo_ns1__OpenMapExe
#define SOAP_TYPE_PointerTo_ns1__OpenMapExe (527)
#endif

/* _ns1__GetEmfPngFile * has binding name 'PointerTo_ns1__GetEmfPngFile' for type '' */
#ifndef SOAP_TYPE_PointerTo_ns1__GetEmfPngFile
#define SOAP_TYPE_PointerTo_ns1__GetEmfPngFile (523)
#endif

/* _ns1__GetEmfPngVer * has binding name 'PointerTo_ns1__GetEmfPngVer' for type '' */
#ifndef SOAP_TYPE_PointerTo_ns1__GetEmfPngVer
#define SOAP_TYPE_PointerTo_ns1__GetEmfPngVer (519)
#endif

/* _ns1__OpenProcess * has binding name 'PointerTo_ns1__OpenProcess' for type '' */
#ifndef SOAP_TYPE_PointerTo_ns1__OpenProcess
#define SOAP_TYPE_PointerTo_ns1__OpenProcess (515)
#endif

/* _ns1__GetMangeMapUpdate * has binding name 'PointerTo_ns1__GetMangeMapUpdate' for type '' */
#ifndef SOAP_TYPE_PointerTo_ns1__GetMangeMapUpdate
#define SOAP_TYPE_PointerTo_ns1__GetMangeMapUpdate (511)
#endif

/* _ns1__GetUnitMapVer * has binding name 'PointerTo_ns1__GetUnitMapVer' for type '' */
#ifndef SOAP_TYPE_PointerTo_ns1__GetUnitMapVer
#define SOAP_TYPE_PointerTo_ns1__GetUnitMapVer (507)
#endif

/* _ns1__UpdateGzclMap * has binding name 'PointerTo_ns1__UpdateGzclMap' for type '' */
#ifndef SOAP_TYPE_PointerTo_ns1__UpdateGzclMap
#define SOAP_TYPE_PointerTo_ns1__UpdateGzclMap (503)
#endif

/* _ns1__GetMapListTime * has binding name 'PointerTo_ns1__GetMapListTime' for type '' */
#ifndef SOAP_TYPE_PointerTo_ns1__GetMapListTime
#define SOAP_TYPE_PointerTo_ns1__GetMapListTime (499)
#endif

/* _ns1__ServerLevel * has binding name 'PointerTo_ns1__ServerLevel' for type '' */
#ifndef SOAP_TYPE_PointerTo_ns1__ServerLevel
#define SOAP_TYPE_PointerTo_ns1__ServerLevel (495)
#endif

/* _ns1__GetTableData * has binding name 'PointerTo_ns1__GetTableData' for type '' */
#ifndef SOAP_TYPE_PointerTo_ns1__GetTableData
#define SOAP_TYPE_PointerTo_ns1__GetTableData (491)
#endif

/* _ns1__GetMap * has binding name 'PointerTo_ns1__GetMap' for type '' */
#ifndef SOAP_TYPE_PointerTo_ns1__GetMap
#define SOAP_TYPE_PointerTo_ns1__GetMap (487)
#endif

/* _ns1__CheckMapVer * has binding name 'PointerTo_ns1__CheckMapVer' for type '' */
#ifndef SOAP_TYPE_PointerTo_ns1__CheckMapVer
#define SOAP_TYPE_PointerTo_ns1__CheckMapVer (483)
#endif

/* _ns1__GetMangeXb * has binding name 'PointerTo_ns1__GetMangeXb' for type '' */
#ifndef SOAP_TYPE_PointerTo_ns1__GetMangeXb
#define SOAP_TYPE_PointerTo_ns1__GetMangeXb (479)
#endif

/* _ns1__GetMangeUnit * has binding name 'PointerTo_ns1__GetMangeUnit' for type '' */
#ifndef SOAP_TYPE_PointerTo_ns1__GetMangeUnit
#define SOAP_TYPE_PointerTo_ns1__GetMangeUnit (475)
#endif

/* _ns1__GetMaList * has binding name 'PointerTo_ns1__GetMaList' for type '' */
#ifndef SOAP_TYPE_PointerTo_ns1__GetMaList
#define SOAP_TYPE_PointerTo_ns1__GetMaList (471)
#endif

/* _ns1__GetMapDeviceData * has binding name 'PointerTo_ns1__GetMapDeviceData' for type '' */
#ifndef SOAP_TYPE_PointerTo_ns1__GetMapDeviceData
#define SOAP_TYPE_PointerTo_ns1__GetMapDeviceData (467)
#endif

/* _ns1__GetMapTabName * has binding name 'PointerTo_ns1__GetMapTabName' for type '' */
#ifndef SOAP_TYPE_PointerTo_ns1__GetMapTabName
#define SOAP_TYPE_PointerTo_ns1__GetMapTabName (463)
#endif

/* _ns1__GetMapUpdateTime * has binding name 'PointerTo_ns1__GetMapUpdateTime' for type '' */
#ifndef SOAP_TYPE_PointerTo_ns1__GetMapUpdateTime
#define SOAP_TYPE_PointerTo_ns1__GetMapUpdateTime (459)
#endif

/* _ns1__WriteFile * has binding name 'PointerTo_ns1__WriteFile' for type '' */
#ifndef SOAP_TYPE_PointerTo_ns1__WriteFile
#define SOAP_TYPE_PointerTo_ns1__WriteFile (455)
#endif

/* _ns1__DownLoadFile * has binding name 'PointerTo_ns1__DownLoadFile' for type '' */
#ifndef SOAP_TYPE_PointerTo_ns1__DownLoadFile
#define SOAP_TYPE_PointerTo_ns1__DownLoadFile (451)
#endif

/* _ns1__ExecuteSqlForFile * has binding name 'PointerTo_ns1__ExecuteSqlForFile' for type '' */
#ifndef SOAP_TYPE_PointerTo_ns1__ExecuteSqlForFile
#define SOAP_TYPE_PointerTo_ns1__ExecuteSqlForFile (447)
#endif

/* _ns1__GetFieldInfo * has binding name 'PointerTo_ns1__GetFieldInfo' for type '' */
#ifndef SOAP_TYPE_PointerTo_ns1__GetFieldInfo
#define SOAP_TYPE_PointerTo_ns1__GetFieldInfo (443)
#endif

/* _ns1__IsOracleTable * has binding name 'PointerTo_ns1__IsOracleTable' for type '' */
#ifndef SOAP_TYPE_PointerTo_ns1__IsOracleTable
#define SOAP_TYPE_PointerTo_ns1__IsOracleTable (439)
#endif

/* _ns1__GetTabList * has binding name 'PointerTo_ns1__GetTabList' for type '' */
#ifndef SOAP_TYPE_PointerTo_ns1__GetTabList
#define SOAP_TYPE_PointerTo_ns1__GetTabList (435)
#endif

/* _ns1__DownCQData * has binding name 'PointerTo_ns1__DownCQData' for type '' */
#ifndef SOAP_TYPE_PointerTo_ns1__DownCQData
#define SOAP_TYPE_PointerTo_ns1__DownCQData (431)
#endif

/* _ns1__AlterTable * has binding name 'PointerTo_ns1__AlterTable' for type '' */
#ifndef SOAP_TYPE_PointerTo_ns1__AlterTable
#define SOAP_TYPE_PointerTo_ns1__AlterTable (427)
#endif

/* _ns1__GetFileNew * has binding name 'PointerTo_ns1__GetFileNew' for type '' */
#ifndef SOAP_TYPE_PointerTo_ns1__GetFileNew
#define SOAP_TYPE_PointerTo_ns1__GetFileNew (423)
#endif

/* _ns1__DownMapfile * has binding name 'PointerTo_ns1__DownMapfile' for type '' */
#ifndef SOAP_TYPE_PointerTo_ns1__DownMapfile
#define SOAP_TYPE_PointerTo_ns1__DownMapfile (419)
#endif

/* _ns1__GetDownFileInfo * has binding name 'PointerTo_ns1__GetDownFileInfo' for type '' */
#ifndef SOAP_TYPE_PointerTo_ns1__GetDownFileInfo
#define SOAP_TYPE_PointerTo_ns1__GetDownFileInfo (415)
#endif

/* _ns1__GetGxDeviceData * has binding name 'PointerTo_ns1__GetGxDeviceData' for type '' */
#ifndef SOAP_TYPE_PointerTo_ns1__GetGxDeviceData
#define SOAP_TYPE_PointerTo_ns1__GetGxDeviceData (411)
#endif

/* _ns1__GetMapDeviceType * has binding name 'PointerTo_ns1__GetMapDeviceType' for type '' */
#ifndef SOAP_TYPE_PointerTo_ns1__GetMapDeviceType
#define SOAP_TYPE_PointerTo_ns1__GetMapDeviceType (407)
#endif

/* _ns1__GetXbStationList * has binding name 'PointerTo_ns1__GetXbStationList' for type '' */
#ifndef SOAP_TYPE_PointerTo_ns1__GetXbStationList
#define SOAP_TYPE_PointerTo_ns1__GetXbStationList (403)
#endif

/* _ns1__GetXbList * has binding name 'PointerTo_ns1__GetXbList' for type '' */
#ifndef SOAP_TYPE_PointerTo_ns1__GetXbList
#define SOAP_TYPE_PointerTo_ns1__GetXbList (399)
#endif

/* _ns1__GetFileSize * has binding name 'PointerTo_ns1__GetFileSize' for type '' */
#ifndef SOAP_TYPE_PointerTo_ns1__GetFileSize
#define SOAP_TYPE_PointerTo_ns1__GetFileSize (395)
#endif

/* _ns1__GetUnitPersonInfo * has binding name 'PointerTo_ns1__GetUnitPersonInfo' for type '' */
#ifndef SOAP_TYPE_PointerTo_ns1__GetUnitPersonInfo
#define SOAP_TYPE_PointerTo_ns1__GetUnitPersonInfo (391)
#endif

/* _ns1__GetUnitStruct * has binding name 'PointerTo_ns1__GetUnitStruct' for type '' */
#ifndef SOAP_TYPE_PointerTo_ns1__GetUnitStruct
#define SOAP_TYPE_PointerTo_ns1__GetUnitStruct (387)
#endif

/* _ns1__GetUnitStation * has binding name 'PointerTo_ns1__GetUnitStation' for type '' */
#ifndef SOAP_TYPE_PointerTo_ns1__GetUnitStation
#define SOAP_TYPE_PointerTo_ns1__GetUnitStation (383)
#endif

/* _ns1__GetDwList * has binding name 'PointerTo_ns1__GetDwList' for type '' */
#ifndef SOAP_TYPE_PointerTo_ns1__GetDwList
#define SOAP_TYPE_PointerTo_ns1__GetDwList (379)
#endif

/* _ns1__GetOpenFireInfo * has binding name 'PointerTo_ns1__GetOpenFireInfo' for type '' */
#ifndef SOAP_TYPE_PointerTo_ns1__GetOpenFireInfo
#define SOAP_TYPE_PointerTo_ns1__GetOpenFireInfo (375)
#endif

/* _ns1__MobDownLoadData * has binding name 'PointerTo_ns1__MobDownLoadData' for type '' */
#ifndef SOAP_TYPE_PointerTo_ns1__MobDownLoadData
#define SOAP_TYPE_PointerTo_ns1__MobDownLoadData (371)
#endif

/* _ns1__DownLoadMobGPSData * has binding name 'PointerTo_ns1__DownLoadMobGPSData' for type '' */
#ifndef SOAP_TYPE_PointerTo_ns1__DownLoadMobGPSData
#define SOAP_TYPE_PointerTo_ns1__DownLoadMobGPSData (367)
#endif

/* _ns1__GetDcsData * has binding name 'PointerTo_ns1__GetDcsData' for type '' */
#ifndef SOAP_TYPE_PointerTo_ns1__GetDcsData
#define SOAP_TYPE_PointerTo_ns1__GetDcsData (363)
#endif

/* _ns1__GetBgImg * has binding name 'PointerTo_ns1__GetBgImg' for type '' */
#ifndef SOAP_TYPE_PointerTo_ns1__GetBgImg
#define SOAP_TYPE_PointerTo_ns1__GetBgImg (359)
#endif

/* _ns1__GetDevPic * has binding name 'PointerTo_ns1__GetDevPic' for type '' */
#ifndef SOAP_TYPE_PointerTo_ns1__GetDevPic
#define SOAP_TYPE_PointerTo_ns1__GetDevPic (355)
#endif

/* _ns1__GetJxPic * has binding name 'PointerTo_ns1__GetJxPic' for type '' */
#ifndef SOAP_TYPE_PointerTo_ns1__GetJxPic
#define SOAP_TYPE_PointerTo_ns1__GetJxPic (351)
#endif

/* _ns1__GetStationJxData * has binding name 'PointerTo_ns1__GetStationJxData' for type '' */
#ifndef SOAP_TYPE_PointerTo_ns1__GetStationJxData
#define SOAP_TYPE_PointerTo_ns1__GetStationJxData (347)
#endif

/* _ns1__GetJxData * has binding name 'PointerTo_ns1__GetJxData' for type '' */
#ifndef SOAP_TYPE_PointerTo_ns1__GetJxData
#define SOAP_TYPE_PointerTo_ns1__GetJxData (343)
#endif

/* _ns1__GetDeviceXj * has binding name 'PointerTo_ns1__GetDeviceXj' for type '' */
#ifndef SOAP_TYPE_PointerTo_ns1__GetDeviceXj
#define SOAP_TYPE_PointerTo_ns1__GetDeviceXj (339)
#endif

/* _ns1__GetDwPic * has binding name 'PointerTo_ns1__GetDwPic' for type '' */
#ifndef SOAP_TYPE_PointerTo_ns1__GetDwPic
#define SOAP_TYPE_PointerTo_ns1__GetDwPic (335)
#endif

/* _ns1__GetDwInfo * has binding name 'PointerTo_ns1__GetDwInfo' for type '' */
#ifndef SOAP_TYPE_PointerTo_ns1__GetDwInfo
#define SOAP_TYPE_PointerTo_ns1__GetDwInfo (331)
#endif

/* _ns1__GetPicNames * has binding name 'PointerTo_ns1__GetPicNames' for type '' */
#ifndef SOAP_TYPE_PointerTo_ns1__GetPicNames
#define SOAP_TYPE_PointerTo_ns1__GetPicNames (327)
#endif

/* _ns1__DownloadPic * has binding name 'PointerTo_ns1__DownloadPic' for type '' */
#ifndef SOAP_TYPE_PointerTo_ns1__DownloadPic
#define SOAP_TYPE_PointerTo_ns1__DownloadPic (323)
#endif

/* _ns1__upPic * has binding name 'PointerTo_ns1__upPic' for type '' */
#ifndef SOAP_TYPE_PointerTo_ns1__upPic
#define SOAP_TYPE_PointerTo_ns1__upPic (319)
#endif

/* _ns1__UpLoadFile * has binding name 'PointerTo_ns1__UpLoadFile' for type '' */
#ifndef SOAP_TYPE_PointerTo_ns1__UpLoadFile
#define SOAP_TYPE_PointerTo_ns1__UpLoadFile (315)
#endif

/* _ns1__GetAPVupdater * has binding name 'PointerTo_ns1__GetAPVupdater' for type '' */
#ifndef SOAP_TYPE_PointerTo_ns1__GetAPVupdater
#define SOAP_TYPE_PointerTo_ns1__GetAPVupdater (311)
#endif

/* _ns1__GetXHYDGLXTupdater * has binding name 'PointerTo_ns1__GetXHYDGLXTupdater' for type '' */
#ifndef SOAP_TYPE_PointerTo_ns1__GetXHYDGLXTupdater
#define SOAP_TYPE_PointerTo_ns1__GetXHYDGLXTupdater (307)
#endif

/* _ns1__ExecuteSqlForColb * has binding name 'PointerTo_ns1__ExecuteSqlForColb' for type '' */
#ifndef SOAP_TYPE_PointerTo_ns1__ExecuteSqlForColb
#define SOAP_TYPE_PointerTo_ns1__ExecuteSqlForColb (303)
#endif

/* _ns1__UpLoadData * has binding name 'PointerTo_ns1__UpLoadData' for type '' */
#ifndef SOAP_TYPE_PointerTo_ns1__UpLoadData
#define SOAP_TYPE_PointerTo_ns1__UpLoadData (299)
#endif

/* _ns1__TcdSendup * has binding name 'PointerTo_ns1__TcdSendup' for type '' */
#ifndef SOAP_TYPE_PointerTo_ns1__TcdSendup
#define SOAP_TYPE_PointerTo_ns1__TcdSendup (295)
#endif

/* _ns1__TcdQuery * has binding name 'PointerTo_ns1__TcdQuery' for type '' */
#ifndef SOAP_TYPE_PointerTo_ns1__TcdQuery
#define SOAP_TYPE_PointerTo_ns1__TcdQuery (291)
#endif

/* _ns1__QueryPhotobw * has binding name 'PointerTo_ns1__QueryPhotobw' for type '' */
#ifndef SOAP_TYPE_PointerTo_ns1__QueryPhotobw
#define SOAP_TYPE_PointerTo_ns1__QueryPhotobw (287)
#endif

/* _ns1__GetOsDateTime * has binding name 'PointerTo_ns1__GetOsDateTime' for type '' */
#ifndef SOAP_TYPE_PointerTo_ns1__GetOsDateTime
#define SOAP_TYPE_PointerTo_ns1__GetOsDateTime (283)
#endif

/* _ns1__signedUserInfo * has binding name 'PointerTo_ns1__signedUserInfo' for type '' */
#ifndef SOAP_TYPE_PointerTo_ns1__signedUserInfo
#define SOAP_TYPE_PointerTo_ns1__signedUserInfo (279)
#endif

/* _ns1__GetGxdataUpTime * has binding name 'PointerTo_ns1__GetGxdataUpTime' for type '' */
#ifndef SOAP_TYPE_PointerTo_ns1__GetGxdataUpTime
#define SOAP_TYPE_PointerTo_ns1__GetGxdataUpTime (275)
#endif

/* _ns1__DownAllPic * has binding name 'PointerTo_ns1__DownAllPic' for type '' */
#ifndef SOAP_TYPE_PointerTo_ns1__DownAllPic
#define SOAP_TYPE_PointerTo_ns1__DownAllPic (271)
#endif

/* _ns1__DownPic * has binding name 'PointerTo_ns1__DownPic' for type '' */
#ifndef SOAP_TYPE_PointerTo_ns1__DownPic
#define SOAP_TYPE_PointerTo_ns1__DownPic (267)
#endif

/* _ns1__SaveFileData * has binding name 'PointerTo_ns1__SaveFileData' for type '' */
#ifndef SOAP_TYPE_PointerTo_ns1__SaveFileData
#define SOAP_TYPE_PointerTo_ns1__SaveFileData (263)
#endif

/* _ns1__SaveData * has binding name 'PointerTo_ns1__SaveData' for type '' */
#ifndef SOAP_TYPE_PointerTo_ns1__SaveData
#define SOAP_TYPE_PointerTo_ns1__SaveData (259)
#endif

/* _ns1__ExecuteSql * has binding name 'PointerTo_ns1__ExecuteSql' for type '' */
#ifndef SOAP_TYPE_PointerTo_ns1__ExecuteSql
#define SOAP_TYPE_PointerTo_ns1__ExecuteSql (255)
#endif

/* _ns1__QueryDataCount * has binding name 'PointerTo_ns1__QueryDataCount' for type '' */
#ifndef SOAP_TYPE_PointerTo_ns1__QueryDataCount
#define SOAP_TYPE_PointerTo_ns1__QueryDataCount (251)
#endif

/* _ns1__QueryData * has binding name 'PointerTo_ns1__QueryData' for type '' */
#ifndef SOAP_TYPE_PointerTo_ns1__QueryData
#define SOAP_TYPE_PointerTo_ns1__QueryData (247)
#endif

/* _ns1__GetDBString * has binding name 'PointerTo_ns1__GetDBString' for type '' */
#ifndef SOAP_TYPE_PointerTo_ns1__GetDBString
#define SOAP_TYPE_PointerTo_ns1__GetDBString (243)
#endif

/* _ns1__HelloWorld * has binding name 'PointerTo_ns1__HelloWorld' for type '' */
#ifndef SOAP_TYPE_PointerTo_ns1__HelloWorld
#define SOAP_TYPE_PointerTo_ns1__HelloWorld (239)
#endif

/* _ns1__CheckDevCode * has binding name 'PointerTo_ns1__CheckDevCode' for type '' */
#ifndef SOAP_TYPE_PointerTo_ns1__CheckDevCode
#define SOAP_TYPE_PointerTo_ns1__CheckDevCode (235)
#endif

/* _ns1__GetDevCode * has binding name 'PointerTo_ns1__GetDevCode' for type '' */
#ifndef SOAP_TYPE_PointerTo_ns1__GetDevCode
#define SOAP_TYPE_PointerTo_ns1__GetDevCode (231)
#endif

/* _ns1__GetRyUnit * has binding name 'PointerTo_ns1__GetRyUnit' for type '' */
#ifndef SOAP_TYPE_PointerTo_ns1__GetRyUnit
#define SOAP_TYPE_PointerTo_ns1__GetRyUnit (227)
#endif

/* _ns1__CheckLoginUser * has binding name 'PointerTo_ns1__CheckLoginUser' for type '' */
#ifndef SOAP_TYPE_PointerTo_ns1__CheckLoginUser
#define SOAP_TYPE_PointerTo_ns1__CheckLoginUser (223)
#endif

/* _ns1__GetPropName * has binding name 'PointerTo_ns1__GetPropName' for type '' */
#ifndef SOAP_TYPE_PointerTo_ns1__GetPropName
#define SOAP_TYPE_PointerTo_ns1__GetPropName (219)
#endif

/* _ns1__GetPropList * has binding name 'PointerTo_ns1__GetPropList' for type '' */
#ifndef SOAP_TYPE_PointerTo_ns1__GetPropList
#define SOAP_TYPE_PointerTo_ns1__GetPropList (215)
#endif

/* _ns1__GetYjzhZskDevFlowChartList * has binding name 'PointerTo_ns1__GetYjzhZskDevFlowChartList' for type '' */
#ifndef SOAP_TYPE_PointerTo_ns1__GetYjzhZskDevFlowChartList
#define SOAP_TYPE_PointerTo_ns1__GetYjzhZskDevFlowChartList (211)
#endif

/* _ns1__GetYjzhZskOtherFlowChartList * has binding name 'PointerTo_ns1__GetYjzhZskOtherFlowChartList' for type '' */
#ifndef SOAP_TYPE_PointerTo_ns1__GetYjzhZskOtherFlowChartList
#define SOAP_TYPE_PointerTo_ns1__GetYjzhZskOtherFlowChartList (207)
#endif

/* _ns1__GetYjzhZskGzFlow * has binding name 'PointerTo_ns1__GetYjzhZskGzFlow' for type '' */
#ifndef SOAP_TYPE_PointerTo_ns1__GetYjzhZskGzFlow
#define SOAP_TYPE_PointerTo_ns1__GetYjzhZskGzFlow (203)
#endif

/* ns1__ArrayOfBase64Binary * has binding name 'PointerTons1__ArrayOfBase64Binary' for type 'ns1:ArrayOfBase64Binary' */
#ifndef SOAP_TYPE_PointerTons1__ArrayOfBase64Binary
#define SOAP_TYPE_PointerTons1__ArrayOfBase64Binary (202)
#endif

/* xsd__base64Binary * has binding name 'PointerToxsd__base64Binary' for type 'xsd:base64Binary' */
#ifndef SOAP_TYPE_PointerToxsd__base64Binary
#define SOAP_TYPE_PointerToxsd__base64Binary (198)
#endif

/* unsigned char * has binding name 'PointerTounsignedByte' for type 'xsd:unsignedByte' */
#ifndef SOAP_TYPE_PointerTounsignedByte
#define SOAP_TYPE_PointerTounsignedByte (10)
#endif

/* _QName has binding name '_QName' for type 'xsd:QName' */
#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (6)
#endif

/* _XML has binding name '_XML' for type '' */
#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (5)
#endif

/* char * has binding name 'string' for type 'xsd:string' */
#ifndef SOAP_TYPE_string
#define SOAP_TYPE_string (4)
#endif

/******************************************************************************\
 *                                                                            *
 * Externals                                                                  *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Client-Side Call Stub Functions                                            *
 *                                                                            *
\******************************************************************************/

    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__GetYjzhZskGzFlow(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__GetYjzhZskGzFlow *ns1__GetYjzhZskGzFlow, _ns1__GetYjzhZskGzFlowResponse &ns1__GetYjzhZskGzFlowResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__GetYjzhZskOtherFlowChartList(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__GetYjzhZskOtherFlowChartList *ns1__GetYjzhZskOtherFlowChartList, _ns1__GetYjzhZskOtherFlowChartListResponse &ns1__GetYjzhZskOtherFlowChartListResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__GetYjzhZskDevFlowChartList(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__GetYjzhZskDevFlowChartList *ns1__GetYjzhZskDevFlowChartList, _ns1__GetYjzhZskDevFlowChartListResponse &ns1__GetYjzhZskDevFlowChartListResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__GetPropList(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__GetPropList *ns1__GetPropList, _ns1__GetPropListResponse &ns1__GetPropListResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__GetPropName(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__GetPropName *ns1__GetPropName, _ns1__GetPropNameResponse &ns1__GetPropNameResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__CheckLoginUser(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__CheckLoginUser *ns1__CheckLoginUser, _ns1__CheckLoginUserResponse &ns1__CheckLoginUserResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__GetRyUnit(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__GetRyUnit *ns1__GetRyUnit, _ns1__GetRyUnitResponse &ns1__GetRyUnitResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__GetDevCode(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__GetDevCode *ns1__GetDevCode, _ns1__GetDevCodeResponse &ns1__GetDevCodeResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__CheckDevCode(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__CheckDevCode *ns1__CheckDevCode, _ns1__CheckDevCodeResponse &ns1__CheckDevCodeResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__HelloWorld(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__HelloWorld *ns1__HelloWorld, _ns1__HelloWorldResponse &ns1__HelloWorldResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__GetDBString(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__GetDBString *ns1__GetDBString, _ns1__GetDBStringResponse &ns1__GetDBStringResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__QueryData(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__QueryData *ns1__QueryData, _ns1__QueryDataResponse &ns1__QueryDataResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__QueryDataCount(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__QueryDataCount *ns1__QueryDataCount, _ns1__QueryDataCountResponse &ns1__QueryDataCountResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__ExecuteSql(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__ExecuteSql *ns1__ExecuteSql, _ns1__ExecuteSqlResponse &ns1__ExecuteSqlResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__SaveData(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__SaveData *ns1__SaveData, _ns1__SaveDataResponse &ns1__SaveDataResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__SaveFileData(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__SaveFileData *ns1__SaveFileData, _ns1__SaveFileDataResponse &ns1__SaveFileDataResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__DownPic(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__DownPic *ns1__DownPic, _ns1__DownPicResponse &ns1__DownPicResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__DownAllPic(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__DownAllPic *ns1__DownAllPic, _ns1__DownAllPicResponse &ns1__DownAllPicResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__GetGxdataUpTime(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__GetGxdataUpTime *ns1__GetGxdataUpTime, _ns1__GetGxdataUpTimeResponse &ns1__GetGxdataUpTimeResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__signedUserInfo(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__signedUserInfo *ns1__signedUserInfo, _ns1__signedUserInfoResponse &ns1__signedUserInfoResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__GetOsDateTime(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__GetOsDateTime *ns1__GetOsDateTime, _ns1__GetOsDateTimeResponse &ns1__GetOsDateTimeResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__QueryPhotobw(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__QueryPhotobw *ns1__QueryPhotobw, _ns1__QueryPhotobwResponse &ns1__QueryPhotobwResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__TcdQuery(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__TcdQuery *ns1__TcdQuery, _ns1__TcdQueryResponse &ns1__TcdQueryResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__TcdSendup(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__TcdSendup *ns1__TcdSendup, _ns1__TcdSendupResponse &ns1__TcdSendupResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__UpLoadData(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__UpLoadData *ns1__UpLoadData, _ns1__UpLoadDataResponse &ns1__UpLoadDataResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__ExecuteSqlForColb(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__ExecuteSqlForColb *ns1__ExecuteSqlForColb, _ns1__ExecuteSqlForColbResponse &ns1__ExecuteSqlForColbResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__GetXHYDGLXTupdater(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__GetXHYDGLXTupdater *ns1__GetXHYDGLXTupdater, _ns1__GetXHYDGLXTupdaterResponse &ns1__GetXHYDGLXTupdaterResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__GetAPVupdater(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__GetAPVupdater *ns1__GetAPVupdater, _ns1__GetAPVupdaterResponse &ns1__GetAPVupdaterResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__UpLoadFile(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__UpLoadFile *ns1__UpLoadFile, _ns1__UpLoadFileResponse &ns1__UpLoadFileResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__upPic(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__upPic *ns1__upPic, _ns1__upPicResponse &ns1__upPicResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__DownloadPic(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__DownloadPic *ns1__DownloadPic, _ns1__DownloadPicResponse &ns1__DownloadPicResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__GetPicNames(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__GetPicNames *ns1__GetPicNames, _ns1__GetPicNamesResponse &ns1__GetPicNamesResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__GetDwInfo(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__GetDwInfo *ns1__GetDwInfo, _ns1__GetDwInfoResponse &ns1__GetDwInfoResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__GetDwPic(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__GetDwPic *ns1__GetDwPic, _ns1__GetDwPicResponse &ns1__GetDwPicResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__GetDeviceXj(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__GetDeviceXj *ns1__GetDeviceXj, _ns1__GetDeviceXjResponse &ns1__GetDeviceXjResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__GetJxData(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__GetJxData *ns1__GetJxData, _ns1__GetJxDataResponse &ns1__GetJxDataResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__GetStationJxData(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__GetStationJxData *ns1__GetStationJxData, _ns1__GetStationJxDataResponse &ns1__GetStationJxDataResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__GetJxPic(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__GetJxPic *ns1__GetJxPic, _ns1__GetJxPicResponse &ns1__GetJxPicResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__GetDevPic(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__GetDevPic *ns1__GetDevPic, _ns1__GetDevPicResponse &ns1__GetDevPicResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__GetBgImg(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__GetBgImg *ns1__GetBgImg, _ns1__GetBgImgResponse &ns1__GetBgImgResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__GetDcsData(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__GetDcsData *ns1__GetDcsData, _ns1__GetDcsDataResponse &ns1__GetDcsDataResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__DownLoadMobGPSData(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__DownLoadMobGPSData *ns1__DownLoadMobGPSData, _ns1__DownLoadMobGPSDataResponse &ns1__DownLoadMobGPSDataResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__MobDownLoadData(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__MobDownLoadData *ns1__MobDownLoadData, _ns1__MobDownLoadDataResponse &ns1__MobDownLoadDataResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__GetOpenFireInfo(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__GetOpenFireInfo *ns1__GetOpenFireInfo, _ns1__GetOpenFireInfoResponse &ns1__GetOpenFireInfoResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__GetDwList(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__GetDwList *ns1__GetDwList, _ns1__GetDwListResponse &ns1__GetDwListResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__GetUnitStation(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__GetUnitStation *ns1__GetUnitStation, _ns1__GetUnitStationResponse &ns1__GetUnitStationResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__GetUnitStruct(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__GetUnitStruct *ns1__GetUnitStruct, _ns1__GetUnitStructResponse &ns1__GetUnitStructResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__GetUnitPersonInfo(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__GetUnitPersonInfo *ns1__GetUnitPersonInfo, _ns1__GetUnitPersonInfoResponse &ns1__GetUnitPersonInfoResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__GetFileSize(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__GetFileSize *ns1__GetFileSize, _ns1__GetFileSizeResponse &ns1__GetFileSizeResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__GetXbList(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__GetXbList *ns1__GetXbList, _ns1__GetXbListResponse &ns1__GetXbListResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__GetXbStationList(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__GetXbStationList *ns1__GetXbStationList, _ns1__GetXbStationListResponse &ns1__GetXbStationListResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__GetMapDeviceType(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__GetMapDeviceType *ns1__GetMapDeviceType, _ns1__GetMapDeviceTypeResponse &ns1__GetMapDeviceTypeResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__GetGxDeviceData(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__GetGxDeviceData *ns1__GetGxDeviceData, _ns1__GetGxDeviceDataResponse &ns1__GetGxDeviceDataResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__GetDownFileInfo(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__GetDownFileInfo *ns1__GetDownFileInfo, _ns1__GetDownFileInfoResponse &ns1__GetDownFileInfoResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__DownMapfile(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__DownMapfile *ns1__DownMapfile, _ns1__DownMapfileResponse &ns1__DownMapfileResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__GetFileNew(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__GetFileNew *ns1__GetFileNew, _ns1__GetFileNewResponse &ns1__GetFileNewResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__AlterTable(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__AlterTable *ns1__AlterTable, _ns1__AlterTableResponse &ns1__AlterTableResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__DownCQData(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__DownCQData *ns1__DownCQData, _ns1__DownCQDataResponse &ns1__DownCQDataResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__GetTabList(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__GetTabList *ns1__GetTabList, _ns1__GetTabListResponse &ns1__GetTabListResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__IsOracleTable(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__IsOracleTable *ns1__IsOracleTable, _ns1__IsOracleTableResponse &ns1__IsOracleTableResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__GetFieldInfo(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__GetFieldInfo *ns1__GetFieldInfo, _ns1__GetFieldInfoResponse &ns1__GetFieldInfoResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__ExecuteSqlForFile(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__ExecuteSqlForFile *ns1__ExecuteSqlForFile, _ns1__ExecuteSqlForFileResponse &ns1__ExecuteSqlForFileResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__DownLoadFile(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__DownLoadFile *ns1__DownLoadFile, _ns1__DownLoadFileResponse &ns1__DownLoadFileResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__WriteFile(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__WriteFile *ns1__WriteFile, _ns1__WriteFileResponse &ns1__WriteFileResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__GetMapUpdateTime(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__GetMapUpdateTime *ns1__GetMapUpdateTime, _ns1__GetMapUpdateTimeResponse &ns1__GetMapUpdateTimeResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__GetMapTabName(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__GetMapTabName *ns1__GetMapTabName, _ns1__GetMapTabNameResponse &ns1__GetMapTabNameResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__GetMapDeviceData(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__GetMapDeviceData *ns1__GetMapDeviceData, _ns1__GetMapDeviceDataResponse &ns1__GetMapDeviceDataResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__GetMaList(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__GetMaList *ns1__GetMaList, _ns1__GetMaListResponse &ns1__GetMaListResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__GetMangeUnit(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__GetMangeUnit *ns1__GetMangeUnit, _ns1__GetMangeUnitResponse &ns1__GetMangeUnitResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__GetMangeXb(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__GetMangeXb *ns1__GetMangeXb, _ns1__GetMangeXbResponse &ns1__GetMangeXbResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__CheckMapVer(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__CheckMapVer *ns1__CheckMapVer, _ns1__CheckMapVerResponse &ns1__CheckMapVerResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__GetMap(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__GetMap *ns1__GetMap, _ns1__GetMapResponse &ns1__GetMapResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__GetTableData(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__GetTableData *ns1__GetTableData, _ns1__GetTableDataResponse &ns1__GetTableDataResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__ServerLevel(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__ServerLevel *ns1__ServerLevel, _ns1__ServerLevelResponse &ns1__ServerLevelResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__GetMapListTime(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__GetMapListTime *ns1__GetMapListTime, _ns1__GetMapListTimeResponse &ns1__GetMapListTimeResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__UpdateGzclMap(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__UpdateGzclMap *ns1__UpdateGzclMap, _ns1__UpdateGzclMapResponse &ns1__UpdateGzclMapResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__GetUnitMapVer(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__GetUnitMapVer *ns1__GetUnitMapVer, _ns1__GetUnitMapVerResponse &ns1__GetUnitMapVerResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__GetMangeMapUpdate(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__GetMangeMapUpdate *ns1__GetMangeMapUpdate, _ns1__GetMangeMapUpdateResponse &ns1__GetMangeMapUpdateResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__OpenProcess(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__OpenProcess *ns1__OpenProcess, _ns1__OpenProcessResponse &ns1__OpenProcessResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__GetEmfPngVer(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__GetEmfPngVer *ns1__GetEmfPngVer, _ns1__GetEmfPngVerResponse &ns1__GetEmfPngVerResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__GetEmfPngFile(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__GetEmfPngFile *ns1__GetEmfPngFile, _ns1__GetEmfPngFileResponse &ns1__GetEmfPngFileResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__OpenMapExe(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__OpenMapExe *ns1__OpenMapExe, _ns1__OpenMapExeResponse &ns1__OpenMapExeResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__ChaoQi(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__ChaoQi *ns1__ChaoQi, _ns1__ChaoQiResponse &ns1__ChaoQiResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__JiChaoQi(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__JiChaoQi *ns1__JiChaoQi, _ns1__JiChaoQiResponse &ns1__JiChaoQiResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__GetZhouQi(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__GetZhouQi *ns1__GetZhouQi, _ns1__GetZhouQiResponse &ns1__GetZhouQiResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__FlowChartEmf(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__FlowChartEmf *ns1__FlowChartEmf, _ns1__FlowChartEmfResponse &ns1__FlowChartEmfResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__SGCDrawEmf(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__SGCDrawEmf *ns1__SGCDrawEmf, _ns1__SGCDrawEmfResponse &ns1__SGCDrawEmfResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__GzGetTypeList(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__GzGetTypeList *ns1__GzGetTypeList, _ns1__GzGetTypeListResponse &ns1__GzGetTypeListResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__GzGetDeviceStruct(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__GzGetDeviceStruct *ns1__GzGetDeviceStruct, _ns1__GzGetDeviceStructResponse &ns1__GzGetDeviceStructResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__SaveMapFile(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__SaveMapFile *ns1__SaveMapFile, _ns1__SaveMapFileResponse &ns1__SaveMapFileResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__SelectYjzhStation(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__SelectYjzhStation *ns1__SelectYjzhStation, _ns1__SelectYjzhStationResponse &ns1__SelectYjzhStationResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__SelectYjzhDevice(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__SelectYjzhDevice *ns1__SelectYjzhDevice, _ns1__SelectYjzhDeviceResponse &ns1__SelectYjzhDeviceResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__GetYjzhZskAlarmTypes(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__GetYjzhZskAlarmTypes *ns1__GetYjzhZskAlarmTypes, _ns1__GetYjzhZskAlarmTypesResponse &ns1__GetYjzhZskAlarmTypesResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__GetYjzhZskGzFlow_(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__GetYjzhZskGzFlow *ns1__GetYjzhZskGzFlow, _ns1__GetYjzhZskGzFlowResponse &ns1__GetYjzhZskGzFlowResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__GetYjzhZskOtherFlowChartList_(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__GetYjzhZskOtherFlowChartList *ns1__GetYjzhZskOtherFlowChartList, _ns1__GetYjzhZskOtherFlowChartListResponse &ns1__GetYjzhZskOtherFlowChartListResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__GetYjzhZskDevFlowChartList_(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__GetYjzhZskDevFlowChartList *ns1__GetYjzhZskDevFlowChartList, _ns1__GetYjzhZskDevFlowChartListResponse &ns1__GetYjzhZskDevFlowChartListResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__GetPropList_(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__GetPropList *ns1__GetPropList, _ns1__GetPropListResponse &ns1__GetPropListResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__GetPropName_(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__GetPropName *ns1__GetPropName, _ns1__GetPropNameResponse &ns1__GetPropNameResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__CheckLoginUser_(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__CheckLoginUser *ns1__CheckLoginUser, _ns1__CheckLoginUserResponse &ns1__CheckLoginUserResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__GetRyUnit_(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__GetRyUnit *ns1__GetRyUnit, _ns1__GetRyUnitResponse &ns1__GetRyUnitResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__GetDevCode_(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__GetDevCode *ns1__GetDevCode, _ns1__GetDevCodeResponse &ns1__GetDevCodeResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__CheckDevCode_(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__CheckDevCode *ns1__CheckDevCode, _ns1__CheckDevCodeResponse &ns1__CheckDevCodeResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__HelloWorld_(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__HelloWorld *ns1__HelloWorld, _ns1__HelloWorldResponse &ns1__HelloWorldResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__GetDBString_(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__GetDBString *ns1__GetDBString, _ns1__GetDBStringResponse &ns1__GetDBStringResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__QueryData_(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__QueryData *ns1__QueryData, _ns1__QueryDataResponse &ns1__QueryDataResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__QueryDataCount_(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__QueryDataCount *ns1__QueryDataCount, _ns1__QueryDataCountResponse &ns1__QueryDataCountResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__ExecuteSql_(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__ExecuteSql *ns1__ExecuteSql, _ns1__ExecuteSqlResponse &ns1__ExecuteSqlResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__SaveData_(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__SaveData *ns1__SaveData, _ns1__SaveDataResponse &ns1__SaveDataResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__SaveFileData_(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__SaveFileData *ns1__SaveFileData, _ns1__SaveFileDataResponse &ns1__SaveFileDataResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__DownPic_(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__DownPic *ns1__DownPic, _ns1__DownPicResponse &ns1__DownPicResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__DownAllPic_(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__DownAllPic *ns1__DownAllPic, _ns1__DownAllPicResponse &ns1__DownAllPicResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__GetGxdataUpTime_(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__GetGxdataUpTime *ns1__GetGxdataUpTime, _ns1__GetGxdataUpTimeResponse &ns1__GetGxdataUpTimeResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__signedUserInfo_(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__signedUserInfo *ns1__signedUserInfo, _ns1__signedUserInfoResponse &ns1__signedUserInfoResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__GetOsDateTime_(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__GetOsDateTime *ns1__GetOsDateTime, _ns1__GetOsDateTimeResponse &ns1__GetOsDateTimeResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__QueryPhotobw_(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__QueryPhotobw *ns1__QueryPhotobw, _ns1__QueryPhotobwResponse &ns1__QueryPhotobwResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__TcdQuery_(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__TcdQuery *ns1__TcdQuery, _ns1__TcdQueryResponse &ns1__TcdQueryResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__TcdSendup_(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__TcdSendup *ns1__TcdSendup, _ns1__TcdSendupResponse &ns1__TcdSendupResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__UpLoadData_(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__UpLoadData *ns1__UpLoadData, _ns1__UpLoadDataResponse &ns1__UpLoadDataResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__ExecuteSqlForColb_(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__ExecuteSqlForColb *ns1__ExecuteSqlForColb, _ns1__ExecuteSqlForColbResponse &ns1__ExecuteSqlForColbResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__GetXHYDGLXTupdater_(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__GetXHYDGLXTupdater *ns1__GetXHYDGLXTupdater, _ns1__GetXHYDGLXTupdaterResponse &ns1__GetXHYDGLXTupdaterResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__GetAPVupdater_(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__GetAPVupdater *ns1__GetAPVupdater, _ns1__GetAPVupdaterResponse &ns1__GetAPVupdaterResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__UpLoadFile_(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__UpLoadFile *ns1__UpLoadFile, _ns1__UpLoadFileResponse &ns1__UpLoadFileResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__upPic_(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__upPic *ns1__upPic, _ns1__upPicResponse &ns1__upPicResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__DownloadPic_(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__DownloadPic *ns1__DownloadPic, _ns1__DownloadPicResponse &ns1__DownloadPicResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__GetPicNames_(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__GetPicNames *ns1__GetPicNames, _ns1__GetPicNamesResponse &ns1__GetPicNamesResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__GetDwInfo_(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__GetDwInfo *ns1__GetDwInfo, _ns1__GetDwInfoResponse &ns1__GetDwInfoResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__GetDwPic_(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__GetDwPic *ns1__GetDwPic, _ns1__GetDwPicResponse &ns1__GetDwPicResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__GetDeviceXj_(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__GetDeviceXj *ns1__GetDeviceXj, _ns1__GetDeviceXjResponse &ns1__GetDeviceXjResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__GetJxData_(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__GetJxData *ns1__GetJxData, _ns1__GetJxDataResponse &ns1__GetJxDataResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__GetStationJxData_(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__GetStationJxData *ns1__GetStationJxData, _ns1__GetStationJxDataResponse &ns1__GetStationJxDataResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__GetJxPic_(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__GetJxPic *ns1__GetJxPic, _ns1__GetJxPicResponse &ns1__GetJxPicResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__GetDevPic_(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__GetDevPic *ns1__GetDevPic, _ns1__GetDevPicResponse &ns1__GetDevPicResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__GetBgImg_(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__GetBgImg *ns1__GetBgImg, _ns1__GetBgImgResponse &ns1__GetBgImgResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__GetDcsData_(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__GetDcsData *ns1__GetDcsData, _ns1__GetDcsDataResponse &ns1__GetDcsDataResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__DownLoadMobGPSData_(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__DownLoadMobGPSData *ns1__DownLoadMobGPSData, _ns1__DownLoadMobGPSDataResponse &ns1__DownLoadMobGPSDataResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__MobDownLoadData_(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__MobDownLoadData *ns1__MobDownLoadData, _ns1__MobDownLoadDataResponse &ns1__MobDownLoadDataResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__GetOpenFireInfo_(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__GetOpenFireInfo *ns1__GetOpenFireInfo, _ns1__GetOpenFireInfoResponse &ns1__GetOpenFireInfoResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__GetDwList_(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__GetDwList *ns1__GetDwList, _ns1__GetDwListResponse &ns1__GetDwListResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__GetUnitStation_(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__GetUnitStation *ns1__GetUnitStation, _ns1__GetUnitStationResponse &ns1__GetUnitStationResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__GetUnitStruct_(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__GetUnitStruct *ns1__GetUnitStruct, _ns1__GetUnitStructResponse &ns1__GetUnitStructResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__GetUnitPersonInfo_(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__GetUnitPersonInfo *ns1__GetUnitPersonInfo, _ns1__GetUnitPersonInfoResponse &ns1__GetUnitPersonInfoResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__GetFileSize_(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__GetFileSize *ns1__GetFileSize, _ns1__GetFileSizeResponse &ns1__GetFileSizeResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__GetXbList_(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__GetXbList *ns1__GetXbList, _ns1__GetXbListResponse &ns1__GetXbListResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__GetXbStationList_(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__GetXbStationList *ns1__GetXbStationList, _ns1__GetXbStationListResponse &ns1__GetXbStationListResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__GetMapDeviceType_(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__GetMapDeviceType *ns1__GetMapDeviceType, _ns1__GetMapDeviceTypeResponse &ns1__GetMapDeviceTypeResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__GetGxDeviceData_(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__GetGxDeviceData *ns1__GetGxDeviceData, _ns1__GetGxDeviceDataResponse &ns1__GetGxDeviceDataResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__GetDownFileInfo_(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__GetDownFileInfo *ns1__GetDownFileInfo, _ns1__GetDownFileInfoResponse &ns1__GetDownFileInfoResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__DownMapfile_(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__DownMapfile *ns1__DownMapfile, _ns1__DownMapfileResponse &ns1__DownMapfileResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__GetFileNew_(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__GetFileNew *ns1__GetFileNew, _ns1__GetFileNewResponse &ns1__GetFileNewResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__AlterTable_(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__AlterTable *ns1__AlterTable, _ns1__AlterTableResponse &ns1__AlterTableResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__DownCQData_(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__DownCQData *ns1__DownCQData, _ns1__DownCQDataResponse &ns1__DownCQDataResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__GetTabList_(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__GetTabList *ns1__GetTabList, _ns1__GetTabListResponse &ns1__GetTabListResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__IsOracleTable_(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__IsOracleTable *ns1__IsOracleTable, _ns1__IsOracleTableResponse &ns1__IsOracleTableResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__GetFieldInfo_(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__GetFieldInfo *ns1__GetFieldInfo, _ns1__GetFieldInfoResponse &ns1__GetFieldInfoResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__ExecuteSqlForFile_(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__ExecuteSqlForFile *ns1__ExecuteSqlForFile, _ns1__ExecuteSqlForFileResponse &ns1__ExecuteSqlForFileResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__DownLoadFile_(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__DownLoadFile *ns1__DownLoadFile, _ns1__DownLoadFileResponse &ns1__DownLoadFileResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__WriteFile_(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__WriteFile *ns1__WriteFile, _ns1__WriteFileResponse &ns1__WriteFileResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__GetMapUpdateTime_(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__GetMapUpdateTime *ns1__GetMapUpdateTime, _ns1__GetMapUpdateTimeResponse &ns1__GetMapUpdateTimeResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__GetMapTabName_(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__GetMapTabName *ns1__GetMapTabName, _ns1__GetMapTabNameResponse &ns1__GetMapTabNameResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__GetMapDeviceData_(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__GetMapDeviceData *ns1__GetMapDeviceData, _ns1__GetMapDeviceDataResponse &ns1__GetMapDeviceDataResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__GetMaList_(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__GetMaList *ns1__GetMaList, _ns1__GetMaListResponse &ns1__GetMaListResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__GetMangeUnit_(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__GetMangeUnit *ns1__GetMangeUnit, _ns1__GetMangeUnitResponse &ns1__GetMangeUnitResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__GetMangeXb_(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__GetMangeXb *ns1__GetMangeXb, _ns1__GetMangeXbResponse &ns1__GetMangeXbResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__CheckMapVer_(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__CheckMapVer *ns1__CheckMapVer, _ns1__CheckMapVerResponse &ns1__CheckMapVerResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__GetMap_(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__GetMap *ns1__GetMap, _ns1__GetMapResponse &ns1__GetMapResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__GetTableData_(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__GetTableData *ns1__GetTableData, _ns1__GetTableDataResponse &ns1__GetTableDataResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__ServerLevel_(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__ServerLevel *ns1__ServerLevel, _ns1__ServerLevelResponse &ns1__ServerLevelResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__GetMapListTime_(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__GetMapListTime *ns1__GetMapListTime, _ns1__GetMapListTimeResponse &ns1__GetMapListTimeResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__UpdateGzclMap_(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__UpdateGzclMap *ns1__UpdateGzclMap, _ns1__UpdateGzclMapResponse &ns1__UpdateGzclMapResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__GetUnitMapVer_(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__GetUnitMapVer *ns1__GetUnitMapVer, _ns1__GetUnitMapVerResponse &ns1__GetUnitMapVerResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__GetMangeMapUpdate_(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__GetMangeMapUpdate *ns1__GetMangeMapUpdate, _ns1__GetMangeMapUpdateResponse &ns1__GetMangeMapUpdateResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__OpenProcess_(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__OpenProcess *ns1__OpenProcess, _ns1__OpenProcessResponse &ns1__OpenProcessResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__GetEmfPngVer_(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__GetEmfPngVer *ns1__GetEmfPngVer, _ns1__GetEmfPngVerResponse &ns1__GetEmfPngVerResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__GetEmfPngFile_(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__GetEmfPngFile *ns1__GetEmfPngFile, _ns1__GetEmfPngFileResponse &ns1__GetEmfPngFileResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__OpenMapExe_(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__OpenMapExe *ns1__OpenMapExe, _ns1__OpenMapExeResponse &ns1__OpenMapExeResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__ChaoQi_(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__ChaoQi *ns1__ChaoQi, _ns1__ChaoQiResponse &ns1__ChaoQiResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__JiChaoQi_(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__JiChaoQi *ns1__JiChaoQi, _ns1__JiChaoQiResponse &ns1__JiChaoQiResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__GetZhouQi_(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__GetZhouQi *ns1__GetZhouQi, _ns1__GetZhouQiResponse &ns1__GetZhouQiResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__FlowChartEmf_(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__FlowChartEmf *ns1__FlowChartEmf, _ns1__FlowChartEmfResponse &ns1__FlowChartEmfResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__SGCDrawEmf_(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__SGCDrawEmf *ns1__SGCDrawEmf, _ns1__SGCDrawEmfResponse &ns1__SGCDrawEmfResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__GzGetTypeList_(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__GzGetTypeList *ns1__GzGetTypeList, _ns1__GzGetTypeListResponse &ns1__GzGetTypeListResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__GzGetDeviceStruct_(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__GzGetDeviceStruct *ns1__GzGetDeviceStruct, _ns1__GzGetDeviceStructResponse &ns1__GzGetDeviceStructResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__SaveMapFile_(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__SaveMapFile *ns1__SaveMapFile, _ns1__SaveMapFileResponse &ns1__SaveMapFileResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__SelectYjzhStation_(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__SelectYjzhStation *ns1__SelectYjzhStation, _ns1__SelectYjzhStationResponse &ns1__SelectYjzhStationResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__SelectYjzhDevice_(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__SelectYjzhDevice *ns1__SelectYjzhDevice, _ns1__SelectYjzhDeviceResponse &ns1__SelectYjzhDeviceResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__GetYjzhZskAlarmTypes_(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__GetYjzhZskAlarmTypes *ns1__GetYjzhZskAlarmTypes, _ns1__GetYjzhZskAlarmTypesResponse &ns1__GetYjzhZskAlarmTypesResponse);

/******************************************************************************\
 *                                                                            *
 * Server-Side Operations                                                     *
 *                                                                            *
\******************************************************************************/

    /** Web service operation '__ns1__GetYjzhZskGzFlow' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__GetYjzhZskGzFlow(struct soap*, _ns1__GetYjzhZskGzFlow *ns1__GetYjzhZskGzFlow, _ns1__GetYjzhZskGzFlowResponse &ns1__GetYjzhZskGzFlowResponse);
    /** Web service operation '__ns1__GetYjzhZskOtherFlowChartList' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__GetYjzhZskOtherFlowChartList(struct soap*, _ns1__GetYjzhZskOtherFlowChartList *ns1__GetYjzhZskOtherFlowChartList, _ns1__GetYjzhZskOtherFlowChartListResponse &ns1__GetYjzhZskOtherFlowChartListResponse);
    /** Web service operation '__ns1__GetYjzhZskDevFlowChartList' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__GetYjzhZskDevFlowChartList(struct soap*, _ns1__GetYjzhZskDevFlowChartList *ns1__GetYjzhZskDevFlowChartList, _ns1__GetYjzhZskDevFlowChartListResponse &ns1__GetYjzhZskDevFlowChartListResponse);
    /** Web service operation '__ns1__GetPropList' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__GetPropList(struct soap*, _ns1__GetPropList *ns1__GetPropList, _ns1__GetPropListResponse &ns1__GetPropListResponse);
    /** Web service operation '__ns1__GetPropName' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__GetPropName(struct soap*, _ns1__GetPropName *ns1__GetPropName, _ns1__GetPropNameResponse &ns1__GetPropNameResponse);
    /** Web service operation '__ns1__CheckLoginUser' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__CheckLoginUser(struct soap*, _ns1__CheckLoginUser *ns1__CheckLoginUser, _ns1__CheckLoginUserResponse &ns1__CheckLoginUserResponse);
    /** Web service operation '__ns1__GetRyUnit' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__GetRyUnit(struct soap*, _ns1__GetRyUnit *ns1__GetRyUnit, _ns1__GetRyUnitResponse &ns1__GetRyUnitResponse);
    /** Web service operation '__ns1__GetDevCode' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__GetDevCode(struct soap*, _ns1__GetDevCode *ns1__GetDevCode, _ns1__GetDevCodeResponse &ns1__GetDevCodeResponse);
    /** Web service operation '__ns1__CheckDevCode' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__CheckDevCode(struct soap*, _ns1__CheckDevCode *ns1__CheckDevCode, _ns1__CheckDevCodeResponse &ns1__CheckDevCodeResponse);
    /** Web service operation '__ns1__HelloWorld' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__HelloWorld(struct soap*, _ns1__HelloWorld *ns1__HelloWorld, _ns1__HelloWorldResponse &ns1__HelloWorldResponse);
    /** Web service operation '__ns1__GetDBString' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__GetDBString(struct soap*, _ns1__GetDBString *ns1__GetDBString, _ns1__GetDBStringResponse &ns1__GetDBStringResponse);
    /** Web service operation '__ns1__QueryData' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__QueryData(struct soap*, _ns1__QueryData *ns1__QueryData, _ns1__QueryDataResponse &ns1__QueryDataResponse);
    /** Web service operation '__ns1__QueryDataCount' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__QueryDataCount(struct soap*, _ns1__QueryDataCount *ns1__QueryDataCount, _ns1__QueryDataCountResponse &ns1__QueryDataCountResponse);
    /** Web service operation '__ns1__ExecuteSql' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__ExecuteSql(struct soap*, _ns1__ExecuteSql *ns1__ExecuteSql, _ns1__ExecuteSqlResponse &ns1__ExecuteSqlResponse);
    /** Web service operation '__ns1__SaveData' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__SaveData(struct soap*, _ns1__SaveData *ns1__SaveData, _ns1__SaveDataResponse &ns1__SaveDataResponse);
    /** Web service operation '__ns1__SaveFileData' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__SaveFileData(struct soap*, _ns1__SaveFileData *ns1__SaveFileData, _ns1__SaveFileDataResponse &ns1__SaveFileDataResponse);
    /** Web service operation '__ns1__DownPic' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__DownPic(struct soap*, _ns1__DownPic *ns1__DownPic, _ns1__DownPicResponse &ns1__DownPicResponse);
    /** Web service operation '__ns1__DownAllPic' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__DownAllPic(struct soap*, _ns1__DownAllPic *ns1__DownAllPic, _ns1__DownAllPicResponse &ns1__DownAllPicResponse);
    /** Web service operation '__ns1__GetGxdataUpTime' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__GetGxdataUpTime(struct soap*, _ns1__GetGxdataUpTime *ns1__GetGxdataUpTime, _ns1__GetGxdataUpTimeResponse &ns1__GetGxdataUpTimeResponse);
    /** Web service operation '__ns1__signedUserInfo' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__signedUserInfo(struct soap*, _ns1__signedUserInfo *ns1__signedUserInfo, _ns1__signedUserInfoResponse &ns1__signedUserInfoResponse);
    /** Web service operation '__ns1__GetOsDateTime' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__GetOsDateTime(struct soap*, _ns1__GetOsDateTime *ns1__GetOsDateTime, _ns1__GetOsDateTimeResponse &ns1__GetOsDateTimeResponse);
    /** Web service operation '__ns1__QueryPhotobw' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__QueryPhotobw(struct soap*, _ns1__QueryPhotobw *ns1__QueryPhotobw, _ns1__QueryPhotobwResponse &ns1__QueryPhotobwResponse);
    /** Web service operation '__ns1__TcdQuery' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__TcdQuery(struct soap*, _ns1__TcdQuery *ns1__TcdQuery, _ns1__TcdQueryResponse &ns1__TcdQueryResponse);
    /** Web service operation '__ns1__TcdSendup' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__TcdSendup(struct soap*, _ns1__TcdSendup *ns1__TcdSendup, _ns1__TcdSendupResponse &ns1__TcdSendupResponse);
    /** Web service operation '__ns1__UpLoadData' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__UpLoadData(struct soap*, _ns1__UpLoadData *ns1__UpLoadData, _ns1__UpLoadDataResponse &ns1__UpLoadDataResponse);
    /** Web service operation '__ns1__ExecuteSqlForColb' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__ExecuteSqlForColb(struct soap*, _ns1__ExecuteSqlForColb *ns1__ExecuteSqlForColb, _ns1__ExecuteSqlForColbResponse &ns1__ExecuteSqlForColbResponse);
    /** Web service operation '__ns1__GetXHYDGLXTupdater' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__GetXHYDGLXTupdater(struct soap*, _ns1__GetXHYDGLXTupdater *ns1__GetXHYDGLXTupdater, _ns1__GetXHYDGLXTupdaterResponse &ns1__GetXHYDGLXTupdaterResponse);
    /** Web service operation '__ns1__GetAPVupdater' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__GetAPVupdater(struct soap*, _ns1__GetAPVupdater *ns1__GetAPVupdater, _ns1__GetAPVupdaterResponse &ns1__GetAPVupdaterResponse);
    /** Web service operation '__ns1__UpLoadFile' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__UpLoadFile(struct soap*, _ns1__UpLoadFile *ns1__UpLoadFile, _ns1__UpLoadFileResponse &ns1__UpLoadFileResponse);
    /** Web service operation '__ns1__upPic' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__upPic(struct soap*, _ns1__upPic *ns1__upPic, _ns1__upPicResponse &ns1__upPicResponse);
    /** Web service operation '__ns1__DownloadPic' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__DownloadPic(struct soap*, _ns1__DownloadPic *ns1__DownloadPic, _ns1__DownloadPicResponse &ns1__DownloadPicResponse);
    /** Web service operation '__ns1__GetPicNames' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__GetPicNames(struct soap*, _ns1__GetPicNames *ns1__GetPicNames, _ns1__GetPicNamesResponse &ns1__GetPicNamesResponse);
    /** Web service operation '__ns1__GetDwInfo' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__GetDwInfo(struct soap*, _ns1__GetDwInfo *ns1__GetDwInfo, _ns1__GetDwInfoResponse &ns1__GetDwInfoResponse);
    /** Web service operation '__ns1__GetDwPic' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__GetDwPic(struct soap*, _ns1__GetDwPic *ns1__GetDwPic, _ns1__GetDwPicResponse &ns1__GetDwPicResponse);
    /** Web service operation '__ns1__GetDeviceXj' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__GetDeviceXj(struct soap*, _ns1__GetDeviceXj *ns1__GetDeviceXj, _ns1__GetDeviceXjResponse &ns1__GetDeviceXjResponse);
    /** Web service operation '__ns1__GetJxData' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__GetJxData(struct soap*, _ns1__GetJxData *ns1__GetJxData, _ns1__GetJxDataResponse &ns1__GetJxDataResponse);
    /** Web service operation '__ns1__GetStationJxData' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__GetStationJxData(struct soap*, _ns1__GetStationJxData *ns1__GetStationJxData, _ns1__GetStationJxDataResponse &ns1__GetStationJxDataResponse);
    /** Web service operation '__ns1__GetJxPic' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__GetJxPic(struct soap*, _ns1__GetJxPic *ns1__GetJxPic, _ns1__GetJxPicResponse &ns1__GetJxPicResponse);
    /** Web service operation '__ns1__GetDevPic' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__GetDevPic(struct soap*, _ns1__GetDevPic *ns1__GetDevPic, _ns1__GetDevPicResponse &ns1__GetDevPicResponse);
    /** Web service operation '__ns1__GetBgImg' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__GetBgImg(struct soap*, _ns1__GetBgImg *ns1__GetBgImg, _ns1__GetBgImgResponse &ns1__GetBgImgResponse);
    /** Web service operation '__ns1__GetDcsData' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__GetDcsData(struct soap*, _ns1__GetDcsData *ns1__GetDcsData, _ns1__GetDcsDataResponse &ns1__GetDcsDataResponse);
    /** Web service operation '__ns1__DownLoadMobGPSData' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__DownLoadMobGPSData(struct soap*, _ns1__DownLoadMobGPSData *ns1__DownLoadMobGPSData, _ns1__DownLoadMobGPSDataResponse &ns1__DownLoadMobGPSDataResponse);
    /** Web service operation '__ns1__MobDownLoadData' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__MobDownLoadData(struct soap*, _ns1__MobDownLoadData *ns1__MobDownLoadData, _ns1__MobDownLoadDataResponse &ns1__MobDownLoadDataResponse);
    /** Web service operation '__ns1__GetOpenFireInfo' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__GetOpenFireInfo(struct soap*, _ns1__GetOpenFireInfo *ns1__GetOpenFireInfo, _ns1__GetOpenFireInfoResponse &ns1__GetOpenFireInfoResponse);
    /** Web service operation '__ns1__GetDwList' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__GetDwList(struct soap*, _ns1__GetDwList *ns1__GetDwList, _ns1__GetDwListResponse &ns1__GetDwListResponse);
    /** Web service operation '__ns1__GetUnitStation' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__GetUnitStation(struct soap*, _ns1__GetUnitStation *ns1__GetUnitStation, _ns1__GetUnitStationResponse &ns1__GetUnitStationResponse);
    /** Web service operation '__ns1__GetUnitStruct' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__GetUnitStruct(struct soap*, _ns1__GetUnitStruct *ns1__GetUnitStruct, _ns1__GetUnitStructResponse &ns1__GetUnitStructResponse);
    /** Web service operation '__ns1__GetUnitPersonInfo' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__GetUnitPersonInfo(struct soap*, _ns1__GetUnitPersonInfo *ns1__GetUnitPersonInfo, _ns1__GetUnitPersonInfoResponse &ns1__GetUnitPersonInfoResponse);
    /** Web service operation '__ns1__GetFileSize' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__GetFileSize(struct soap*, _ns1__GetFileSize *ns1__GetFileSize, _ns1__GetFileSizeResponse &ns1__GetFileSizeResponse);
    /** Web service operation '__ns1__GetXbList' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__GetXbList(struct soap*, _ns1__GetXbList *ns1__GetXbList, _ns1__GetXbListResponse &ns1__GetXbListResponse);
    /** Web service operation '__ns1__GetXbStationList' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__GetXbStationList(struct soap*, _ns1__GetXbStationList *ns1__GetXbStationList, _ns1__GetXbStationListResponse &ns1__GetXbStationListResponse);
    /** Web service operation '__ns1__GetMapDeviceType' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__GetMapDeviceType(struct soap*, _ns1__GetMapDeviceType *ns1__GetMapDeviceType, _ns1__GetMapDeviceTypeResponse &ns1__GetMapDeviceTypeResponse);
    /** Web service operation '__ns1__GetGxDeviceData' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__GetGxDeviceData(struct soap*, _ns1__GetGxDeviceData *ns1__GetGxDeviceData, _ns1__GetGxDeviceDataResponse &ns1__GetGxDeviceDataResponse);
    /** Web service operation '__ns1__GetDownFileInfo' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__GetDownFileInfo(struct soap*, _ns1__GetDownFileInfo *ns1__GetDownFileInfo, _ns1__GetDownFileInfoResponse &ns1__GetDownFileInfoResponse);
    /** Web service operation '__ns1__DownMapfile' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__DownMapfile(struct soap*, _ns1__DownMapfile *ns1__DownMapfile, _ns1__DownMapfileResponse &ns1__DownMapfileResponse);
    /** Web service operation '__ns1__GetFileNew' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__GetFileNew(struct soap*, _ns1__GetFileNew *ns1__GetFileNew, _ns1__GetFileNewResponse &ns1__GetFileNewResponse);
    /** Web service operation '__ns1__AlterTable' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__AlterTable(struct soap*, _ns1__AlterTable *ns1__AlterTable, _ns1__AlterTableResponse &ns1__AlterTableResponse);
    /** Web service operation '__ns1__DownCQData' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__DownCQData(struct soap*, _ns1__DownCQData *ns1__DownCQData, _ns1__DownCQDataResponse &ns1__DownCQDataResponse);
    /** Web service operation '__ns1__GetTabList' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__GetTabList(struct soap*, _ns1__GetTabList *ns1__GetTabList, _ns1__GetTabListResponse &ns1__GetTabListResponse);
    /** Web service operation '__ns1__IsOracleTable' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__IsOracleTable(struct soap*, _ns1__IsOracleTable *ns1__IsOracleTable, _ns1__IsOracleTableResponse &ns1__IsOracleTableResponse);
    /** Web service operation '__ns1__GetFieldInfo' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__GetFieldInfo(struct soap*, _ns1__GetFieldInfo *ns1__GetFieldInfo, _ns1__GetFieldInfoResponse &ns1__GetFieldInfoResponse);
    /** Web service operation '__ns1__ExecuteSqlForFile' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__ExecuteSqlForFile(struct soap*, _ns1__ExecuteSqlForFile *ns1__ExecuteSqlForFile, _ns1__ExecuteSqlForFileResponse &ns1__ExecuteSqlForFileResponse);
    /** Web service operation '__ns1__DownLoadFile' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__DownLoadFile(struct soap*, _ns1__DownLoadFile *ns1__DownLoadFile, _ns1__DownLoadFileResponse &ns1__DownLoadFileResponse);
    /** Web service operation '__ns1__WriteFile' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__WriteFile(struct soap*, _ns1__WriteFile *ns1__WriteFile, _ns1__WriteFileResponse &ns1__WriteFileResponse);
    /** Web service operation '__ns1__GetMapUpdateTime' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__GetMapUpdateTime(struct soap*, _ns1__GetMapUpdateTime *ns1__GetMapUpdateTime, _ns1__GetMapUpdateTimeResponse &ns1__GetMapUpdateTimeResponse);
    /** Web service operation '__ns1__GetMapTabName' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__GetMapTabName(struct soap*, _ns1__GetMapTabName *ns1__GetMapTabName, _ns1__GetMapTabNameResponse &ns1__GetMapTabNameResponse);
    /** Web service operation '__ns1__GetMapDeviceData' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__GetMapDeviceData(struct soap*, _ns1__GetMapDeviceData *ns1__GetMapDeviceData, _ns1__GetMapDeviceDataResponse &ns1__GetMapDeviceDataResponse);
    /** Web service operation '__ns1__GetMaList' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__GetMaList(struct soap*, _ns1__GetMaList *ns1__GetMaList, _ns1__GetMaListResponse &ns1__GetMaListResponse);
    /** Web service operation '__ns1__GetMangeUnit' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__GetMangeUnit(struct soap*, _ns1__GetMangeUnit *ns1__GetMangeUnit, _ns1__GetMangeUnitResponse &ns1__GetMangeUnitResponse);
    /** Web service operation '__ns1__GetMangeXb' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__GetMangeXb(struct soap*, _ns1__GetMangeXb *ns1__GetMangeXb, _ns1__GetMangeXbResponse &ns1__GetMangeXbResponse);
    /** Web service operation '__ns1__CheckMapVer' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__CheckMapVer(struct soap*, _ns1__CheckMapVer *ns1__CheckMapVer, _ns1__CheckMapVerResponse &ns1__CheckMapVerResponse);
    /** Web service operation '__ns1__GetMap' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__GetMap(struct soap*, _ns1__GetMap *ns1__GetMap, _ns1__GetMapResponse &ns1__GetMapResponse);
    /** Web service operation '__ns1__GetTableData' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__GetTableData(struct soap*, _ns1__GetTableData *ns1__GetTableData, _ns1__GetTableDataResponse &ns1__GetTableDataResponse);
    /** Web service operation '__ns1__ServerLevel' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__ServerLevel(struct soap*, _ns1__ServerLevel *ns1__ServerLevel, _ns1__ServerLevelResponse &ns1__ServerLevelResponse);
    /** Web service operation '__ns1__GetMapListTime' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__GetMapListTime(struct soap*, _ns1__GetMapListTime *ns1__GetMapListTime, _ns1__GetMapListTimeResponse &ns1__GetMapListTimeResponse);
    /** Web service operation '__ns1__UpdateGzclMap' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__UpdateGzclMap(struct soap*, _ns1__UpdateGzclMap *ns1__UpdateGzclMap, _ns1__UpdateGzclMapResponse &ns1__UpdateGzclMapResponse);
    /** Web service operation '__ns1__GetUnitMapVer' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__GetUnitMapVer(struct soap*, _ns1__GetUnitMapVer *ns1__GetUnitMapVer, _ns1__GetUnitMapVerResponse &ns1__GetUnitMapVerResponse);
    /** Web service operation '__ns1__GetMangeMapUpdate' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__GetMangeMapUpdate(struct soap*, _ns1__GetMangeMapUpdate *ns1__GetMangeMapUpdate, _ns1__GetMangeMapUpdateResponse &ns1__GetMangeMapUpdateResponse);
    /** Web service operation '__ns1__OpenProcess' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__OpenProcess(struct soap*, _ns1__OpenProcess *ns1__OpenProcess, _ns1__OpenProcessResponse &ns1__OpenProcessResponse);
    /** Web service operation '__ns1__GetEmfPngVer' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__GetEmfPngVer(struct soap*, _ns1__GetEmfPngVer *ns1__GetEmfPngVer, _ns1__GetEmfPngVerResponse &ns1__GetEmfPngVerResponse);
    /** Web service operation '__ns1__GetEmfPngFile' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__GetEmfPngFile(struct soap*, _ns1__GetEmfPngFile *ns1__GetEmfPngFile, _ns1__GetEmfPngFileResponse &ns1__GetEmfPngFileResponse);
    /** Web service operation '__ns1__OpenMapExe' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__OpenMapExe(struct soap*, _ns1__OpenMapExe *ns1__OpenMapExe, _ns1__OpenMapExeResponse &ns1__OpenMapExeResponse);
    /** Web service operation '__ns1__ChaoQi' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__ChaoQi(struct soap*, _ns1__ChaoQi *ns1__ChaoQi, _ns1__ChaoQiResponse &ns1__ChaoQiResponse);
    /** Web service operation '__ns1__JiChaoQi' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__JiChaoQi(struct soap*, _ns1__JiChaoQi *ns1__JiChaoQi, _ns1__JiChaoQiResponse &ns1__JiChaoQiResponse);
    /** Web service operation '__ns1__GetZhouQi' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__GetZhouQi(struct soap*, _ns1__GetZhouQi *ns1__GetZhouQi, _ns1__GetZhouQiResponse &ns1__GetZhouQiResponse);
    /** Web service operation '__ns1__FlowChartEmf' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__FlowChartEmf(struct soap*, _ns1__FlowChartEmf *ns1__FlowChartEmf, _ns1__FlowChartEmfResponse &ns1__FlowChartEmfResponse);
    /** Web service operation '__ns1__SGCDrawEmf' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__SGCDrawEmf(struct soap*, _ns1__SGCDrawEmf *ns1__SGCDrawEmf, _ns1__SGCDrawEmfResponse &ns1__SGCDrawEmfResponse);
    /** Web service operation '__ns1__GzGetTypeList' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__GzGetTypeList(struct soap*, _ns1__GzGetTypeList *ns1__GzGetTypeList, _ns1__GzGetTypeListResponse &ns1__GzGetTypeListResponse);
    /** Web service operation '__ns1__GzGetDeviceStruct' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__GzGetDeviceStruct(struct soap*, _ns1__GzGetDeviceStruct *ns1__GzGetDeviceStruct, _ns1__GzGetDeviceStructResponse &ns1__GzGetDeviceStructResponse);
    /** Web service operation '__ns1__SaveMapFile' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__SaveMapFile(struct soap*, _ns1__SaveMapFile *ns1__SaveMapFile, _ns1__SaveMapFileResponse &ns1__SaveMapFileResponse);
    /** Web service operation '__ns1__SelectYjzhStation' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__SelectYjzhStation(struct soap*, _ns1__SelectYjzhStation *ns1__SelectYjzhStation, _ns1__SelectYjzhStationResponse &ns1__SelectYjzhStationResponse);
    /** Web service operation '__ns1__SelectYjzhDevice' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__SelectYjzhDevice(struct soap*, _ns1__SelectYjzhDevice *ns1__SelectYjzhDevice, _ns1__SelectYjzhDeviceResponse &ns1__SelectYjzhDeviceResponse);
    /** Web service operation '__ns1__GetYjzhZskAlarmTypes' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__GetYjzhZskAlarmTypes(struct soap*, _ns1__GetYjzhZskAlarmTypes *ns1__GetYjzhZskAlarmTypes, _ns1__GetYjzhZskAlarmTypesResponse &ns1__GetYjzhZskAlarmTypesResponse);
    /** Web service operation '__ns1__GetYjzhZskGzFlow_' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__GetYjzhZskGzFlow_(struct soap*, _ns1__GetYjzhZskGzFlow *ns1__GetYjzhZskGzFlow, _ns1__GetYjzhZskGzFlowResponse &ns1__GetYjzhZskGzFlowResponse);
    /** Web service operation '__ns1__GetYjzhZskOtherFlowChartList_' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__GetYjzhZskOtherFlowChartList_(struct soap*, _ns1__GetYjzhZskOtherFlowChartList *ns1__GetYjzhZskOtherFlowChartList, _ns1__GetYjzhZskOtherFlowChartListResponse &ns1__GetYjzhZskOtherFlowChartListResponse);
    /** Web service operation '__ns1__GetYjzhZskDevFlowChartList_' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__GetYjzhZskDevFlowChartList_(struct soap*, _ns1__GetYjzhZskDevFlowChartList *ns1__GetYjzhZskDevFlowChartList, _ns1__GetYjzhZskDevFlowChartListResponse &ns1__GetYjzhZskDevFlowChartListResponse);
    /** Web service operation '__ns1__GetPropList_' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__GetPropList_(struct soap*, _ns1__GetPropList *ns1__GetPropList, _ns1__GetPropListResponse &ns1__GetPropListResponse);
    /** Web service operation '__ns1__GetPropName_' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__GetPropName_(struct soap*, _ns1__GetPropName *ns1__GetPropName, _ns1__GetPropNameResponse &ns1__GetPropNameResponse);
    /** Web service operation '__ns1__CheckLoginUser_' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__CheckLoginUser_(struct soap*, _ns1__CheckLoginUser *ns1__CheckLoginUser, _ns1__CheckLoginUserResponse &ns1__CheckLoginUserResponse);
    /** Web service operation '__ns1__GetRyUnit_' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__GetRyUnit_(struct soap*, _ns1__GetRyUnit *ns1__GetRyUnit, _ns1__GetRyUnitResponse &ns1__GetRyUnitResponse);
    /** Web service operation '__ns1__GetDevCode_' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__GetDevCode_(struct soap*, _ns1__GetDevCode *ns1__GetDevCode, _ns1__GetDevCodeResponse &ns1__GetDevCodeResponse);
    /** Web service operation '__ns1__CheckDevCode_' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__CheckDevCode_(struct soap*, _ns1__CheckDevCode *ns1__CheckDevCode, _ns1__CheckDevCodeResponse &ns1__CheckDevCodeResponse);
    /** Web service operation '__ns1__HelloWorld_' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__HelloWorld_(struct soap*, _ns1__HelloWorld *ns1__HelloWorld, _ns1__HelloWorldResponse &ns1__HelloWorldResponse);
    /** Web service operation '__ns1__GetDBString_' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__GetDBString_(struct soap*, _ns1__GetDBString *ns1__GetDBString, _ns1__GetDBStringResponse &ns1__GetDBStringResponse);
    /** Web service operation '__ns1__QueryData_' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__QueryData_(struct soap*, _ns1__QueryData *ns1__QueryData, _ns1__QueryDataResponse &ns1__QueryDataResponse);
    /** Web service operation '__ns1__QueryDataCount_' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__QueryDataCount_(struct soap*, _ns1__QueryDataCount *ns1__QueryDataCount, _ns1__QueryDataCountResponse &ns1__QueryDataCountResponse);
    /** Web service operation '__ns1__ExecuteSql_' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__ExecuteSql_(struct soap*, _ns1__ExecuteSql *ns1__ExecuteSql, _ns1__ExecuteSqlResponse &ns1__ExecuteSqlResponse);
    /** Web service operation '__ns1__SaveData_' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__SaveData_(struct soap*, _ns1__SaveData *ns1__SaveData, _ns1__SaveDataResponse &ns1__SaveDataResponse);
    /** Web service operation '__ns1__SaveFileData_' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__SaveFileData_(struct soap*, _ns1__SaveFileData *ns1__SaveFileData, _ns1__SaveFileDataResponse &ns1__SaveFileDataResponse);
    /** Web service operation '__ns1__DownPic_' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__DownPic_(struct soap*, _ns1__DownPic *ns1__DownPic, _ns1__DownPicResponse &ns1__DownPicResponse);
    /** Web service operation '__ns1__DownAllPic_' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__DownAllPic_(struct soap*, _ns1__DownAllPic *ns1__DownAllPic, _ns1__DownAllPicResponse &ns1__DownAllPicResponse);
    /** Web service operation '__ns1__GetGxdataUpTime_' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__GetGxdataUpTime_(struct soap*, _ns1__GetGxdataUpTime *ns1__GetGxdataUpTime, _ns1__GetGxdataUpTimeResponse &ns1__GetGxdataUpTimeResponse);
    /** Web service operation '__ns1__signedUserInfo_' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__signedUserInfo_(struct soap*, _ns1__signedUserInfo *ns1__signedUserInfo, _ns1__signedUserInfoResponse &ns1__signedUserInfoResponse);
    /** Web service operation '__ns1__GetOsDateTime_' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__GetOsDateTime_(struct soap*, _ns1__GetOsDateTime *ns1__GetOsDateTime, _ns1__GetOsDateTimeResponse &ns1__GetOsDateTimeResponse);
    /** Web service operation '__ns1__QueryPhotobw_' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__QueryPhotobw_(struct soap*, _ns1__QueryPhotobw *ns1__QueryPhotobw, _ns1__QueryPhotobwResponse &ns1__QueryPhotobwResponse);
    /** Web service operation '__ns1__TcdQuery_' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__TcdQuery_(struct soap*, _ns1__TcdQuery *ns1__TcdQuery, _ns1__TcdQueryResponse &ns1__TcdQueryResponse);
    /** Web service operation '__ns1__TcdSendup_' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__TcdSendup_(struct soap*, _ns1__TcdSendup *ns1__TcdSendup, _ns1__TcdSendupResponse &ns1__TcdSendupResponse);
    /** Web service operation '__ns1__UpLoadData_' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__UpLoadData_(struct soap*, _ns1__UpLoadData *ns1__UpLoadData, _ns1__UpLoadDataResponse &ns1__UpLoadDataResponse);
    /** Web service operation '__ns1__ExecuteSqlForColb_' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__ExecuteSqlForColb_(struct soap*, _ns1__ExecuteSqlForColb *ns1__ExecuteSqlForColb, _ns1__ExecuteSqlForColbResponse &ns1__ExecuteSqlForColbResponse);
    /** Web service operation '__ns1__GetXHYDGLXTupdater_' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__GetXHYDGLXTupdater_(struct soap*, _ns1__GetXHYDGLXTupdater *ns1__GetXHYDGLXTupdater, _ns1__GetXHYDGLXTupdaterResponse &ns1__GetXHYDGLXTupdaterResponse);
    /** Web service operation '__ns1__GetAPVupdater_' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__GetAPVupdater_(struct soap*, _ns1__GetAPVupdater *ns1__GetAPVupdater, _ns1__GetAPVupdaterResponse &ns1__GetAPVupdaterResponse);
    /** Web service operation '__ns1__UpLoadFile_' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__UpLoadFile_(struct soap*, _ns1__UpLoadFile *ns1__UpLoadFile, _ns1__UpLoadFileResponse &ns1__UpLoadFileResponse);
    /** Web service operation '__ns1__upPic_' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__upPic_(struct soap*, _ns1__upPic *ns1__upPic, _ns1__upPicResponse &ns1__upPicResponse);
    /** Web service operation '__ns1__DownloadPic_' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__DownloadPic_(struct soap*, _ns1__DownloadPic *ns1__DownloadPic, _ns1__DownloadPicResponse &ns1__DownloadPicResponse);
    /** Web service operation '__ns1__GetPicNames_' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__GetPicNames_(struct soap*, _ns1__GetPicNames *ns1__GetPicNames, _ns1__GetPicNamesResponse &ns1__GetPicNamesResponse);
    /** Web service operation '__ns1__GetDwInfo_' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__GetDwInfo_(struct soap*, _ns1__GetDwInfo *ns1__GetDwInfo, _ns1__GetDwInfoResponse &ns1__GetDwInfoResponse);
    /** Web service operation '__ns1__GetDwPic_' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__GetDwPic_(struct soap*, _ns1__GetDwPic *ns1__GetDwPic, _ns1__GetDwPicResponse &ns1__GetDwPicResponse);
    /** Web service operation '__ns1__GetDeviceXj_' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__GetDeviceXj_(struct soap*, _ns1__GetDeviceXj *ns1__GetDeviceXj, _ns1__GetDeviceXjResponse &ns1__GetDeviceXjResponse);
    /** Web service operation '__ns1__GetJxData_' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__GetJxData_(struct soap*, _ns1__GetJxData *ns1__GetJxData, _ns1__GetJxDataResponse &ns1__GetJxDataResponse);
    /** Web service operation '__ns1__GetStationJxData_' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__GetStationJxData_(struct soap*, _ns1__GetStationJxData *ns1__GetStationJxData, _ns1__GetStationJxDataResponse &ns1__GetStationJxDataResponse);
    /** Web service operation '__ns1__GetJxPic_' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__GetJxPic_(struct soap*, _ns1__GetJxPic *ns1__GetJxPic, _ns1__GetJxPicResponse &ns1__GetJxPicResponse);
    /** Web service operation '__ns1__GetDevPic_' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__GetDevPic_(struct soap*, _ns1__GetDevPic *ns1__GetDevPic, _ns1__GetDevPicResponse &ns1__GetDevPicResponse);
    /** Web service operation '__ns1__GetBgImg_' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__GetBgImg_(struct soap*, _ns1__GetBgImg *ns1__GetBgImg, _ns1__GetBgImgResponse &ns1__GetBgImgResponse);
    /** Web service operation '__ns1__GetDcsData_' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__GetDcsData_(struct soap*, _ns1__GetDcsData *ns1__GetDcsData, _ns1__GetDcsDataResponse &ns1__GetDcsDataResponse);
    /** Web service operation '__ns1__DownLoadMobGPSData_' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__DownLoadMobGPSData_(struct soap*, _ns1__DownLoadMobGPSData *ns1__DownLoadMobGPSData, _ns1__DownLoadMobGPSDataResponse &ns1__DownLoadMobGPSDataResponse);
    /** Web service operation '__ns1__MobDownLoadData_' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__MobDownLoadData_(struct soap*, _ns1__MobDownLoadData *ns1__MobDownLoadData, _ns1__MobDownLoadDataResponse &ns1__MobDownLoadDataResponse);
    /** Web service operation '__ns1__GetOpenFireInfo_' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__GetOpenFireInfo_(struct soap*, _ns1__GetOpenFireInfo *ns1__GetOpenFireInfo, _ns1__GetOpenFireInfoResponse &ns1__GetOpenFireInfoResponse);
    /** Web service operation '__ns1__GetDwList_' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__GetDwList_(struct soap*, _ns1__GetDwList *ns1__GetDwList, _ns1__GetDwListResponse &ns1__GetDwListResponse);
    /** Web service operation '__ns1__GetUnitStation_' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__GetUnitStation_(struct soap*, _ns1__GetUnitStation *ns1__GetUnitStation, _ns1__GetUnitStationResponse &ns1__GetUnitStationResponse);
    /** Web service operation '__ns1__GetUnitStruct_' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__GetUnitStruct_(struct soap*, _ns1__GetUnitStruct *ns1__GetUnitStruct, _ns1__GetUnitStructResponse &ns1__GetUnitStructResponse);
    /** Web service operation '__ns1__GetUnitPersonInfo_' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__GetUnitPersonInfo_(struct soap*, _ns1__GetUnitPersonInfo *ns1__GetUnitPersonInfo, _ns1__GetUnitPersonInfoResponse &ns1__GetUnitPersonInfoResponse);
    /** Web service operation '__ns1__GetFileSize_' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__GetFileSize_(struct soap*, _ns1__GetFileSize *ns1__GetFileSize, _ns1__GetFileSizeResponse &ns1__GetFileSizeResponse);
    /** Web service operation '__ns1__GetXbList_' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__GetXbList_(struct soap*, _ns1__GetXbList *ns1__GetXbList, _ns1__GetXbListResponse &ns1__GetXbListResponse);
    /** Web service operation '__ns1__GetXbStationList_' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__GetXbStationList_(struct soap*, _ns1__GetXbStationList *ns1__GetXbStationList, _ns1__GetXbStationListResponse &ns1__GetXbStationListResponse);
    /** Web service operation '__ns1__GetMapDeviceType_' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__GetMapDeviceType_(struct soap*, _ns1__GetMapDeviceType *ns1__GetMapDeviceType, _ns1__GetMapDeviceTypeResponse &ns1__GetMapDeviceTypeResponse);
    /** Web service operation '__ns1__GetGxDeviceData_' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__GetGxDeviceData_(struct soap*, _ns1__GetGxDeviceData *ns1__GetGxDeviceData, _ns1__GetGxDeviceDataResponse &ns1__GetGxDeviceDataResponse);
    /** Web service operation '__ns1__GetDownFileInfo_' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__GetDownFileInfo_(struct soap*, _ns1__GetDownFileInfo *ns1__GetDownFileInfo, _ns1__GetDownFileInfoResponse &ns1__GetDownFileInfoResponse);
    /** Web service operation '__ns1__DownMapfile_' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__DownMapfile_(struct soap*, _ns1__DownMapfile *ns1__DownMapfile, _ns1__DownMapfileResponse &ns1__DownMapfileResponse);
    /** Web service operation '__ns1__GetFileNew_' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__GetFileNew_(struct soap*, _ns1__GetFileNew *ns1__GetFileNew, _ns1__GetFileNewResponse &ns1__GetFileNewResponse);
    /** Web service operation '__ns1__AlterTable_' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__AlterTable_(struct soap*, _ns1__AlterTable *ns1__AlterTable, _ns1__AlterTableResponse &ns1__AlterTableResponse);
    /** Web service operation '__ns1__DownCQData_' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__DownCQData_(struct soap*, _ns1__DownCQData *ns1__DownCQData, _ns1__DownCQDataResponse &ns1__DownCQDataResponse);
    /** Web service operation '__ns1__GetTabList_' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__GetTabList_(struct soap*, _ns1__GetTabList *ns1__GetTabList, _ns1__GetTabListResponse &ns1__GetTabListResponse);
    /** Web service operation '__ns1__IsOracleTable_' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__IsOracleTable_(struct soap*, _ns1__IsOracleTable *ns1__IsOracleTable, _ns1__IsOracleTableResponse &ns1__IsOracleTableResponse);
    /** Web service operation '__ns1__GetFieldInfo_' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__GetFieldInfo_(struct soap*, _ns1__GetFieldInfo *ns1__GetFieldInfo, _ns1__GetFieldInfoResponse &ns1__GetFieldInfoResponse);
    /** Web service operation '__ns1__ExecuteSqlForFile_' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__ExecuteSqlForFile_(struct soap*, _ns1__ExecuteSqlForFile *ns1__ExecuteSqlForFile, _ns1__ExecuteSqlForFileResponse &ns1__ExecuteSqlForFileResponse);
    /** Web service operation '__ns1__DownLoadFile_' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__DownLoadFile_(struct soap*, _ns1__DownLoadFile *ns1__DownLoadFile, _ns1__DownLoadFileResponse &ns1__DownLoadFileResponse);
    /** Web service operation '__ns1__WriteFile_' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__WriteFile_(struct soap*, _ns1__WriteFile *ns1__WriteFile, _ns1__WriteFileResponse &ns1__WriteFileResponse);
    /** Web service operation '__ns1__GetMapUpdateTime_' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__GetMapUpdateTime_(struct soap*, _ns1__GetMapUpdateTime *ns1__GetMapUpdateTime, _ns1__GetMapUpdateTimeResponse &ns1__GetMapUpdateTimeResponse);
    /** Web service operation '__ns1__GetMapTabName_' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__GetMapTabName_(struct soap*, _ns1__GetMapTabName *ns1__GetMapTabName, _ns1__GetMapTabNameResponse &ns1__GetMapTabNameResponse);
    /** Web service operation '__ns1__GetMapDeviceData_' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__GetMapDeviceData_(struct soap*, _ns1__GetMapDeviceData *ns1__GetMapDeviceData, _ns1__GetMapDeviceDataResponse &ns1__GetMapDeviceDataResponse);
    /** Web service operation '__ns1__GetMaList_' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__GetMaList_(struct soap*, _ns1__GetMaList *ns1__GetMaList, _ns1__GetMaListResponse &ns1__GetMaListResponse);
    /** Web service operation '__ns1__GetMangeUnit_' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__GetMangeUnit_(struct soap*, _ns1__GetMangeUnit *ns1__GetMangeUnit, _ns1__GetMangeUnitResponse &ns1__GetMangeUnitResponse);
    /** Web service operation '__ns1__GetMangeXb_' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__GetMangeXb_(struct soap*, _ns1__GetMangeXb *ns1__GetMangeXb, _ns1__GetMangeXbResponse &ns1__GetMangeXbResponse);
    /** Web service operation '__ns1__CheckMapVer_' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__CheckMapVer_(struct soap*, _ns1__CheckMapVer *ns1__CheckMapVer, _ns1__CheckMapVerResponse &ns1__CheckMapVerResponse);
    /** Web service operation '__ns1__GetMap_' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__GetMap_(struct soap*, _ns1__GetMap *ns1__GetMap, _ns1__GetMapResponse &ns1__GetMapResponse);
    /** Web service operation '__ns1__GetTableData_' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__GetTableData_(struct soap*, _ns1__GetTableData *ns1__GetTableData, _ns1__GetTableDataResponse &ns1__GetTableDataResponse);
    /** Web service operation '__ns1__ServerLevel_' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__ServerLevel_(struct soap*, _ns1__ServerLevel *ns1__ServerLevel, _ns1__ServerLevelResponse &ns1__ServerLevelResponse);
    /** Web service operation '__ns1__GetMapListTime_' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__GetMapListTime_(struct soap*, _ns1__GetMapListTime *ns1__GetMapListTime, _ns1__GetMapListTimeResponse &ns1__GetMapListTimeResponse);
    /** Web service operation '__ns1__UpdateGzclMap_' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__UpdateGzclMap_(struct soap*, _ns1__UpdateGzclMap *ns1__UpdateGzclMap, _ns1__UpdateGzclMapResponse &ns1__UpdateGzclMapResponse);
    /** Web service operation '__ns1__GetUnitMapVer_' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__GetUnitMapVer_(struct soap*, _ns1__GetUnitMapVer *ns1__GetUnitMapVer, _ns1__GetUnitMapVerResponse &ns1__GetUnitMapVerResponse);
    /** Web service operation '__ns1__GetMangeMapUpdate_' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__GetMangeMapUpdate_(struct soap*, _ns1__GetMangeMapUpdate *ns1__GetMangeMapUpdate, _ns1__GetMangeMapUpdateResponse &ns1__GetMangeMapUpdateResponse);
    /** Web service operation '__ns1__OpenProcess_' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__OpenProcess_(struct soap*, _ns1__OpenProcess *ns1__OpenProcess, _ns1__OpenProcessResponse &ns1__OpenProcessResponse);
    /** Web service operation '__ns1__GetEmfPngVer_' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__GetEmfPngVer_(struct soap*, _ns1__GetEmfPngVer *ns1__GetEmfPngVer, _ns1__GetEmfPngVerResponse &ns1__GetEmfPngVerResponse);
    /** Web service operation '__ns1__GetEmfPngFile_' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__GetEmfPngFile_(struct soap*, _ns1__GetEmfPngFile *ns1__GetEmfPngFile, _ns1__GetEmfPngFileResponse &ns1__GetEmfPngFileResponse);
    /** Web service operation '__ns1__OpenMapExe_' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__OpenMapExe_(struct soap*, _ns1__OpenMapExe *ns1__OpenMapExe, _ns1__OpenMapExeResponse &ns1__OpenMapExeResponse);
    /** Web service operation '__ns1__ChaoQi_' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__ChaoQi_(struct soap*, _ns1__ChaoQi *ns1__ChaoQi, _ns1__ChaoQiResponse &ns1__ChaoQiResponse);
    /** Web service operation '__ns1__JiChaoQi_' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__JiChaoQi_(struct soap*, _ns1__JiChaoQi *ns1__JiChaoQi, _ns1__JiChaoQiResponse &ns1__JiChaoQiResponse);
    /** Web service operation '__ns1__GetZhouQi_' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__GetZhouQi_(struct soap*, _ns1__GetZhouQi *ns1__GetZhouQi, _ns1__GetZhouQiResponse &ns1__GetZhouQiResponse);
    /** Web service operation '__ns1__FlowChartEmf_' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__FlowChartEmf_(struct soap*, _ns1__FlowChartEmf *ns1__FlowChartEmf, _ns1__FlowChartEmfResponse &ns1__FlowChartEmfResponse);
    /** Web service operation '__ns1__SGCDrawEmf_' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__SGCDrawEmf_(struct soap*, _ns1__SGCDrawEmf *ns1__SGCDrawEmf, _ns1__SGCDrawEmfResponse &ns1__SGCDrawEmfResponse);
    /** Web service operation '__ns1__GzGetTypeList_' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__GzGetTypeList_(struct soap*, _ns1__GzGetTypeList *ns1__GzGetTypeList, _ns1__GzGetTypeListResponse &ns1__GzGetTypeListResponse);
    /** Web service operation '__ns1__GzGetDeviceStruct_' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__GzGetDeviceStruct_(struct soap*, _ns1__GzGetDeviceStruct *ns1__GzGetDeviceStruct, _ns1__GzGetDeviceStructResponse &ns1__GzGetDeviceStructResponse);
    /** Web service operation '__ns1__SaveMapFile_' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__SaveMapFile_(struct soap*, _ns1__SaveMapFile *ns1__SaveMapFile, _ns1__SaveMapFileResponse &ns1__SaveMapFileResponse);
    /** Web service operation '__ns1__SelectYjzhStation_' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__SelectYjzhStation_(struct soap*, _ns1__SelectYjzhStation *ns1__SelectYjzhStation, _ns1__SelectYjzhStationResponse &ns1__SelectYjzhStationResponse);
    /** Web service operation '__ns1__SelectYjzhDevice_' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__SelectYjzhDevice_(struct soap*, _ns1__SelectYjzhDevice *ns1__SelectYjzhDevice, _ns1__SelectYjzhDeviceResponse &ns1__SelectYjzhDeviceResponse);
    /** Web service operation '__ns1__GetYjzhZskAlarmTypes_' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__GetYjzhZskAlarmTypes_(struct soap*, _ns1__GetYjzhZskAlarmTypes *ns1__GetYjzhZskAlarmTypes, _ns1__GetYjzhZskAlarmTypesResponse &ns1__GetYjzhZskAlarmTypesResponse);

/******************************************************************************\
 *                                                                            *
 * Server-Side Skeletons to Invoke Service Operations                         *
 *                                                                            *
\******************************************************************************/

extern "C" SOAP_FMAC5 int SOAP_FMAC6 soap_serve(struct soap*);

extern "C" SOAP_FMAC5 int SOAP_FMAC6 soap_serve_request(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__GetYjzhZskGzFlow(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__GetYjzhZskOtherFlowChartList(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__GetYjzhZskDevFlowChartList(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__GetPropList(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__GetPropName(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__CheckLoginUser(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__GetRyUnit(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__GetDevCode(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__CheckDevCode(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__HelloWorld(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__GetDBString(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__QueryData(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__QueryDataCount(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__ExecuteSql(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__SaveData(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__SaveFileData(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__DownPic(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__DownAllPic(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__GetGxdataUpTime(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__signedUserInfo(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__GetOsDateTime(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__QueryPhotobw(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__TcdQuery(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__TcdSendup(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__UpLoadData(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__ExecuteSqlForColb(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__GetXHYDGLXTupdater(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__GetAPVupdater(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__UpLoadFile(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__upPic(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__DownloadPic(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__GetPicNames(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__GetDwInfo(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__GetDwPic(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__GetDeviceXj(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__GetJxData(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__GetStationJxData(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__GetJxPic(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__GetDevPic(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__GetBgImg(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__GetDcsData(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__DownLoadMobGPSData(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__MobDownLoadData(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__GetOpenFireInfo(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__GetDwList(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__GetUnitStation(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__GetUnitStruct(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__GetUnitPersonInfo(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__GetFileSize(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__GetXbList(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__GetXbStationList(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__GetMapDeviceType(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__GetGxDeviceData(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__GetDownFileInfo(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__DownMapfile(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__GetFileNew(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__AlterTable(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__DownCQData(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__GetTabList(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__IsOracleTable(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__GetFieldInfo(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__ExecuteSqlForFile(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__DownLoadFile(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__WriteFile(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__GetMapUpdateTime(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__GetMapTabName(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__GetMapDeviceData(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__GetMaList(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__GetMangeUnit(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__GetMangeXb(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__CheckMapVer(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__GetMap(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__GetTableData(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__ServerLevel(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__GetMapListTime(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__UpdateGzclMap(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__GetUnitMapVer(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__GetMangeMapUpdate(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__OpenProcess(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__GetEmfPngVer(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__GetEmfPngFile(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__OpenMapExe(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__ChaoQi(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__JiChaoQi(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__GetZhouQi(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__FlowChartEmf(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__SGCDrawEmf(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__GzGetTypeList(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__GzGetDeviceStruct(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__SaveMapFile(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__SelectYjzhStation(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__SelectYjzhDevice(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__GetYjzhZskAlarmTypes(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__GetYjzhZskGzFlow_(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__GetYjzhZskOtherFlowChartList_(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__GetYjzhZskDevFlowChartList_(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__GetPropList_(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__GetPropName_(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__CheckLoginUser_(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__GetRyUnit_(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__GetDevCode_(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__CheckDevCode_(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__HelloWorld_(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__GetDBString_(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__QueryData_(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__QueryDataCount_(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__ExecuteSql_(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__SaveData_(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__SaveFileData_(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__DownPic_(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__DownAllPic_(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__GetGxdataUpTime_(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__signedUserInfo_(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__GetOsDateTime_(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__QueryPhotobw_(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__TcdQuery_(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__TcdSendup_(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__UpLoadData_(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__ExecuteSqlForColb_(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__GetXHYDGLXTupdater_(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__GetAPVupdater_(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__UpLoadFile_(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__upPic_(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__DownloadPic_(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__GetPicNames_(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__GetDwInfo_(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__GetDwPic_(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__GetDeviceXj_(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__GetJxData_(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__GetStationJxData_(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__GetJxPic_(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__GetDevPic_(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__GetBgImg_(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__GetDcsData_(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__DownLoadMobGPSData_(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__MobDownLoadData_(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__GetOpenFireInfo_(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__GetDwList_(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__GetUnitStation_(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__GetUnitStruct_(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__GetUnitPersonInfo_(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__GetFileSize_(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__GetXbList_(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__GetXbStationList_(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__GetMapDeviceType_(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__GetGxDeviceData_(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__GetDownFileInfo_(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__DownMapfile_(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__GetFileNew_(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__AlterTable_(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__DownCQData_(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__GetTabList_(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__IsOracleTable_(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__GetFieldInfo_(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__ExecuteSqlForFile_(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__DownLoadFile_(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__WriteFile_(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__GetMapUpdateTime_(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__GetMapTabName_(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__GetMapDeviceData_(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__GetMaList_(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__GetMangeUnit_(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__GetMangeXb_(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__CheckMapVer_(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__GetMap_(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__GetTableData_(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__ServerLevel_(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__GetMapListTime_(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__UpdateGzclMap_(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__GetUnitMapVer_(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__GetMangeMapUpdate_(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__OpenProcess_(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__GetEmfPngVer_(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__GetEmfPngFile_(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__OpenMapExe_(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__ChaoQi_(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__JiChaoQi_(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__GetZhouQi_(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__FlowChartEmf_(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__SGCDrawEmf_(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__GzGetTypeList_(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__GzGetDeviceStruct_(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__SaveMapFile_(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__SelectYjzhStation_(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__SelectYjzhDevice_(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__GetYjzhZskAlarmTypes_(struct soap*);

#endif

/* End of soapStub.h */
